Remote Access Trojans (RATs) are a class of malware that give an attacker direct, interactive access to a vic-tim's personal computer, allowing the attacker to steal private data from the computer, spy on the victim in real-time using the camera and microphone, and interact directly with the victim via a dialog box.
RATs are used for surveillance, information theft, and extortion of victims.
In this work, we report on the attackers and victims for two popular RATs, njRAT and DarkComet.
Using the malware repository VirusTotal, we find all instances of these RATs and identify the domain names of their controllers.
We then register those domains that have expired and direct them to our measurement infrastructure, allowing us to determine the victims of these campaigns.
We investigate several techniques for excluding network scanners and sandbox executions of malware samples in order to filter apparent infections that are not real victims of the campaign.
Our results show that over 99% of the 828,137 IP addresses that connected to our sinkhole are likely not real victims.
We report on the number of victims , how long RAT campaigns remain active, and the geographic relationship between victims and attackers.
Remote Access Trojans (RATs) are an emerging class of manually operated malware designed to give human operators direct interactive access to a victim's computer.
Unlike automated malware (i.e., spam and DDoS), RATs are predicated on the unique value of each infection, allowing an attacker to extort a human victim or otherwise benefit from access to a victim's private data.
RATs are sold and traded in underground communities as tools for voyeurism and blackmailing [11,18].
RATs have also been reported to be used for state-sponsored espionage and surveillance, and have been used to spy on journalists [46], dissidents [30], and corporations [27].
1 1 We likely primarily measure less skilled attackers in this study.While the unique danger posed by this new class of malware has received considerable attention, the relationship between the RAT operator and victim is poorly understood.
In this work, we bring to light the behavior of operators and victims of two popular RAT families, njRAT and DarkComet.
Our primary aim is to determine who is attacking whom, the size of the victim and attacker population, and how long victims remain vulnerable after a campaign ends.
One of the pervasive challenges of studying populations of victims and attackers is the difficulty of accurately determining the population.
Network hosts behaving as victims may be security researchers scanning for command-and-control servers [15,17], while potential command-and-control servers may be vigilantes operating sinkholes [12,39,49].
The central challenge of conducting a study of the RAT ecosystem, then, is to be able to correctly determine who is really a victim or operator, and who is pretending to be one.In this paper, we design, implement, and deploy improved methodologies for accurately measuring real victims that connect to our sinkhole, RAT-Hole, and identifying RAT controllers using our scanner, RAT-Scan.
The task of identifying victims at scale is made difficult by the amount of pollution sinkholes receive from increasingly high-fidelity scanners and sandboxes.
Differentiat-ing between real controllers and sinkholes is also a nontrivial undertaking due to higher fidelity sinkholes.
This increasing fidelity in RAT scanners that emulate more of a victim's behavior and sinkholes that emulate more of a real RAT controller's protocol has likely created an arms-race between entangled threat intelligence operations which we call Intelligence Pollution.
This leads to inaccurate measurements and wasted notification efforts, wherein researchers and security vendors may confuse beneficent sinkholes for malicious controllers, or scanners and sandboxes for actual victims.In order to mitigate this pollution, we have created RAT-Hole which implements the handshake protocol and error triggering tests for two common RATs, DarkComet and njRAT.
Based on extensive testing, we developed a set of heuristics to accurately differentiate sandboxes, scanners, and victims.
We leverage the phenomenon that operators of commodity-grade RATs frequently configure their RATs to use free dynamic DNS (DDNS) services [17] domains which expire after one month.
We conduct an experiment where we sinkholed 6,897 RAT controller domains associated with DarkComet and njRAT samples.Based on our classification methodology we found that only 6,710 (0.8%) of the over 800k Source IP addresses that connected to our RAT-Hole were likely victims.
If we filter out the lower fidelity scanners, we find that only 3,231 (69%) of the RAT fingerprints that completed a RAT handshake are likely victims.
Our analysis also found that telemetry from a /32 and /24 internet telescope could filter less than 1% of the higher fidelity scanners and sandboxes.
We also received several repeated manual notifications based on scanners misclassifying our RAT-Hole deployment as a large-scale RAT controller hosting operation.As part of our study we also created RAT-Scan, which is able to differentiate some sinkholes, including our high fidelity RAT-Hole, from actual RAT controllers by emulating DarkComet and njRAT victims.
We deployed RAT-Scan to scan the entire IPv4 address space and found 6,401 IP addresses hosting suspected RAT controllers.
Our efforts to accurately differentiate sinkholes from real RAT controllers were complicated by VPN proxy services that were highly dynamic and appear to host both sinkholes and real RAT controllers.
In particular, we found that IPJetable, a free VPN service, hosted over 40% of the suspected RAT controllers we found.We propose that our more accurate identification of controllers and victims could reduce wasted notification effort.
In addition, we propose some potential interventions involving the free DDNS and VPN proxy services that provide support infrastructure for RAT operators.
This could be in the form of these services voluntarily assisting in blocking RATs from their infrastructure.
The other potential intervention is for law enforcement entities to more closely monitor these services to better identify attackers and victims.The primary contributions of our study include:O Proposal and evaluation of methods for classifying RAT sandboxes, scanners, and likely victims based on connection to a sinkhole.
O Conducted a large-scale measurement study based on sinkholing 6,897 RAT controller domains.
We found that only 6,710 (0.81%) of the over 800k Source IP addresses that connected to our sinkhole were likely victims.
O Proposed and deployed a RAT controller scanner that is able to differentiate some sinkholes from real RAT controllers.
Based on our analysis we found that IPJetable, a free VPN service, hosted over 40% of the suspected RAT controllers that we found.
O Identified potentially improved interventions that could mitigate the threat of RATs.
The subject of this work is the relationship between victims and operators of two commodity RATs (Remote Access Trojans), njRAT and DarkComet.
In this section, we provide the necessary background on RATs for the rest of the paper.
Most RATs are made up of three parts: builder, stub, and controller.
At the start of a malware campaign, the attacker runs the builder program, creating a new instance of the stub for installation on a victim's computer.
The newly built stub contains the code that will run on the victim's computer with parameters such as the host name of the command-and-control server to contact upon infection.
During the campaign, the attacker runs the controller software on the command-and-control server to interact with the victims.
In most cases (e.g., for njRAT and DarkComet), the controller provides a graphical user interface and runs directly on the attacker's computer.
The attacker, also called the RAT operator, interacts with the victim via the controller interface.
For the RATs studied in this paper, communication between stub and controller begins with the stub opening a TCP connection to the controller host name hard-coded in the stub.
The attacker provides this host name to the builder program which produces the stub.
Once the stub establishes this connection, RATs can be divided into two groups.
In RATs where the application-layer handshake is controller-initiated, the controller speaks first by sending a banner to the stub immediately after accepting the stub's connection.
DarkComet is controllerinitiated.
In contrast, in a protocol where the handshake is victim-initiated, the stub sends the first message immediately upon connecting (receiving the SYN-ACK from the controller).
njRAT is victim-initiated.
Whether a protocol handshake is victim-initiated or controller-initiated determines how we scan for controllers and sinkhole stubs, as described below.
Additionally, many RAT protocols support symmetric encryption to obfuscate the command stream and as a form of access control to the stub.
In these cases, the encryption key or password is embedded in the stub's configuration.The initial message sent by a stub contains both information configured by the builder (e.g., password, campaign ID) as well as information unique to the victim machine (e.g., username, hostname, operating system, active window).
This information allows the operator to manage multiple campaigns and also to obtain a summary of the victim.
Some of the information sent by the stub is potentially Personally Identifiable Information (PII), which introduces ethical challenges to researching RAT sinkholes that we discuss in our ethical framework.
Sinkholing is a term used to indicate the redirection of infected machines' connections from their intended destinations (e.g., attackers' command & control servers [36]) to the sinkhole owner.
Local sinkholing efforts, implemented by organizations or individual ISPs, often involve reconfiguring DNS servers and routers to block communication with malicious domains or IP addresses.
Larger, coordinated sinkhole operations are often part of broader takedown efforts, requiring cooperation between domain registrars and international authorities.
[29,49] A prior study found that RAT operators often utilize Dynamic DNS (DDNS) services [17], which allow their controllers to migrate between IP addresses without disruption of operation.
Services like No-IP [35] offer free DDNS hostname registrations that expire after 30 days.
As we will show, operators often allow their hostnames to expire and this provides a large pool of RAT domain names that can be claimed and sinkholed.Ideally, a DNS sinkhole operation would be able to identify all victims associated with its acquired domains and to accurately measure victims.
Unfortunately, scanners and sandboxes introduce a significant amount of intelligence pollution, as we will show in our study.
Internet-wide scanning is a popular technique for Internet measurement, particularly in the field of security.
It was recently leveraged to measure the Mirai botnet [3], and is likely used by many academic groups and security vendors.
Open-source tools such as ZMap [14] make rapid scanning of IPv4 space accessible to researchers.
There are also services such as Censys [13] based on ZMap and Shodan [32] that uses a custom scanner.Scanning for RAT controllers presents a similar set of challenges to sinkholing.
RATs often use victim-initiated handshake protocols to communicate, so simple port scanning or banner grabbing is often not sufficient to confirm the existence of a RAT controller.
One must also implement the RAT's handshake, which can be complicated by the inclusion of encryption and custom passwords.
Proxies may also conceal multiple controllers behind the same address, while a single controller may reside behind ever-changing addresses (using DDNS, for example).
Finally, many academic groups and security vendors operate sinkholes which can be challenging to differentiate from real RAT controllers.
Our methodology was approved by our institution's Institutional Review Boards (IRB) and general legal counsel.
The ethical framework that we operated under is that we only completed the protocol handshake with peers that contacted us and controllers that are publicly reachable.
We did not attempt to execute any commands on infected peers.
During the handshake there is some potentially Personal Identifiable Information (PII) that the peer sends to us, such as the PC name (often the name of the victim) or full website URLs a person is visiting if the active window is a browser.
In order to mitigate the potential harm caused by our study, we immediately encrypted any fields that might contain PII and did not ever store an unencrypted version of these fields (PII listed at Table 3).
Our IRB takes the position that IP addresses are not personally identifiable.
In no cases did we attempt to tie our measurements to an actual identity.
Our system consists of two primary components: a highfidelity sinkhole (RAT-Hole) that imitates RAT controllers, and a high-fidelity scanner (RAT-Scan) that imitates RAT victims.
We present the details of our RATScan system in Section 5.
Figure 3 shows a timeline of when each part of our methodology was deployed.
the malware is detected and uploaded to VirusTotal [52].
RAT-Hole then receives all connection attempts to these hostnames.
Simultaneously, RAT-Scan continuously probes all extracted IP addresses and hostnames for controller activity in the wild.We limit the scope of our study to two RAT families, DarkComet and njRAT, since reverse-engineering and implementing parts of their protocols in RAT-Hole and RAT-Scan is a time-consuming manual effort.
These two were chosen because they are the most popular RAT families for which we were able to obtain source code for multiple versions, and there is existing documentation of their protocols to assist with the reverse-engineering process [6,10,20].
As an approximate measure of prevalence, we count the number of unique binaries associated with RAT families uploaded to VirusTotal by using upto-date YARA rules for sample hunting.
We found that njRAT and DarkComet were the third and fifth most popular RATs on VirusTotal when we began our study.
Using YARA signatures for all known versions of DarkComet and njRAT, we monitored VirusTotal for 9 months (2016-12-01 to 2017-08-17), obtaining 33,560 samples in all.
Each sample has a configuration, including the address of its controller (domain:port or IP:port), its campaign ID, its password, and its version.
We attempted to extract configurations from each sample using an existing Python tool [5].
Table 1 shows that we were able to obtain configurations for 22,124 unique samples of DarkComet and 4,535 unique samples of njRAT.
Our njRAT YARA rule can detect subfamilies of DarkComet and njRAT that our decoder does not support.
This is one of the primary reasons why we are not able to decode all our RAT samples.
Domain dataset.
We performed an analysis of the domain names found in the RAT configurations.
Table 2 shows that most of the domains we found that were used by DarkComet and njRAT are associated with free Dynamic DNS (DDNS) providers, and that No-IP managed 60% of all discovered domains (77% of DDNS).
DDNS Claimer.
We developed a web automation toolkit to automate the process of identifying expired DarkComet and njRAT domains controlled by No-IP and claiming them.
We only claimed domains from No-IP, since there is manual effort involved in building the web automation toolkit and No-IP was by far the most popular free DDNS provider used by DarkComet and njRAT.
We limit our study to only expired domains that we can claim freely; we do not attempt to seize owned domains, in order to avoid additional disruption to the ecosystem that we were measuring.
As future work we plan to expand our claiming infrastructure to other DDNS providers and actual registered domains to understand if this affects the results of our analysis.Our DDNS domain claiming operation, which started on 2017-07-15 and ended on 2017-11-17, claimed 6,897, or 81%, of the 8,564 DDNS domains managed by No-IP.
Architecture.
RAT-Hole is a socket server application that utilizes epoll in order to handle a large number of connections, simultaneously.A RAT-Hole node has three sets of interfaces.
(1) Management: all the management traffic, such as data backup and database iterations, are performed using this interface.
(2) Sinkholing: This set of virtual interfaces (206 IP addresses) are assigned to the sinkholed domains by our domain claiming system.
We randomly claimed 200 2 expired DarkComet and njRAT from the set of No-IP domains that we discovered.
These domains were monitored for one hour.
After that one hour we released these domains, waited for 5 minutes for the old domain names to expire from DNS caches, and then claimed a new set of 200 randomly selected domains.
(3) Decoy: We intentionally did not use 11 of the IP addresses in our subset as sink-holing interfaces so that we could identify connection attempts to them that indicate scanning behavior.
We randomly selected IP addresses to be decoy interfaces.RAT-Hole includes a Deep Packet Inspection (DPI) pattern-matching based state machine that maintains the state of each active TCP connection from the sink-hole and decoy interfaces.
These states are:Incoming.
RAT-Hole allocates a data structure indexed by connection ID for any TCP connection that completes a TCP three-way handshake with the RATHole.
Here, connection ID is a tuple of source IP address, destination IP address and TCP port.
This ID is used as an index by RAT-Hole to locate the previous states of the connection and to update the connection's state.Protocol detection.
Once a TCP connection is established RAT-Hole waits three seconds to receive data.
After three seconds it will probe the peer by sending a DarkComet C&C banner to determine if it is an njRAT stub and update the state of the connection.Victim-initiated RAT protocol detection.
When RAT-Hole receives an initial message from a completed TCP connection before the three second timer expires, it will examine all of our regular expressionbased RAT family detection signatures over the payload to identify the incoming peer's protocol.
We have created 16 signatures that are able to detect the initial message sent by common versions of njRAT, Xtream-RAT, ShadowTech, NetWire, H-Worm, LuminosityLink, Black WorM, and KJ w0rm.
However, we implement the complete njRAT handshake to determine if it is an actual njRAT stub or intelligence gathering operation.
Although we did not claim any domains used by these variants, we did see initial messages for these other RAT families.Controller-initiated RAT protocol detection.
If the three second timer expires, then RAT-Hole will probe the peer by sending a DarkComet banner.
For DarkComet (refer to Appendix D for more details on DarkComet protocol behavior), we send a series of 125 ban-ners.
After each banner is sent the connection is terminated and the stub will attempt to connect again if the stub conforms to the DarkComet protocol.
This ordered set of banners is comprised of: (1) a randomly generated banner (this is to test if the stub deviates from the protocol by accepting any banner), (2) a set of 20 default DarkComet banners (this is to see if the stub will incorrectly accept the default banner), (3) a complete set of valid banners for the current set of domain(s) being sinkholed by that interface (this is to see if the stub responds correctly to a valid banner), and (4) the remainder of the 125 banners are randomly generated (based on our reverse engineering we found that after 124 banners are received by a stub it will lock up and stop attempting further connections until the RAT process is restarted).
Handshake test.
We implemented a handshake test for both DarkComet and njRAT which implements each full RAT handshake protocol.
In addition, it includes specifically malformed messages in order to trigger error handling and identify likely RAT stub execution as opposed to a scanner that has reimplemented the protocol.
This methodology is similar to that of Marczak et.
al. to fingerprint malware C&C servers [30].
We send a malformed command at the end of the njRAT handshake (see Appendix C) and if the expected error handling response is received, we mark the connecting peer as conforming to the standard implementation of the protocol.
In the same vein, for DarkComet (see Appendix D) we observe and enumerate the execution pattern.
For instance, we expect a true DarkComet infection to stop operating after connecting to RAT-Hole as a result of 124 attempts or more.
Note that our handshake test does not distinguish between stub execution in sandbox and victim machine.
However, it does perform well at identifying RAT scanners specifically those that do not implement the complete RAT protocol handshake and true execution behavior of the RAT protocol as standardly implemented.After handshake probing is completed, RATHole closes the connection and removes the state for that connection ID.
RAT-Hole logs the final state of the connection, which can be one of three states: (1) no valid banner was received; (2) a valid initial banner was received, but the handshake was not completed; (3) the handshake was completed successfully.Handshake metadata.
During the RAT handshake, the stub includes a number of fields in the handshake that we parse and store in the database.
A list of the fields that we parse and store is shown in Table 3.
Using AES we encrypt any fields that might contain potential PII before storing them in our database.
From these fields, we create a fingerprint that is largely unique for each infection by combining the PC-NAME, USERNAME, and HWID.
VSN and UUID comprise the HWID for njRAT and Dark-Comet, respectively.
(See Appendix C, D.) This fingerprint enables us to persistently identify and thus enumerate unique RAT peers despite victim IP address churn.RAT-Hole classification.
Based on the data, we are accurately able to classify peers that connected to RATHole into one of five categories:• Unknown: These peers send a payload that is not known to RAT-Hole.
Internet wide scanners (e.g., zmap) and other custom IP intelligence operations are examples of these peers.
We have also found that these unknown payloads could be a RAT family that RAT-Hole does not support, since some of the sinkholed domains are used as the C&C for multiple RAT infection campaigns.
• Low Fidelity (LF) Scanner: These peers do not complete the RAT handshake.
Based on our analysis they often send many fingerprints, connect from many Src-IP addresses, connect to our decoy interfaces, and their Src-IP address might be included in known scanner list(s).
• High Fidelity (HF) Scanner: These peers complete the RAT handshake and present one or more highly anomalous characteristics described in Table 4.
• Sandbox Execution: These peers complete the RAT handshake, but exhibit one or more of the characteristics commonly associated with a sandbox execution, such as a short execution duration which we defined as slightly more than the longest default execution duration value (600 seconds) of the major sandboxes we analyzed.
Table 4 includes a compete list of these heuristics.
• Victim: These are likely real infections.
Description PII Over the 31 days that RAT-Hole was deployed, it was in possession of domains for 23.1 total days -an average of 17.7 hours per domain, distributed randomly.
During this time, it received 153,100,000 TCP connections.
Table 5 provides a high-level view of these connections, broken down by determined peer type.We performed an analysis of the "Unknown" peer type from Table 5 which composed 815,455 (98.5%) of all IP addresses that completed a three-way TCP handshake connection to RAT-Hole, but were not classified by RATHole as peers related to either njRAT or DarkComet.
We suspected that some of these connections might be other RAT families when an operator reuses the same DDNS domain for other RAT campaigns.
In order to provide some measurements of this phenomenon, RAT-Hole implements a simple payload parser for the first message of the handshake for 19 other popular RAT families in addition to the complete RAT handshake protocol for njRAT and DarkComet RAT families.
Of these peers, 73.6% sent no additional TCP messages after the handshake, 31.9% sent unknown payloads, and 1,463 (<1%) were detected as other types of RAT families.
The small degree of overlap indicates that some IP addresses presented multiple behaviors; see Table 17 in Appendix E.We also wanted to understand if this pollution from likely sandboxes and scanners could be filtered using data from IP telescopes (unused IP address subnets that act as large sinkholes).
To evaluate this possibility, we looked for overlap in IP addresses during our deployment period from a /24 sized (256 IP addresses) IP telescope located in India.
We find that there is not much overlap.
Only 31,014 (3.8%) of the IP addresses we classified as Unknown appear in our telescope data, and less than 0.01% overlap with any other category of IP addresses.
This suggests that most of RAT-Hole's pollution is targeted and thus not filterable.
See Appendix B for details.
This section describes our efforts to validate our methodology for differentiating RAT scanners, sandboxes, and victims.
Validating our methodology is challenging since we have limited ground truth, except in some instances where we could create it (e.g. Section 4.3).
In this section, we describe our method of building up a high confidence set of RAT scanners, sandboxes, and victims based on additional heuristics for DarkComet and njRAT families.
Recall that low fidelity scanners are peers 3 that sent valid initial handshake messages, but did not complete the handshake process.
In Table 6 dresses that are all njRAT into five clusters based on their behavior.
The (x) cluster are source IP addresses that attempted to connect to one of our decoy IP addresses.
This is a fairly strong indication of broader IP address scanning being performed by this source IP address and we are confident that these are scanners.
As a point of reference no high fidelity scanner, sandbox, or victim connected to one of our decoy IP addresses.
For cluster (y), 7,607 (99.7%) of the fingerprints only attempted to establish one connection.
This is a strong indication of a scanner that is randomizing its fingerprint.
Another two fingerprints had multiple unique INSTALL DATE fields, indicating the possibility that they are sandboxes.
For 19 of the fingerprints, we did not detect any anomalies.
These 19 peers could be real victims that speak a version of the protocol that is incompatible with RAT-Hole, or that have persistent connectivity issues that prevented them from completing a handshake.
We conservatively label these peers low fidelity scanners.Our anomaly analysis for fingerprints in cluster (z) shows that 140 (53.6%) of the fingerprints have multiple unique INSTALL DATE fields, likely indicative of scanners that update INSTALL DATE based on the current time.
Another 24 (9.2%) had an incorrectly formatted HWID, indicating scanners with protocol formatting errors.
The remaining 97 (37.2%) had no anomalies, but again we conservatively label them low fidelity scanners.
We did not observe any RAT protocol violations from 387 out of 510 fingerprints (remainders at Table 7) belonging to the peers that had one fingerprint and one IP address (|).
On the average peers in this cluster failed 3,000 (90%) attempted connections and a minimum of 100 (2%) attempted connections.
Thus it is unlikely that intermittent connectivity issues prevented the completion of the handshake at least once.
It is unclear if these are victims that implemented a version of the protocol that is incompatible with our RAT-Hole, persistent connectivity issues, or if they are low fidelity scanners that did not implement the entire protocol.
We conservatively label these peers as low fidelity scanners.
We classify a peer as a high fidelity scanner if it is able to complete the handshake, but it violates the field formatting, exhibits peer behavior, or protocol behavior that indicates it is likely a scanner that is reimplementing the njRAT or DarkComet stub instead of an actual stub execution.
A peer is conservatively classified as a sandbox if it exhibits peer or protocol behavior that indicates it is likely a sandbox.
Finally, if a peer does not violate the protocol or exhibit any anomalous behavior we classify it as a likely victim.
Table 8 shows that 69% (3,231) of all peers that complete the handshake with our RATHole are classified as victims.
This indicates the significant degree to which high-fidelity scanners and sandboxes will pollute sinkhole results if the sinkhole eschews a deeper analysis of the peers similar to RAT-Hole.
Table 8 also shows the breakdown of types of anomalous behavior and protocols violations observed by likely high fidelity scanners and sandboxes.
For high fidelity scanners they had an incorrectly formatted field or an empty INSTALL DATE for 238 (40.4%) and 174 (29.5%) of the fingerprints accordingly.
Sandboxes exhibit short execution durations 634 (72.2%) and multiple unique INSTALL DATE fields in 259 (29.5%) of the fingerprints.
While we cannot compute error rates for our classifications due to the lack of ground truth, we are fairy confident that our methodology, while not perfect, is reasonably accurate.
In the next section we present the results of seeding malware analysis portals to further validate our classification methodology.
Finally, what we classify as victims are the fingerprints that do not exhibit any anomalous behavior and are likely to be actual victims.
In order to evaluate our classification in a setting where we have ground truth, we conducted an experiment where we uploaded DarkComet and njRAT samples to malware analysis services.
Our expectation for this experiment is that all of the connections will be from scanners or sandboxes, which will enable us to validate our classification methodology.
Using our automated RAT Seeder, we generated 84 DarkComet and 84 njRAT.
Each of these samples has a unique Campaign-id, IP Address, and TCP Port configuration that directed the sample to connect to one of our RAT-Hole IP addresses on a different network segment, which we only used for this experiment.
We uploaded 4 DarkComet and 4 njRAT samples to 21 different malware analysis services, of which only 9 of the services initiated a connection for at least one of our samples.
A full list of these services and the ones that ini- Table 18.
We chose these services based on their popularity among malware researchers and threat hunters, ease of utilization and being relativity cheap or free.
Only 9 of these services execute one or more of our honey samples during the course of our experiment.
The configuration uniqueness of these samples allowed us to associate received connections on our RAT-Hole to a sample and portal.
Table 9 shows the breakdown of fingerprints and associated categorization of peers by our classification engine.
Note that we used the same classification methodology as for our in the wild sinkholing experiments and only incorrectly classified 2 out of 117 (1.7%) fingerprints as victims.
We inspected the active windows for these two fingerprints and found that both appear to be manually reverse-engineering the samples using executable debugging and network protocol analysis tools.
Recall that for this experiment we did not encrypt the active windows since we did not expect any real victims.
We also classified some njRAT peers as high fidelity scanners.
We can confirm that when we tested these samples before submitting them they did not have any protocol violations.
This gives us further confidence that our classification methodology is fairly accurate.
In We continuously probed each of these 67,023 IP addresses hourly for evidence of RAT controller software.
We checked for services running on any port configured in any sample related to the IP address or related to a domain that resolved to said IP address at any time.RAT-Scan probes for controllers of both DarkComet and njRAT, emulating a newly-infected victim contacting the controller for the first time.
RAT-Scan first approaches every connection passively, waiting to receive an initial DarkComet handshake banner.
If it does not receive a banner before a three second timeout, it restarts the connection and treats it actively, sending the initial njRAT handshake banner.
Regardless of which handshake proceeds, the scanner completes the entire handshake with the controller if possible.Sinkhole identification.
RAT-Scan can, to some extent, distinguish between legitimate controllers and sinkhole operations like our own RAT-Hole.
If a controller begins a handshake but does not complete it, it is labeled as a sinkhole.
Additionally, after successfully completing a handshake with a controller, our scanner attempts to elicit an improper response to a second handshake with a different configuration (e.g. different password).
Any response is cause for sinkhole classification.
The actors that our scanner probed during its operation fall under one of the following classes: controller completes an njRAT or DarkComet handshake flawlessly.
Does not respond to solicitation for improper behavior; and sinkhole either makes an error during a RAT handshake, or accepts an improper second handshake after the first (like RAT-Hole).
Important caveats.
RAT-Hole and RAT-Scan have a significant disparity in the confidence of their classifications.
RAT-Hole makes use of several protocol artifacts in the DarkComet and njRAT handshakes to detect imposter victims.
Because RAT victims are intentionally loquacious during the handshake, this is possible; however, RAT controllers are oppositely taciturn, revealing practically nothing to RAT-Scan during the handshake.
DarkComet controllers acknowledge a victims' correct password and njRAT controllers do not acknowledge this.
Therefore, when we classify a host as a DarkComet sinkhole we are fairly confident, but when we label a host a controller it is possible that it is a high-fidelity sinkhole or sandboxed controller.Attempted validation.
The joint investigation by Recorded Future and Shodan [22] in 2015 that resulted in Malware Hunter reported 696 IP addresses as suspected RAT controllers, 10 of which appear in our dataset.
However, Malware Hunter has since flagged RAT-Hole as a RAT controller and high-priority threat, so we question the value of any such threat intelligence feed as proper ground truth.
We leave developing a method for improved validation of our scanning results as future work.
Our scanning operation began on 2017-05-11 and ended on 2017-11-25, for a total of 198 days.
During this period, we established 86,694 connections to 6,401 IP addresses exhibiting behavior indicative of RAT controller software; 2,032 DarkComet controllers and 4,584 njRAT controllers, with some IPs hosting both.
Table 10 provides a summary of our scanning operation.
Other than on RAT-Hole itself, our sinkhole detection methods did not trigger during this study.
We are led to believe that all controllers reported here are either legitimate instances of the controller software, or services that have implemented the handshake properly and maintain a single configuration.
We suspect that such services exist; however, we currently have no way of distinguishing them from legitimate controllers.
Further, we have no reason to believe that we encountered any high-fidelity sinkholes similar to RAT-Hole.
IP address churn.
We find that most victims do not change their IP address, with 60% of victim using one IP addresses and an additional 20% of all victims use a total of two IP addresses.
Note that we might not observe all of the victims' IP address changes due to our periodic sinkholing of domains.
Webcam availability.
As part of the handshake, DarkComet and njRAT victims report if they have a camera device.
We found that 1,725 (53.4%) of victims have a camera, making them susceptible to visual monitoring unless they have physically covered the camera.
Infected servers.
21 njRAT victims reported a server version of Windows (i.e., Windows Server 2012) running on the peer.
We manually investigated the Autonomous System Numbers for the IP addresses used by these peers and confirmed that they were located on corporate networks or cloud hosting providers.
This suggests that some higher profile peers associated with companies are infected with njRAT, providing the operator with an entry point into their systems.
Infection longevity.
Our methodology is predicated on victims remaining after the command-and-control dynamic DNS domain used by the attacker expires, which occurs 30 days after registration with No-IP.
Figure 4 shows the fraction of domains still receiving legitimate victim connections as a function of time since the dynamic DNS domain expired.
Because our sinkholing period does not span our full domain monitoring period (31 days from 2017-08-15 to 2017-09-16, and 220 days from 2017-04-21 to 2017-11-26; see Figure 3), we do not necessarily known victim availability immediately starting from when the domain expired.
Figure 4 shows an upper and lower bound curve; the upper bound corresponds to the case that at least one victim connection occurred during the period when the command-andcontrol domain was not monitored, and the lower bound corresponds to the case that no victim connections occurred during the same period.
Thus, 120 days after the command-and-control domain expired, 10% of domains were still receiving connections from legitimate victims.In all, 975 domains received victims, 14% of the 6,897 we sinkholed.
1,686 of these domains had no known historic resolution from any of our sources, including threat intelligence feeds and our own resolver.
Only 975 of the domains we sinkholed yielded victim connections, yet they received connections from 3,231 unique victims.
In Figure 5, we examine the number of unique victims any one domain received.
43% of domains received only a single victim; 90% received at most 20 unique victims; 95%, 41 or less.
Three outlier domains received over 100 victims.
This disparity suggests that some attackers are distributing their malware more widely, or are more proficient at compromising their targets, than others.
We also find that 45% of victims connected to just one domain.
90% of victims connected to four or less different domains, while 95% connected to five or less.
These victims connecting to multiple different domains, and domains receiving tens of unique victim connections, suggest a number of phenomena.
Attackers may be using sets of domains interchangeably, or victims may be infected by multiple different attackers.To investigate the former, we examine the samples which we downloaded from VirusTotal.
Our 975 domains are found in 1,429 unique samples.
Once again, there is bidirectional overlap.
Only eight samples contain more than one domain in their configurations; 1,421 have a single domain.
Multiple domains being in a single sample is our strongest indicator of them being shared by an attacker.
Oppositely, 246 domains are found in more than one sample's configurations (the remaining 729 domains are each present in just one sample).
Some domains are shared by many samples -one being found in 24 unique DarkComet samples.
Unfortunately, these domains further muddy our analysis.
In the case of the domain shared by 24 samples, only two of those samples clearly belong to the same actor (based on other shared configuration parameters).
Our methodology cannot definitively answer whether attackers use rotating domains, or whether victims are multiply infected by different campaigns.
Based on our evidence, both appear probable, and confound our attempts at differentiating attackers and their victims.
All IP-based geolocations were performed using MaxMind's GeoIP2 Precision Insights service.
Proxies.
MaxMind provides information regarding the likelihood that an IP address is a proxy, as well as IP ownership (which can be used to manually determine proxies).
We use this information to separate proxies from non-proxies, as in Tables 11 and 12.
A large portion of the controllers in our data set appear to be utilizing proxies from certain countries like France, Sweden, and the U.S.
We manually investigate the largest [24] and Relakks [42]) account for 40% and 3% of all actively-probed controllers, respectively, while prominent VPS services like Amazon AWS, Microsoft Azure, and Digital Ocean are also frequently abused.As the geolocation results of the proxies only serve to muddle the geospatial relationships between victims and attackers, we filter them from the following analyses.
We report only on those results in the Other columns of the geolocation tables.
Controller geography .
Tables 11 and 12 show the geolocations of historic and actively-probed controller IP addresses, respectively.
We find both to have heavy presences in North Africa and the Middle East.
Outliers include Brazil and Russia, both of which tend to correspond with victims in bordering nations.
Victim geography.
Exploring Table 13, we find that virtually every country has some RAT victims with Brazil being the top location for victims of both DarkComet and njRAT, as shown in Table 13.
We find what appears to be geographic concentrations of DarkComet and njRAT victims in South America and North Africa / Middle East, including some bordering countries.
We also find that DarkComet is used to infect a larger percentage of victims in Russia and bordering countries.
Note that these measurements might be biased by our methodology of acquiring RAT samples and sinkholing DDNS domains.
Controller-victim geography: Recall that during the sinkholing portion of the experiment, we registered the command-and-control domain, directing all potential victims to our server.
During this period, we were able to observe all victims that attempted to connect to the controller.
Prior to the sinkholing period, controller domains may have been held by the original controller or may have been sinkholed by researchers or vigilantes.
In addition, for four and a half months prior to the sinkholing experiment, we resolved all controller domains to determine whether they were registered, and, if registered whether they had an associated A record, and whether the corresponding hosts behaved correctly (as a controller).
Thus, for each domain, we have the IP addresses of all controllers that held the domain, as well as of all victims that attempted to connect to the domain during the sinkholding period.
(Note that two periods are necessarily disjoint: both we and the original controller cannot hold the same domain at the same time.)
Fig- ure 6 shows the geographic relationship between responsive controllers and the victims, using the geolocation methodology above.
Each cell of the matrix shows the number of distinct campaigns (domains) associated with the given country pair.
In cases where a domain resolved to more than one country or where victims where located in more than one country, the domain contributed a fractional weight to each cell in proportion to the number of controller-victim pairs of the domain from the country pair, so that the total contribution of each domain was 1.
Figure 6 shows only the top 25 countries, ordered by the greater of the number of victims and controllers in the country.
The dominant feature of the data is the controller and victim being located in the same country, visible as a concentration around the diagonal in the matrix.
In addition, there were 5 campaigns with a controller in Ukraine (UA) and victims in Russia (RU).
This may be due to a common infection vector, as Ukraine has a large Russianspeaking population and its users may frequent the same Russian-language sites.
The incidence of controllers and Russia and victims in Brazil (BR) is more puzzling; although both Russia and Brazil have large victim and controller populations, there is no obvious reason why controllers in Russia might target victims in Brazil specifically.
Another possibility is that the controllers were using a proxy in Russia that was missed by our filtering.
Figure 7 shows the same type of data, but for all controllers using the historic controller dataset.
Note that this data spans the period 2010 to 2017 and includes name resolution from passive DNS sources (see Section 5.1), where we did not verify the correct behavior of the controller.
As such, this data should be interpreted with caution.
Figure 7 exhibits the same concentration around the diagonal as Figure 6, indicating campaigns where both controller and victim are in the same country.
As the results of Table 13 suggest, Brazil has by far the largest concentration of victims across both RATs.
Moreover, Brazil appears to be victimized indiscriminately.
We also note some language clustering, where countries that speak the same language or are geographically proximate are more likely to be paired; e.g., Russia on Ukraine (13), Ukraine on Russia (18), Ukraine on Kazakhstan (4), Ukraine on Belarus (5), Morocco (MA) on Algeria (DZ) (9), Algeria on Morocco (8).
Adversarial robustness.
Our classification methods that RAT-Hole uses to distinguish sandboxes, scanners, and victims are not robust to an adversarial actor that is actively trying to evade our classification.
Based on our validation it appears that there are many detectable sandboxes and scanners.
As future work, we will explore potentially more robust features, such as inter-arrival timing of connection attempts in order to detect scanners and analysis of active window patterns to detect sandboxes.
Manual reverse engineering.
We have not developed a method for automatically decrypting RAT Protocols or parsing out information from fields in the protocol.
This caused us to limit our analysis to two common RAT family types.
It is unclear what biases might have been introduced into our results due to limiting the number of RAT families and DDNS services included in our study.
As future work we will explore how well existing methods for automated protocol reverse-engineering [7,8] and decrypting of messages [47] perform at our task.
Family-specific classification heuristics.
Our methodology for building up a set of classification heuristics was again a manual process and in some instances, such as triggering error conditions, was RAT family specific.
As future work, we will explore more automated methods, such as semi-supervised machine learning based approaches using inter-arrival timing of connections to differentiate scanners from execution of the actual malware.
We will also explore methods based on victim behavior to identify sandboxes.
We hypothesize that it will be difficult for a sandbox to mimic the patterns of a real victim.
Validating scanning results.
We have little ground truth to evaluate methods for distinguishing between legitimate RAT controllers and sinkhole operations, other than our own sinkhole.
As future work we will explore additional methods of ethically probing controllers, such as calling rarely used API functions that are unlikely to be implemented by sinkholes.
Our results show that expired RAT domains still have likely victims attempting to connect to them.
The 3,231 likely victims we detected could be further victimized by an adversary that claimed these domains.
We are in the process of working with some free DDNS providers to understand if they would be willing to permanently block domains associated with RAT controllers.
Our work is influenced heavily by research projects from industry and academia.
We discuss works that informed our study's primary aspects: sinkholing and scanning.Sinkholing and infection enumeration.
A number of early botnet measurement studies mused on its challenges.
A Trend Micro industry report from 2001 [29] qualitatively discussed the problems with sinkholing botnet domains, like receiving PII.
The ethical issue of victim PII receipt is universal to infection enumeration efforts; Han et al.[23] built a system for sandboxing phishing kits explicitly designed to protect victim privacy.Always prominent has been the issue of accurate infection size estimation.
Ramachandran et al. [41] proposed a method of estimating botnet infection size based on frequency of DNS lookups to C&C domains.
A subsequent pair of botnet size estimation studies used DNS lookups [9] and IRC channel monitoring [1], but arrived at different estimates due to errors caused by churn [40].
A number of studies explored how to estimate the size of the Storm botnet [16,21,38], while Stone-Gross et al. [49] actually sinkholed the Torpig botnet, live, and created unique fingerprints for each infection to address infection measurement difficulties, as do we in this study.
A follow-up study by Kanich et al. [25] showed that pollution caused by interfering measurement operations had inflated the measured size of the botnet.
Nadji et al. [34] discuss the same issue of measurement pollution while running a domain sinkhole performing botnet takedowns.Novel approaches for detecting and filtering scanners exist.
For instance, Rossow et al. [44] proposed a method for detecting sensors based on detecting crawlers injecting themselves into large numbers of points in a P2P network.
Successful methods for detecting scanners tend to be highly tailored, as was ours.Our methodology exploits the fact that DDNS domains used as C&C's will ultimately expire, though victims are still contacting them.
This is one of the premises behind work by Starov et al. [48]; though they focus on web shells rather than more traditional RATs, their goal of measuring the ecosystem of attackers and victims is similar to ours.
Lever et al. [28] measure the adversarial possibilities behind re-registering an expired domain.Part of our methodology focuses on the challenge of detecting malware samples being executed in sandboxes, which we found to be a source of intelligence pollution.
Most prior studies on sandbox detection focus on malware sandbox evasion techniques [4,26,33,37,45,53].
A more recent study demonstrated that intentionallydesigned binary submissions to antivirus companies can exfiltrate sandbox fingerprints [55].
Our approach furthers these efforts to identify Internet-connected sandboxes, using unmodified malware binary submissions and leveraging artifacts of the execution process like short execution duration to inform our detection.In a 2014 report, researchers at FireEye enumerated infections for an XtremeRAT campaign by sinkholing the controller domain [51].
This study notes the challenges of victim IP address churn, which our work also encountered.
We designed our methodology to explicitly handle the challenges this study uncovered, as well as to filter intelligence pollution from scanners and sandboxes, such that we could accurately and ethically enumerate RAT infections based on sinkhole data.Scanning and controller discovery.
BladeRunner [15] was the first scanning-based system to actively discover RAT controllers by emulating RAT victims.
Since then, Shodan [31] has added active probing and banner identification for numerous RAT families including DarkComet and njRAT.
Marczak et al. [30] created a scanner that was able to detect stealthy APT controllers by triggering error conditions.
Most recently, Farinholt et al. [17] presented a scanner that used ZMap [14], Shodan, and a custom port scanner to detect DarkComet controllers based only on their initial handshake challenges.
RAT-Scan's design is based on these systems.RAT-Scan also contains logic to (attempt to) address the issue of sinkholes polluting controller measurements.
The most closely related work is SinkMiner, a system which proposed a method to detect sinkholes based on historic DNS data [39].
Though SinkMiner uses passive DNS to detect sinkholed domains, its research goalsmeasuring the effective lifetime of a C&C domain and avoiding enumerating fellow security vendors' infratructure -matched ours.
We consider RAT-Scan complimentary to SinkMiner in this regard.
We presented the results of our study of attacker and victim populations of two major RAT families, njRAT and DarkComet.
One of the challenges of studying both operators (attackers) and victims is the noisy nature of the signal.
To distinguish real operators and victims, we develop a set of techniques for testing the behavior of a suspected victim to determine if it is a genuine infection or not.
Using a similar set of tests, we identify genuine controllers, excluding sinkholes and controllers using VPNs.Using our collected data, we then report on the population of victims and controllers, their geographic relationship, and periods of activity.
Our results show that the RATs we studied are used primarily by operators and victims located in the same country, with the bulk of the population in Russia, Brazil, and Turkey.
We also found that victims remain vulnerable long after the controller abandons the campaign, presenting an opportunity for third-party intervention by sinkholing the domains.
Of import is the lack of overlap between the datasets.
This refutes our initial hypothesis that network telescope data could be used to filter most indiscriminate scanning operations from a sinkhole's dataset.
njRAT speaks a custom application-layer network protocol over TCP.
In Figure 8a, we provide a diagram of the njRAT handshake, the initial exchange of messages between the stub and controller before the command-response cycle begins.
We note that, as njRAT is a victim-initiated RAT, its stub sends the first payload of the handshake after establishing a TCP connection to the controller.
njRAT has many variants (or sub-species).
The three most commonly found in the wild are main (the original version), KilerRAT, and Coringa-RAT.
We reverse engineered the protocols of each of these three variants, and as such RATHole fully supports connections from all three.Each of the messages exchanged in the njRAT handshake from Figure 8a is now further detailed individually.
that if a sinkhole tries to brute force a stub's password, it can only try 124 times to get the correct challenge.
After that, the stub will suspend until it is either executed again or the victim machine is rebooted.2.
However, we found that multiple challenges can be attempted during a single TCP connection.
The stub's TCP buffer is 16, 384 bytes.
The stub will accept multiple challenges in a single message if they are joined by \n\r followed by 1,024 0's, and will scan the entire message for the correct challenge.
As such, trying more than 124 banners is possible, though brute-forcing the 12-character hexadecimal challenge is unrealistic.3.
The stub sends keepalive messages (KEEPALIVE encrypted in versions 4.0+, or #KEEPALIVE# in plaintext in older versions) during the handshake.
However, DarkComet 5.2 never sends keepalives during the handshake.
In Table 17, we present the detected peer types of those connections considered "Unknown".
We received connections from several other RAT families, though we cannot distinguish between legitimate victims and impersonators.
The small degree of overlap in the table indicates that some IP addresses presented multiple behaviors, possibly due to multiple-RAT infections, NAT'ed peers, or multiple scan behaviors.
We submitted honey-samples to the 21 public sandbox services in Table 18.
Services were chosen based on their popularity among malware researchers, as well as their ease of use and cost.
We only detected connections to RAT-Hole from nine of the services, indicating that their sandboxes are Internetconnected and that they did execute our honey-samples.
While we detected the majority of connections correctly as sandboxes, a handful of njRAT connections were classified as HF Scanners or Victims.
We strongly believe that these classifications are correct, and that some services either scanned RAT-Hole based on configurations extracted from our samples (the HF Scanners) or executed the samples in a non-automated analysis environment (the Victims).
This work was supported by the National Science Foundation through grants CNS-1237264, CNS-1619620, and CNS-1717062, and by gifts from Comcast, Farsight Security, and Google.
We would also like to thank the following: VirusTotal, for the invaluable Intelligence account from which we sourced malware; Richard Harper of DuckDNS, for generous access to a Duck Max account; Matthew Jonkman of EmergingThreats, for generous access to an unlimited Threat Intelligence account; and finally, our reviewers, for their invaluable feedback.
lDarkComet speaks a custom application-layer network protocol over TCP.
In Figure 8b, we provide a diagram of the DarkComet handshake.
As DarkComet is a controller-initiated RAT, the controller sends the first payload after the stub establishes a TCP to it.
In the case of DarkComet, in the first exchange the controller challenges the stub, after which it obtains information about the stub's host.
We now detail the individual messages from Figure 8b further.
Authenticity in this handhshake consists of the stub having the shared RC4 password as well as knowing the correct response to the challenge.
All handshake messages are RC4-encrypted with an operator-set key in the stub's configuration.
DarkComet Challenge MessageWe discovered the following set of unique behaviors:1.
The stub only attempts up to 124 connections to a controller, provided the controller offers an unexpected challenge banner (e.g. has the wrong RC4 key).
This means DarkComet speaks a custom application-layer network protocol over TCP.
In Figure 8b, we provide a diagram of the DarkComet handshake.
As DarkComet is a controller-initiated RAT, the controller sends the first payload after the stub establishes a TCP to it.
In the case of DarkComet, in the first exchange the controller challenges the stub, after which it obtains information about the stub's host.
We now detail the individual messages from Figure 8b further.
Authenticity in this handhshake consists of the stub having the shared RC4 password as well as knowing the correct response to the challenge.
All handshake messages are RC4-encrypted with an operator-set key in the stub's configuration.
We discovered the following set of unique behaviors:1.
The stub only attempts up to 124 connections to a controller, provided the controller offers an unexpected challenge banner (e.g. has the wrong RC4 key).
This means
