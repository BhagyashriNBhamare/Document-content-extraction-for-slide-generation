Vehicular Internet access via open WLAN access points (APs) has been demonstrated to be a feasible solution to provide opportunistic data service to moving vehicles.
Using an in situ deployment, however, such a solution does not provide worst-case performance guarantees due to unpredictable intermittent connectivity.
On the other hand, a solution that tries to cover every point in an entire road network with APs (full coverage) is not very practical due to the prohibitive deployment and operational cost.
In this paper, we introduce a new notion of intermittent coverage for mobile users, called α-coverage, which provides worst-case guarantees on the interconnection gap while using significantly fewer APs than needed for full coverage.
We propose efficient algorithms to verify whether a given deployment provides α-coverage and approximation algorithms for determining a deployment of APs that will provide α-coverage.
We compare α-coverage with opportunistic access of open WLAN APs (modeled as a random deployment) via simulations over a real-world road network and show that using the same number of APs as random deployment, α-coverage bounds the interconnection gap to a much smaller distance than that in a random deployment.
The growing popularity of media enabled handhelds such as vPods and iPods, and services such as vCast from Verizon, indicate that there is an increasing demand for wireless data services for mobile users.
Other applications of such services include in-vehicle entertainment, remote monitoring and tracking of shipments in trucks, and communication within a mobile workforce.
Although technologies such as 3G data services and upcoming WiMAX can provide coverage over large areas, they fail to provide high data rates such as in the case of Wireless LANs (WLANs).
In the shipment monitoring service used by Walmart [1], satellite connectivity from the trailers is used to update information on the status of the shipped items.
However, satellite connectivity and related communication equipments are expensive.WLANs have the potential to provide high data rate coverage to support such applications.
But, the prohibitive cost of deployment and management of a large number of WLAN access points (APs) for providing full coverage, calls for smarter, more scalable solutions that can leverage intermittent connectivity provided by WLAN hotspots.
Evaluation of wireless data access by mobile users using in situ Wi-Fi networks [4]- [6], [10], and in various controlled environments [4], [10], [11] have confirmed the feasibility of WiFi-based vehicular Internet access.
A detailed review of related work in this area is given in [13].
Solutions based on intermittent connectivity of WLANs can provide opportunistic services without any worst case service guarantees.
In busy urban areas mobile users can hope to connect with APs more frequently than in the suburban areas, but the exact frequency may drastically vary from region to region.
Thus, a user lying in a coverage hole is unable to estimate the time to the next connection.
In order to address such coverage uncertainties, we introduce a new notion of intermittent coverage for mobile users, called α-coverage, and study how such coverage can be attained by systematic deployment of additional APs to create an economically scalable infrastructure.Informally, a deployment of APs provides α-coverage to a road network, if any simple path of length α on the road network meets with at least one AP.
If the expected service from an AP is known, then the cumulative service received by a mobile user over a certain path can be estimated.
For a given road network, we ask the following two questions: 1) does a given deployment provide α-coverage?
2) if not, how to deploy a minimum number of additional APs to ensure α-coverage?
This paper makes the following contributions.
• We present the first notion of coverage for mobile users with intermittent connectivity called α-coverage.
We define three coverage metrics that can be used in various scenarios.
• We present efficient algorithms for coverage verification, and factor O(log n) approximation algorithms for determining both a new and an incremental deployment.
• We evaluate the performance of random deployment and our solutions for real road networks [2] and show that our proposed algorithms perform significantly better than random deployment.
The framework and solutions presented in this paper are immediately usable by various service provider companies for enabling WLAN based services for mobile users.
This is because we provide a solution for planning incremental deployment, so service providers can install few APs for large values of α to begin with, and over time add new APs to gradually bring down the value of α.
In addition to providing a low cost solution for supporting various existing applications mentioned earlier, making worst-case service guarantee may enable new applications based on intermittent connectivity.
We model a road network R as a connected undirected geometric graph G R , where vertices represent the points where the road centerline segments and the road intersections meet, and edges represent the road centerline segments connecting the road intersections.
For a curved road segment, we introduce artificial road intersections, so that each edge represents a straight line segment.
Let V GR and E GR denote the vertex set and edge set, respectively.
Each edge e has a length, denoted as |e|, which is the length of the corresponding road segment.
This model has been used by some publicly available road network databases, such as [2].
Although we are assuming an undirected graph model, most of our results can be extended to directed graphs [13].
A path fst of length 4 is highlighted, where s is the middle point of (v2, v3) and t is the middle point of (v6, v7).
dist(s, t) = 3.
An optimal deployment that provides 2-coverage is achieved by placing APs at vertices v2, v5, v7, and point v9, the middle point of (v1, v6).
v v v v v v v 1 v 2 v 3 v 1 v 2 v 3 s v 4 v 5 v 4 v 5 v 9 t (a) v 6 v 7 v 8 (b) v 6 v 7 v 8 tFor a point p on an edge (u, v) ∈ E GR , if p is not a vertex, we can make it a vertex by adding p to V GR and by subdividing edge (u, v) into two edges (p, u) and (p, v) in E GR , with |(p, u)| and |(p, v)| equal to the length of the corresponding road segments starting at p.
The resulting graph is denoted as G R ∨ {p}.
For instance, by inserting the middle point of edge (v 1 , v 6 ) to the graph in Figure 1(a), we can get a graph where all the edges have the same length as shown in Figure 1(b).
G R ∨ {p} = G R if p is a vertex in G R .
Consider a set of APs deployed at roadside.
To achieve the maximum possible coverage, it is reasonable to assume that the APs are deployed as close to the road centerline as possible.
Therefore, each AP is represented by the point in G R closest to it.
The feasibility of such modeling is further discussed in [13].
Using the operation just defined, we can make these points as vertices of the graph when needed.
The trajectory of a moving vehicle is modeled as a set of consecutive general paths on the graph defined as follows.Definition II.1.
A general path on a graph: A general path f ab in a graph G R between a and b, both of which are points on some edges of G R , is a (simple) path in G ∨ {a, b}.
The length of f ab , denoted as |f ab |, equals to the sum of the lengths of the edges composing the path in G R ∨ {a, b}.
A general path will be simply called a path when there is no ambiguity.
For instance, Figure 1(b) highlights a path of length 4.
We are now ready to formally define α-coverage.
Definition II.2.
α-coverage: A deployment of APs provides α-coverage to R, if every path f ab in G R with |f ab | ≥ α is covered by at least one AP.For instance, Figure 1(b) shows a deployment that provides α-coverage for α = 2.
Although α-coverage closely models our intuition, it is impossible to determine in polynomial time whether a deployment provides α-coverage, unless P=NP.
To see this, suppose no APs are deployed in a given graph where each edge has unit length and α = |V | − 1, then verifying whether this graph is α-covered is equivalent to determining whether there is a Hamiltonian path in the graph, and the latter is NP-complete even for planar graphs [9].
Since even verifying whether a graph is α-covered is NP-complete, we propose two new metrics to approximate α-coverage.
First, we define the following terms:Definition II.3.
Distance on a graph: For any two points a and b in graph G R , the distance between them, denoted as dist (a, b), is the length of the shortest path between a and b in G R ∨ {a, b}.
Network Coverage of distance α (α N -coverage for short) to R, if every path f ab in G R with dist(a, b) ≥ α is covered by at least one AP.Note that if a deployment provides α-coverage, it also provides α N -coverage.
The converse is not true.
For instance, the deployment in Figure 1(b) also provides α N -coverage when α = 2.
Now suppose α = 5, then since the diameter of the graph is 4, the distance between any pair of points in the graph is at most 4, α N -coverage is satisfied without deploying any APs.
However, an empty deployment does not provide α-coverage since the longest path in the graph has length 8.
Given G R -the graph model of a road network, A 0 -a set of points in G R that models the APs previously deployed, we ask the following two questions -1) determine if the deployment provides a desired coverage, and if not 2) find a minimum set of points A in G R so that when new APs are deployed around these points, A 0 ∪ A provides the desired coverage.
Notice that the second problem addresses both the new deployment and incremental deployment.
We refer to this optimization problem as α N -Cover.
We show in Section III that it can be verified in polynomial time whether a deployment provides α N -coverage.
However, the decision version of α N -Cover is NP-complete as proved in [13].
We provide a O(log n) factor approximation algorithm in Section IV, where n is the number of vertices in the graph.Notice that, α N -coverage requires that all paths between two points that are α distance away are covered, and the number of such paths could be exponential.
In reality, however, there are a small subset of paths most frequently traveled between any two places, which can be learned from historical traffic data [8].
For instance, people usually follow close to shortest path from their source to the destination.
Our third metric, α P -coverage, captures this observation.
Although determining a deployment to achieve α P -coverage is still NPComplete [13], we are able to find a more efficient approximation algorithm for it (see Section IV).
Let F ab denote the set of paths between a and b most frequently traveled, where |F ab | is bounded by a small constant.Definition II.5.
α P -coverage: A deployment of APs provides Path Coverage of distance α (α P -coverage for short) to R, if every path f ab in F ab with dist(a, b) ≥ α is covered by at least one AP.To simplify the presentation, we assume F ab is the set of shortest paths.
The solution can be easily extended to arbitrary F ab [13].
Also note that a deployment that provides α Ncoverage also provides α P -coverage, but not vice versa.III.
α-COVERAGE VERIFICATION In this section, the following problem is considered: given a graph G R , a set of points A 0 in G R , and α, does A 0 provide α N -coverage or α P -coverage to R?
First, a new graph G(V, E) = G R ∨ A 0 is obtained.
That is, we make each point in A 0 a vertex.
Each vertex v of G is then assigned a weight, denoted as w(v), which equals to 1 if v represents an AP, and is 0 otherwise.
We then give polynomial time algorithms for verifying α N and α P -coverage.
To simplify the discussion, we make the following assumption in the rest of the paper:For any pair of vertices (u, v) of G, dist(u, v) 񮽙 = α.If a given α does not satisfy this assumption, we can choose a small 񮽙 such that α + 񮽙 satisfies this condition.
By making 񮽙 small enough, (α + 񮽙)-coverage can be viewed as equivalent to α-coverage in any real settings.
We use the term α-pair to refer to a pair of points that are a distance of α apart.
We observe that a deployment provides α N -coverage iff the coverage distance of each α-pair is at least 1.
Notice that, according to the assumption made above, in each α-pair, at least one point is not a vertex of G. By this definition, all the α-pairs in the same α N -equivalent class have the same coverage distance.
Furthermore, the number of equivalent classes is bounded by O(|E| 2 ) since for any pair of edges, there is at most one equivalent class.
Therefore, once all the equivalent classes are identified, α N -coverage can be determined by checking the coverage distance of α-pairs in each class one by one, which can be done as follows.
First, we note that the coverage distance of every pair of vertices in G can be computed by extending the Floyd's all-pairs shortest paths algorithm [13].
Suppose a is on edge (u 1 , u 2 ) and b is on edge (v 1 , v 2 ) and a and b is an α-pair, then c(a, b) = min(c(u 1 , v 1 ), c(u 1 , v 2 ), c(u 2 , v 1 ), c(u 2 , v 2 )).
For instance, in Figure 1, the core of f st is the path (v 3 , v 5 , v 4 , v 7 ).
Definition III.5.
The core of a set of paths: Let F be a set of paths.
The core of F is a set of paths, where each of them is the core of a path in F .
A polynomial time algorithm for verifying α P -coverage can then be derived by noticing that 1) if (a, b) and (c, d) are equivalent α P -pairs, then all the shortest paths between a and b are covered iff all the shortest paths between c and d are covered; 2) each equivalent class can be verified in polynomial time since there are only constant number of paths in the core shared by all the pairs in the same class; 3) the number of equivalent classes is bounded by O(|E| 2 ).
In this section, we present approximation algorithms for α N -Cover and α P -Cover.
Formally, given graph G R and a set of point A 0 in G R , and α, find a set of points A such that A 0 ∪ A provides α N or α P -coverage to R.
We would like to minimize |A|.
Let G = G R ∨ A 0 .
For any edge e of G, if |e| > α, e is chopped into 񮽙|e|/α񮽙 pieces of equal length.
In the following discussion, we will assume that the length of any edge of G is no more than α.We present two polynomial time algorithms in this section.
The first algorithm reduces α N -coverage to the vertex multicut problem [7] and the second one reduces α P -coverage to the set cover problem [12].
Both algorithms have an O(log n) approximation factor, where n is the number of vertices in G R .
It should be noted that for a given road network, the first algorithm is much more time consuming than the second one, which is expected since α N -coverage provides higher coverage quality than α P -coverage.Given α, let OPT denote the minimum |A| in any deployment that provides α N -coverage where APs can be deployed at anywhere in G, and OPT 񮽙 denote the minimum |A| for providing α N -coverage when APs can only be deployed at the vertices of G. Both of our algorithms use only the vertices of G to construct A, which avoids an infinite search space so that approximation solutions can be found.
The following lemma states that such a deployment decision doubles the number of APs used in the worst case.
See [13] for a proof.Lemma IV.1.
OPT ≤ OPT 񮽙 ≤ 2 × OPT.The same result also holds for α P -coverage.
Notice that, an important advantage of restricting APs to vertices is that it increases the chance of data access since vehicles may stop or slow down around road intersections.
Figure 2 gives an example where using only vertices gives a suboptimal solution.
In the figure, |A 0 | = 0, G is a single path with n vertices, where each edge has unit length, and α ∈ (1, 2).
To achieve α N -coverage, an optimal solution is a set of points uniformly spaced with α distance along the path.
On the other hand, if only the vertices are allowed to be used, then all the vertices except the two ends of the path have to be used to ensure α N -coverage.
Therefore, OPT = 񮽙(n − 1)/α񮽙 − 1, OPT 񮽙 = n − 2, and lim n→∞ OPT 񮽙 /OPT = α.
In particular, when n = 4, and α ∈ [1.5, 2), a minimum cover contains only one point at the center of the path, while two vertices are needed to ensure the coverage.񮽙 񮽙 񮽙
v 1 v 2 v 3 v 4 v 5 v n (a) 1 2 3 4 5 n (b) v 1 v 2 v 3 v 4 v 5 v n (b) Assuming only the vertices of G are used to construct A, the α N -Cover optimization problem can be reduced to the minimum vertex multicut problem [7] defined as follows.
Given a connected undirected graph G(V, E) with positive costs on its vertices, let {(s 1 , t 1 ), ...(s k , t k )} be a set of pairs of vertices, named as terminals, where each pair is distinct, but vertices in different pairs are not required to be distinct.
A vertex multicut is a set of non-terminal vertices whose removal separates each pair.
The problem is to find a vertex multicut of minimum cost.
We assume that all vertices have the same cost in this section.
The main steps of our algorithm are summarized in Algorithm IV.1.
Input: G, the graph model of a road network R, A0, the set of vertices of G that represents APs previously deployed, and α 1: if A 0 provides α N -coverage to G then return; 2: T ← ∅; 3: for each pair of edges (e 1 , e 2 ) of G do 4: if there are points a on e 1 and b on e 2 such that dist(a, b) = α and c(a, b) = 0 then 5:T ← T ∪ (m 1 , m 2 );񮽙 mi: the midpoint of ei 6: return GVY(G, T, A 0 ); 񮽙 Apply the GVY algorithm [12] to find a vertex multicut with A0 as a subset that separates each pair of midpoints in T .
For each pair of edges (e 1 , e 2 ), the algorithm determines whether there are points a in e 1 and b in e 2 such that dist(a, b) = α, which can be done in constant time [13].
If there is such a pair and the coverage distance of the pair is 0, the middle points of e 1 and e 2 are inserted to T .
The algorithm then resorts to the well known GVY algorithm [12] to find a minimum vertex multicut with A 0 as a subset that separates each pair of midpoints inserted.The algorithm stated in [12] actually solves the minimum edge multicut problem defined similarly and achieves an O(log k) approximation factor where k is the number of pairs.
However, it can be extended to the vertex version while preserving the approximation factor [7].
In addition, the standard GVY algorithm does not consider the case where a set of vertices are forbidden to be chosen as cut nodes.
This can be easily solved as shown in [13].
Since the GVY algorithm has a factor O(log k) where k = O(|E| 2 ), considering Lemma IV.1, Algorithm IV.1 has an O(log n) factor.
Assuming only the vertices of G are used to construct A, the α P -coverage optimization problem can be reduced to the set covering optimization problem [12] as follows:Algorithm IV.2 α P -Cover via Set Cover Input: G, A0, and α (same as in Algorithm IV.1) 1: if A 0 provides α P -coverage to G then return; 2: U ← the union of cores with respect to all α P -pairs except those have been covered by A 0 ; 3: S ← {S v : v ∈ V \A 0 } where S v ⊂ U is the set of paths covered by vertex v 񮽙 ∈ A 0 ; 4: Output a subcollection of S of minimum size that covers all the elements of U;The above algorithm also applies to α N -Cover, where set U has exponential size.
For α P -Cover, |U| = O(|E| 2 ).
Since there is a factor O(log |U|) algorithm for set cover [12], this algorithm has an O(log n) factor.
Our simulations on based the road network of the Franklin county in State of Ohio.
We obtain the road network data from the 2007 Tiger/Line shapefiles [2], where each road segment is a polyline that contains two intersections and zero or more interior shape points.
We ignore the shape points and connect the two ends of a road segment by a straight line to reduce the size of the graph.
We then map the road network to a 2D plane by Mercator projection.
The simulations are carried over a 4000m × 4000m region around the center of the Franklin county including about 1000 intersections and 1300 road segments, and the graph diameter is about 7300m.
A restricted random waypoint mobility model [3] is used to generate ns-2 movement files, with an additional constraint that the source and destination (both are road intersections) of each move must have a distance at least α since we are interested in providing performance guarantee to these moves.
The speed of a mobile node is set to the speed limit of the segment where the node is moving on with a leeway of 5 miles/hour.
The average pause time at each destination is 5 sec. 10 movement scenarios are generated, each of them consists of 5 mobile nodes moving independently for 1 hour.
We compare α P -coverage with three random deployment schemes: rand-1) each AP is deployed on a randomly selected vertex of G; rand-2) each AP is deployed on a randomly selected point of a randomly selected edge of G; rand-3) the region considered is first divided into 50m × 50m squares; each AP is then deployed at the center of a randomly selected square.
At most one AP can be deployed at a vertex or within a square.
For a given α, an α P -coverage is first computed.
10 scenarios using the same number of APs as the α P -coverage does are then generated for each of the three random schemes.
The transmission range of each AP is 100m.
Figure 3(left) shows the cdf of the interconnection time of α P -coverage and the three random schemes, where α equals to 3000m and the speed limit is 55 miles/hour.
21 APs are used in all the deployments.
The data is accumulated over all the five mobile nodes and 10 movement patterns.
The maximum gap for α P -coverage is about 214 sec, while that for a random deployment can be as large as 1866 sec for rand-1, 1446 sec for rand-2, and 2210 sec for rand-3.
The fact that rand-3 performs worst verifies that APs should be deployed as close to road centerlines as possible to achieve the best coverage.
Notice that, due to the movement pattern we use, the maximum gap for α P -coverage is larger than α divided by the speed limit (≈ 122 sec), since an interconnection gap may span two adjacent moves.
Figure 3(right) shows the standard deviation of the interconnection time under various α and the constant speed limit, where the number of APs used for α = 2500m, 3000m, 3500m is 28, 21, and 15, respectively.
We can clearly see that the standard deviation for α P -coverage is much smaller than that for a random deployment.
The results for variable speed limit are similar to the constant speed limit case and are omitted.
In this paper, we propose α-coverage, a new notion of intermittent coverage for mobile users that guarantees the interconnection gap of vehicular Internet access.
We provide algorithms to verify whether a given deployment provides α-coverage and if not, to find the optimal places to deploy new APs so that α-coverage can be ensured.
Both the networking protocols and applications may explore such guarantees to optimize their behaviors.
Furthermore, α-coverage is the first step towards a scalable deployment that guarantees the worst case data service that a mobile user can expect.
This material is based upon work supported by NSF grants CNS-0546630 (CAREER Award), CNS-0403342, CNS-0721983, CCF-0728928, NIH Grant U01DA023812 from National Institute for Drug Abuse (NIDA), and Fedex Institute of Technology (FIT) at the University of Memphis.
