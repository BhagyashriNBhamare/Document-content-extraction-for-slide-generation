In the attempt to bring modern broadband Internet features to traditional broadcast television, the Digital Video Broadcasting (DVB) consortium introduced a specification called Hybrid Broadcast-Broadband Television (HbbTV), which allows broadcast streams to include embedded HTML content which is rendered by the television.
This system is already in very wide deployment in Europe, and has recently been adopted as part of the American digital television standard.
Our analyses of the specifications, and of real systems implementing them, show that the broadband and broadcast systems are combined insecurely.
This enables a large-scale exploitation technique with a localized geographical footprint based on radio frequency (RF) injection , which requires a minimal budget and infrastructure and is remarkably difficult to detect.
Despite our responsible disclosure to the standards body, our attack was viewed as too expensive and with limited pay-off to the attackers.
In this paper, we present the attack methodology and a number of follow-on exploitation techniques that provide significant flexibility to attackers.
Furthermore, we demonstrate that the technical complexity and required budget are low, making this attack practical and realistic , especially in areas with high population density-in a dense urban area, an attacker with a budget of about $450 can target more than 20,000 devices in a single attack.
A unique aspect of this attack is that, in contrast to most In-ternet of Things/Cyber-Physical System threat scenarios where the attack comes from the data network side and affects the physical world, our attack uses the physical broadcast network to attack the data network.
The battle for the living room is in full swing.
After being used for decades as purely passive terminals, our television sets have become the subject of intense, competitive attention.
Technology companies wish to use the Internet to create a viewing experience which is more engaging, interactive, and personalized, and in turn maximize their ad revenue by offering advertising content which is better targeted at the user.
As the result of this trend, most US and European households with broadband Internet access now have at least one television set which is also connected to the Internet [37,27], either directly or through a set-top box or console.
In technical terms, a device which has both a broadcast TV connection and a broadband Internet connection is called a hybrid terminal.
The specification that defines how to create and interact with "hybrid content" (which combines both broadcast and broadband elements) is called Hybrid Broadcast-Broadband Television, or HbbTV.At its core, HbbTV combines broadcast streams with web technologies.
The broadcast channel, augmented with the notion of separate digital streams, allows the transmission of distinct yet intertwined types of content that enable rich-interaction experience to the user.
However, this enhanced interaction introduces new vulnerabilities to what was until now a conceptually simple network (TV broadcasting) and media-presentation device.This paper examines the security impact of emergent properties at the intersection of digital video broadcasting and web technologies.
The work presented here is based both on analysis of the HbbTV standard and on experimentation with actual DVB hardware.
The attacks were crafted using low-cost hardware devices using opensource software, and they are extremely easy to replicate.
While the impact of many of these attacks is exacerbated by poor implementation choices, for most attacks the core of the problem lies with the overall architecture, as defined in the specification itself.
Thus, our findings are significantly broader than the specific devices that we used in our analysis; indeed, any future device that follows these specifications will contain these same vulnerabilities.
Exploiting these vulnerabilities, an attacker can cause many thousands of devices to interact with any website, even using any credentials stored in the TV sets for accessing services such as social networks, webmail, or even e-commerce sites.
This capability can be leveraged to perform "traditional" attack activities: perform clickfraud, insert comment or voting spam, conduct reconnaissance (within each home network or against a remote target), launch local or remote denial of service attacks, and compromise other devices within the home network or even elsewhere.
Beyond these, the attacker can also control the content displayed on the TV, to craft phishing and other social engineering attacks that would be extremely convincing, especially for TV viewers who are educated to (and have no reason not to) trust their screens.
Finally, the attacker can use the broadcast medium to effectively distribute exploits that completely take over the TV set's hardware.
Most of these attacks require no user knowledge or consent -the victims are only required to keep watching their televisions.
The unique physical characteristics of the broadcast TV medium allow these attacks to be easily amplified to target tens of thousands of users, while remaining completely undetectable.
Remarkably, the attacker does not even require a source IP address.Today's smart TVs are already very complex devices which include multiple sensors such as cameras and microphones and store considerable amounts of personal data.
Equipment manufacturers are busy adding more hardware and software capabilities to these devices, with the aim of turning them into the center of the user's digital life.
Obviously, as smart TVs become more capable, and as users use them for more sensitive applications, the impact of the attacks described here will only grow.One interesting, perhaps unique aspect of the problem space we are examining here is the reversal of attack source and destination domains: in typical attacks against Internet-connected physical systems, large-scale device compromise through the data network can lead to physical exploitation with a large (perhaps global) geographical footprint.
With HbbTV, a physical attack with a relatively large geographical footprint can lead to largescale data network compromise, at least in areas with high population density.
The essence of the problem we address lies in that the hybrid TV now connects the broadcast domain, which has no authentication or protection infrastructure, to the broadband Internet domain.
This allows the attacker to craft a set of attacks which uniquely do not attack the TV itself, but instead attack through the TV.
Our work addresses a security risk in a specification which is already in very wide use in Europe, and is on the verge of expanding to the US and to the rest of the world.
We thus made an effort to responsibly disclose our work to the relevant standards bodies.
In December 2013, we provided a description of our RF-based attack, together with a video recording of an attack in progress, to the HbbTV Technical Group.
In January 2014 we were informed that the HbbTV Technical Group discussed our disclosure, but did not consider the impact or severity of these attacks sufficient to merit changes to the standard.
There were two main criticisms raised by the HbbTV Technical Group.
The first criticism was that it would be very difficult for the attacker to reach a large number of systems; the second was that, even when an attack is carried out, a Smart TV has a very limited attack surface, so attacks would not be cost-effective.
We explicitly structured this paper to address both of these criticisms -we quantitively demonstrate how a low cost attack can reach thousands of systems, and we show how attacks can cause a considerable amount of damage and provide a real financial gain for the attacker.Document Structure: The rest of the document is arranged in the following manner: Section 2 provides a high-level overview of digital video broadcasting.
In Section 3, we describe the fundamental weaknesses of the protocol which enable our attack and propose an attack setup designed to exploit them.
Next, in Section 4 we describe a series of possible attacks based on these weaknesses.
We continue in Section 5, where we quantitatively analyze the impact potential of our attack, based on the power and propagation characteristics of the attack setup and on actual demographic information.
In Section 6 we experimentally verify several of our proposed attacks.
In Section 7 we analyze the financial impact our attacks and evaluate several possible countermeasures.
Finally, we conclude in Section 8.
The vision of an Internet-powered living room brings to mind products such as on-demand video streaming or cloud-delivered gaming.
However, the masters of the living room are still the incumbent operators of existing television broadcast networks, who broadcast their content to billions of viewers worldwide.
In order to compete with the new generation of entertainment content, the operators of these broadcast networks are also looking for ways to add Internet-based functionality to their traditional content.
For example, a broadcast television channel might use Internet functionality to ask its viewers to participate in an online poll, or to vote for a candidate in a game show.
The broadcast channel might also invite the viewer to learn more about an advertised product using interactive web content, or even replace regular broadcast advertisements with custom-delivered Internet ads personalized to the particular user.
In this form of content delivery enhances traditional broadcast content with an interactive HTML overlay, rendered by the TV together with the normal broadcasted channel.
This content is commonly called "Red Button Content", since pressing the red button on the TV remote is (by convention) the standard way of interacting with it.The specification defining this behavior is called Hybrid Broadcast-Broadband Television, or HbbTV, and it is maintained by the European standards body ETSI [10].
The current generation of the specification, version 1.2.1, is enjoying very rapid adoption and is in active deployment or in advanced stages of testing in most of Europe.
In December 2013, the Advanced Television Systems Committee (ATSC), which defines the digital video standards in the US, Canada, South Korea and several other countries, published a candidate standard for hybrid TV in America [6].
This candidate standard shares much of its structure with the European HbbTV standard, and is specifically equivalent to the European standard with respect to the attacks described in this paper.HbbTV is designed to work on top of a standard Digital Video Broadcasting (DVB) system.
While DVB can be delivered over cable, satellite or standard terrestrial signal, each with its unique radio frequency (RF) modulation and transmission scheme, the underlying digital stream is essentially the same for all delivery methods.
This stream takes the form of an MPEG-2 Transport Stream [23], which multiplexes together multiple data streams named MPEG-2 Elementary Streams.
Each elementary stream carries an individual element of a television channel, such as video, audio or subtitles.
Special metadata streams, which the specification refers to as information tables, are then used to group together multiple elementary streams into an individual TV channel and provide additional information about the channel such as its name, its language and the list of current and upcoming programs.
A single radio physical frequency may thus carry multiple channels.
The HbbTV specification extends standard DVB by introducing additional metadata formats which mix broadband Internet content into the digital television channel.
While the specification proposes multiple ways in which web content can be used in a TV, this article will focus on the most common form of content, autostart broadcastdependent applications.
This form of content starts running automatically when the user tunes into a particular TV channel, and terminates when the user moves to another channel.
To create an autostart broadcast-dependent application, the broadcaster includes in the MPEG transport stream an additional application information table (AIT) describing the broadband-based application, then references this table in the program mapping table (PMT) describing a certain TV channel.
The HbbTV specification defines two possible ways of providing the application's actual web content (i.e., HTML pages, images, and scripts).
One way is to have the AIT include a URL that points to a web server hosting the application.
Another possible way is to create an additional data stream which includes the HbbTV application's HTML files, deliver this additional elementary stream over the broadcast transport, and finally have the AIT point to this data stream.
The way in which the latter embedding method was realized leads to a serious security problem, as we discuss later.Regardless of the delivery method, Internet content is rendered by the TV using a specially-enhanced web runtime, described in the HbbTV standard as a Data Execution Environment (DAE) [14].
In addition to the document object model (DOM) elements available to normal HTML environments such as XmlHttpRequest, the DAE exposes additional DOM elements which are specific to the television world (for example, information about the running program and the current channel).
The DAE also allows programatic access to the live TV broadcast window.
Thus, it is possible for an HbbTV application to render content on top of the TV broadcast, resize the broadcast window or even completely replace the broadcasted content with its own content.
On the other extreme, it is also possible for an HbbTV application to run without displaying any indication to the user.
Practically speaking, most "benign" applications typically display a small overlay inviting the user to press the Red Button, then disappear to run transparently in the background.
Smart TVs are built with some consideration of security, since they are often used to display content protected by digital rights management (DRM) schemes.
Indeed, the HbbTV specification dedicates an entire chapter to security, but the discussion is mainly focused on protecting DRM content and not on other aspects of security.
To that effect, the HbbTV specification describes trusted and untrusted applications, and restricts "sensitive functions of the terminal" only to trusted applications.
Examples of such "sensitive functions" include downloading and playing back DRM-protected downloaded content (actions which may incur a cost on the viewer), as well as configuring and activating the terminal's scheduled recording (time-shifting) capabilities.The attacks described in this work make use of capabilities which are available both to trusted and untrusted applications.
None of the attacks described in this work are restricted in any way by HbbTV's security mechanisms.Furthermore, since the specification does not strictly define how an application can become trusted, it might be possible to inject an attack into a trusted application without changing its trusted status.
Several unique properties of HbbTV make it potentially prone to attack.
These security weaknesses can all be considered emergent properties, which exist on the boundary between the broadband and broadcast systems, and stem from the different expectations and guarantees which exist in each system.First and foremost, HbbTV applies a very problematic security model to web content embedded into the broadcast data stream.
This is, in our opinion, the most serious security flaw in HbbTV, and one which has not been discussed in any previous work.
One of the cornerstones of modern web security is the Same-Origin Policy [1], which essentially serves to isolate content retrieved from different origins and prevent content from one web site from interfering with the operation of another web site.
Under the same origin policy, each piece of web content is provided with an origin consisting of a tuple of scheme, host and port, and two resources are limited in their communications unless they share the same origin.When an HbbTV application is downloaded from the Internet via URL, the origin of the web content is clearly defined by the URL, appropriately isolating HbbTV applications to their own domain and preventing them from interfering with Internet at large.
However, when the content is embedded in the broadcast data stream it is not linked to any web server and, as such, has no implicitly defined origin.
The HbbTV specification suggests [10, S 6.3] that in this case the broadcast stream should explicitly define its own web origin by setting the simple_application_boundary_descriptor property in the AIT to any desired domain name.The security implications of this design decision are staggering.
Allowing the broadcast provider control over the purported origin of the embedded web content effectively lets a malicious broadcaster inject any script of his choice into any website of his choice.An illustrative example of such an attack is presented in Figure 1.
In this attack, which we dis- cuss more extensively in Subsection 4.2, the adversary delivers a malicious Javascript payload over HbbTV, and furthermore indicates by the simple_application_boundary_descriptor property in the AIT that this payload's web origin is a rating site.
Next, the attacker has the TV render a simple HTML page which embeds the real rating site's home page (downloaded from the broadband Internet), as well as this script, in a zero-sized frame.
The malicious script now has full programmatic access to the content delivered by the rating site, since it is running within the same web origin.
To make matters worse, if the user has previously logged on to the site, this attack allows the attacker to fully interact with the website on the user's behalf.
While the innocent viewers enjoy their normal television content, the malicious application causes their infected TVs to interact with the rating site over the Internet to leave favourable reviews for the attacker's restaurant or to harrass his competitors.
We now describe how an attacker can use the vulnerability described above to launch a series of large-scale attacks.
Our setup targets digital terrestrial television (DTT), which is the most common way in which television is received in many parts of the world [11].
In Subsection 7.2 we discuss how this attack can also be applied to other delivery methods such as cable or satellite.Our attack works by creating a television broadcast which includes, together with the normal audio and video streams, a malicious HbbTV application.
To maximize the effectiveness of our attack, we would like this as many users as possible to tune into this broadcast.
The best way to do so is to carry out a form of man-in-the-middle attack, in which the attacker transparently modifies a popular TV channel to include a malicious payload.Our attack module follows the general design illustrated in Figure 2.
Following the notation of Subsection 2.1, the attacker adds into the intercepted stream a new Application Information Table, as well as a data stream containing a malicious HbbTV application, which the new AIT points to.
The attacker then modifies one or more existing Program Mapping Tables to reference the new malicious application, while leaving the audio and video contents of the channel unmodified.
It is important to note that the attacker does not have any form of control or cooperation with the radio tower itself.The physical attack setup required by the attacker is illustrated in Figure 3.
The attacker's uses a receive antenna connected to a DVB tuner to intercept a legitimate television signal, modifies the content of the DVB stream to add its malicious payload, and finally uses a DVB modulator connected through a power amplifier to a transmit antenna to re-transmit the modified signal to the TV under attack using the same frequency as the original broadcast.
The TV under attack is, in turn, connected to the Internet.Our attack works because in a certain geographic area around the attacker the malicious modified signal will be stronger than the original signal transmitted by the tower.
This will cause any televisions in the area to immediately fall victim to the attacks described below.
We note that since in digital broadcasting multiple TV channels are sent from the radio tower using the same radio frequency, a single attack setup is capable of injecting attack code into several channels simultaneously.
The characteristics and estimated cost of each of the components in Figure 3 are presented below:Receive antenna and DVB tuner -a USB-powered DVB tuner and a short passive antenna can be purchased online for about $15.
The open-source VLC media player [33] is capable of interfacing with many of these tuners and sending the demodulated stream extracted from an entire RF channel to a file or a network socket.Content modification -the demodulated stream is modified to contain a malicious application (either as a URL, or as a full application delivered via data stream), and the PMTs of all TV channels in the demodulated stream are modified to auto-start this application as soon as the user tunes into the channel.
Since the video and audio streams in the channel are forwarded without any modification, this operation is not particularly computation intensive, and any low-cost computer with USB 2.0 support can be used for this purpose.
A software suite named Avalpa OpenCaster [8] provides a set of opensource command-line tools which can be used to modify a multiplexed DVB stream in real time.DVB modulator -this hardware component takes a multiplexed MPEG stream and converts it into an RF signal suitable for transmission.
While these devices were once massive and expensive, modern DVB modulators are remarkably small and easy to use -a full-featured USBpowered modulator which can interface with OpenCaster can be purchased online for less than $200.
Power amplifier and transmit antenna -the attacker needs to create a signal that is stronger than the original TV tower's signal and transmit it toward the target televisions.
An attacker with a higher transmit power can affect more television sets, but a high-power setup is generally less portable, giving the attacker a higher probability of being detected and arrested.
In Section 5 we formally analyze the power requirements of the attacker and show that, under the right conditions, a remarkably high amount of television sets can be affected with a moderate-to-low powered amplifier.
In traditional Internet-borne attacks, it is always assumed that the attacker is himself present on the Internet before he can deliver a malicious payload to his victims.
The attacker's IP and DNS entries can then be used by intrusion protection services and law enforcement agencies to protect against the attack as it occurs, and to trace and prosecute its perpetrators after it has concluded.
In contrast, our attacker needs no such infrastructure to deliver its malicious payload.
It is surprisingly simple and inexpensive to build a digital terrestrial television (DTT) transmitter and use it to reach thousands of potential hosts.
After the attack concludes, the attacker leaves no trace of his activities in the form of IP or DNS transactions.Operating an unlicensed TV transmitter is illegal in many countries.
Law enforcement agencies capture these illegal transmitters by triangulation methods, which involve sending multiple car-mounted receivers to the vicinity of the attack, then using the differences in received signal strengths between receivers to locate the rogue transmitter.
A sensitive receiver can also "fingerprint" the rogue transmitter's RF envelope and help recognize it in the future.
While this defense mechanism can potentially trace our radio attacker, mobile triangulation is a reactive defense step, which requires a considerable expense of time and resources from the defender's side.
Considering that the attack we describe has a very limited geographical signature, operates for a very limited time (potentially only a few minutes), and causes no visible adverse effects to the user, it is highly unlikely that the attacker will be caught by these methods.
HbbTV content is not required by standard or convention to offer any visual indication that it is running.
Depending on the choice of the application creator, HbbTV content can run invisibly in the background, side by side with the broadcast content, or even take over part or all the user's entire screen.
At one extreme, this makes it possible for HbbTV applications to run completely in the background without the knowledge or consent of the user.
In [21] Herfurt discovered that many German broadcasters are using this functionality of HbbTV to invisibly track the viewing habits of users by periodically "phoning home" while the TV is tuned to a particular channel.
At the other extreme, it is possible for an HbbTV application to take over part or all of the user's screen without his knowledge.
Herfurt used this functionality to demonstrate a proof-ofconcept application that replaces the news ticker of a German news channel with headlines from a satire website.Another related weakness is the weak control the user has over the life-cycle of HbbTV applications.
As described in Subsection 2.1, an application can start running automatically as soon as the user starts viewing a certain channel.
More troubling is the fact that, once an HbbTV application has started running, there is no standard way of stopping it, short of switching a channel, turning off the television, or completely disabling HbbTV support.
The attacks proposed in this Section are based upon our analysis of the HbbTV standards, as well as upon personal communications with the HbbTV technical group, who have confirmed that our attacks are possible given the current specification.
Some of these attacks described below can be applied even to perfectly secure Smart TV implementations with no known exploits; Other attacks allow the attacker to transform local vulnerabilities on the Smart TV into automatic, large-scale distributed exploits.
With the exception of the attack described in Subsection 4.5, all of these attacks take place without the user's knowledge or consent, requiring the user to do nothing more than keep his TV turned on and tuned to his favourite channel.
To carry out this attack, the attacker creates a simple Red Button application which repeatedly accesses a target website with high frequency, using a simple mechanism such as a zero-sized iframe element or through repetitive calls to XmlHttpRequest.
All TVs tuned to the infected channel will immediately start running the application, potentially overwhelming the target website.
Due to the design of the HbbTV specification, the owners of TVs who are carrying out this attack have no knowledge that they are participating in this attack, nor do they have any way of stopping it.This attack is the simplest abuse of the HbbTV protocol, and was also considered by [21], albeit in a different attacker model.
As scary as this attack sounds, we note in Subsection 7.1 that there are far less expensive and risky ways of DDoSing a website.
This attack is similar to the previous attack, but this time the infected users do not blindly access the site under attack, but instead attempt to interact with it in a meaningful manner.
For example, such an attack could skew the results of an online poll or competition, "spam" a forum with comments to the point of unreadability, falsely promote another website by "liking" or "upvoting" it, or falsely obtain ad revenue by programmatically clicking on an ad (a.k.a. "click fraud").
This attack venue is especially painful for the designers of HbbTV, since the entire point of the specification is to allow this type of interaction between TV viewers and websites.This attack is a variant of traditional cross-site request forgery (CSRF) attacks, which are well-known to the security community [2].
However, one unique advantage of the HbbTV attack vector is that the attack is not "blind" -due to the unique way same-origin is implemented for HbbTV, the attack script can fully interact with the static and dynamic content of the page with the full permissions of a human user accessing the webpage.
This defeats many of the state-of-the-art defenses against CSRF, which operate by embedding session and authentication USENIX Association tokens in locations which are only accessible within the same origin as the protected web page.
An interesting twist on the previous attack, this attack assumes that the user has previously authenticated to a certain website using another application on his Smart TV, and that the TV now holds a cookie, an HTML5 local storage element, or any other authentication token for this website 1 .
When the infected application accesses the website, it will now automatically do so with the full credentials of the logged-in user, a fact which dramatically increases the damage potential of the previous attack.
An infected application using this attack vector can, for example, post links to malware to the legitimate user's friends over Twitter or Facebook, purchase DRMprotected content whose royalties are pocketed by the attacker, or call a premium number using a VoIP application.
As the usage scenarios of Smart TVs grow and users begin using them for more applications such as ecommerce and health, the damage potential of this attack will grow rapidly.
This attack makes use of the fact that the Smart TV is most likely connected to a home wireless network shared with other devices such as wireless routers, personal computers and printers.
Instead of attacking the whole Internet, the attacker instead mounts his attacks on those local intranet devices.
The most basic attack would be a port scan to discover which devices are present on the home network (this can assist in planning a burglary).
If vulnerable devices are discovered on the network, the attacker can also try and exploit them using the Smart TV.
For example, the attacker can identify a vulnerable wireless router and a Windows PC, then proceed to modify the DNS settings of the router so that the PC is directed to a phishing website when it attempts to connect to a banking website.
This attack, which again has been investigated in other 1 While the smart TV platform we evaluated had two separate "web runtimes" -one for the TV and one for the HbbTV stack -and thus kept credentials isolated, this behavior was probably caused by engineering concerns (two independent teams may have written the two runtimes, with no time for integration) and is in no way required by the standard.
works such as [26], is particularly effective due to the way same-origin is implemented on HbbTV.
Remarkably, the attacker's code can freely interact with the device under attack and observe the results of its interaction, without requiring additional steps such as DNS rebinding.
As described in Subsection 3.2.2, HbbTV content is displayed on the user's television without any warning or notification, and the user cannot turn it off without turning off the TV itself.
HbbTV content can completely overlay the user's TV broadcast and can programmatically interact with many of the buttons on the user's remote control.
This direction, also investigated by Herfurt in [21], makes HbbTV content a natural vector for attacks which mislead the user into divulging sensitive information or otherwise acting in a harmful manner.For example, a malicious HbbTV payload can notify the user that he must enter his credit card information to view some restricted content, compel the user to change the configuration of their network in a form that compromises their security (for example, instruct the user to press the WPS button on their wireless router, thus allowing a malicious device to join the network), or even encourage "real world" risky behavior, such as notifying the user that a "cable technician" is due to visit their house at a certain time and date, or that the TV needs to be "recalled" and physically delivered to the attacker.
This attack is different than the other attacks described in this paper since it requires user interaction and, as such, is more likely to be detected or simply ignored.
Obviously, the damage potential of this attack will increase in the future as more users are trained to interact with their TVs for applications other than passive content consumption.
A modern smart TV is essentially a personal computer with a very limited user interface, running a highly modified version of Linux or Android.
Just like normal PCs, security exploits are occasionally discovered in Smart TVs -either in the vendor's proprietary software, or in the device's various open-source underlying components.
Just like normal PCs, Smart TVs also have automatic software update mechanisms which are generally successful in keeping the TVs running smoothly and securely.
However, the vulnerability-to-patch cycle for these devices is typically much longer than that of a desktop operating system, due to the additional steps required by the equipment vendor to implement, test and deploy security updates for this nonstandard platform.
Whenever an exploit is discovered for a Smart TV platform, the combination of HbbTV's invisibility and undetectability make it a remarkably efficient method of distributing this exploit and compromising the TVs.Assume, for example, that a Smart TV uses an opensource image processing library as part of its code.
Assume now that a patch is released to fix a vulnerability in the upstream version of this component.
While the equipment vendor is busy porting, testing and deploying a patch specifically tailored for the smart TV, an attacker can immediately craft an exploit corresponding to this vulnerability, embed it in a malicious Red Button application, then immediately deploy it to thousands of Smart TVs.
As stated in Subsection 1.1, one of the main criticisms directed at our work was the claim that it is very difficult for the attacker to infect large numbers of television sets.
This Section quantitatively demonstrates how a low-budget attacker can modify and then overwhelm a TV tower's transmissions in a limited geographical area.We first determine the approximate area an attacker can cover for a fixed transmit power.
We assume that the attack frequency is approximately 500MHz, corresponding to the DVB-T UHF band.
We assume that the unamplified signal exiting the attacker's modulator has a signal level of 0 dBm, and that the attacker uses an omnidirectional antenna which is in free space and on a level plane with the targeted devices.
Thus, the attacker's output power is equal to the gain of his power amplifier G.We further assume that the radio tower's original transmission is received by all targeted devices with a signal level T of -50 dBm, corresponding to a moderate to high signal level (digital television receivers can function at signal levels as low as -112 dBm, while the FCC defines the "City Grade" signal level for digital television at -61 dBm [5]).
Our final assumption is that, when receiving two competing DVB-T signals with the same frequency (a condition technically referred to as co-channel interference), the receiver will demodulate and display the stronger signal while ignoring the weaker signal.
This assumption, which does not hold for analog transmission systems, is valid for DVB signals as long as the stronger signal overwhelms the weaker signal by some minimal amount (the International Telecommunications Union recommends in [24, Table 15] a power difference of 6 to 8 dB between the stronger station and the interfering weaker station, but a practical attacker who is not neccessarily standards compliant can get away with a much smaller margin).
The decay in decibels of a radio signal with frequency f (in Hz) over a distance d (in meters) is described by the Free Space Path Loss equation [30]: FSPL = 20 log 10 (d) + 20 log 10 ( f ) − 147.55We require that the attacker's signal will be more powerful than the radio tower's original signal: Using this formula shows that with a 1 W (30 dBm) amplifier, whose cost is approximately $250, the attacker will be able to cover a region with radius of 477 m, or an area of 1.4 km 2 .
With a more powerful 25 W (44 dBm) amplifier, whose cost is approximately $1500, the attack can cover a region with radius 2385 m, or an area of 35 km 2 .
The attacker might have an incentive to use a lowerpowered amplifier to reduce his risk of being detected by mobile triangulation methods (see Subsection 3.2.1).
Our next step was to demonstrate quantitatively that there exist densely-populated urban areas in which popular digital TV stations are received with a sufficiently low power level as to allow such an attack to be carried out.Our analysis was based on the NASA SEDAC Metropolitan Statistical Areas dataset [35], which records demographic and socioeconomic data for 50 US cities, with a spatial resolution of approximately 250 square meters.
We cross-correlated this dataset with the FCC database of digital TV towers in the United States and with station coverage maps supplied by TV Fool [13].
The TV Fool maps use 3D propagation modeling algorithms, and consider transmitter power, terrain obstructions and Earth curvature.
Our objective was to find densely-populated areas in which a popular channel is received with a power of between -50 and -61 dBm.
As a case study, we present our results for New York City in Figure 4 (more maps will be available in the extended version of this paper).
The map shows the high-resolution population density of New York City, with the location of radio towers marked with white stars, and potential attack spots marked with bulls-eyes.
Flushing, Queens, with a population density of 71,000 persons per km 2 , is one example.
There are 7 DTV stations with the desired characteristics in this location, most notably the Home Shopping Network.
HSN can also be attacked in the Upper West Side, with a population density of over 80,000 persons per km 2 .
In certain locations in the Inwood area, where the population density is 50,000 persons per km 2 , the attacker can infect 10 different stations, including CBS, NBC, Fox and the Spanish language Telemundo.There are several limitations to this attack.
The attacker obviously has to be physically present at the attacked location, and to have a line of sight both to the transmitter tower and to the antennas of the televisions under attack.
In an urban setting this condition can be realised if the attack is carried out from the roof of an appropriately located tall building.
To reduce the attacker's risk of capture and thus increase the effectiveness of the attack, the attacker can install the relay equipment on a remote controlled-drone and fly it to an appropriate location, similar to the work of [34].
The attacker would also need to prevent his receive antenna from picking up his own signal.
This can be achieved by using a directional receive antenna directed toward the radio tower, together with a directional transmit antenna directed toward the TVs under attack, and finally locating the receiver setup in one of the transmitter's "dead zones".
Using a directional antenna setup will change the shape, but not the general area, of the location under attack.
To show the validity of our claims, we created a test setup and experimentally reproduced a few of the attacks proposed in this paper.
Our attacks were carried out on a modern Smart TV, manufactured in 2012 and running the latest software version supplied by the vendor.
Our DVB demodulator was an OEM DVB-T stick based around the highly popular Afatech AF9015 chipset.
The broadcast DVB stream was captured using VLC Player [33] running on Linux.
Our DVB modulator was a DekTec DTU-215 unit, which was connected via USB to a low-cost laptop computer running Linux.
For safety reasons our test setup did not include a power amplifier and transmitter antenna -instead, the DVB modulator was directly connected to the TV's antenna input through a 10 dB RF attenuator.
The signal sent to the TV included different malicious HbbTV payloads created using the open-source OpenCaster package [8], version 3.2.1, and were played back to the TV using the DekTec StreamXpress software utility.Using our test setup, we were able to create HbbTV applications which ran invisibly in the background, as well as applications which completely took over the TV screen.
Using HbbTV, we were able to deploy the Browser Exploitation Framework (BeEF) Toolkit [7] on the TV and use it to port scan the TV's intranet, examine the TV's runtime environment and display fraudulent login messages on the TV.
We were able to crash the TV by having it render a malformed image file -a precursor for exploit distribution.
Finally, we were able to craft a denial of service attack on an external web server, which ran as long as the user was tuned in to a particular channel.
We verified that we were able to access servers both on the Internet at large and on the local intranet.
Table 1 summarizes the attacks described in this paper and assigns each one with a qualitative complexity and damage potential.
The justification for each qualitative complexity and damage assessment grade is provided below.
In our analysis we assume the attack setup costs $450 in fixed costs, and that each attack costs an additional $50 per hour in variable costs (including equipment running costs and compensation for the risk taken by the attacker, who has to be physically close to the attacked location).
We conservatively assume that the attack impacts 10,000 hosts -as we showed in Subsection 3.1, the attack can be easily scaled by one or more orders of magnitude by using a higher-powered amplifier.
The denial of service attack is the attack with the lowest complexity, since it requires no research on the side of the attacker, neither of the TV nor of the site under attack.
However, its damage potential is also low, especially since it is not cost effective.
As anecdotally shown in [3], a DDoS attack involving more than 20,000 hosts costs approximately $5 per hour.
However, it must be noted that since the TV-based DDoS attack described here is localized to a single area, it can overwhelm a single edge node on a Content Distribution Network and thus deny service to other users in the same physical area.The unauthenticated request forgery attack (in which an attacker uses HbbTV to vote in a poll, promote an article, or click an advertisement) also has low complexity, since it only requires minimal reverse engineering of the target web page.
However, it has a higher damage potential than the DDoS attack, since it is much easier to monetise due to the possibility of click fraud [19].
According to Google's official figures, the average cost per click to advertisers in 2013 was $0.94, out of which 25% goes to the fraudulent advertiser [22].
This means the attacker can expect an income of around $2500 per attack even if every compromised host clicks only a single ad.
In addition, since the interactive abilities abused by this attack are the main selling points of HbbTV, this attack has a wider area chilling effect of scaring advertisers and limiting the adoption of HbbTV.The authenticated request forgery attack has a higher complexity than the previous two attacks, since it requires the attacker to discover and exploit a situation in which credentials are shared between the HbbTV runtime and other applications running on the Smart TV.
However, this attack has a higher damage potential, since webmail and social network accounts are easier to monetise -according to [38] a verified Facebook account can retail for as much as $1.50, giving the attacker a potential income of $15,000 per attack.
Once users begin using their Smart TVs for additional activities such as shopping the impact of this attack will only grow.The intranet request forgery attack has medium complexity, since it involves compromising and exploiting not only the TV but also an intranet-connected device such as a router or a printer.
However, there are existing intranet attacks which can be reused for this purpose.
The damage potential of this attack is understandably high, since it lets the attacker compromise the user's personal computer.The phishing/social engineering attack may be technically easy to launch, but it has external factors which make it more complex to carry out.
First, the user's cooperation is required for this attack to succeed, raising the chance that the attack is ignored or, in the worst case, reported to law enforcement.
In addition, the attack requires the attacker to set up additional attack infrastructure (e.g. a web server for collecting credentials), raising the risk of capture.
The damage potential of this attack, however, is the highest of all attacks described here, since it risks the user's personal safety.The exploit distribution attack may appear to be technically the most complex attack described here.
The physical attack setup described in the previous sections assumed a digital terrestrial television (DTT) broadcast system.
According to [11], this is the most common delivery method for digital television across Europe.
However, there are several areas of the world, most notably the USA, where this form of delivery is less common than cable or satellite communications.
While splicing into cable connections or hijacking satellite signals is more expensive and risky than transmitting a low-power UHF signal, it might still be possible to attack such systems if they use microwave RF links for part of their (non-broadcast) transmission networks.
Setting up a relay system which adds malicious applications to such a relay link is possible using fundamentally the same technique as the one described in this paper, with the limitation that the relay device must be physically located along the line of sight of the microwave link.
High-budget adversaries such as crime syndicates or state players might also like to directly attack cable or satellite distribution centers to launch truly massive large scale attacks using HbbTV, gaining control over hundreds of millions of connected devices.
As stated in Section 3.2, there are three main security weaknesses in HbbTV: the fact that attacks are invisible and unstoppable, the fact that the attacker cannot be detected, and most significantly the problematic implementation of the same origin policy.
This subsection proposes several approaches which can be used to address these weaknesses.
Some of these defenses "break the standard" and make existing use cases for HbbTV applications (such as tracking cookies) impractical.
Other defenses are less disruptive and can be independently deployed by securityminded equipment vendors and even marketed as differentiating features of their TV sets.
Acting alone, an individual television set can do little to detect that its broadcast TV signal is suddenly coming from a malicious source.
However, multiple television sets in the same area can aggregate their statuses, making it possible to use this information for detecting radiobased attacks.
For example, if the Receive Signal Strength Indication (RSSI) in a certain geographic area has rapidly and suddenly changed, it might mean these TV sets are now receiving a signal from the attacker and not from the original radio tower.
The RSSI information can even be used as a form of triangulation, to help pinpoint the exact location of the attacker and aid in his capture.
Similarly, if multiple television sets are tuned to the same broadcast frequency, but a certain subset is receiving a different HbbTV application associated with this channel than the other TVs, this can indicate that an attack is in progress.
It would be interesting to find a way of achieving this without compromising the privacy of the viewers.
The attacks described here are especially effective since they turn on automatically and without the knowledge of the user, and have no standard way of being disabled.
The obvious way of addressing this limitation would be to guarantee the user's informed consent before active HTML content is rendered by the television.
A good analogue to this behavior be found in the WHATWG's recommended implementation of the HTML5 full-screen API [39], which specifies that "User agents should ensure, e.g. by means of an overlay, that the end user is aware something is displayed fullscreen.
User agents should provide a means of exiting fullscreen that always works and advertise this to the user."
In this spirit, the TV should prompt the user to press the red button before rendering any form of HbbTV content for the first time for a given channel, then periodically remind the user that content is running (for example by displaying a brief notification overlay whenever the user switches back to the channel).
Users should also have a way of stopping HbbTV rendering for a particular channel.
This countermeasure is perhaps the most intuitive and can be immediatly implemented by individual hardware makers.
Sadly, it was shown that users do not react productively to warning messages which interfere with their browsing (or TV watching) [36].
In addition, there are already several established market players who will resist any change to this behaviour, as they already use invisible HbbTV applications for user tracking and analytics.
It is risky to allow unauthenticated broadcast content to define its own web origin.
It seems tempting, then, to create a special restricted origin for broadcasted content, which is distinct from all other Internet domains.
Another possible countermeasure is content signing.
With this proposed defense, all HTML content delivered inside the DVB stream will be accompanied by a signed certificate attesting to its web origin.
A malicious adversary cannot sign web pages on behalf of the website under attack, and thus cannot claim these sites as its origin.
Unfortunately, even if all broadcast content was properly assigned to a restricted web origin, many attacks would still be possible via "blind" CSRF or PuppetNet attacks [29].
These attacks can cause considerable damage, even if the sameorigin principle is upheld, by the sheer virtue of being able to access the Internet using somebody else's computer.
The HbbTV specification conceived the embedding of web content into the DVB data stream as a redundancy method, designed to allow the delivery of interactive content to the 30% of smart TV owners who do not, in fact, plug them into the Internet.
This reasoning can be turned into an brutal, but effective, way to secure HbbTV.
We recommend to completely cut off Internet access to all broadcast-delivered HTML content.
Under this model, broadcast-delivered applications will be able to interact only with broadcast-delivered resources, while the only way of getting the television to access the Internet would be through an application delivered in URL form and fetched from the Internet itself.
We note that the Google Chrome browser applies a very similar security policy to its browser extensions [17].
There are several defensive steps which appear at first to protect against the attack, but whose practical effectiveness is very limited.
The first is content encryption.
Rights-managed DVB content is commonly encrypted, or scrambled, and this encryption appears to be a way of preventing an attack which modifies the television channel.
DVB encryption is, however, only applied to individual transport streams such as audio or video.
The DVB specification [9] dictates that and not to the program management table (PMT), which points to the HbbTV application, is always sent in the clear.
This makes it possible for an adversary to inject a malicious application into any channel, even one with encrypted video and audio.It will also be inffective to protect against this attack using Internet proxies.
As suggested by Tews in [16], these "green button" proxies can deliver "sanitised" versions of HbbTV applications to users, after applying modifications which protect the security and privacy of the users.
Unfortunately, these proxies are only effective as long as the HbbTV application itself lives on the Internet.
Our attack deals with a different form of delivery, where the application resides inside the broadcast television stream.
Works investigating other security issues with Smart TVs were published by Grattafiori and Yavor in [18] and by Lee and Kim in [31].
The first academic work to deal with security weaknesses in HbbTV was published by Tews et al. in [16,15].
This work focused on potential privacy leaks resulting from the use of HbbTV.
The authors showed how an adversary sniffing encrypted traffic generated by HbbTV on a user's wireless network can infer which program the user is currently watching, even without decrypting the packets.
This work also suggests a proxy-based method for blocking autostart applications from running on the television without user permissions.Another series of works on HbbTV was published by Martin Herfurt [21,20].
Herfurt surveyed the HTML applications used by German HbbTV providers, discovering that many of them use HbbTV to periodically "phone home" and notify that the user is tuned to the station.
Since this was done without the user's consent, these behaviours were considered a breach of German privacy laws.
Herfurt additionally suggested a series of attacks which might be possible using HbbTV, including content spoofing, intranet attacks and even bitcoin mining.
Finally, Herfurt also implemented a DNS-based privacy protection method called HbbTV Access Limiter (HAL).
Our work significantly contributes to that of of Herfurt and Tews et al. in two aspects.
First, our work is the first to present and evaluate a cost-effective method of injecting malicious content into HbbTV systems, by using an RF-based man-in-the-middle attack.
Second, our work is the first to call attention to the flawed specification of the same-origin policy for embedded HTML content, and to the devastating cross-domain attacks made possible by this flaw.
It is the combination of a feasible attack model and a faulty security model which makes the attacks described in this paper so practical and so dangerous.The most troubling attacks we discuss result from a flawed implementation of the Same-Origin Policy.
As described by Johns et al. in [25], there have been several historical compromises of this policy, starting from 1996 [12], with each compromise resulting in serious consequences for web security.
This work can be viewed as a particular instance of this case, made even more powerful due to the broadcast nature of the attack.
Our work can also be viewed as a form of cross-mechanism vulnerability, in which the combination of perfectly benign broadcast and broadband systems create a systemof-systems with an emergent property which allows it to be compromised.
Similar properties have previously been demonstrated in voice over IP systems which which combine Internet and PSTN networks [28].
There have been several previous works which exploit a broadcast radio frequency channel to attack a multitude of computers.
Notable are the work of Nighswander et al. which attacks GPS software stacks [32], and the work of Checkoway et al. which attacks car computers via the broadcast FM RDS channel [4].
We have described a series of novel attacks on Smart TVs -a widely deployed device whose significance in our life is only likely to grow.
The key enabling factor of this attack was the fact that the device can render Internet content whose source is outside the Internet.
This makes it possible for a physical attacker to cause a large-scale compromise of the Internet.
We qualitatively and quantitively demonstrated that the attacks we described can be cost-effectively distributed to many thousands of users, and that they have a large damage potential.
The attacks described in this paper are of high significance, not only because of the very large amount of devices which are vulnerable to them, but because they exemplify the complexity of securing systems-of-systems which combine both Internet and non-Internet interfaces.
Similar cyberphysical systems will become increasingly more prevalent in the future Internet of Things, making it especially important to analyze the weaknesses in this system, as well as the limitations of its proposed countermeasures.
