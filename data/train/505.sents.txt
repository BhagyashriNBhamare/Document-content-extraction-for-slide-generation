Changes in the end-to-end path between two hosts can lead to sudden changes in the round-trip time and available bandwidth, or even the complete loss of connectivity.
Determining the reason for the routing change is crucial for diagnosing and fixing the problem, and for holding a particular domain accountable for the disruption.
Active measurement tools like traceroute can infer the current path between two end-points, but not where and why the path changed.
Analyzing BGP data from multiple vantage points seems like a promising way to infer the root cause of routing changes.
In this paper, we explain the inherent limitations of using BGP data alone and argue for a distributed approach to troubleshooting routing problems.
We propose a solution where each AS continuously maintains a view of routing changes in its own network, without requiring additional support from the underlying routers.
Then, we describe how to query the measurement servers along the AS-level forwarding path from the source to the destination to uncover the location and the reason for the routing change.
The end-to-end path between two hosts may change for various reasons, such as equipment failures and configuration changes.
In addition to transient disruptions during routing convergence, the new path may have a larger round-trip time, lower available bandwidth, smaller maximum transmission unit, more aggressive packet filtering policies, or a forwarding loop or blackhole that drops packets.
When multiple destinations experience routing changes at the Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page.
To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
SIGCOMM'04 Workshops, Aug. 30+Sept. 3, 2004, Portland, Oregon, USA.
Copyright 2004 ACM 1-58113-942-X/04/0008 ...$5.00.
same time, the large shift in traffic may overload one or more links in an IP backbone network.
Knowing why the routing change happened is necessary for network administrators to diagnose and fix persistent reachability problems, or to tune the configuration of the routing protocols to rebalance the traffic load.
Determining where the routing change originated is crucial for having greater accountability for service disruptions in the Internet.
Such accountability is important for compensating end users for violations of service-level agreements and for helping network administrators select good upstream providers and peers.
In this paper, we propose a measurement framework for pin-pointing the causes of routing changes.Active measurement tools such as traceroute [1] seem like the most natural way to diagnose a routing change.
However, traceroute returns inconsistent results for paths that are changing during the measurement process; in addition, some routers do not send ICMP replies and many firewalls discard the probe packets.
Also, identifying the Autonomous System (AS) associated with each hop in the path is surprisingly difficult [2].
The future deployment of more sophisticated router-level support for active measurement (e.g., the IP Measurement Protocol [3,4]) may resolve some of these issues.
However, active measurement provides a view of a path only at the time the probes are sent, requiring a high probe rate to track routing changes.
More importantly, active measurements alone only reveal what part of a path has changed and where packet delay, loss, or reordering occur [5,6], but not necessarily what caused the route to change and where the change originated.An alternate approach is to exploit publicly-available passive measurements of routing changes in the Border Gateway Protocol (BGP).
Each RouteViews [7] and RIPE-NCC [8] feed logs the advertisement and withdrawal messages received via an external BGP (eBGP) session with one router in a participating AS.
Recent studies have proposed looking for patterns across AS paths, destinations, and time to pin-point the location and cause of routing changes [9,10,11].
However, a single topology or configuration change can lead to numerous patterns of updates, and multiple events could lead to the same sequence of routing messages [12].
Combining data from multiple vantage points reduces the uncertainty but the approach is still fraught with difficulty because some routing changes are not visible in BGP and others can lead to misleading BGP messages.
One of the main contributions of this paper is to identify these problems and derive guidelines for diagnosing routing changes, as discussed in Section 2.
We argue that it is possible to use passive measurements for diagnosing routing problems if each AS contributes by solving its part of the puzzle.
In Section 3, we present a strawman proposal where each AS constructs a view of its part of the routing system based on data readily available from today's routers-router configuration state, BGP update messages from border routers, the up/down status of BGP sessions, and intradomain routing messages.
The AS uses the information to determine whether a routing change was triggered by an internal or external cause.
Rather than sending raw data to a central repository, an AS accepts queries from neighboring domains about past routing changes.
To diagnose external routing changes, an AS may forward a query to the next AS in either the old or the new forwarding path.
Our proposed scheme can be viewed as an approach to the "Why problem" articulated in [13] or to the "automatic error reporting" scenario in [4].
In particular, we show how to answer questions like "why did the forwarding path to destination change?"
The paper concludes in Section 4 with discussion of future research directions.
This section highlights the challenges of finding the root cause of routing changes through analysis of BGP update data alone.
We discuss why some plausible assumptions do not hold under certain scenarios.
In particular, we show that (i) many routing changes are not visible in the BGP data and (ii) a partial view of the BGP data may lead to inaccurate conclusions, and derive principles that guide our approach in the next section.
ASes in the core of the Internet usually connect to multiple neighboring ASes, and two ASes may connect in multiple physical locations.
Routers at the border of a network learn how to reach external prefixes by speaking external BGP (eBGP) with routers in neighboring ASes.
Upon selecting an externally-learned route, the border router uses internal BGP (iBGP) to distribute the route to the other routers inside the AS.
BGP is responsible for (i) determining the AS-level route to reach a destination prefix and (ii) for each router in an AS, selecting the best egress point for forwarding traffic toward that destination prefix.
The internal path from the ingress point to the egress point is determined by an Interior Gateway Protocol (IGP), such as OSPF or IS-IS.
In this subsection, we discuss three "myths" that relate to how routing changes inside an AS may impact the forwarding path without being visible via an eBGP monitoring session.MYTH: The BGP updates from a single router accurately represent the AS.The routers ¡ and ¢ in Figure 1 learn how to reach destination prefix through eBGP and propagate that information via iBGP to all other routers in AS 1.
A router invokes the BGP decision process [14] to select a single best route for the prefix.
The first few steps of the decision process compare the BGP attributes, such as local preference and AS path length, of the candidate routes.
Next, the router prefers an eBGP-learned route over any iBGP-learned routes.
Still, multiple equally-good choices may remain.
For example, in Figure 1 would switch to the route via AS 3, which may lead to a change in the properties of the endto-end paths for traffic entering AS 1 at router ¥ .
However, the link failure does not cause a change in the BGP route at £ and, as such, the change is not visible to the measurement system.
IMPLICATION 1.
The measurement system needs to capture the BGP routing changes from all of the border routers.
Network operators often configure their BGP-speaking routers to limit the scope of advertisements for subnets of larger address blocks, in order to limit the size of the BGP routing tables [15].
In Figure 2 Figure 2, other prefixes may be invisible due to the BGP export policies applied on the monitoring session.
For example, an AS may export customer-learned routes to a public monitoring system but not the routes learned from private peers; often the exact details of which routes an AS exports to the RouteViews and RIPE-NCC monitors are unknown.IMPLICATION 3.
The measurement system needs to know all routes the router knows, even if they are not normally visible in eBGP.
Recent studies [9,10,11] propose techniques for analyzing patterns in the BGP updates from multiple vantage points to infer the location and cause of routing changes.
The algorithms cluster the data by time, prefix, and AS path to discover common explanations for a set of BGP updates.
The accuracy of these techniques depends on the completeness of the input data.
In this subsection, we discuss how partial BGP data can lead to incorrect diagnosis of a routing change.MYTH:The AS responsible for a BGP routing change appears in the old or the new AS path [9,10,11].
The inference algorithms build on the assumption that the AS responsible for a routing change appears in either the old path, the new path, or both.
However, this may not hold when some of the ASes in the forwarding path do not contribute BGP feeds.
In the example in Figure 3, suppose that the sideways links between these ASes are private peering links, where each AS exports only the BGP routes learned from its downstream customers [16].
All other links in the system correspond to provider-customer relationships where each AS exports its best route for each prefix.
For simplicity, assume that each AS selects the BGP route with the shortest AS path, among the choices learned from the neighbors.
In Figure 3(a), ASes § , , and % all choose the path through AS ; in particular, AS § prefers the path through AS 2 over the longer path via AS 4.
Now, suppose that AS 11 becomes a customer of AS 3, as shown in Figure 3(b).
In response to this event, AS 3 now selects the new shorter AS path through AS 11 and announces the new path to AS 2.
AS 2 prefers the new path over the old path through AS 8 and starts directing traffic via AS 3.
This causes AS 2 to withdraw the BGP route it had advertised earlier to AS 1.
Note that AS 2 does not advertise the new route to AS 1 because of the export policy (i.e., "do not export a route learned from one peer to another").
This causes AS 1 to switch to the longer customer-learned route via AS 4, as shown in Figure 3(b).
Based only on BGP data from ASes 1, 4, 5, 6, and 7, the inference algorithm would only see the withdrawal of the BGP route via AS 2.
From AS 1's vantage point, the AS path changes from "1 2 8 9 10" to "1 4 5 6 7 10"-ASes 3 MYTH: Looking at routing changes across prefixes resolves ambiguity about the origins of a routing change.The inference algorithms narrow down the origin of a routing change by identifying the common attributes for prefixes that experience a routing change close together in time.
In Figure 4, suppose that each AS has a "shortest AS path" routing policy.
Router This hot-potato routing change could be misleading to an external observer.
If AS 4 originates multiple destinations, the BGP update stream from ¥ would show many routes changing AS paths from "1 2 4" to "1 3 4".
This would suggest that one of the four ASes is involved.
By looking across all prefixes, the observer would see that all destinations originated by AS 4 shift at the same time, and those originated by ASes 2 and 3 do not change.
This could lead to the incorrect inference that AS 4 (or the link between AS 4 and AS 2) is responsible for the change.
Large hot-potato routing changes (such as reported in [17]) may also be mistakenly associated with a BGP session reset in one of the links in the AS path.
Analysis of changes in the BGP AS paths does not necessarily shed light on the changes in the forwarding path because the two paths do not necessarily match [2].
For example, route aggregation may result in a BGP AS path that does not include the AS(es) at the end of the forwarding path.
In addition, the iBGP configuration inside an AS may lead to packet deflections where one router forwards a packet to another router that has a different AS path for the same prefix [18].
These deflections may in fact be the root cause of a routing anomaly, making it important to have an accurate view of the real forwarding path.
Finally, configuration mistakes (whether accidental or intentional) can lead to an incorrect BGP AS path.
For example, an operator may configure a router to perform AS prepending (the common practice of adding artificial hops in the BGP AS path) with the wrong AS number.
This can lead to a BGP AS path that bears little resemblance to the actual AS-level forwarding path.
These mismatches between the two paths can lead to faulty conclusions.
For example, real changes in the forwarding path might not be visible as BGP routing changes, and vice versa.
Fortunately, each AS has enough internal information to know the next-hop AS in the AS-level forwarding path.
The accuracy of identifying the root cause of routing changes using public BGP data depends on how often these myths are violated and how much coverage is need to get accurate results.
Validating these hypothesis requires further research, using exactly the ASlevel measurements that we propose in the next section.
We draw on the insights learned from the previous section to sketch a distributed troubleshooting service.
Implications 1 and 3 imply that we need a better source of data that represents the ASlevel BGP routing decisions (an "AS-level forwarding table", if you will), and Implication 2 suggests that we also need to keep track of internal changes.
In this section, we propose that each AS have an Omni server that constructs a comprehensive view of its part of the routing system 1 .
Implications 4 and 5 imply the need for cooperation of the ASes involved in a routing change.
Thus, the Omni in one AS may need to contact Omni servers in other ASes.
Implication 6 suggests that the query resolution should follow the forwarding path; hence the Omni may launch a query to the next AS in the old or new forwarding path to the destination.
After describing how the Omni server constructs the AS-level forwarding table and maintains the local routing state of the AS, we discuss the hop-by-hop propagation of queries.
We end this section with a brief discussion of directions for future research.
We define an "AS-level forwarding table" as a mapping from prefixes to egress sets, where an egress set is the set of outgoing links that the border routers in the AS use to reach the prefix.
The Omni needs to build an AS-level forwarding table to: (i) identify routing changes at the edge of the AS and (ii) determine which neighboring ASes to query about routing changes caused by external events.
For example, in Figure 1, .
Instead of keeping all BGP update messages, the Omni only maintains a log of changes to the egress set.
For example, the Omni would not need to retain information about BGP updates that change a downstream AS in the AS path or other route attributes.To compute egress set changes, the Omni collects iBGP updates from all border routers 2 .
Then, the Omni gathers the best routes for each border router to determine the egress set for each destination prefix.
The AS-level forwarding table includes all prefixes known at the router, in order to avoid the kinds of problems depicted in Figure 2.
This is accomplished by configuring the iBGP session to the Omni server to inject all routes that a router learns, including static routes (which might not normally be injected in to BGP) and subnets that would normally have limited scope.The Omni can then do an on-line pre-processing of this more complete BGP update streams to compute the egress set for each prefix and store changes to this set with a timestamp.
This dataset represents the AS-level view of external routing changes and could conceivably serve as an improved feed to public BGP repositories such as RouteViews or RIPE-NCC.
Currently, RouteViews and RIPE-NCC receive an eBGP update stream from an individual router in the AS.
Today, these eBGP streams exclude prefixes that are not injected into BGP.
In addition, there is no differentiation between internally and externally learned routes, and no information about routing changes that are subject to non-transitive attribute filtering.
The Omni server also needs to keep track of local routing statethe egress point selected by each router for each prefix, the forwarding path through the AS, and the routing changes caused by this AS.
We define a subpath as the part of the forwarding path from the ingress router to the outgoing edge link connecting to the next AS.
The Omni is responsible for determining whether a subpath has changed (local effect) and whether the AS was responsible for this change (local cause).
Upon detecting a performance or reachability problem, the source asks its local Omni if a routing change has occurred.
In particular, the source ) changed and whether the cause was local or not, using the decision tree presented in Figure 5.
First, the Omni searches for a change in the egress set for close to time H .
Upon detecting an egress-set change, the Omni determines that the routing change had local cause if there was either a policy change or an edge change (i.e., an eBGP session failure or a change for a subnet not normally injected in BGP) consistent with the routing change.
Otherwise, the routing change has an external cause.
If the egress set for has not changed, the Omni determines whether the subpath from G to has changed by examining both iBGP and IGP routing information for local causes.The decision tree depends on the kinds of measurement data that are routinely collected for network management purposes: by either SNMP data or the vendor-specific "syslog."
The status of iBGP sessions is used to determine the propagation of BGP routes inside the AS, whereas the status of eBGP sessions is used to identify "edge" changes.
IGP changes: An IGP routing monitor [19] can continuously track the topology (routers and links) and the IGP parameters (such as link weights).
This enables the Omni to learn about changes in the forwarding paths between pairs of routers inside the AS, as well as the IGP path costs that influence the BGPlevel routing decisions.
The Omni ignores messages, such as refresh and duplicate IGP messages, that do not indicate a routing change.The Omni can use the egress sets, iBGP session status, and IGP data to compute the subpath for each ingress router and destination prefix, using the model presented in [20,21].
Imagine that source F in Figure 6 is communicating with destination when the link between ASes 3 and 4 fails.
Source the routing change, the Omni responds directly to the query with an explanation.
I Local effects and non-local cause: When the local routing change has an external cause, the Omni examines the egress-set change to determine which neighboring ASes to query-the neighbor in the old subpath, the new subpath, or both.
In the earlier example in Figure 3 in Section 2.2, the Omni in AS 1 would query the Omni AS 2 (along the old path, which has disappeared) which would, in turn, query the Omni in AS 3 which could explain the routing change.
No local effects: If the Omni observes no local routing change, then the change must have an external cause.
The Omni simply directs the query to the next AS in the forwarding path; since the local subpath has not changed, both the "old" and the "new" neighbor ASes are the same.If the query reaches the AS responsible for the destination IP address, the Omni for that AS could optionally initiate a reverse query toward F to determine whether a routing change occurred on the path from to F .
In [4], Bennett describes a scenario for automatic network error correction that resembles the behavior described here.
Using IPMP, a user identifies the last working AS in the forwarding path and issues a trouble report to that AS.
In this scenario, the responsibility of diagnosing the problem falls to the AS where the effect of the problem is observed, not the one that caused the routing change.
This AS does not necessarily have enough information to diagnose the problem.
In our approach, queries are propagated via Omni servers in the ASes along the forwarding path, rather than through the forwarding-plane itself.
Our approach avoids the expense of placing new functionality in the forwarding plane and allows the queries to access a wider range of information about the old and new forwarding paths to pin-point the location and cause of a routing change.
Our troubleshooting scheme raises several important practical issues that warrant further discussion and investigation:Reachability of Omni servers: We envision that each end host would know the name or IP address of the Omni servers in its own domain, and that each Omni server would know the IP addresses of the Omnis in neighboring ASes; we do not expect that this information would need to change often.
For simplicity, the border routers in one AS could be configured with static routes to direct packets sent to an Omni via the edge links connecting to the neighboring AS.
We envision that an AS would have multiple Omnis in different locations to reduce the likelihood that the very failure that causes a routing problem for end users compromises access to the troubleshooting service.Scalability of Omni servers: An Omni could be overwhelmed by attack traffic or even legitimate queries.
An AS can install packet filters on its edge links that discard all packets destined to the Omni that do not have a source address corresponding to an Omni in the neighboring domain.
To prevent excessive queries, the edge links could impose a rate limit on traffic from each sender.
In some cases, a high query rate may be indicative of a legitimate routing problem affecting multiple users.
An Omni could coalesce related queries or return cached results without contacting the next AS in the path.
In fact, the large number of (related) queries might provide valuable hints about the scope of a routing problem.Time interval of a routing change: The initiator of a query can provide a time interval when a routing change may have occurred.
An Omni along the query path may refine the time interval based on its own measurement data.
The measurements may reveal that multiple routing changes occur close together in time (e.g., during BGP path exploration during delayed convergence [22]).
We envision that the Omni would answer queries about changes from one stable route to another, rather than reporting the short-lived routes during the transition.
The Omni also needs to keep track of prefixes with routes that flap continuously to respond to queries about these destinations.Incentives for ASes to participate: Our troubleshooting service depends on the participation of many, if not all, of the ASes in the core of the Internet.
The cooperation of stub ASes would be valuable, too, to diagnose routing problems originating inside these networks.
We believe ISPs would want to provide a troubleshooting service to their customers as part of a service-level agreement (SLA).
These ISPs would need to have similar arrangements with their peers and upstream providers to ensure accountability for network disruptions.
In fact, a collection of ASes (e.g., run by one company or consortium) could provide an SLA only for IP traffic that stays within the group of ASes, allowing for a partial deployment of Omnis.
In a competitive environment, separate mechanisms are necessary to prevent ASes from providing inaccurate responses to queries.
An AS could use its own BGP update data to validate the responses sent by a neighbor's Omni.
More generally, third parties could use traceroute or BGP update data to detect persistently suspicious responses.
Identifying the location and cause of routing changes is crucial for troubleshooting performance and reachability problems.
Currently available measurement data, such as traceroute probes and public BGP update feeds, are not sufficient.
Instead, we believe that the infrastructure should have direct support for the diagnosis of routing problems.
We argue that each AS should have an Omni server that constructs a network-wide view of its part of the Internet routing system and answers (and forwards) queries about possible routing changes.
The Omni could also store information about the MTU size and packet filter for each link to diagnose other kinds of reachability problems.
In addition, with traffic measurements from the edge links, the Omni server could detect shifts in incoming traffic and query the preceding domain about the change.Although our solution does not rely on special support from the network, extensions to the routers such as proposed in IPMP would make the problem easier to solve.
Ideally, each router would have a special monitoring session that provides a view of all of the routes it learns (including alternate BGP routes as well as routes not injected into BGP), the dynamic status of its routing protocol adjacencies (e.g., for OSPF adjacencies and BGP sessions), and an explanation for local routing changes (e.g., local policy change, withdrawal of best route by a neighbor, etc.).
More generally, we believe that extending the routing protocols to reveal the underlying reason for a routing change is a promising avenue for future work.
We would like to thank Jay Borkenhagen for his invaluable insights about the challenges of diagnosing routing problems in production networks.
Thanks also to Christophe Diot, Geoff Voelker, and the anonymous reviewers for their helpful comments.
Renata Teixeira was supported by a fellowship from Capes/Brazil and by AT&T's support for the UCSD Center for Networked Systems.
