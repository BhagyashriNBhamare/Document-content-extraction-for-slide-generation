Consistency maintenance is one of the most significant challenges in groupware systems.
In groupware systems, the effect of incorrect execution will be more extensive for it is done in distributed group editors, so the user will have more dependence on Undo.
While intention violation puzzle has never been addressed in any published work, it will destroy the consistency and lead to a crash.
We propose a Mark & Retracing based method to reach the goal of consistency maintenance and achieve Multi-version and Single-display strategy in undo scheme.
It is different from operation transformation method and provides a new perspective into group editors.
Group editors are one of the most commonly used groupware applications [1,8,14].
It allows multiple users to participate in the editing and modification of shared data objects, such as word, graphics, and media documents, using a computer network.
Techniques for building group editors have been widely applied and practiced [1,6,8,12].
Group editors have also been acknowledged as powerful research vehicles in exploring solution to consistency problems [1,2,3,14].
Undo is a common operation, which can help user to quickly recover from the incorrect execution in document editor system and make the work more safe and efficient.
The effect of incorrect execution will be more extensive for it is done in distributed group editors, so the user will have more dependence on Undo [1,7,14,18].
But it is very difficult to support Undo in distributed group editors [13].
No current solution can do the complete support to Undo any operation at any time (dealing with intention violation puzzle) [1,7,10,11].
DiskEdit is the first group editor system to support Undo operation.
It allows undoing by any order, but this execution can not violate with any other existing operations [7].
AdOPTed allows Undo execution to more operations but it requires undoing by the time order of operations [8].
Doctor C. Sun tried to support undoing any operation at any time in REDUCE system, but the system can not ensure the Undo operation's validity in some especial situations [10].
C. Sun et al. [11] fixed this bug by recording the order of document's characters additionally.
But it needs extra memories and makes its complexity raised, which indicates that it is very difficult to do the make up only from the point of relationship among operations.
The three systems above are all based on the operational transformation technique, because operational transformation method will never get the user's state when this user produces it and review the user's intention, thus the user's intention cannot be maintained.
Violations between users' intentions will still lead to the inconsistent results among group users.
We will discuss this problem below.We must pay attention that even in the single document editor system, not all the Undo operations is valid.
So we also need to avoid the situations below:Undo an Insert operation when the data inserted has been removed.Undo an undone operation.To deal with group Undo, we should firstly ensure that its executions to all the local operations are valid.
We call this "Undo Operation's Precondition".
This paper is organized as follows.
First, the intention violation puzzle and consistency model are introduced in Section 2 and 3, respectively.
Then, the Mark & Retrace struction and algorithm are proposed in Section 4.
The proof is given in Section 5.
In Section 6, Some Undo puzzles and intention violation puzzle are discussed.
Finally, we compare with some related works and make the conclusion.
For a long time many people only focus on the basic concurrency control because of the complexity of group editors system.
Not until recently have they paid attention to the intention maintenance.
In fact, the problem of intention-violation in group editors system, which is a part of intention maintenance, has been existed for a long time and hasn't been solved so far.In follow discussion we use the same definition of casual ordering relation "→", independent relation "񮽙" and operation effects relation "≺" in [5,14].
Suppose the initial state of sharing document is "abc".
Operations C 1 and C 2 are executed at the same time, which expressed as C 1 񮽙 C 2 , and C 1 =Insert ["d", 2] and C 2 =Insert ["d", 2].
Generic algorithm of group editors system defaults these two "d" as different so as to avoid intention-violation.
However the involvement of Undo operation makes it necessary to attach importance to this problem.
This problem becomes more urgent and hard to avoid and it especially concentrates on the concurrency intention-violation.
Consider a system including two users and the initial state of sharing document is vacant.
Fig.1 show order of user's producing and executing.
It is obvious to see that user U 1 wants to delete "a" while user U 2 wants to reverse "a".
In the distributed group editors system there exist a great deal of instances when two or more users' executions will are violating with each other and we call it intention-violation.
(x, y) in the figures represents the user's state vector after an execution.Intention-violation will badly affect the system and will destroy the results' consistency among the group users.
This divergence will be larger and larger with the continuance of editor.
It is worth attention that the expressions of execution toward one user are not always the same because of the different arriving time caused by the lag of network, which adds to our difficulty.
Consistency maintenance is one of the most significant challenges in designing and realizing real-time group editors system [1,14], in which CCI model framework has received most acknowledgement [14].
Li et al. [5] pointed out that it might have other operation effecting relation violation (ERV) problems in consistency maintenance [5] and therefore proposed a CSM model.
The condition S and M in CSM model is a more strict description of intention preservation in CCI model.
We conclude this change into:1.
Causality preservation: all the operations are executed according to their casual ordering.
For any two oper-ations O 1 and O 2 , if O 1 → O 2 , then O 1 is executed before O 2 at all sites.2.
Convergence: when the same set of operations has been executed at all sites, all copies of the shared document are identical.3.
Intention preservation: the effect of executing any operation at any site achieves the same effect as at its generation site.
(a) If O is a Delete operation, the same character is deleted at the both sites;(b) For an operation O, one discretional operation is described as O'.
Without loss of generality, assume C(O) ≺ C(O 񮽙 ) when they were firstly executed at one site.
Then require it keepC(O) ≺ C(O 񮽙 ) at any other sites.
C(O) ≺ C(O 񮽙 )is a total order relation.
This relation and any other transferred relations based on it should be maintained at all sites.We will not discuss too much about more express methods.
We just want to point out that revised CCI model is the conclusion of two previous models.
It has guaranteed all the conditions in CCI and CSM model.
So we can still call it CCI model.
See also [2].
State Vector based timestamping [1] has been widely used to make judgment of the causal relationship between operations.
In timestamping scheme, every site has its own state vector.
After an operation's generation at one site, it will multicast together with the site's timestamping.
Also, to achieve causality preservation, we only need to guarantee that a remote operation at one site satisfies the executing conditions [1,14]: The operation is causally-ready for execution.
But even if it satisfies the causally ordered execution, the execution order will be different because of the different arriving order from every site.
In next step we only have to focus on the topic that when an operation satisfies the execution conditions, how we can execute it correctly to maintain the convergence and intention preservation.
The difficulty in achieving convergence and intention preservation is that there exist interactions between some independent operations which lead to the changes of operations' position and area.
OT method will search the operations which may cause these changes and judge their effects first.
And then it will adjust current operation to the correct position and area [5,13,14].
Mark & Retrace method tries concealing such effects in document and converse the document to the user's view at the operations' generation time.
In this way we can directly find an accurate position.
The advantage of this method is that we do not have to think of the complex relations between operations.
We only need to focus on each operation's effect on user's view.
Any document is a liner structure composed by characters.
Without loss of generality, assume each character is indivisible and each operation only aims at one character.
Actually any complex insertion or deletion operation can be quickly divided into a group of indivisible operations.
So this assumption will not affect operation's ability.
Under this assumption, each character may have several operations aiming at itself while each operation only aims at one character.
Then we save the operation together with its timestamp to the character's liner node.
So besides the information of character and its corresponding operations, we have also added the visible/invisible mark information on every liner structure of document, which shows whether the current node is visible or invisible.
So a document structure might be expressed the Fig.2: Assume the liner structure of document at site S is expressed as Doc S and S's state vector is SV S .
Consider SV is a timestamp which satisfies the executing condition.
Then the Retracing procedure can be expressed as Proc.1: if O wants the node to be ineffective then 6:Procedure 1 Retracing (Doc S , SV ),Counter++ 7:if O wants the node to be effective then 8:Counter- if SV Oins ≤ SV and Counter=0 then 10:Set the character node effective 11:else 12:Set the character node ineffective 13: end for For every character node, assume that the Insert and Delete operations attached are timestamped by SV Oins and SV O del .
And in Retracing procedure, "Delete" and "Undo operation toward Insert" mean want the node to be ineffective while "Undo operation toward Delete" means want the node to be effective.Procedure 2 Control-Algorithm (Doc S , O), execute O on Doc S 1: Retracing(Doc S , SV O ) 2:Execute the operation O 3: Attach the operation with its timestamp to the character node.4: SV S [R] ⇐ SV S [R] + 1 5: Retracing(Doc S , SV S )When a remote operation O generates at site R and timestamped by SV O is causally-ready for execution, we can express the execution process at site S whose state vector is SV S as Proc.2: The focus of this section is on how an operation O is executed:If O denotes a Delete operation, just find the characters in the address space (count the effective character nodes in the liner structure of Doc S ) to find the position.If O denotes an Insert operation, find the position in the address space (count the effective character nodes in the liner structure of Doc S to find the range between two adjoining effective character nodes), build a new character node, initialize the mark and Insert it to an accurate position within the range.To realize the comparability between two Insert operations, we refer to the technique of maintaining operation transformation order [14].
Given the T Order relation to represent the right-and-left relation between two inserted characters.
Given two character nodes CN a and CN b .
The attached operations are generated at site a and site b, and are timestamped by SV a andSV b .
We have T Order(CN a ) < T Order(CN b ), iff: (1) sum(SV a ) < sum(SV b ), or (2) a < b when sum(SV a ) = sum(SV b ), where sum(SV ) = 񮽙 N −1 i=0 SV [i].
The T Order relation is a total order which is transitive and any two T Order are comparable.The process to determine an accurate position of a new operation O is to scan every Insert in this range from left to right.
There are two kinds of Insert operations in this range.
Some of these operations are casually before operation O.
We force the new Insert O to insert on the left side of these Insert operations, so when Range-Scan scans to these operations, it will directly end itself (Range-Scan Function, line 9-12).
The other Insert operations are concurrent with operation O.
We compare them by comparing the T Order relation (Range-Scan Function, line 4-8).
The inserting position is saved in the P .
The new operation will be inserted on the left side of P .
We can sketch the scanning process as Func.3.
Retracing process locates the Insert into a one-and-only range.
Range-Scan process determines a one-and-only position for this Insert in the range and keeps it from being affected by concurrent operations.
Then we explain how algorithm maintains the convergence and intention preservation in detail in the next section.
Suppose that originally, every site has the same initial document state and that all the character node orders at every site are the same.
Given n operations to be executed, we shall discuss how to ensure that all the sites still have the same character nodes orders after the operations' execution.
return CN b Consider the situation where there are two operations O 1 and O 2 .
If they are casually ordered, since the execution order is certain, the result will be certain too.
If they are concurrent, we prove the following theorem.
Proof.
First, consider the scan-range (i.e. the range between CN a and CN b in the Range-Scan process) of the two operations.1.
If the scan-ranges of the two operations have no shared part, it is obvious that the two operations do not affect each other due to the retracing process.
(b) P (A) = P (B).
we will discuss this situation specially.Next, we would like to prove situation above.
Assume in two different execution order (O 1 is executed before or after O 2 ), operation O 1 will get two different insert positions P 1 and P 2 , which represent the neighboring character nodes (include visible and invisible) on the right of insert position.
Without loss of generality, assume that P 1 represents the insert position when O 1 is executed before O 2 while P 2 represents the position when O 1 is executed after O 2 .
There are only two possibilities which can make Range-Scan process return character node P 1 .
One is T Order(O 1 ) < T Order(P 1 ) (Range-Scan Function, line 5-6) and the other is P 1 → O 1 (Range-Scan Function, line 10-11).
First of all, we will prove that when C(P 1 ) 񮽙 = C(P 2 ), P 1 will not be O 2 .
If O 2 is P 1 , since P 1 is obtained in the case that O 1 is executed before O 2 , in the Range-Scan process O 1 and O 2 will get the return value at the same position and satisfies T Order(O 1 ) < T Order(P 1 ).
So when O 2 is executed first, O 1 and O 2 will also get the return value at the same position.
Because T Order(O 1 ) < T Order(P 1 ), P 2 is O 2 and C(P 1 ) = C(P 2 ), which contradicts our assumption, the assumption is false.
i.e., P 1 will not be O 2 .
Let's go on to discuss the situation when C(P 1 ) ≺ C(P 2 ).
If the position is obtained in the situation of P 1 → O 1 , when O 2 is executed before O 1 , there are two possibilities.
(1) if O 2 is inserted on the right of P 1 , then operation O 1 will get the same position P 1 as well.
(2) if O 2 is inserted on the left of P 1 (C(O 2 ) 񮽙 = C(P 1 )), the only result will be C(O 2 ) < C(P 1 ), which contradicts with assumption.
If the position is obtained in the situation of T Order(O 1 ) < T Order(P 1 ), in Range-Scan process, only when insert position of O 2 is on the right of P 1 can make P 1 < P 2 by line 7-8 in Range-Scan process.
we have C(O 2 ) ≺ C(O 1 ).
Since there is no other operation on the left of O1 which is causally ordered with O 1 , O 2 can only get the return value on the left of P 1 by line 5-6 in Range-Scan process.
So its T Order certainly precedes the T Order of operation attached on the character node of return position, which certainly precedes T Order of O 1 .
So we have T Order(O 1 ) > TOrder(O 2 ) by transitive.
But according to Range-Scan, only when T Order(O 1 ) < T Order(O 2 ) can we get C(P 2 ) ≺ C(P 1 ) after O 1 's execution, which contradicts the result T Order(O 1 ) > T Order(O 2 ) we got before.
So the assumption is false.The execution effects of the two operations have no relation with their execution order.2 Theorem 2 Orders of character nodes at every site are still consistent when n operations have been executed.Proof.
First, when all the document orders at every site are consistent, executing two operations under the execution condition, a consistent order is certain to be obtained.
Then suppose the orders of character nodes at every site are consistent after we have executed n − 1 operations in the order which meets the execution condition.
What we want to prove is that the orders of character nodes at every site are still consistent when n operations have been executed.Suppose executing n operations under the execution condition at two sites, whose order can be expressed as which still meet the execution condition.
According to the assumption, the orders of character nodes at every site are consistent after we have executed n − 1 operations in the order which meets the execution condition, so the orders of document's character nodes are still consistent after these two sequences have been executed.
So all the orders of character node at the sites' are consistent after n operations have been executed in the order which meets the execution condition.
2 O 1 O 2 O 3 .
.
We have proved that after executing several operations in any order which meets the execution condition, the orders of character nodes at every site will keep consistent.
It is to say that the order in which two operations are executed at one site for the first time has been kept at any other sites, which satisfies condition (b) of intention preservation.
In addition, the key to the correctness of a Delete operation is that it can find the correct effective character node and the consistency of orders of character node ensures it to count to the correct effective character node, which satisfies condition (a) of intention preservation.
Both of the orders of character nodes and effective/ineffective marks of every character node at all sites are kept consistent, so the documents are convergent.
C.Sun et al. pointed out four Undo puzzle in [10].
The evaluation of the ability to solve the difficult problems is an important parameter of a system.We have enumerated the processes of dealing with some problems by Mark & Retrace and compare them with the methods by other systems in [18].
Comparing with the new method(We have a new Retracing process) in this paper, only the analyses of overlapping deletes puzzle is different.
But in Retracing procedure, the set of valid operations in a given is certain so the result of counter is also certain and the visible/invisible mark as well.
When there are several deletions in algorithm, the character node is visible only when all the deletions are undone, otherwise it will keep invisible.Mark & Retrace does not need to do any special disposal to these puzzles.
This kind of repeated Delete operations is actually an execution violation which is the cause of intention-violation.
We will discuss it in the next part.
Directly broadcasting the current state of users who cause the intention-violation of course can solve the problem.
However it needs high speed of local response so we hope to reach our goal by means of local data.To deal with violation is easy but to judge the origin of violation is complex.
Intention-violation may happen when several users are doing multi-execution, so how to separate all the operations causing intention-violation has been the key to solve the problem.The two independent and separated execution sequences apply us the base of selection.
If the effects of two independent sequences are different, there must exists an intention violation.
In our group editors system, we will warn users for intention violation events.
When there exists intention violation, the algorithm maintains the intention of users if SV Ot ≤ SV O1 and SV Ot ≤ SV O2 then 5:R 1 ⇐ R 1 ∪ {O t } 6:if SV Ot ≤ SV O1 and SV Ot ≤ SV O2 then 7:R 2 ⇐ R 2 ∪ {O t } 8:if SV Ot ≤ SV O1 and SV Ot ≤ SV O2 then 9:R 3 ⇐ R 3 ∪ {O t } 10: end for 11: R 1 ⇐ R 1 ∪ R 3 , R 2 ⇐ R 2 ∪ R 3 12:When it is finished, the two sequences of operations are saved in R 1 and R 2 .
who want character node to be invisible, namely Multiversion and Single-display strategy [15].
The initial concept of Mark & Retrace was proposed early in [17] but was not able to solve the dOPT puzzle.
It needs additional disposal when there are several concurrent operations at one position, but [17] lack such support to this situation.Algorithm dOPT, adOPTed and GOTO are based on TP2, [1,8,14], but cannot fully satisfy TP2.
NICE reported notification server [9] and SOCT3/4 used the sequence method [16], but neither of them is able to resolve the false-tie (ERV) puzzle.
GOT maintains the convergence by the method of a global total order of execution.
But Li et al. [5] pointed out that the original GOT will fail in the case of complicated false-tie (ERV) scenarios but the details have not been published.
Li et al.[5] also pointed out that although the solution of false-tie (ERV) has been realized in [12], it is still not published.
Imine et al. [4] tried to support TP2 by expanding IT function but fails in solving dOPT puzzle.
Li et al. [5] reported a solution and also gave the proof.
We have explained that our Mark & Retrace method can satisfy the CCI model in fully replicated architecture, deal with dOPT puzzle and false-tie(ERV) puzzle and get the operation's amortized efficiency O(c · logn) [2].
We discuss the support to undo operation based on the current work at last.
Among the algorithms above, adOPTed supports the sequential undo operations by maintaining a multiple dimensions data structure [8].
REDUCE supports undo any operation at any time by inversing the undo operation [10,11].
But when facing undo puzzles, it needs to maintain the operations relation additionally, which adds to the time complexity of algorithm (nonlinear time complexity).
Mark & Retrace method also can support any undo and can solve the undo puzzles in [18] more easily while keeping the execution efficiency O(c log n) [2].
None of the current methods has considered the intention violation in undo operation [7,8,11].
Although REDUCE can maintain convergence in the intention violation and obtain the effect of Multi-version and Single-display strategy, it lacks related examining method and enough hints to users.
In this paper, we propose a new solution to Multi-version and Singledisplay strategy and plan to discuss the Multi-version and Multi-display strategy and its related examining and warning method in the further work.
More information is available in [2,18].
In this paper we propose a strategy which can maintain CCI model in fully replicated architecture, which is different from OT.
It does not ensure the operation's execution correctness by modifying the operation but by Retracing process.
Since Mark & Retrace process will not affect the left-and-right relation between characters, it is easier to maintain operations' order.
It can not only achieve all the consistency targets in [5,14], but can support any undo in replicated architecture more efficiently as well.For space reason, we have not given more details of efficiency optimization.
More information is available in [2].
We plan to discuss more about the Multi-version and Multidisplay strategy in undo intention violation and the support to update operation and tree based structures of Mark & Retrace Algorithm.
The authors wish to thank Yan Yu for her help in improving the final presentation of this article.
The authors are very appreciative to Du Li, Chengzheng Sun for their suggestions.
The work reported in this paper has been supported by the National Natural Science Foundation of China (60473124) and Shanghai Development Foundation of Science and Technology (036505001).
