With the growing success of the social Web, most Web developers have to interact with at least one social Web platform, which implies studying the related API specifications.
These are often only informally described, may contain errors, lack harmonization, and generally speaking make the developer's work difficult.
Most attempts to solve this problem, proposing formal description languages for Web service APIs, have had limited success outside of B2B applications; we believe it is due to their top-down nature.
In addition, a programmer dealing with one or several of these APIs has to deal with a number of related tasks such as data integration, requests chaining, or policy management, that are cumbersome to implement.
Inspired by the SPORE project, we present API Blender, an open-source solution to describe, interact with, and integrate the most common social Web APIs.
In this perspective, we first introduce two new lightweight description formats for requests and services and demonstrate their relevance with respect to current platform APIs.
We present our Python implementation of API Blender and its features regarding authentication, policy management and multi-platform data integration.
Interacting with platforms like Facebook, Youtube, Twitter, Flickr, or Google+ becomes an important part of many Copyright is held by the author/owner(s).
April 18-20, 2012, Lyon, France.
software projects, whether it is for authentication purposes, to collect information about a user, to present mash-ups of popular social Web data, or for a myriad of other reasons.
Our perspective comes from the need of archiving important social data for preservation purposes.
1 Regular Web archives, such as those built by the Internet Archive 2 , often include content from or pointers to social Web platforms but do not benefit from API data.
As a consequence, the archives are either partial -Facebook disallows generic crawling of its public pages -or lack some extra information that the API can provide, for instance extracted entities on Twitter.
Designing an archival crawler for the social Web requires interfacing with the multiple social Web APIs, as well as respecting the policies imposed by these services, such as limiting the number of requests per hour.
Many projects thus involve numerous interactions with various social platforms, sometimes with complex logics such as getting the social graph till the third rank of users having mentioned a specific keyword.
Understanding the related API specifications can be challenging.
There is no de facto standard to describe them and they can contain mistakes or approximations.
There is no clear specification, for instance, of how many requests per hour are allowed on the Twitter search API.
For the most popular platforms, specific language libraries sometimes exist but they often require the same learning phase.Having a unified description of the different social Web APIs is a technical challenge.
An early step was taken with WSDL [2], a Web Services Description Language standardized by the W3C.
WSDL has been heavily used in the industry and is at the core of many service-oriented software projects [5].
However, most popular social platforms including Facebook, Twitter, or Google+ and many other Web services are not currently offering any WSDL description of their API and do not seem to have any plans to do so.
The reasons are manifold: WSDL-based services are often considered heavy machinery for such lightweight interfaces [1], WSDL has historically focused on SOAP message exchanges rather than on RESTful APIs though it can now express both [10], WSDL has no support for important API metadata such as policy management or the description of a sequence of service calls 3 .
In reaction to WSDL, some other approaches to Web services description have been proposed, a prime example being WADL [6] but they have not met with more success on popular social Web platforms.Another perspective is necessary.
Spring Social 4 is a Java framework to interact with the different social platforms.
We believe this bottom-up approach is a very promising way to make the developers' work simpler.
Spring Social implements a number of useful functionalities (authentication, uniform interface to some of the API types, etc.) but does not fulfill our requirements.
On the one hand, some important features, especially for archival crawling, are not considered, such as limits on the number of requests.
On the other hand, using Spring Social requires understanding an important amount of code before being able to interact with a social platform.
To give an order of magnitude of the size of the software, the core v1.02 contains 405 files, without implementing any Web API.
5 With API Blender, we aim at more simplicity and flexibility, as highlighted by the example of use we give in Section 3.
Our main source of inspiration has been the SPORE project [4].
It consists in a simple implementation-agnostic JSON format allowing to describe Web APIs designed according to the REST principles.
The project has been started recently and is still under development.With API Blender, we extend SPORE with the following contributions:1.
two simple description formats at the API and request levels, adapted to social platforms, sorting SPORE out and complementing it; 2.
an open Python implementation, allowing to easily integrate various platforms; 3.
the following features, some of them left out of existing tools or libraries: authentication, server policy management, multi-platform data integration, and request chaining.
We designed API Blender inspired by what we observed on five prominent social platforms we identified: Twitter, Facebook, Google+, FlickR and Youtube.
However, we strove at keeping a high flexibility so that it can be extended to many other Web APIs.Our article is organized as follows.
In Section 2, we present descriptions formats and discuss their relevance to social platforms.
We then detail in Section 3 our implementation in Python and its features.
A Web API consists in a set of HTTP request messages associated to responses, sent to a specific HTTP server having its own rules.
Note that Twitter has different APIs corresponding to different hosts: for instance, api.twitter.com: 80 or search.twitter.com:80.
6 We describe a Web API with several objects that allow to describe the server and its rules (with respect to access policies) as well as the interactions it offers.
We find JSON [3] light and readable and have chosen to use it as a serialization.
In what follows, we tried using straightforward names and self-explaining conventions to define the different elements.Server description format.
We have extended SPORE with a consistent oriented-object approach, as well as the addition of authentication and policy usually required to interact with social platform Web APIs. "
name " : string , " host " : string , " port " : integer , " authentication " : auth_object , " policy " : policy_object , " interactions " : [ i n t e r a c t i o n _ o b j e c t ]Port, policy, and authentication are optional.
The port defaults to 80.
Two authentication protocols are supported at the moment, one based on a unique authentication URL with parameters and the other on the three-legged OAuth2 [7]. "
r e q u e s t _ t o k e n _ u r l " : uri , " url_parameters " : object By simple authentication, we mean authentication with parameters such as API key or login and password passed to a unique URL so as to receive the authentication token. "
consumer_key " : string , " c onsu mer _sec ret " : string , " r e q u e s t _ t o k e n _ u r l " : uri , " ac c es s _t o ke n _u r l " : uri , " authorize_url " : uri Many social platforms (e.g., Twitter, Facebook, Google+) accept OAuth2 authentication. "
r e q u e s t s _ p e r _ h o u r " : integer , " t o o _ m a n y _ c a l l s _ r e s p o n s e _ c o d e " : integer , " t o o _ m a n y _ c a l l s _ w a i t i n g _ s e c o n d s " : integer An overload can be detected by counting the requests or receiving a too-many-calls response.
In the latter case, API Blender will snooze for the specified amount of time before testing if the counter has been reset.Interaction description format.
An interaction is a class of HTTP requests with a common root path and their associated responses.
Here also we extended SPORE and added the response object. "
name " : string , " description " : string , " request " : request_object , " response " : resp onse _ob jectThe description is optional. "
root_path " : string , " method " : string " raw_content " : string " url_parameters " : [ [ string , # key , e .
g .
, " id " string , # type , e .
g .
, " integer " boolean # is it an optional parameter ?
object # the default value , it can be null ] ]The method has to be GET, PUT, POST or DELETE.
Providing raw content is optional and useful only for PUT and POST methods.
If a default value is set on a URL parameter, it will be automatically passed with the default value unless it is explicitly set as null.
This feature can be useful in many case such as requesting a default value of 100 responses per pages for a full-text query on Twitter search API. "
e x p e c t e d _ s t a t u s _ c o d e " : integer , " s e r i a l i z a t i o n _ f o r m a t " : serialization_format , " e xpec ted_ sche ma " : json_schema_object , " integration " : ex t ra c to r _o b je c tThe expected code is optional and defaults to 200.
The serialization format has to be JSON or XML at the moment.
The expected schema of the response is optional and can be defined as a JSON schema [9].
At the moment, we define a simple extractor that allows a mapping between a unified model and response fields.
We use '.'
as a path separator.
For instance, we could have "post.content": "post_data.text" if our integrated model was {"post": {"content": string}} with a response model of {"post_data": {"text": string}}.
With a careful normalization model (for instance using concepts of an ontology), this allows to integrate data coming from different platforms.
As an extension, this semantic model could also be used to describe the inputs of services, a first step towards semantic service orchestration.
Python is becoming increasingly popular among developers.
On the social coding platform GitHub, it is ranked third.
7 We find Python to be simple, flexible, and to have many useful libraries.
We have chosen to implementation API Blender in this language.
API Blender is available online at https://github.com/netiru/apiblender.Structure.
The module structure offered by Python allows us to adopt the following light structure.
We found it convenient to have one file per API server where we gather the descriptions for the server and its interactions.
Currently, the API Blender supports the two Twitter APIs (generic and search), Facebook, Google+, FlickR and Youtube.
7 After JavaScript and Ruby, https://github.com/ languages Features.
API Blender implements several precious feature.
It supports the two main authentication types: using a single URL with parameters and OAuth2 [7] thanks to Python OAuth2 8 .
API Blender also ensures respect of the server policy; when the hourly limit is reached or when a too-many-calls response is identified, the policy manager will stop for some time and periodically test if the counter has been reset.
Error handling is taken into consideration too, whether it regards a non-conforming configuration file or an unexpected response.
Finally, API Blender gives the possibility to extract and normalize elements from responses.
This feature supports simple field extraction and standardization at the moment but the same process will be possible with arbitrary subtree transformations in the near future.Request chaining.
The open nature of API Blender combined to the flexibility of Python can fill many needs.
Request chaining becomes very simple with Python and complex interactions can become easy-to-maintain Python libraries.
We illustrate this with the following example on two Twitter APIs.
The program below retrieves the last three pages of tweets containing the keywords "good spirit" then fetches the local social network (followers and followees) of the authors of the tweets.
import apiblender blender = apiblender .
Blender () # R e t r i e v i n g 3 p a g e s o f r e s u l t blender .
load_server ( " twitter -search " ) blender .
l o ad _ in te r ac t io n ( " search " ) users = set () for p in range (1 ,3):blender .
set_parameters ({ " q " : " good spirit " , " page " : p }) response = blender .
blend () ts = response [ " p re pa r ed _ co n te n t " ] [ SAPI Blender has been designed in the context of the ARCOMEM project on social Web archiving, and is put to use in this project to crawl and integrate data from various social Web platforms.
We have found its flexibility useful in the light of the dynamicity of social Web platforms and managed to conveniently integrate the five platforms currently supported: Twitter, Facebook, FlickR, Google+, and Youtube.
It is of potential use in any application that needs to access similar REST-inspired Web APIs and to export responses in a common schema.
The source code being available on GitHub, we hope to solicit contributions, either in the form of extensions of the base functionalities, or in that of API descriptions.
For future work, we see many promising opportunities such as:1.
smarter processing of responses, making use of the semantics of the services described, in the spirit of the semantic description of Web servicesàservices`servicesà la OWL-S [11]; 2.
developing more standard request chaining libraries; 3.
a possible integration of the different input schemas; 4.
more research for a smarter snooze management; 5.
distributing requests across different servers.
They all require to be very conscious of the existing trade-off between completeness and flexibility.
ACKNOWLEDGMENTSThe described work was funded by the European Union Seventh Framework Programme (FP7/2007(FP7/ -2013 under grant agreement 270239 (ARCOMEM).
API Blender has been designed in the context of the ARCOMEM project on social Web archiving, and is put to use in this project to crawl and integrate data from various social Web platforms.
We have found its flexibility useful in the light of the dynamicity of social Web platforms and managed to conveniently integrate the five platforms currently supported: Twitter, Facebook, FlickR, Google+, and Youtube.
It is of potential use in any application that needs to access similar REST-inspired Web APIs and to export responses in a common schema.
The source code being available on GitHub, we hope to solicit contributions, either in the form of extensions of the base functionalities, or in that of API descriptions.
For future work, we see many promising opportunities such as:1.
smarter processing of responses, making use of the semantics of the services described, in the spirit of the semantic description of Web servicesàservices`servicesà la OWL-S [11]; 2.
developing more standard request chaining libraries; 3.
a possible integration of the different input schemas; 4.
more research for a smarter snooze management; 5.
distributing requests across different servers.
They all require to be very conscious of the existing trade-off between completeness and flexibility.
The described work was funded by the European Union Seventh Framework Programme (FP7/2007(FP7/ -2013 under grant agreement 270239 (ARCOMEM).
