Recent work has shown that the Internet exhibits a power-law node degree distribution and high clustering.
Considering that many existing degree-based Internet topology generators do not achieve this level of clustering, we propose a randomized algorithm that increases the clustering coefficients of graphs produced by these generators.
Simulation results confirm that our algorithm makes the graphs produced by existing generators match clustering properties of the Internet topology.
Many studies [5], [7], [10] examine the properties of the Internet connectivity graph and attempt to understand its evolution.
Results in [10], [19] demonstrate that both AS-level and router-level Internet topology exhibits three important characteristics: power-law degree distribution, small diameter, and high clustering.
To satisfy these properties, many degree-based generators have been proposed to model the Internet graph [5], [7], [10], [21], [33].
Although most of them can achieve the necessary degree distributions and diameter, they are often not successful in producing high levels of clustering.
As shown in [10], the graphs produced by the existing Internet generators always exhibit much lower clustering than the Internet graph.
In order to make these graphs better match the Internet, we propose a randomized algorithm that increases the clustering of synthetic graphs while preserving their power-law degree distributions and small diameters.Considering that the algorithm spends most of its time on computing clustering coefficients during each iteration, we use sampling theory and let the method utilize approximate values instead of computing them exactly, which reduces the time complexity of the algorithm from Θ(mn) to Θ(m), where m is the number of edges and n is the number of nodes.
This paper makes two contributions.
First, it proposes a new and practical method to estimate the clustering of massive graphs by using sampling theory.
Second, it offers a solution to the low-clustering problem of existing Internet topology generators.The remainder of the paper is organized as follows.
First, we review the important properties of the Internet topology and classify existing generators in section 2.
Then, we abstract the low clustering problem in these generators and propose our algorithmic solution in section 3.
Following that, the analysis of the algorithm and the corresponding simulation results are given in section 4.
We conclude the paper in section 5.
In this section, we first review properties of the Internet topology and then discuss existing degree-based Internet topology generators.
It is important to study the properties of the Internet topology, because they not only affect the deployment of Internet services [18], [20], but also impact the performance of existing Internet protocols [22], [23], [30].
Past work has showed that the Internet AS-level graph exhibits the following three properties.The first property of the Internet is related to its degree distribution.
In 1999, Faloutsos et al. [19] observed that the CDF of node degree X (both AS-level and router-level) follows a power-law (Pareto) distribution:P (X ≤ d) = 1 − cd −α ,(1)where α ≈ 1.2 is the shape parameter and c is the scale parameter.
The second property of the Internet topology is its high clustering.
In 2002, Bu et al. [10] pointed out that the Internet is highly clustered.
The paper showed that the clustering coefficient [32], which is a metric of the probability that two neighbors share a common third neighbor, of the Internet topology is much higher than that of random graphs.The third property is that the Internet graph has a small diameter.
Bu et al. [10] showed that the average shortest path length between each pair of nodes at the AS-level is very small and is close to that of random graphs.To reproduce these properties, many generators have been proposed to model the Internet [2], [3], [4], [9], [10], [33].
As most of them seek to satisfy the first property (the power-law degree distribution), they are also called degree-based generators.
Next, we review several widely-used generators and classify them into two types.
Despite the various implementations, existing degree-based Internet generators can be categorized into two collections: evolving and non-evolving generators.Non-evolving methods do not model the evolution of the Internet and produce graphs with a given fixed number of nodes n. GED [14], [26] and PLRG [5] are classical examples belonging to this collection.
In GED (Given Expected Degree) [14], [26], [27], [28], n pre-assigned weights (w 1 , . . . , w n ) are drawn from a Pareto distribution.
Edge (i, j) exists with probability p ij :p ij = w i w j 񮽙 n k=1 w k .
(2)To make p ij less than or equal to 1, the pre-assigned degree sequence is assumed to satisfy the following condition [14], [26]:w 2 max ≤ n 񮽙 k=1 w k ,(3)where w max = max n i=1 {w i }.
To relax this assumption, the PLRG model [5] is proposed.
In PLRG, a power-law weight sequence {w i } is first pre-assigned to n nodes.
After that, w i virtual copies of node i are produced and are randomly selected to form links with equal probability.
Because of their simplicity, PLRG and GED are good theoretical models for complex networks and many analytical results [5], [14], [15], [26] are based on them.
However, they exhibit much lower clustering than the real Internet.Unlike non-evolving generators, evolving methods focus on modelling the evolution of the Internet topology.
In 1999, Barabasi et al. [7] proposed the BA model, in which the graph evolves by adding new nodes that attach to existing nodes with a so-called linear preferential probability񮽙 (d i ): 񮽙 (d i ) = d i (t) 񮽙 j d j (t) ,(4)where d i is the degree of node i at time t.
As shown in [7], the BA model is scalefree and generates graphs with a power-law degree distribution.
However, the shape parameter of the power-law function does not match that of the Internet.
Moreover, the clustering of a BA-generated graph is much smaller than that of the Internet, which limits the model's usefulness in simulating the Internet.
In order to make the BA model match the Internet more accurately, many BA-like models [1], [6], [10], [31], [33] have been proposed.
One of the most successful methods is GLP, which extends the BA model by using a Generalized Linear Preference probability:񮽙 (d i ) = d i (t) − β 񮽙 j (d j (t) − β) ,(5)where β ∈ (−∞, 1] is a tunable parameter.
Simulation results in [10] show that GLP not only improves the power-law distribution of BA, but also has clustering as high as 0.35.
However, compared with the value of 0.45 in the Internet, GLP also needs to increase its clustering [10].
Recall that the Internet structure exhibits high clustering, but most existing Internet generators fail to imitate this property.
To confirm the clustering inconsistency between the Internet and its generators, we next compare the clustering evolution of the Internet topology with that of its generators.
To obtain the clustering evolution of the Internet graph, we examined AS (autonomous system) BGP logs from the National Laboratory for Applied Network Research (NLANR) [29], which has been recording a snapshot of the Internet topology every day since 1997.
Obvious errors (i.e., duplicate links between some nodes and disconnected components) in a few graphs indicate that part of the data is unreliable and must be removed before the analysis.The assumption on which we filter the data is that the Internet topology must be a connected, simple graph and the number of ASes should increase over time.
Based on this assumption, we removed self-loops, merged duplicate links, and discarded graphs that were disconnected or had much fewer ASes than in previously recorded graphs.
After preprocessing the data in this manner, we obtained 253 snapshots of the Internet that correspond to the AS-level Internet topology from November 1997 to January 2000.
The clustering coefficients of the obtained graphs are plotted in Figure 1 (left), where γ increases from 0.34 in 1997 to 0.42 in 2000 at a slow, but steady rate.
At the same time, the number of nodes in the system also grows as shown on the right side of the figure.To compare the clustering evolution of the Internet with that of its generators, we simulate the clustering evolutions of GED, PLRG, BA and GLP in 1.E-041.
E-031.
E-021.
E-01 1.E-051.
E+00 100 1000 10000 Number of nodes Expected clustering GED with alpha=31.E-041.
E-031.
E-021.
E-011.
E+00 PLRG with alpha=3 ering that the power-law degree sequence and low diameter are also necessary properties in these graphs, we need to keep these properties unchanged while increasing clustering of the graph.
The details of the problem can be described as follows.
Given a connected graph G and a target clustering value γ T , rewire G's edges and produce a new graph G 񮽙 satisfying the following four conditions:1.
G 񮽙 is connected.2.
The degree sequence in G is the same as that in G 񮽙 .3.
G 񮽙 has low diameter.
4.
Clustering of G 񮽙 is larger than or equal to γ T , which means γ(G 񮽙 ) ≥ γ T .
To better understand this problem, we next review the concept of clustering and reveal how it relates to triangles.The clustering coefficient of a graph G(V, E), denoted by γ(G), is the average clustering coefficient of each node with degree larger than 1:γ(G) = 񮽙 v∈V −V (1) γ v |V | − |V (1) | ,(6)where V (1) is the set of degree-1 nodes in G, γ v is the clustering coefficient of node v and |V | is the number of nodes in G. Here, γ v characterizes the probability that the neighbors of node v are adjacent to each other.
More precisely,γ v = N v d v (d v − 1)/2 ,(7)where N v is the number of edges among the neighbors of node v and d v is its degree.
An example of computing clustering is shown in Figure 6, where graph G contains five nodes A, B, C, D, and E.
According to the definition, the clustering coefficient of each node is:γ A = 1 2(2 − 1)/2 = 1 , γ B = 1 2(2 − 1)/2 = 1 , C D E A B Fig. 6.
Clustering in graph G γ C = 2 3(3 − 1)/2 = 2 3 , γ D = 2 4(4 − 1)/2 = 1 3 .
And the clustering coefficient of graph G isγ(G) = γ A + γ B + γ C + γ D 4 = 3 4 .
(8)Note that N v in (7) is essentially the number of triangles containing node v. For example, in Figure 6, N A = 1 because it is in one triangle (DAC); N C = 2 because it is contained by two triangles (DCB) and (DCA).
Therefore, for any node with fixed degree d, the more triangles it includes, the higher clustering it has.
Also note that the clustering of a graph is the average of each node's clustering.
Intuitively, increasing the number of triangles is a promising way to increase the clustering of a graph.
The key idea of our algorithm is to increase the number of triangles for each node.
According to condition 2 in the clustering problem, the degree of each node v should not be changed, which indicates that increasing N v in (7) will increase the clustering of node v. Therefore, rewiring the links in G to produce more triangles for each node will increase the clustering of the whole graph.To better describe our algorithm, we first give the definition of unsatisfied and satisfied nodes as follows.Definition 1.
A node v 񮽙 ∈ G 񮽙 is unsatisfied if d v > d 񮽙 v , v ∈ G. Otherwise, v 񮽙 is satisfied.For example, in Figure 6, if we remove edge (A, C) from the graph, nodes A and C are unsatisfied because their degree decreases.
This simple definition facilitates the explanation of our algorithm, which can be separated into four steps.
The first step finds all triangles in G and marks the corresponding links in these triangles.
Then, it randomly picks a node w and searches for k-length (k ≥ 4) loops starting from node w.
At each time when such a loop is found, our algorithm randomly breaks an unmarked link (u, v) from that loop and marks nodes u, v unsatisfied.
In the third step, the algorithm adds links between any pair of unsatisfied nodes so that at least one new triangle is generated.
This step is repeated until the clustering of current graph is larger than γ T or there are no unsatisfied nodes remaining.
Finally, if the current clustering γ c (G) is larger than γ T , the algorithm randomly adds links between unsatisfied nodes and outputs G 񮽙 .
Otherwise, the method loops back to step two.In step four, the time complexity of computing current clustering γ c (G) is Θ(nm), while step 1 to step 3 will only cost Θ(m).
Obviously, reducing the time complexity of computing γ c (G) will improve the performance of our algorithm.
Therefore, in step four we randomly sample s nodes and approximate the clustering of the whole graph by the average clustering of the sampled nodes.
By applying this randomized sampling technique, the time complexity of step four Input: a connected, power-law graph G and target clustering γT .
Output: a connected, power-law graph G 񮽙 , such that γ(G 񮽙 ) ≥ γT .
Copy graph G to graph G 񮽙 .
Use BFS to find all triangles in G 񮽙 and mark all corresponding edges in the triangles.
Randomly sample s nodes and compute γs(G 񮽙 ), which is the average clustering coefficient of the s nodes.
While γs(G 񮽙 ) < γT do Randomly pick a node w in G 񮽙 .
Start from w and apply BFS to find all k-cycles (k ≥ 4) in the graph.If there are no such cycles, output Fail.
Else For each k-cycle l, randomly break its unmarked edge (u, v).
While there exist at least two unsatisfied nodes do If there exist unsatisfied nodes s and t such that edge (s, t) ∈ G 񮽙 AND connecting s and t creates at least one triangle do Connect s and t Else if there exist unsatisfied nodes u, v, and w such that there are no edges among them and du − d 񮽙 u ≥ 2, dv − d 񮽙 v ≥ 2, There are two issues that must be explored in order to show that our algorithm is effective.
We first study through simulations the effect of running our algorithm on random graphs created by several of the methods mentioned before.
Since an approximation of clustering in the graph is used in the algorithm, we then analytically determine how accurate these approximations can become.To show that our algorithm indeed increases the clustering in a wide range of random graphs, we ran sample graphs created by BA, GED, and PLRG through the algorithm.
The results are displayed in Fig. 8 and Fig. 9.
In each case the graph contains 1000 nodes.
For the graph generated by BA, m = 2.
In the case of both PLRG and GED, α = 1.5.
Note that duplicate links and self-loops were removed from these graphs before we ran the algorithm.
As shown in the figures, there is a marked increase in clustering for each example graph in few iterations.We next determine the validity and accuracy of using an approximate value for the clustering of a graph instead of requiring that the exact value be know.
There is obviously some error between the approximate and actual values, but according to sampling theory, increasing the sample size s will reduce this error.
However, when the s exceeds a certain threshold, further increasing it does not significantly decrease the error.
To determine a proper sample size, we provide the following lemma.
Proof.
Denote by σ 2 the variance of node clustering in the graph, γ s the sampled clustering of s nodes in the graph, and γ a the actual clustering of the graph.
According to sampling theory [24], when the sample size is:s = Z 2 ρ 2 σ 2 E 2 ,(9)error |γ s − γ a | does not exceed error margin E with probability 1 − ρ, where ρ ∈ (0, 1) is a significance level and z ρ/2 is the positive z value that is at the vertical boundary for the area of ρ/2 in the right tail of the standard normal distribution.Note that the clustering of each node is between 0 and 1.
When half of the total nodes have clustering 0 and the other half have clustering 1, the variance of node clustering reaches its maximum point, where the clustering of the graph is 0.5.
Therefore:σ 2 ≤ 񮽙 n i=1 0.5 2 n = 0.5 2 .
(10)Using (9) and (10), we conclude that when sample size:s = Z 2 ρ 2 (2E) 2 ,(11)|γ s − γ a | does not exceed E with probability at least 1 − ρ.Thus by Lemma 1, we can determine the sample size s based on an error margin E and significance level ρ.
For the error margin E = 0.1 and ρ = 0.05, we only need to sample s = 1.96 2 /0.2 2 ≈ 97 nodes to contain the absolute error within 0.1 of the correct value with probability at least 0.95.
This result shows that we are indeed able to approximate the clustering of a graph with very few samples, which justifies its inclusion in our algorithm.
In this paper, we offer an algorithmic solution to the clustering problem and show that we can frequently improve this metric in graphs produced by existing degreebased generators to values well over 0.5.
This in turn allows those generators to better simulate the AS-level Internet topology.
