Families of programs are steadily emerging in assorted domains where Software Product Line (SPL) paradigm provides a cost-effective development approach.
Feature Oriented Programming (FOP) is a specific approach to SPL development where features not only sketch increments in program functionality, but are the building blocks of programs.
There exists some analysis on the evolution of SPL (e.g. new feature requirements, technical changes, etc), but do not specifically provide a model to track the milestones of such variability evolution.
This paper explores evolution tracking in the context of existing approaches.
We track the evolution of Feature Oriented Product-Lines by differentiating the changes from a change base, storing only the deltas.
Families of programs are steadily emerging for distinct domains such as embedded systems, navigational systems, financial applications or even web applications.
This shifts the attention from individual product-centric development to Software Product Line (SPL) development where the focus is on constructing reusable artifacts of the assembly line from which final products are obtained in a costeffective way.Feature Oriented Programming (FOP) is a specific approach to SPL development where features are not only considered increments in program functionality, but are the building blocks of programs.
FOP introduces a variability model and a compositional approach where feature combinations yield programs.
However, FOP does not deal with product line evolution.Prior work on individual software evolution analyzed the reasons that force such evolution, the content that could be affected and provided a generic process to handle it [10].
Lehman [10] and Parnas [12] state that the quality of a program deteriorates gradually as it evolves.
When a program changes, its structure is neglected, being its quality typically deteriorated.
Nonetheless, maintenance is unavoidable.SPL is not an exception and evolution occurs even more frequently.
A recent study addressed the quantification of SPL maintainability [1].
Bosch states that the evolution process is more complex in SPL development [4].
More to the point, the probability that an SPL evolves is higher than an individual product.
Change probability is more likely as the domain to serve SPL products is larger and can require new functionalities faster than a single customer (i.e. the larger the number of drivers of change, the higher the probability that the SPL evolves to cater for such changes).
According to Loughran [11], it is crucial to document the evolution that scatters among more than one artefact, as it can impact not only to one individual program, but to a number of programs.However, prior models on SPL and specifically on FOP do not provide specific mechanisms to track the evolution where the milestones can be registered.
Our work elaborates on how to track evolution extending AHEAD, which is an FOP model to capture variability [3].
We begin with a review of background.
Feature Oriented Programming.
FOP is an approach to SPL development where programs are synthesized by composing features [3].
Features, as the building blocks of programs, are units incrementing application functionality by which different products can be distinguished and defined within an SPL.
Each feature may include any number of artifacts.An FOP model of an SPL offers a set of features.
We write M = {f, h, i, j} to mean product-line M has features f, h, i, and j.
In general, an SPL is characterized by the set of features it supports.Accepted for publication at: Jornadas de Ingeniería del Software y Bases de Datos (JISBD 2007 The set of programs that can be created from a model is its product line.
Design (AHEAD) is a realization of FOP to express nested hierarchies of artifacts and their composition [3].
Each feature realization encapsulates the set of artifacts (i.e. files) realizing its functionality.If feature f encapsulates a set of artifacts af, bf, and df we write f={af, bf, df}.
Similarly, i={ai, bi, ci} represents that feature i encapsulates artifacts ai, bi, and ci.
As artifacts themselves may be sets, a feature is a nested set of artifacts.
AHEAD uses directories to represent nested sets.
Features are composed by applying (1) recursively, where directories are folded together by composing corresponding artifacts in each directory.
Figure 1b shows the composition of features A and B.
The result is feature C, where artifact X.jak of C is synthesized by composing X.jak (from B) with X.jak (from A) [3].
The polymorphism of the • operator is central to AHEAD.
Artifacts of a given type (.
jak, .
b, etc.) and their refinements are defined in a type-specific language.
That is, the definition and refinements of .
jak files are expressed in the Jak(arta) language, a superset of Java.Jak is a Java-like language supporting refinements [3].
Figure 2 illustrates some examples.
Figure 2a shows a Jak artifact Foo defining a method bar realizing the feature Base.
Now consider that the realization of Feature1 implies changing the existing class Foo by extending the method bar with further functionality.
Figure 2b shows the definition of this refinement function in Jak (Super().
bar(); calls parent class.
Note that Super() differs from common super).
The expression Feature1(Base) returns a Jak artifact which refines Base.
Figure 2c illustrates this composition.
Similarly, Figure 2d shows the realization of Feature2 where method bar is overridden (i.e., the previous functionality of this method is lost).
Figure 2e illustrates the expression Feature2(Base).
Product Line Evolution.
Concepts regarding change in organizations can be viewed from three dimensions [10].
The first dimension examines why change occurs ("drivers of change").
The second dimension concerns what the changes are ("content of change").
The third dimension regards how change occurs ("process of change").
These dimensions are used to analyze the evolution of SPL (see Figure 2).
Drivers of change motivate evolution twofold: internal or external to the organization.
These reasons can be used to foresee the changes ahead in time (see Table 1).
The external reasons cause product evolution or its retreat from the market.
The internal reasons force the organization to evolve the product.
Some other issues need to be studied as well when the content (i.e. what) evolves due to drivers of change (i.e. why):• Impact degree: states the impact level between a specific driver of change and a specific content of change.
• Probability: is the likelihood a specific driver of change forces a modification on a specific content.
• Change origin: states whether the change is directly forced by a driver, or is a secondary effect or indirectly.
• Domain: study how each specific domain impacts on above mentioned issues.
Software or hardware component providers, subcontracted companies, tools, etc.
MarketUsers or system buyers, competitors, service organizations, etc.
Certification agencies or the legislation itself.
Technologies offered by the providers to develop products, technologies used by the customers and technological standards.
Economic, time and quality reasons.
Experience of the company in developing the products, taking into account the skills of people and the knowledge about the product, structure, processes and methods.
Specifically, in an SPL setting the market and technology reasons are slightly different.
The first encompasses not only one customer, but a heterogeneous set of customers.
The latter refers to the technology that realizes SPL variability in addition to domain-specific technology.Content of change is any element that can be potentially affected by any driver of change.
Such content consists of stakeholders, strategy, core assets (a.k.a. artifacts), process and resources.The process of change analyzes how the drivers of change impact on the content of change, defining the steps to evolve such artifacts.
This process has been informally defined so far.
However, the main purpose of our work is not to depict a process of change, but to propose a controlled and systematic approach to track the milestones of such change.
The evolution of the SPL typically implies that some artifact(s) realizing some feature(s) can be modified to fit in the new scenario.
Our goal is to document such evolution by tracking such changes.Specifically, we focus on FOP using AHEAD to capture SPL evolution.
First, we concentrate on the evolution of features.
Second, we study how the artifacts realizing a feature evolve.
Third, we analyze how feature models evolve.
We summarize then conceptual ideas behind our approach.
Features as an increment in program functionality can slightly evolve to better fit such functionality.
This implies that a new feature k was introduced and some changes happened to features i' and j' in order to turn M into M'.
(Note that feature removal is not considered, since AHEAD is an extensibility model that does not consider removal).
This time evolution is however not considered by existing models (e.g. AHEAD).
Nonetheless, it would be possible to document such changes over time using the FOP mechanisms for features, but with a slightly different intention.
First, we introduce the mechanisms, and then elaborate on the conceptual notion.Tracking Evolution.
We document this evolution as follows:M' = ∆M 01 • M // evolution from N to N+1In general, note that ∆M 01 is a realization of an evolution from time N to time N+1: In this example, note that k is a new feature, ∆j 01 and ∆i 01 contain changes, and remaining feature deltas (∆f 01 ,∆h 01 ) are empty.
In general, ∆M xy consists of the evolution of a set of features.
∆MEach feature delta (e.g. ∆i 01 ) consists as well of a set of artifacts in AHEAD (e.g. Jak source classes, makefile scripts, etc).
So that, the changes to a set of artifacts typically are done in parallel (e.g. if a method m1() is added to a class A, an invocation from class B is added additionally to use such method).
The motivation to keep track of these time evolution deltas is that whenever SPL deteriorates from time N to time N+1, changes are documented to enable backtracking (i.e. return backwards in the evolution time from time N+1 back to time N).
This scenario is likely to happen when considering maintenance issues as the maintainability of a given SPL can deteriorate depending on SPL evolution [1].
In this scenario, backtracking enables to keep SPL up.
This means that it is possible to return backwards in the SPL evolution, and evolve then in a different way.
We offer the mechanism to drive the direction of such evolution.
The evolution of each feature implies that the set of artifacts realizing it evolves as well.
The mechanisms introduced before consider that each evolution realization is documented similarly to features.
This means that artifacts are designed to deal with evolution changes, but this assumption is not always the case.Hence, we took an alternative approach to modify directly the artifacts and use diff techniques to obtain the changes in terms of deltas (i.e. artifact evolution is represented as a refinement).
A feature realization can consist of distinct artifacts (e.g. model, code, production plan, schedule, and so on) that can change.
We focus on an artifact A. Due to some modification, A could change its content to cater for such new situation.
So, an evolved artifact A' appears.
Existing diff tooling can be used to differentiate A' from original A, so that we get the delta difference: ∆A 01 = diff (A', A).
Our approach is to document this modification like a feature realization, but using another dimension representing evolution time.
Doing so, we keep the feature structure of the entire product line infrastructure.
More important, we can use the same composition mechanisms for time evolution composition than those used for feature composition.Example.
A production plan details how a program is produced from an SPL.
The specification of a production plan can range from a textual description document to a software program capable of generating products automatically (i.e. makefile script) [14].
We focus on a makefile script artifact, which represents how a program is created from source artifacts.
Figure 4 shows a simplified example where Ant is used to represent such makefile.
Evolving Artifact.
This initial artifact can evolve under the request of a new requirement.
For instance, consider that new legal requirements force to save into a revision control system all the created programs.
This impacts on the makefile artifact of Figure 4 as the way programs are created might change.
The result of this requirement is that artifact at time N (Figure 4) evolves to artifact at time N+1 ( Figure 5) where new code is introduced (solid lines in Figure 5).
Extracting Deltas.
The artifacts are modified directly into its source code.
Doing so, they are not forced to be designed for evolution.
Our aim is to extract the delta from time N to time N+1 (i.e. we want to document only the change of the evolution).
We used diff techniques to obtain the changes in terms of a delta, which can be represented as a refinement in AHEAD.XAK was used to represent such refinements as it offers a language and tool support to compose refinements of XML artifacts in AHEAD [2].
Hence, we create a transformation from the delta in terms of diff to a delta in terms of XAK refinement.
Figure 6 shows the resulting XAK refinement where solid lines represent the new content and dotted lines represent XAK extensions.
Next section introduces the details for composing evolved artifacts using XAK.
Composing Evolved Artifacts.
The delta extracted before ( Figure 6) can be composed with the initial time N artifact (Figure 4) to yield the evolved compound artifact ( Figure 5).
We used XAK tool for composing XML in AHEAD [2].
XML files are annotated with special tags and attributes to apply XAK.
Attribute xak:artifact states the name of the artifact.
XAK modules have unique names and can contain any number of nested modules; they are marked with xak:module attribute.
Note that Figure 4 should be slightly modified to show the simplified XAK representation of time N with XAK attributes for designating artifact and its modules that can be refined subsequently.A refinement of a XAK module is defined similarly to method refinement in the Jak language (see Section 2).
A refinement of a XAK artifact is a set of extensions to XAK modules.
It is denoted with tag xak:refines and uses xak:artifact attribute to specify the name of the artifact being refined.
Figure 6 shows the XAK representation for the delta from time N to time N+1.
A refinement has a set of extensions (i.e. points where a document is refined).
Each extension is specified with tag xak:extends qualified with the name of the module target of the extension.
For example, <xak:extends xak:module="mAll"> indicates extension of module mAll, which corresponds to adding a new invocation <antcall target="version"> to <target name="all"/>.
Similar to Jak's Super keyword, XAK extensions can contain tags xak:super to reference the module being extended and to serve as a placeholder of its contents.
This is shown in Figure 6 by tag xak:super of module mAll where prior content is copied.XAK can compose a base artifact with any number of refinements into a compound refinement (note we can not only compose one evolution step but a number of them).
The result of a XAK composition is a XAK artifact.
For example, composition of time N of Figure 4 and diff of Figure 6 is shown in time N+1 of Figure 5.
Notice the underlined code in this figure 5, which results from the substitution of xak:super tag in Figure 6 by the accumulated composition of modules.The underlying XML artifact is obtained by removing from the resulting XAK artifact attributes xak:artifact and xak:module.
The point to remark is that our approach using XAK enables to capture solely the introduced changes instead of the entire new artifact.
Doing so, it is possible to keep track of the evolution.
A feature model sketches in a model the feature variability an SPL offers [9].
As features themselves can evolve, feature models are also liable to evolve.
For instance, new features or new grouping of features can be included into the feature model.
It is common as well that the attributes of a feature evolve.We showed previously an example for evolving an XML artifact because such XML document can be used to represent many artifacts (e.g. architecture, design models, etc), and this makes our approach more general as it can be applied to those representations.Feature models can be represented as well using an XML representation [6].
Hence, we can apply same ideas presented before for XML representations of feature models.
This paper tackled the evolution of Feature Oriented Product Lines.
Specifically, we described an extension of AHEAD model of variability to show how time evolution can be represented into features, artifacts realizing such features, and feature models.
This enables to drive the way an SPL evolves.
Our ultimate envision is the exploration of the evolution of compound software engineering productivity paradigms like Model Driven Product Lines [14].
