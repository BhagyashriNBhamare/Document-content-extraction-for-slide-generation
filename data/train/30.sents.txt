The central problem in computational mechanism design is the tension between incentive compatibility and computational efciency.
We establish the rst significant approximability gap between algorithms that are both truthful and computationally-efcient, and algorithms that only achieve one of these two desiderata.
This is shown in the context of a novel mechanism design problem which we call the COMBINATORIAL PUBLIC PROJECT PROBLEM (CPPP).
CPPP is an abstraction of many common mechanism design situations, ranging from elections of kibbutz committees to network design.
Our result is actually made up of two complementary results  one in the communication-complexity model and one in the computational-complexity model.
Both these hardness results heavily rely on a combinatorial characterization of truthful algorithms for our problem.
Our computational-complexity result is one of the rst impossibility results connecting mechanism design to complexity theory; its novel proof technique involves an application of the Sauer-Shelah Lemma and may be of wider applicability, both within and without mechanism design.
In real networks, routing is done by routers that choose paths other than shortest, and this results in distance matrices that do not satisfy the triangle inequality.In such a situation, it is often desirable to construct an overlay: A set of k nodes spread throughout the network and with high-quality routing between them, so that other nodes can improve the distance between them by routing through the closest overlay node.
An overlay is beneecial to different nodes in different degrees, and we wish to design the overlay that maximizes total welfare.
This is a typical instance of a general problem we dene, called COMBINATORIAL PUBLIC PROJECT PROB-LEM, or CPPP.
There are n agents and m resources, and, for each agent i, a private valuation function v i which speciies i's value for every subset of the resources.
We assume that all valuations are nondecreasing and submodular (a case that encompasses among many others the overlay network example above, see deenitions in Subsec 1.1).
The objective is to nd a subset of the resources S of size k, where k is a parameter, which maximizes the social welfare, i.e., the sum of agents' values for the chosen subset Σ i v i (S).
Computationally speaking, this problem is relatively benign; while many of its special cases are NP-hard [10] it is well known [22] that the greedy algorithm achieves a constant approximation ratio (speciically, 1 − 1 e ).
But the fact that valuations are private presents us with a formidable problem: unless otherwise incentivized, agents are likely to lie, exaggerating the degree to which they prefer one alternative over another 1 , and this misrepresentation makes optimization impossible.There is a very general method for providing incentives for the agents to reveal their true valuation, namely the Vickrey-Clarke-Groves (VCG) mechanism [34,4,14].
However, VCG requires that we solve exactly (typically many instances of) the CPPP  an NP-hard problem.We could of course turn to approximation, as we always do when faced with intractability.
The tragedy of this area is that approximation and truthfulness do not mix:Running VCG with approximate solutions is, in general, not incentive compatible [24].
In other words, efcient approximability and incentive compatibility seem to be at loggerheads.
This tension underlies much of the work in algorithmic mechanism design [24,25,16,5].
In this paper, we establish a huge gap between the quality of the solutions that can be obtained by algorithms for CPPP that are both polynomial and truthful, and by algorithms that satisfy only one of these two desiderata.
We show this by proving that no truthful and computationally-efcient algorithm for CPPP can obtain any reasonable approximation ratio, speciically, a ratio better than √ m (this holds even for the case of two agents) 2 .
Our inapproximability result settles a long-standing open question in algorithmic mechanism design [13,29]: we exhibit a problem (CPPP) that is easy from a computational perspective (a constant approximation algorithm exists), and from an economic perspective (an optimal truthful algorithm exists), but is hard (does not allow for constant approximations) if we care about both 3 .
Our result is actually made up of two complementary results  one in the communication-complexity model and one in the computational-complexity model.
Technically speaking, each of these results must overcome two main challenges [29]: First, we must provide a combinatorial characterization of truthful algorithms.
Then, once we have such a characterization, we can exploit it to prove an inapproximability result.An interesting way to view our results is the following: Over the past four decades, complexity theory has been successful in classifying optimization problems into various classes, such as P, NP, NP-hard, and APX (those problems that can be approximated within some constant factor in polynomial time).
Mechanism design is about incentive-compatible optimization, in which the inputs are provided by agents who have their own objectives.
In this new regime, for social-welfare maximization problems, 4 classical VCG theory implies that P, NP, and NP-hardness are preserved under truthfulness.
Our computational-complexity result essentially states that APX is not preserved (our communication-complexity 2 We note that a simple truthful polynomial-time algorithm that obtains a √ m approximation ratio for CPPP shows that our result is tight in both models.
[32] 3 It is known that algorithms that are both truthful and computationally-efcient might not perform (in terms of approximation ratio) as well as algorithms that only meet one of these two requirements.
However, it was unclear by how much their performance is harmed.
In fact, so far researchers have only been able to establish a gap of 2 between these two types of algorithms [16,8].
4 See discussion about other optimization goals in [21].
result proves an analogous statement in the communication model).
Communication-complexity lower bound.
Our rst main contribution is an exponential lower bound on the amount of communication required by any truthful algorithm that approximates the CPPP within any reasonable ratio:Theorem: Any truthful algorithm for the CPPP that obtains an approximation ratio of O(m 1 2 − ) requires communication that is exponential in m (for every > 0 and even for n = 2).
The rst step of the proof is showing that any truthful algorithm for CPPP must be an afne maximizer.
An afne maximizer is an algorithm deened by a xed set of solutions, and which, given a set of valuations, picks the solution in the set that maximizes social welfare.
A celebrated result by Roberts [28] essentially states that if an algorithm is truthful for all valuations, then it has to be an afne maximizer.
However, this result does not necessarily hold when restricted to special settings (submodular valuations, etc.).
In fact, for many restricted settings, truthful algorithms that are not afne maximizers are known (e.g. [3,2]).
In the present case, by carefully applying machinery from Roberts's (long and delicate) proof  actually, its recent interpretation by Lavi, Mu'alem and Nisan [16,17]  we are able to prove that any truthful algorithm for the nondecreasing submodular case of the CPPP is an afne maximizer.
The proof explores the geometric and topological properties that must hold for any truthful algorithm for CPPP to prove afne maximization.After providing this combinatorial characterization of truthfulness the second step is proving a lower bound for afne maximizers.
We do this by proving a lower bound on the number of solutions in the range of the mechanism, and then exploiting afne maximization to to establish our communication-complexity lower bound.The proof of the theorem draws ideas from works in many different elds of research (e.g., [28,26,23,16,17,5,8,11,19]), and so we defer a discussion of the related work to Section 2.Computational-complexity lower bound.
Our previous result is a communication-complexity lower bound.Informally, the agents are assumed to compute their valuations based on exponentially large data, and then it is shown that too much of this data must be exchanged for the algorithm to be truthful.
However, many interesting valuations depend on very succinct data (recall the introductory overlay problem, in which the input is a distance matrix), and computational-complexity techniques would be needed to establish lower bounds for these; no such results had been known (with the possible exception of Theorem 5 in [16]).
Our next major result does exactly this: We consider a class of nonnegative submodular (though not nondecreasing) valuations, that are succinctly described.
We show that, despite the fact that a 1 − 1 e approximation exists for this class, no truthful and polynomial-time algorithm can obtain an approximation ratio (asymptotically) better than √ m. Lemma [30,33] 5 to obtain a hardness result.
This result has interesting projections on complexity theory as discussed in section 3.
Organization of the paper.
In the balance of this section we introduce the CPPP and the communicationand computational-complexity notions.In the next section we prove our exponential communicationcomplexity lower bound, while in Section 3 we prove our computational-complexity lower bound.
In Section 4 we discuss our results and present several open questions.
In CPPP there is a set of n agents {1, ..., n}, and a set of m resources {1, ..., m}.
Each S, T ⊆ [m] v i (S ∪ T ) + v i (S ∩ T ) ≤ v i (S) + v i (T ).
Submodularity is known to be equivalent to the following easily veriiable property, called decreasing marginal utilities:For every S ⊂ T ⊆ [m], and for every j ∈ [m] such that j / ∈ T v i (S ∪ {j}) − v i (S) ≥ v i (T ∪ {j}) − v i (T ).
Submodularity arises in many contexts  both economic 5 This lemma is closely related to the notion of the Vapnik-Chervonenkis (VC) dimension.and computational (see [18,6,7,9,12,11,35] and references therein).
This paper focuses on submodular functions that are nondecreasing 6 in that S ⊆ T implies v(S) ≤ v(T ).
Nondecreasing submodular functions are known to have particularly good properties; for example, they can be approximated within a ratio of 1 − 1 e (for general nonnegative submodular functions a constant approximation ratio exists [11]).
The objective in the CPPP is to nd a subset of size k, where k is a parameter of the problem, of resources which maximizes the social-welfare.
That is, we wish tond T ∈ argmax S⊆[m], |S|=k Σ i v i (S).
We are interested in algorithms (mechanisms) for CPPP satisfying three desiderata:Quality of solution.
We want our mechanisms to return a solution (set of resources) whose social welfare is as close, in terms of ratio, to the optimum as possible.Computational effciency.
Our algorithms should run in time that is polynomial in the natural parameters of the problem  m and n. However, as the input (the data enabling each agent to compute the valuation) can be exponential in m we must specify how it can be accessed.
In mechanism design one often takes a black box approach (see [6]): We assume that valuations are computed by an oracle that can answer a certain type of queries, and we restrict algorithms to ask a polynomial number (in n and m) of such queries.
There are two common types of queries:• In the value query model a query is a subset of resources S ⊆ [m], and the answer is simply v i (S);This weaker model is mainly used for designing algorithms.
• The general query model is equivalent to Yao's communication model [36,15] A different approach would be to consider cases in which the input (valuations) can be concisely represented, i.e., can be encoded in a natural way that is polynomial in m and n.
We follow this approach in Section 3.
Truthfulness.
We want an algorithm (mechanism) A to be such that the agents are rationally motivated to truthfully answer the algorithm's queries.
This is achieved by a payment function p which, for every n-tuple of valua- tion functions v = (v 1 , ...v n ) ∈ V ,∀v i , v i ∈ V i , ∀v −i ∈ V −i , v i (A(v i , v −i ))−p(v i , v −i ) ≥ v i (A(v i , v −i ))−p(v i , v −i ),where V −i is the cartesian product of all V j 's such that [16] (also see [8]).
7 The notion of truthfulness we consider is the standard notion of truthfulness in dominant strategies.
All our results apply to the weaker notion of truthfulness in ex-post Nash.j = i, (v i , v −i ) is Let A be an algorithm for the nondecreasing submodular CPPP with m resources and parameter k.
We ∀v = (v 1 , ..., v n ) A(v) ∈ argmax S∈R A [(Σ i w i v i (S)) + C S ].
Lemma 2.3 Any truthful algorithm for the nondecreasing submodular CPPP with n = 2 is an afne-maximizer.
Remark 2.4 We note that, as we are aiming for an impossibility result, we prove the characterization lemma only for the 2-agent case.
We shall later show that our inapproximability result holds even for this special case.Proof: As is common in such proofs (see for example [28,17]), we study the topological structure of vectors of valuation differences.
For any pair of valuation func-tions v = (v 1 , v 2 ), we shall denote by v(S) − v(T ) the vector in 2 (v 1 (S) − v 1 (T ), v 2 (S) − v 2 (T )).
We also deene P (S, T ) = {α ∈ 2 |∃ v s.t. A(v) = S and v(S) − v(T ) = α}.
If A is an afne maximizer that outputs a set S for the valuation functions v = (v 1 , v 2 ) then it must hold that for every T = S in R A (for some xed agent-weights w 1 , w 2 and outcome-weights {C R } R∈R A )(Σ i w i v i (S)) + C S ≥ (Σ i w i v i (T )) + C T , which implies that Σ i w i (v i (S) − v i (T )) + (C S − C T ) ≥ 0.
Informally, observe that the inequalities above suggest that if A is an afne maximizer, then there is a line l in 2 of the form w 1 x + w 2 y = 0 such that every P (S, T ) has l as its lower boundary (possibly shifted by some constant γ(S, T ) = C S − C T from the centre of the axes).
So, to prove that a truthful algorithm A is an afne maximizer, we need to show that there are weights w 1 , w 2 (and {C R } R ) that induce such a line l (the same l for all choices of S = T ∈ R A ).
This is precisely what we mean to show.
The reader is referred to [17] for an explanation of the geometric intuition behind the proof of Roberts' Theorem (which also underlies our proof).
Strong monotonicity.We shall require the strong monotonicity property.
v −i ∈ V −i , if A(v i , v −i ) = S and A(v i , v −i ) = T = S then it must hold that v i (S) − v i (T ) > v i (S) − v i (T ).
(S) − v(T ) ≤ v (S) − v (T ) (i.e., ≤ in each coor- dinate) then A(v ) = T .
Proof: Assume, for point of contradiction, that the conditions stated in the theorem hold andA(v ) = T .
Let v = (v 1 , v 2 ) and v = (v 1 , v 2 ).
Let α 1 = v 1 (S)−v 1 (T ).
We shall prove the proposition for the case that α 1 ≥ 0 (the other case requires a very similar construction).
Let j ∈ S \T (since all sets are of equal size such a j is guaranteed to exist).
We deene a valuation function v 1 ∈ V 1 as follows (for some arbitrarily large β > 0):∀R v 1 (R) = α 1 |R ∩ {j}| + β|S||T | −β(|S| − |S ∩ R|)(|T | − |T ∩ R|)It is easy to verify that this is indeed a nondecreasing submodular function (this construction is inspired by [11,19]).
We shall now show that A(v 1 , v 2 ) = S.
This is because if A(v 1 , v 2 ) = Q = S then, by strong monotonicity, v 1 (S) − v 1 (Q) > v 1 (S) − v 1 (Q).
It is easy to show that if Q = S, T then this results in a contradiction (as we can set the value of β to be as high as we like).
Observe that if we set Q = T then this too results in a contradiction.
Similarly, we can show that A(v 1 , v 2 ) = T .
However, in this case by strong monotonicity we have that v 2 (S) − v 2 (T ) > v 2 (S) − v 2 (T ).
A contradiction.Main part of the proof.Claim 2.7 Let α ∈ P (S, T ) for some S, T ∈ R A .
Let = ( 1 , 2 ) ≥ 0.
Then, α + ∈ P (S, T ).
Proof: Since α = (α 1 , α 2 ) ∈ P (S, T ) then, by deenition, there are valuation functions v = (v 1 , v 2 ) such that A(v) = S and v(S)−v(T ) = α.
We prove the claim for the case α ≥ 0 (other cases are handled similarly).
Let j ∈ S \ T .
We deene valuation functions v = (v 1 , v 2 )as follows:∀R v 1 (R) = (α 1 + 1 )|R ∩ {j}| + β|S||T | −β(|S| − |S ∩ R|)(|T | − |T ∩ R|) ∀R v 2 (R) = (α 2 + 2 )|R ∩ {j}| + β|S||T | −β(|S| − |S ∩ R|)(|T | − |T ∩ R|)The use of strong monotonicity (as in the proof of Proposition 2.6) and of Proposition 2.6 itself shows that A(v 1 , v 2 ) = S. Similarly, we can then show that A(v 1 , v 2 ) = S. Observe that v (S) − v (T ) = α + .
Therefore, by deenition, α + ∈ P (S, T ).
Claim 2.7 tells us something important about the structure of the different P (S, T ) sets in 2 : If a point is in P (S, T ) then so are all points above it and to the right of it.
Hence, each P (S, T ) is deened by a lower boundary with a nonincreasing slope.
However, we do not yet know that this nonincreasing slope is a straight line (and certainly not that it is the same straight line for all choices of S, T ).
We shall require the two following technical propositions: Proposition 2.8 For any S = T ∈ R A α ∈ P (S, T ) iff −α / ∈ P (T, S).
Proof:Let α = (α 1 , α 2 ) ∈ P (S, T ).
Then, by definition, there exists v = (v 1 , v 2 ) such that A(v) = S and v(S) − v(T ) = α.
Suppose, for point of contradiction, that −α ∈ P (T, S).
Then, by deenition, there exists v = (v 1 , v 2 ) such that A(v) = T and v (T ) − v (S) = −α (or, v (S) − v (T ) = α).
However, by Proposition 2.6 this is impossible (A(v ) cannot equal T ).
We now prove the other direction, which is equivalent to showing that if α / ∈ P (S, T ) then −α ∈ P (T, S).
Since S is in R A there must be valuationfunctions v = (v 1 , v 2 ) such that A(v) = S. Let α W = v(S) − v(W ).
We prove the proposition for the case α ≥ 0 (other cases are handled similarly).
Let j ∈ S \ T .
We deene valuation functions v = (v 1 , v 2 ) as follows (we choose β to be huge, and in particular higher than the values of all coordinates of all the different α W 's):∀R v 1 (R) = α 1 |R ∩ {j}| + β|S||T | −β(|S| − |S ∩ R|)(|T | − |T ∩ R|) ∀R v 2 (R) = α 2 |R ∩ {j}| + β|S||T | −β(|S| − |S ∩ R|)(|T | − |T ∩ R|)The repeated use of Proposition 2.6 for every W ∈ R A such that W = S, T shows that A(v 1 , v 2 ) must be in {S, T }.
However, since v (S) − v (T ) = α and α / ∈ P (S, T ), it must be that A(v ) = T .
Observe that v (T ) − v (S) = −α.
So, by deenition of P (T, S), −α ∈ P (T, S).
Proposition 2.9 For any S, T, W ∈ R A , such that no two are equal, if α ∈ P (S, T ) and α ∈ P (T, W ) then α + α ∈ P (S, W ).
Proof:Let α = (α 1 , α 2 ).
Let α = (α 1 , α 2 ).
Let Y be an additive valuation function such that ∀j / ∈ S ∪ T ∪ W Y ({j}) = 0 and the two following properties hold:• Σ j∈S Y ({j}) − Σ j∈T Y ({j}) = α 1 • Σ j∈T Y ({j}) − Σ j∈W Y ({j}) = α 1Observe that because the number of variables is greater than the number of equations such a function Y exists.
Since S, T, W are of equal size we can also assume that Y only assigns nonnegative values (otherwise increase the value of each j ∈ S ∪ T ∪ W by some identical large enough constant).
Similarly, let Z be an additive valuation function such that ∀j / ∈ S ∪ T ∪ W Z({j}) = 0 and the two following properties hold:• Σ j∈S Z({j}) − Σ j∈T Z({j}) = α 2 • Σ j∈T Z({j}) − Σ j∈W Z({j}) = α 2We deene (for some huge β to be determined later) the following valuations v = (v 1 , v 2 ):∀R v 1 (R) = Y (R) + β|S||T |− β(|S| − |S ∩ R|)(|T | − |T ∩ R|) ∀R v 2 (R) = Z(R) + β|S||T |− β(|S| − |S ∩ R|)(|T | − |T ∩ R|)Since α ∈ P (S, T ) there must be some valuations v = (v 1 , v 2 ) such that A(v) = S.
The repeated use of Proposition 2.6 (as in the proof of Proposition 2.8)shows that A(v ) ∈ {S, W }.
Similarly, by taking advantage of the fact that α ∈ P (T, W ) one can show (using similar arguments) that A(v ) ∈ {S, T }.
We conclude that A(v ) = S. Observe that v (S) − v (W ) = (v (S) − v (T )) + (v (T ) − v (W )) = α + α .
Hence, by deenition of P (S, W ) α + α ∈ P (S, W ).
We shall prove our result for the case that − → 0 = (0, 0) ∈ P (S, T ) for every S = T ∈ R A .
This greatly simpliies the exposition and enables us to convey the main idea of the proof.
The proof for the more general case is achievable via the exact same logic as presented in [17] (claim 4 and the following claims in the rst proof in that paper follow from what we have proven thus far).
Corollary 2.10 For every S = T, U = W ∈ R A it holds that P (S, T ) = P (U, W ).
Proof:Let α ∈ P (S, T ).
As − → 0 ∈ P (T, W ), we have that α = α + − → 0 ∈ P (S, W ).
We also know that − → 0 ∈ P (U, S), and so α = − → 0 + α ∈ P (U, W ).
That is, all the P (S, T ) sets (for every choice of S, T ) are, in fact, the very same set, that we shall refer to as = (α + α ) + (− α+α 2 ) ∈ X.
A contradiction.By repeatedly using this fact, we can, for any α, α ∈ X and λ ∈ (0, 1) build a series of points that approach λα+(1−λ)α , such that any point in the series has a ball of small radius that is fully contained in X.
This (and the openness of V ) sufces to prove that λα + (1 − λ)α ∈ X.
Now we know that X is convex and therefore has a lower boundary in the form of a straight line l. Moreover, l goes through the origin of the axes − → 0 , as by Proposition 2.8 α ∈ X iff −α / ∈ X. So, l can be described by w 1 x + w 2 y = 0 for some positive constants w 1 , w 2 (recall that l's slope is nonincreasing).
Therefore, we get that A is an afne maximizer (for agentweights w 1 , w 2 and by setting all outcome-weights to be 0).
This concludes the proof of the lemma.
v i (S ∪ {j}) − v i (S) > v i (T ∪ {j}) − v i (T )).
Claim 2.14 V strict is an open domain.Proof: Consider some v = (v 1 , ..., v n ) ∈ V strict .
Let δ be the minimal gap caused by the above strict inequalities (taken over all possible sets of resources, agents, ∀S ⊆ [m] |v i (S) − v i (S)| ≤ .
Proof:Fix some > 0 and valuation function v i that is nondecreasing and submodular.
Let << .
Let g be a valuation function such that ∀R ⊆ [m] g (R) = |R| − 2 |R| 2 m+1 .
The reader can verify that this function is strictly nondecreasing and has strictly decreasing marginal utilities.
Moreover, for any nondecreasing submodular valuation function v and for any it holds that v i = v i + g is strictly nondecreasing and has strictly decreasing marginal utilities.
Let k, the number of chosen resources in the CPPP, be xed to √ m throughout this subsection.
We shall nowshow that any algorithm A that obtains a reasonable approximation ratio must have a range R A of exponential size.
We will then exploit afne maximization to show that the size of the range is a lower bound on the communication complexity.
independently with probability p = m − 1 2 + , where > 0 is small and xed, and consider the valuation function v(S) = |S ∩ V |.
We claim that, unless R A contains at least Ω(e m ) sets, with high probability it approximates v very poorly.Indeed, it follows from the Chernoff bound that, for any small δ > 0, with probability at least 1 − |R A | · exp(δ 2 m 1 2 + ), in this instance of CPPP the optimum |V | is at least (1 − δ)m 1 2 + , while the solution returned by the afne maximizer will be at most (1 + δ)m ).
The lemma follows.The following now concludes the proof of our main result:Lemma 2.17 Any afne maximizer A with range R A requires Ω(|R A |) communication, even for n = 2.
Proof: (Sketch) Consider an afne maximizer A with range R A .
We shall construct two submodular valuation functions which require Ω(|R A |) communication in order to achieve optimality in the range R A .
Recall that A maximizes w 1 v 1 (S) + w 2 v 2 (S) + C S over all S ∈ R A ; it is easy to see that one can assume w 1 = w 2 = 1 for all S, w.l.o.g. Now, suppose that each agent i has a private set R i A ⊆ R A , which induces the following valuation function: • There is a polynomial-time algorithm for the CPPP with valuations in C that approximates the optimal social-welfare within a ratio of 1 − 1 e .
v i (T ) = β · (Π S∈R i A |S| − Π S∈R i A (|S| − |S ∩ T |)) ∀T ⊆ [m].
• Any truthful and polynomial-time algorithm cannot achieve an approximation ratio better than m 1 2 − unless NP ⊆ BPP (for every > 0).
We shall start by proving our lower bound for afne maximizers.
We shall then show how this result can be extended to any truthful algorithm.
T ⊆ [m]: ∀S ⊆ [m], v F,T (S) = | j∈S R j | − |T | (max{0, |S ∩ T | − |T | 2 }) (for some extremely small value of ).
Intuitively, for every S ⊆ [m], v F,T assigns a value that equals the number of elements in U covered by the union of the sets in F with indices in S, minus an insigniicant penalty if S has too many elements in common with T .
It is easy to verify that this function is indeed nonnegative 9 and submodular (but not nondecreasing).
Observe that for any value of k, it is easy to obtain a 1 − 1 e approximation ratio for CPPP with coveragepenalty valuations (simply ignore the penalty terms in the deenitions of the v i 's and apply the 1 − 1 e greedy approximation algorithm).
We shall now show that despite this fact, any afne-maximizer fails to obtain a reasonable approximation ratio: [m] of size Θ( m log m ) that is shattered by R A .
The idea is now to embed a small, but still polynomially large, instance of an NP-complete problem in M .
We shall do this for the problem in which we have a family F of t subsets of a universe U and wish to determine whether there are t 2 sets in F whose union covers the entire universe (which is known to be NP-complete).
f : [q] → {0, 1} there is a sub- set Z ∈ Z for which |Z ∩ Q j | = f (j) for all j ∈ [q].
The probabilistic polynomial-time reduction from our NP-complete problem is very similar to the nonuniform reduction shown above.
The key idea is nding pairwise-disjoint subsets of [m] as in the statement of Lemma 3.4, and then associating each subset of the universe in the NP-complete problem with all elements in one of the pairwise-disjoint subsets.
This technique has an interesting projection in complexity theory: Call a language L ⊆ {0, 1} * exponentially dense if there is some α > 0, and some integer N , such that for any integer n > N it holds that |L ∩ {0, 1} n | ≥ 2 n α .
For a language L ⊆ {0, 1} * , dene SAT L to be the problem: Given a CNF, is there a truth assignment in L that satisses it?
The proof technique implies that:Theorem 3.5 Let L be any exponentially dense language.
If SAT L is in P, then NP ⊆ P/poly.
Observe that we do not know how to relax the computational hardness assumption to NP ⊆ BPP (e.g., via the probabilistic version of the Sauer-Shelah Lemma).
For the problem CIRCUIT SAT, however, we can prove this stronger result via a different technique: Theorem 3.6 Let L be any exponentially dense language.
If CIRCUIT SAT L is in P, then NP ⊆ BPP.Proof: (Sketch) To solve a given CNF φ on n variables, start with a large enough N so that L contains at least 2 n 2 strings of length N .
Now hash these N bits (by a circuit computing a sampled universal hashing function) into n bits.
With very high probability, the 2 n 2 bitstrings in L of length N will cover, after hashing, all 2 n bitstrings of length n.
Then feed these n bits into a veriier circuit for φ.
It is not hard to see that, with high probability, this overall circuit, with N inputs, has a satisfying truth assignment in L if and only if φ is satissable.It would be very interesting to extend this idea (or the ideas in the proof of Lemma 3.4) to SAT L .
We is computationally intractable under weaker computational assumptions.
We suspect that this is possible, but the precise way of doing this eludes us at the moment.
We thank Moshe Babaioff, Liad Blumrosen, Valiant and Umesh Vazirani for helpful discussions.
We thank the anonymous reviewers for valuable comments.
