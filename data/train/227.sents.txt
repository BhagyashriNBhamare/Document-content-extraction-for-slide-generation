We describe a new algorithm for floorplan evaluation using timing-driven buffered routing according to a prescribed buffer site map.
Specifically, we describe a provably good multi-commodity flow based algorithm that finds a global routing minimizing routing area (wirelength and number of buffers) subject to given constraints on buffer/wire congestion and sink delays.
This permits detailed floorplan evaluation, i.e., computing the tradeoff curve between routing area and wire/buffer congestion under any combination of delay and capacity constraints.
Our algorithm (1) enforces maximum source/buffer wireloads; (2) enforces wire and buffer congestion constraints by taking into account routing channel capacities and buffer site locations; (3) enforces individual sink delay constraints; (4) performs buffer/wire sizing and layer assignment ; and (5) integrates pin assignment with virtually no increase in runtime.
Preliminary experiments show that near-optimal results are obtained with a practical runtime.
Early planning of buffer and wiring resources is a critical aspect of every modern high-performance VLSI implementation methodology.
Today, such planning is needed to evaluate the quality of RT-level partitioning and soft (pre-synthesis) block placement/shaping, system-level timing constraints, and pin definition and buffered routing of global interconnects.The requirements for global wire planning as an adjunct to floorplan definition have not changed very much from £ Work supported in part by Cadence Design Systems, Inc., the MARCO Gigascale Silicon Research Center, and NSF Grant CCR- 9988331.
those set out in pioneering works as BBL [6] and BEAR [10]: the floorplan definition must be aware of congestion, wirelength, timing, etc.
Similarly, the need for simultaneous pin assignment and global routing has not changed since, e.g., [7].
It is well-understood that today's context for floorplan definition and global wire planning has evolved: (1) channel-less multilayer area routing has replaced channel/switchbox routing; (2) interconnect delays are more balanced with (appropriately sized) gate delays, and no longer dominated by gate delays; (3) layer RC constants vary by factors of up to 100¢, so that layer assignment must be planned; (4) global interconnects are buffered; and (5) floorplanning is at the RT-level (instead of physical floorplanning) with soft blocks having uncertain area/delay envelopes.
At the same time, the underlying problem formulations and algorithmic technologies have separately advanced in at least three important ways: ¯ The buffer block methodology, along with the associated planning problem (i.e., solving for locations and capacities of buffer blocks), was proposed by Cong et al. [9] and further elucidated by Tang and Wong [18].
While the buffer block methodology has indeed been used throughout the late 1990s in hierarchical structuredcustom (high-end microprocessor) methodologies, it may be less relevant to flat or ASIC-like regimes due to issues of separate power distribution, congestion, etc.
To alleviate congestion problems associated with the use of buffer blocks, the DAC'2001 work of Alpert et al. [3] proposed a buffer site methodology which more uniformly distributes buffers across the chip "wherever possible".
¯ The increased impact of interconnects on system performance in deep-submicron technologies has led to a large literature on performance-driven optimizations for individual global nets.
Such optimizations include buffer insertion and sizing, wire sizing, and topology synthesis, as comprehensively surveyed in [8].
We note that for the purposes of buffered global wire planning, it is likely sufficient that the tool be able to exploit the availability of multiple buffer types, multiple wire widths, and multiple layer assignments.
¯ A literature on provably good global routing has been developed based on the primal-dual framework, starting with "column-generating" analogies in [4,5], then continuing with the work of Albrecht [1] exploiting recent fast approximations for multi-commodity flows [15,14].
The work of Dragan et al. [11,12,13] has even more recently applied such provable approximations to the problem of global routing with a prescribed buffer block plan, taking into account signal parity, delay upper/lower bounds, and other practical considerations.Our ongoing work seeks to combine the above separate threads of the recent literature into a coherent approach to floorplan definition, global route planning, and pin assignment.
In some sense, we hope to regain the "holistic" perspective of the earliest works cited above, e.g., BBL/BEAR.
Eventually, we seek to overcome the individual limitations of various "component" technologies: (1) single-net performance optimizations should adapt to the congestionaware global routing context; (2) the buffer block framework should adapt to the more continuous buffer site framework; (3) both congestion and timing should be addressed simultaneously (e.g., the work of Cong et al. [9] addresses timing but not congestion; the work of Alpert et al. [3] addresses congestion but not timing); (4) pin assignment (which is especially important in soft block planning) as well as buffer insertion/sizing, wire sizing, and layer assignment degrees of freedom should be exploited; and (5) bounds on performance ratio should be maintained as in "provably good" methods.
In this paper, we present our initial efforts toward this end.
Our contribution is summarized as follows.
¯ We describe a new algorithm for floorplan evaluation using timing-driven buffered routing according to a prescribed buffer site map.
Specifically, we describe a provably good multi-commodity flow based algorithm that finds a global routing minimizing routing area (wirelength and number of buffers) subject to given constraints on buffer/wire congestion and sink delays.
Following Alpert et al. [3], we use a 2-dimensional tile graph to capture the wire and buffer congestion of a given floorplan.
The tile size depends on the desired tradeoff between estimation accuracy and runtime.
¯ Our implementation permits detailed floorplan evaluation in that it enables computing the tradeoff curve between routing area and wire/buffer congestion under any combination of delay and capacity constraints.
¯ Like the allocation heuristic in [3], our algorithm enforces maximum source/buffer wireloads and controls congestion by taking into account routing channel capacities and buffer site locations.
At the same time, like the buffer-block planning algorithm in [9], our algorithm takes into account individual sink delay constraints.
¯ Simultaneously, our algorithm performs buffer and wire sizing by taking into account given libraries of buffer types and wire widths, and integrates layer and pin assignment (the latter with virtually no increase in runtime).
Soft pin locations are modeled as multiple sites (grid locations), and are enabling to solution quality.The paper is organized as follows.
In Section 2 we formalize the floorplan evaluation problem for 2-pin nets.
In Section 3 we reformulate the problem as a minimum cost integer multicommodity flow problem (with capacities on sets of edges), give an efficient algorithm for finding nearoptimal solutions to the fractional relaxation, and show how to convert fractional solutions to near-optimal routings by randomized rounding.
In Section 4 we give the modifications needed to enforce sink delay constraints and take into account simultaneous buffer and wire sizing and/or layer assignment.
We discuss handling of multi-pin nets in Section 5 and conclude the paper with experimental results comparing our algorithm with the allocation heuristic in [3].
For a given floorplan and tile size, we construct a vertexand edge-weighted tile graph 񮽙 񮽙´Î񮽙´񮽙´Î Ûµ, where ¯ Î is the set of tiles; ¯ 񮽙 contains an edge between any two adjacent tiles; ¯ For each tile Ú ¾ Î , the buffer capacity 񮽙´Úµ is the number of buffer sites located in Ú; and ¯ For each edge 񮽙 񮽙´ÙÙ񮽙´񮽙´ÙÙ Úµ ¾ 񮽙, the wire capacity Û´񮽙µ is the number of routing channels available between tiles Ù and Ú.To simplify the presentation, in this and the following two sections we will assume that all nets have 2 pins; multipin nets are considered in Section 5.
We denote by AE 񮽙 񮽙AE ½ 񮽙 AE ¾ 񮽙 񮽙 񮽙 񮽙 񮽙 AE 񮽙 񮽙 the given netlist, where each net AE 񮽙 is specified by the sets of tiles, Ë 񮽙 񮽙 Î and Ì 񮽙 񮽙 Î , to which the source, respectively the sink of AE 񮽙 can be assigned.We consider first the case when a single buffer and wire width are available, and only buffer wireload constraints must be satisfied.
In this case we seek for each net AE 񮽙 a path È 񮽙 buffered using the available buffer sites and connecting a vertex from Ë 񮽙 to a vertex from Ì 񮽙 (see Figure 1) such that the source vertex and the buffers drive each at most Í units of wire, where Í is a given upper-bound (the example in Recall that, for every feasible buffered routing in the tile graph 񮽙 񮽙´Î´񮽙µ񮽙񮽙´Î񮽙´Î´񮽙µ񮽙 񮽙´񮽙µ񮽙´񮽙µ Û µ, the wireload of the source and of each buffer must be at most Í.
Figure 2).
Finally, vertices corresponding to each net source and sink are added to À and connected to the tiles to which they may be assigned.Formally The algorithm for approximating the optimum solution to LP (2) (see Figure 3) uses the general framework for multicommodity flow approximation introduced in [15], and relies on simultaneously approximating the dual LP: (3)).
The dual variables are increased by a multiplicative factor for all vertices/edges on a routed path; this ensures that dual weights increase exponentially with usage and thus often used edges are subsequently avoided.Minimum-weight paths are computed using Dijkstra's single-source shortest path algorithm.
To reduce the number of shortest path computations, paths are recomputed only when their weight increases by a factor of more than´½ than´½ · ­ ­ µ.
This speed-up idea, first applied in [14] for the maximum multicommodity flow problem, has been shown in [1] to decrease the running time in practice while maintaining the same theoretical worst-case runtime.
Figure 3 [17].
Remark.
Using ideas from [1] it can be shown that the algorithm in Figure 3 does not only minimize 񮽙, but also "strives" for a lexicographically minimum solution w.r.t. Therefore, a solution of the algorithm indicates where possible changes to the floorplan have to be made in order to reach a feasible routing of all nets.
For this it is especially useful to run the algorithm with a large value for 񮽙, that is to relax the constraint on the total area.
If we want to ignore this constraint completely (i.e., set 񮽙 񮽙 ½), the dual variable Ù is ¼ during the whole algorithm and can be eliminated.
In this section we address the floorplan evaluation problem under given sink delay constraints.
First, we consider enforcing sink delay constraints when a single buffer type and wire width are available.
Then, we extend our algorithm to simultaneously handle buffer and wire sizing.
Assume that we are given an upper-bound of 񮽙 񮽙 on the source-to-sink delay of net AE 񮽙 .
The Elmore delay of a buffered path is the sum of delays of the wire segments comprising the path.
Here, Ö Ù and 񮽙 񮽙Ò´Ùµ񮽙Ò´Ùµ are the output resistance, respectively input capacitance, of the buffer/terminal Ù, Ö Û and 񮽙 Û are the resistance, respectively capacitance, of a tile-long wire, and Ð ÙÙÚ is the wirelength (in tiles) between Ù and Ú.To simplify the exposition we will assume that the intrinsic delay and output resistance of sources are equal to the corresponding parameters of a buffer; in Section 4.2 we will give a construction that handles non-uniform source parameters.
Under this assumption the total (i.e., gate + wire) delay of each routing segment depends only on the segment's length, Ð, and the input capacitance of the driven buffer/sink.
Note that every routing segment ending in tile Ú corresponds in À to a path whose last arc is either the buffer arc´Úarc´Ú Ð 񮽙 Ú ¼ µ if the segment drives a buffer, or the arc´Úarc´Ú Ð 񮽙 Ø 񮽙 µ if the segment drives the 񮽙th sink.
Since these arcs fully identify both the segment length and the input capacitance of the driven buffer/sink, we can assign them pre-computed segment delays, thus obtaining: To enforce the delay upper-bounds for the solution computed by the algorithm given in Section 3 we must restrict the computation to those paths Ô ¾ È 񮽙 that have delay at most 񮽙 񮽙 .
Although the problem of finding a least weight Figure 4.
Routing which is not a tree in 񮽙.
× 񮽙 -Ø 񮽙 path with bounded delay is NP-hard, there is a practical algorithm with arbitrarily good approximation guarantee, i.e., fully polynomial approximation scheme (FPTAS) [16].
This suffices for obtaining arbitrarily good approximations to the timing-driven floorplan evaluation problem:Theorem 4.2There is a fully polynomial approximation scheme for the timing-driven floorplan evaluation problem.
In this section we show how to take into account buffer and wire sizing during timing-driven floorplan evaluation.Consider first buffering with a given buffer library 񮽙 and a fixed wire width.
Each buffer type in 񮽙 has a given area, input capacitance, and output resistance; the different buffer parameters also translate into different upperbounds Í on the wirelength that can be driven by a buffer of each type.The directed graph À 񮽙 capturing all feasible routings with buffers from 񮽙 is obtained as follows.
First construct, as in Section 4.1, a delay weighted graph À for each buffer type, with the same source and sink nodes, × 񮽙 and Ø 񮽙 , 񮽙 񮽙 ½ , and also with the same nodes Ú ¼ for every Ú ¾ Î ´񮽙µ.
Then, remove all arcs of the form´×form´× 񮽙 񮽙 Ú ¼ µ, except the arc from the graph corresponding to the buffer whose driving strength is closest to that of × 񮽙 .
To reduce the complexity of wire sizing, we require a fixed wire width along any buffer-to-buffer wire segment.
As shown in [2], this requirement may increase propagation delays by at most 5% compared to the optimum delay achieved by wire tapering.
Simultaneous wire sizing can now be taken into account by a construction similar to the one used above for buffer sizing.
Let Ï be a given library of wire widths.
The directed graph À 񮽙¢Ï capturing all feasible buffered routings with buffers from 񮽙 and wire widths from Ï is obtained by constructing for each wire width in Ï a graph À 񮽙 as above, with the same source and sink nodes, × 񮽙 and Ø 񮽙 , 񮽙 񮽙 ½ , and also with the same nodes Ú ¼ for every Ú ¾ Î ´񮽙µ.
net AE 񮽙 in 񮽙 and the × 񮽙 -Ø 񮽙 paths in À 񮽙¢Ï .
There is a fully polynomial approximation scheme for the timing-driven floorplan evaluation problem with given buffer and wire width libraries.
For a multipin net we are looking for a buffered tree (instead of a buffered path) in which the wireload of each buffer is at most Í.
Such a buffered tree does not necessarily have to be a tree in the graph 񮽙.
Figure 4 shows such an example: When Í 񮽙 񮽙 we need at least two buffers for any tree connecting the three terminals, and the cheapest (possibly the only available) place for these two buffers might be exactly the tile shown.Extending the approximation algorithm from Section 3 to multipin nets requires a subroutine for computing feasible routings having minimum weight with respect to the dual variables.
Figure 5 gives such a subroutine for 3-pin nets.
We assume here that the possible locations of the source pin for a net AE 񮽙 are specified by Ë 񮽙 as before, while the two sinks are specified by sets In this section we report results for a 2-pin net implementation of our algorithm; multipin nets, delay constraints, and buffer and wire sizing are currently under implementation.
All experiments were conducted on an SGI Origin 2000 with 16 195MHz MIPS R10000 processors (only one of which is actually used by our sequential implementation) and 4 G-Bytes of internal memory, running under IRIX 6.5.
The algorithm was coded in C and compiled using g++ version egcs-2.91.66 with -O4 optimization.We tested our algorithm on the 10 circuits from [9], which were also used in [3].
Multipin nets were decomposed into 2-pin nets in the same way as in [9,3].
The circuit parameters are summarized in Table 1.
Table 2 shows the results of the multicommodity flow algorithm (with pin assignment) when run with 񮽙 񮽙 ½, i.e., when the objective is to minimize the wire and buffer congestion only.
The table shows that progressively better fractional solutions are obtained by the approximation algorithm.
The results also show the tradeoff between congestion on one hand and wiring resources (number of buffers and wirelength) on the other hand.
Table 3 gives the results for wirelength minimization (« 񮽙 ¼ and ¬ 񮽙 ½) subject to wire and buffer congestion constraints (񮽙 ¼ 񮽙 ½񮽙¼ and 񮽙 ¼ 񮽙 ½񮽙¼).
In these experiments the multicommodity flow algorithm is run once per testcase (without binary search), with 񮽙 equal to the lower bound computed by routing each net optimally without taking into account capacity constraints.
The multicommodity flow runtime includes randomized rounding (10000 trials), while RABID runtime is for an RS6000/595 workstation with 1Gb of memory, as reported in [3].
The wirelength of the global routing obtained by our algorithm without pin assignment (MCF) is always within 1.03% of the lower bound.
In contrast, the RABID heuristic of [3] exceeds the lower bound by 񮽙񮽙񮽙񮽙 ½½񮽙񮽙񮽙±.
To evaluate the effect of simultaneous pin assignment, we have added the possibility for each sink to be positioned not only in the given tile, but also in the 3-8 surrounding tiles (see Table 1 for the average number of tiles per pin of each testcase).
Running our algorithm with pin assignment enabled (MCF+PA) further decreases wirelength by 񮽙 ½¼±, while being within at most 0.15% of the corresponding lower bound.
We note that routing and pin assignment is performed by our algorithm in virtually the same time as routing alone.
In this paper we propose the first provably good approach to floorplan evaluation with simultaneous timingand congestion-driven buffered global route planning, pin and layer assignment, and wire/buffer sizing.
Preliminary experimental results show that our method significantly outperforms approaches based on cascading individual optimizations such as the recent RABID algorithm of Alpert et al. [3].
Future work aims to incorporate in our implementation practical improvements such as the use of uneven sized tiles, window constraints on buffer usage (as opposed to tile constraints), and faster-converging dual-update rules.
We thank Charles Alpert, Jason Cong, and Jiang Hu for kindly providing us with the testcases used in [9] and [3].
