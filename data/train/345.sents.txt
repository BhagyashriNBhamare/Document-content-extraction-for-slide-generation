A formal definition of confidentiality is developed using soft (rather than crisp) constraints.
The goal is no longer considered as a mere yes/no property as in the existing literature, but gains an extra parameter, the security level.
The higher the security level, the stronger the goal.
For example, different messages may enjoy different levels of confidentiality, and the same message may enjoy different levels of confidentiality for different principals.
On this basis, the notion of indeliberate confidentiality attack can be captured, whereby a principal learns some message not meant for him because of someone else's tampering.
The analysis of Lowe's attack on the Needham-Schroeder protocol reveals a new weakness.
A major goal of security protocols is confidentiality, confirming that a message remains undisclosed to malicious principals.
However, it must be stressed that different messages require "specific degrees of protection against disclosure" [11].
For example, a user password requires higher protection than a session key, which is only used for a single protocol session.
Intuitively, a password ought to be "more confidential" than a session key.Confidentiality has been essentially formalised as a mere "yes or no" property thus far, so one can just claim that a key is confidential or not.
The motivation for our research was studying a finer formal notion for the goal.
We have developed the notion of l-confidentiality, where l is the security level signifying the strength with which the goal is met.
The security level belongs to the career set of a semiring, as we adopt semiring-based soft constraint programming.
Each principal assigns his own security level to each message -different levels to different messages -expressing the principal's trust on the message.
This lets us formalise that different levels of a goal are granted to different principals.The framework presented here extends and supersedes an existing kernel [1,2].
We can conduct a preliminary analysis to study in detail what goals the protocol achieves in ideal conditions where no principal acts maliciously.
If we are interested, we can also conduct an empirical analysis to study what goals the protocol achieves on a specific network configuration arising from the protocol execution in the real world.
We have observed that Lowe's attack by C against B (after A initiated with C) causes the byproduct that B unexpectedly receives a nonce he is not entitled to know.
It can be concluded that B indeliberately mounted a confidentiality attack on the nonce.
We have discovered that B can later exploit that nonce to mount an attack against C.
This outline anticipates that our notation is uniform: there is not one attacker only, but all principals who perform, either deliberately or not, some operation that is not admitted by the protocol policy are attackers.
Our use of a semiring is loosely inspired to Denning's use of a lattice to characterising secure flows of information through computer systems [7].
The idea of using levels to formalise access rights is in fact due to her.
Denning too sees an attack whenever an object is assigned a label worse than that initially specified, rather than relying on a single attacker.In the following, we indicate by {|m| } K the ciphertext obtained encrypting message m with key K, and avoid external brackets of concatenated messages.
We assume the reader to be familiar with the basic concepts of cryptography.
After an outline on semiring-based SCSPs (Section 2), our framework for protocol analysis is described (Section 3).
The paper continues with the presentation of the crucial SCSPs for analysing security protocols (Section 4), and with the definitions concerning confidentiality (Section 5).
Then, an empirical analysis of the Needham-Schroeder protocol (Section 6) highlights the possible consequences of an indeliberate confidentiality attack.
Finally, some conclusions (Section 7) are given.
Several formalisations of the concept of soft constraints are currently available [18,8,10].
In the following, we refer to that by Bistarelli et al., which is based on c-semirings [4,5].
It can be shown to generalise and express a number of other approaches to soft constraints.A soft constraint may be seen as a constraint where each instantiation of its variables has an associated value from a partially ordered set.
Combining constraints will then have to take into account such additional values, and thus the formalism has also to provide suitable operations for combination (×) and comparison (+) of tuples of values and constraints.
This is why this formalisation is based on the concept of semiring, which is just a set plus two operations.A semiring is a tuple 񮽙A, +, ×, 0, 1񮽙 such that: 1.
A is a set, the career set, and 0, 1 ∈ A; 2.
+ is commutative, associative and 0 is its unit element; 3.
× is associative, distributes over +, 1 is its unit element and 0 is its absorbing element.A c-semiring is a semiring 񮽙A, +, ×, 0, 1񮽙 such that: + is idempotent, 1 as its absorbing element and × is commutative.
Let us consider the relation ≤ S over A such that a ≤ S b iff a + b = b.
Then it is possible to prove that (see [4]): 1.
≤ S is a partial order; 2.
+ and × are monotone on ≤ S ; 3.
0 is its minimum and 1 its maximum; 4. 񮽙
A, ≤ S 񮽙 is a complete lattice and, for all a, b ∈ A, a + b = lub(a, b).
Moreover, if × is idempotent, then: + distributes over ×; 񮽙A, ≤ S 񮽙 is a complete distributive lattice and × its glb.Informally, the relation ≤ S gives us a way to compare (some of the) tuples of values and constraints.
In fact, when we have a ≤ S b, we will say that b is better than a. Below, ≤ S will be abbreviated by ≤.
A constraint system is a tuple CS = 񮽙S, D, V񮽙 where S is a c-semiring, D is a finite set (the domain of the variables) and V is an ordered set of variables.
Given a semiring S = 񮽙A, +, ×, 0, 1񮽙 and a constraint system CS = 񮽙S, D, V񮽙, a constraint is a pair 񮽙def , con񮽙 where con ⊆ V and def : D |con| → A. Therefore, a constraint specifies a set of variables (the ones in con), and assigns to each tuple of values of these variables an element of the semiring.A soft constraint satisfaction problem (SCSP) is a pair 񮽙C, con񮽙 where con ⊆ V and C is a set of constraints: con is the set of variables of interest for the constraint set C, which however may concern also variables not in con.
Notice that a classical constraint satisfaction problem (CSP) [14,13] is an SCSP where the chosen c-semiring is S CSP = 񮽙{f alse, true}, ∨, ∧, f alse, true񮽙.
Fuzzy CSPs [8,16,17] can be modelled in the SCSP framework by choosing the c-semiring: S F CSP = 񮽙 [0,1], max, min, 0, 1񮽙.
Figure 1 shows the graph representation of a fuzzy CSP.
Variables and constraints are represented respectively by nodes and by undirected (unary for c 1 and c 3 and binary for c 2 ) arcs, and semiring values are written to the right of the corresponding tuples.
The variables of interest (that is the set con) are represented with a double circle.
Here we assume that the domain D of the variables contains only elements a and b.
In the following, we omit the double circle when all the variables are of interest.
Combining and projecting soft constraints.
Given two constraints c 1 = 񮽙def 1 , con 1 񮽙 and c 2 = 񮽙def 2 , con 2 񮽙, their combination c 1 ⊗ c 2 is the constraint 񮽙def , con񮽙 defined by con = con 1 ∪con 2 and def (t) = def 1 (t ↓ con con1 )×def 2 (t ↓ con con2 ), where t ↓ X Y denotes the tuple of values over the variables in Y , obtained by projecting tuple t from X to Y .
In words, combining two constraints means building a new constraint involving all the variables of the original ones, and which associates to each tuple of domain values for such variables a semiring element that is obtained by multiplying the elements associated by the original constraints to the appropriate subtuples.Given a constraint c = 񮽙def , con񮽙 and a subset I of V, the projection of c over I, written c ⇓ I is the constraint 񮽙def 񮽙 , con 񮽙 񮽙 where con 񮽙 = con ∩ I and def 񮽙 (t 񮽙 ) = 񮽙 t/t↓ con I∩con =t 񮽙 def (t).
Informally, projecting means eliminating some variables.
This is done by associating to each tuple over the remaining variables a semiring element that is the sum of the elements associated by the original constraint to all the extensions of this tuple over the eliminated variables.In short, combination is performed via the multiplicative operation of the semiring, and projection via the additive operation.Solutions.
The solution of an SCSP problem P = 񮽙C, con񮽙 is the constraint Sol(P) = ( 񮽙 C) ⇓ con .
That is, we combine all constraints, and then project over the variables in con.
In this way we get the constraint over con that is "induced" by the entire SCSP.
For example, each solution of the fuzzy CSP of Figure 1 consists of a pair of domain values (that is, a domain value for each of the two variables) and an associated semiring element.
Such an element is obtained by looking at the smallest value for all the subtuples (as many as the constraints) forming the pair.
For example, for tuple 񮽙a, a񮽙 (that is, x = y = a), we have to compute the minimum between 0.9 (which is the value for x = a), 0.8 (which is the value for 񮽙x = a, y = a񮽙) and 0.9 (which is the value for y = a).
Hence, the resulting value for this tuple is 0.8.
This section sets out by a gentle presentation of our framework and then describes it in more detail.Using soft constraints requires the definition of a c-semiring.
Our security semiring (Section 3.1) is used to specify each principal's trust on the security of each message, that is each principal's security level on each message.
The security levels range from the most secure (highest) level unknown to the least secure (lowest) level public.
Intuitively, if A's security level on m is unknown, then no principal (included A) knows m according to A, and, if A's security level on m is public, then all principals potentially know m according to A.
The lower A's security level on m, the higher the number of principals that A believes authorised to know m. For simplicity, we state no relation between the granularity of the security levels and the number of principals authorised to know m.Using the security semiring, we define the network constraint system (Section 3.2), which represents the computer network on which the security protocols can be executed.
The development of the principals' security levels from manipulation of the messages seen during the protocol sessions can be formalised as a security entailment (Section 3.3), that is an entailment relation between constraints.
Then, given a specific protocol to analyse, we represent its assumptions in the initial SCSP (Section 4).
All admissible network configurations arising from the protocol execution as prescribed by the protocol designers can in turn be represented in the policy SCSP (Section 4).
We also explain how to represent any network configuration arising from the protocol execution in the real world as an imputable SCSP (Section 4).
Given a security level l, establishing whether our definitions of lconfidentiality (Section 5) holds in an SCSP requires calculating the solution of the imputable SCSP and projecting it on certain principals of interest.
The higher l, the stronger the goal.By a preliminary analysis, we can study what goals the protocol achieves in ideal conditions where no principal acts maliciously.
We concentrate on the policy SCSP, calculate its solution, and project it on a principal of interest.
The process yields the principal's security levels, which allow us to study what goals the protocol grants to that principal in ideal conditions, and which potential attacks would be more serious than others for the principal.
For example, an attack on a message whose security level is private is more serious than an attack on a message whose security level is public.By an empirical analysis, we can study what goals the protocol achieves on a specific network configuration arising from the protocol execution under realistic threats.
We concentrate on the corresponding imputable SCSP, calculate its solution and project it on a principal of interest: we obtain the principal's security levels on all messages.
Having done the same operations on the policy SCSP, we can compare the outcomes.
If some level from the imputable is lower than the corresponding level from the policy, then there is an attack in the imputable SCSP.
In fact, some malicious operations contributing to the network configuration modelled by the imputable SCSP have taken place so to lower some of the security levels stated by the policy SCSP.
It is important to stress that any principal might have performed, either deliberately or not, those operations.
Let n be a natural number.
We define the set L of security levels as follows:L = {unknown, private, traded 1 , traded 2 , . . . , traded n , public}We introduce an additive operator, + sec , and a multiplicative operator, × sec .
To allow for a compact definition of the two operators, and to simplify the following treatment, let us define a convenient double naming:-unknown ≡ traded −1 -private ≡ traded 0 -public ≡ traded n+1Let us consider an index i and an index j both belonging to the closed interval [−1, n + 1] of integers.
We define + sec and× sec by the following axioms.Ax.
1: traded i + sec traded j = traded max(i,j) Ax.
2: traded i × sec traded j = traded min(i,j)The structure S sec = 񮽙L, + sec , × sec , public, unknown 񮽙 can be easily verified to be a c-semiring.
We define a constraint system CS n = 񮽙S sec , D, V񮽙 where:-S sec is the security semiring (Section 3.1); -V is an unbounded set of variables.
-D is an unbounded set of values including the empty message {|| } and all atomic messages, as well as all messages recursively obtained by concatenation and encryption.
We name CS n as network constraint system.
The elements of V stand for the network principals, and the elements of D represent all possible messages.
Atomic messages typically are principal names, timestamps, nonces and cryptographic keys.Notice that CS n does not depend on any protocols, for it merely portrays a computer network on which any protocol can be implemented.
Members of V will be indicated by capital letters, while members of D will be in small letters.
Recall that each principal associates his own security levels to the messages.
Those levels evolve while the principal participates in the protocol and performs off-line operations such as encryption, concatenation, decryption, and splitting.We define four rules to compute the security levels that each principal gives to the newly generated messages.
They are presented in Figure 2, where function def is associated to a generic constraint projected on a generic principal A.
Our rules establish that the security level of a message gets somewhat lower each time the message is manipulated by encryption or decryption.
Different rules could be studied if one wanted to capture other features.We now define a binary relation between constraints.Definition 1 (Relation 񮽙).
Consider two constraints c 1 , c 2 ∈ C such that c 1 = 񮽙def 1 , con񮽙 and c 2 = 񮽙def 2 , con񮽙.
The binary relation 񮽙 is such that c 1 񮽙 c 2 iff def 2 can be obtained from def 1 by a number (possibly zero) of applications of the computation rules for security levels ( Figure 2).
Theorem 1 (Relation 񮽙 as entailment relation).
The binary relation 񮽙 is an entailment relation.
Proof hint.
Relation 񮽙 enjoys the reflexivity and transitivity properties, which characterise an entailment relation.Following Theorem 1, we address the relation 񮽙 as security entailment.
So, if c 1 񮽙 c 2 , we say that c 1 entails c 2 .
We will use the security entailment to compute the security levels that each principal associates to the messages he derives by concatenation, splitting, encryption and decryption.
The designer of a protocol must develop a policy to accompany the protocol.
v1, v2 < unknown; def (m1) = v1; def (m2) = v2; def ({|m1, m2| }) = v3 def ({|m1, m2| }) = (v1 +sec v2) ×sec v3Splitting: v3 < unknown; def (m1) = v1; def (m2) = v2; def ({|m1, m2| }) = v3 def (m1) = v1 ×sec v3; def (m2) = v2 ×sec v3Encryption:traded l 1 , traded l 2 < unknown; def (m1) = traded l 1 ; def (m2) = traded l 2 ; def ({|m1| } m 2 ) = traded l 3 def ({|m1| } m 2 ) = (traded l 1 +1 +sec traded l 2 ) ×sec traded l 3 Decryption: traded l 2 , traded l 3 < unknown; def (m1) = traded l 1 ; def (m −1 2 ) = traded l 2 ; def ({|m1| } m 2 ) = traded l 3 def (m1) = traded l 1 ×sec traded l 2 +1 ×sec traded l 3 The Initial SCSP.
The policy for a protocol P is a set of rules stating, among other things, the preconditions necessary for the protocol execution, such as which messages are public, and which messages are private for which principals.
It is intuitive to capture these policy rules by our security levels (Section 3.1).
Precisely, these rules can be translated into unary constraints for the network constraint system.
For each principal A ∈ V, we define a unary constraint that states A's security levels as follows.
It associates security level public to those messages that are known to all, typically principal names, timestamps and public keys; level private to A's initial secrets, such as keys (e.g., A's long-term key if P uses symmetric cryptography, or A's private key if P uses asymmetric cryptography, or A's pin if P uses smart cards); level unknown to all remaining domain values (including, e.g., the secrets that A will invent during the protocol execution, or other principals' initial secrets).
This procedure defines what we name initial SCSP for P, which specifies the principals' security levels when no session of P has yet started.The Policy SCSP.
The policy for a protocol P also specifies how the messages that must be exchanged during a session between a pair of principals are formed.
The protocol designer typically writes a single step as A → B : m, meaning that principal A sends message m to principal B. Each principal is typically allowed to participate in a number of protocol sessions inventing a number of secrets, namely fresh messages.
Assuming both these numbers to be unbounded but finite, a finite number of events may take place [9].
These events consist of principals' inventing fresh messages, and principals' sending messages constructed by concatenation and/or encryption.
So, when a new message is invented, the corresponding constraint is added to the store along with all constraints extracted by security entailment.
No message is intercepted because no malicious principal is assumed to be active: A's sending m to B implies that B, and B only, receives it.Build Policy SCSP(P)1.
p ← initial SCSP for P; 2.
for each event ev allowed by the policy for P do 3.
if ev = (A invents n, for some A and n) then 4.
p ← p extended with unary constraint on A that assigns private to n and unknown to all other messages; 5.
if ev = (A sends m to B not intercepted, for some A, m and B) then 6.
let 񮽙def , con񮽙 = Sol(p) ⇓ {A} ∧ def (m) = tradedi in 7.
p ← p extended with binary constraint between A and B that assigns tradedi to 񮽙{|| }, m񮽙 and unknown to all other tuples; 8.
return p; We read from the protocol policy each allowed step of the form A → B : m and its informal description, which explains whether A invents m or part of it.
Then, we build the policy SCSP for P by the algorithm in Figure 3.
The algorithm adds new constraints to the initial SCSP according to the event that is considered.
If that event is a principal A's inventing a message n, then a unary constraint is added on variable A assigning security level private to the domain value n (and unknown to all other values).
If that event is a principal A's sending a message m to a principal B, then the semiring value, alias security level, associated to message m over A is considered.
This level is computed by entailment (Section 3.3) whenever m is obtained by manipulation of other messages (rather than m being e.g. a fresh nonce just invented with security level private by the previous case of the algorithm).
A binary constraint that assigns the newly computed security level to the tuple 񮽙{|| }, m񮽙 (and unknown to all other tuples) is now added to the current SCSP on the pair of variables A and B.This reasoning is repeated for each of the unbounded (but finite) number of events allowed by the policy.
When there are no more events to process, the current SCSP is returned as policy SCSP for P, which is our formal model for the protocol.The Imputable SCSP.
A real-world network history induced by a protocol P must account for malicious activity by some principals.
Each such history can be viewed as a sequence of events of the forms: a principal's inventing new messages, a principal's sending messages that are not intercepted, and a principal's sending messages that are intercepted.
While the second event signifies that the intended recipient of a message indeed gets the message, the third signifies that some malicious principal prevents the delivery of the message that is sent.We can model any network configuration at a certain point in any realworld network history as an SCSP by modifying the algorithm given in Figure 3 as in Figure 4 (unmodified fragments are replaced by vertical dots).
The new algorithm takes as inputs a protocol P and a network configuration nc originated from the protocol execution.
The processing of the third type of event is added: when a message is sent by A to B and is intercepted by another principal C, the corresponding constraint must be stated on the pair A, C rather than A, B.Build Imputable SCSP (P, nc) . . .7.1.
if ev = (A sends m to B intercepted by C, for some A, m, B and C) then7.2.
let 񮽙def , con񮽙 = Sol(p) ⇓ {A} ∧ def (m) = tradedi in 7.3.
p ← p extended with binary constraint between A and C that assigns tradedi to 񮽙{|| }, m񮽙 and unknown to all other tuples; . . . The new algorithm outputs what we name an imputable SCSP for P. Clearly, there exist an unbounded number of imputable SCSPs for P, each representing a different network configuration.
Both the initial SCSP and the policy SCSP may be viewed as imputable SCSPs.
"Confidentiality is the protection of information from disclosure to those not intended to receive it" [15].
This definition is often simplified into one that is easier to formalise in a model with a single attacker: a message is confidential if it is not known to the attacker.
The latter definition is somewhat weaker: if a principal C who is not the attacker manages to learn a session key for A and B, the latter definition holds but the former does not.
By considering all principals as potential attackers, we can capture the former definition.We remark that a protocol may give different guarantees about its goals to different principals, so our definition of confidentiality must depend on the specific principal that is considered.
Using the security levels, we develop uniform definitions of confidentiality and of confidentiality attack, which appear to capture any policy requirement.
Intuitively, if a principal's security level on a message is l, then the message is l-confidential for the principal because the security level in fact formalises the principal's trust on the security, that is confidentiality, of the message.Definition 2 (l-confidentiality).
Given an imputable SCSP p and a principal A, we say that there is l-confidentiality of m for A in p iff Sol(p) ⇓ {A} (m) = l.Preliminary analysis on confidentiality.
By studying the policy SCSP for a given protocol, we can conduct what we name a preliminary analysis of the protocol goals.
Here, we concentrate on confidentiality.First, we calculate the solution of the policy SCSP, and project it on some principal of interest A. Let us suppose that two messages m and m 񮽙 get security levels l and l 񮽙 respectively, and that l 񮽙 < l. Thus, even if no principal acts maliciously, m 񮽙 must be manipulated more than m, so A trusts that m will be less at risk than m 񮽙 .
We conclude that the protocol achieves a stronger confidentiality goal on m than on m 񮽙 even if it is executed in ideal conditions.
Therefore, losing m to a malicious principal would be more serious than losing m 񮽙 .
We address a principal's loss of m as confidentiality attack on m.Empirical analysis on confidentiality.
By an empirical analysis, we consider a specific real-world scenario arising from the execution of a protocol and build the corresponding imputable SCSP p.
If the imputable SCSP achieves a weaker confidentiality goal of some message for some principal than the policy SCSP does, then the principal has mounted, either deliberately or not, a confidentiality attack on the message.
Given a policy SCSP P, an imputable SCSP p for the same protocol, and a principal A, we say that there is a confidentiality attack by A on m in p iff there is l-confidentiality of m in P for A, l 񮽙 -confidentiality of m in p for A, and l 񮽙 < l.Therefore, there is a confidentiality attack by A on m in p iff Sol(P) ⇓ {A} (m) < Sol(P) ⇓ {A} (m).
The more an attack lowers a security level, the worse that attack, so confidentiality attacks can be variously compared.
The protocol.
Figure 5 presents the asymmetric Needham-Schroeder protocol, which is so popular that it requires little comments.The goal of the protocol is authentication: at completion of a session initiated by A with B, A should get evidence to have communicated with B and, likewise, B should get evidence to have communicated with A. Assuming that encryption is perfect and that the nonces are truly random, authentication is achieved here by confidentiality of the nonces.
Indeed, upon reception of Na inside message 2, A would conclude that she is interacting with B, the only principal who could retrieve Na from message 1.
In the same fashion, when B receives Nb inside message 3, he would conclude that A was at the other end of the network because Nb must have been obtained from message 2, and no-one but A could perform this operation.Lowe discovers [12] that the protocol suffers the attack in Figure 6, whereby a malicious principal C masquerades as a principal A with a principal B, after A initiated a session with C.
The attack, which sees C interleave two sessions, indicates failure of the authentication of A with B, which follows from failure of the confidentiality of Nb.
The security levels of all other principals on the nonces Na and Nb are unknown.
So, by Definition 2, those nonces are unknownconfidential for any principal different from A or B.
An empirical analysis.
We start off by building the initial SCSP, whose fragment for principals A and B is in Figure 7 (the following only features suitable SCSP fragments pertaining to the principals of interest).
Then, we build the policy SCSP for the protocol by Build Policy SCSP.
Figure 8 presents the fragment pertaining to a single session between principals A and B.
The figure indicates that, while A's security level on her nonce Na was initially private, it is now lowered to traded 1 by entailment because of the binary constraint formalising step 2 of the protocol.
Similarly, B's security level on Nb is now traded 2 though it was originally private.
The figure omits the messages that are not relevant to the following discussion.
At this stage, we use Build Imputable SCSP to build the imputable SCSP given in Figure 9.
It formalises the network configuration defined by Lowe's attack.
The solution of this SCSP projected on variable C is a constraint that associates security level traded 4 to the nonce Nb.
Following Definition 2, Nb is traded 4 -confidential for C in this SCSP.
Hence, by Definition 3, there is a deliberate confidentiality attack by C on Nb in this problem, because Nb got level unknown in the policy SCSP.
This leads to Lowe's attack.1.
A → C : {|Na, A| } Kc 1 񮽙 .
C → B : {|Na, A| } Kb 2 񮽙 .
B → A : {|Na, Nb| } Ka 2.
C → A : {|Na, Nb| } Ka 3.
A → C : {|Nb| } Kc 3 񮽙 .
C → B : {|Nb| } KbWe discover another attack in the same problem.
The problem solution projected on variable B associates security level traded 2 to the nonce Na, which instead got level unknown in the policy SCSP.
This signifies that B has learnt a nonce that he was not allowed to learn by policy, that there is an indeliberate confidentiality attack by B on Na.
Notice that the two attacks are uniformly formalised.As a consequence of the former attack, Lowe reports that, if B is a bank, C can steal money from A's account as follows and the bank A would honour the request believing it came from the account holder C.
In practice, it would be sufficient that B realises what Na is for the latter crime to succeed.
There are also less serious attacks.
The nonce Na is traded 3 -confidential for A in this SCSP, while it was traded 1 -confidential in the policy SCSP.
The discrepancy highlights that the nonce has been handled differently from the policy prescription -in fact C reused it with B. Also, Nb's security level for A is traded 3 instead of traded 1 as in the policy SCSP.
Similar considerations apply to Nb, whose security level for B is traded 4 instead of traded 2 .
This formalises C's abusive use of the nonce.񮽙
{ | | } , { | N a , a | } K c 񮽙 → t r a d e d 1 񮽙 { | | } , { | N a , a | } K b 񮽙 → t r a d e d 2 񮽙 { | N a , N b | } K a , { | | } } → t r a d e d 3 񮽙 { | N a , N b | } K a , { | | } } → t r a d e d 3 񮽙 { | | } , { | N b | } K c 񮽙 → t r a d e d 4 񮽙 { | | } , { | N b | } K b 񮽙 → t r a d e d 4 񮽙Na񮽙 → traded1 񮽙Na񮽙 → traded2 񮽙Na񮽙 → traded3 񮽙Nb񮽙 → traded 3 񮽙Nb񮽙 → traded 4 񮽙Nb񮽙 → traded 4 { |Na, Nb| } Ka → traded 3 We have developed a new framework for analysing security protocols, based on a recent kernel [1,2].
Soft constraint programming allows us to conduct a fine analysis of the confidentiality that a protocol attempts to achieve.
Using the security levels, we can formally claim that a configuration induced by a protocol achieves a certain level of confidentiality.
That configuration may be ideal if every principal behaves according to the protocol, as formalised by the policy SCSP; or, it may arise from the protocol execution in the real world, where some principal may have acted maliciously, as formalised by an imputable SCSP.
We might even compare the forms of the same goal as achieved by different protocols.We have discovered a new attack on the asymmetric Needham-Schroeder protocol -once C masquerades as A with B, principal B indeliberately gets hold of a nonce that was not meant for him.
At this stage, B might decide to exploit this extra knowledge, and begin to act maliciously.
Our imputable SCSP modelling the scenario reveals that B's security level on the nonce is lower than that allowed by the policy.While mechanical analysis was outside our aims, we have implemented a mechanical checker for l-confidentiality on top of the existing Constraint Handling Rule (CHR) framework [3].
For example, when we input the policy SCSP for the Needham-Schroeder protocol and the imputable SCSP corresponding to Lowe's attack, the checker outputs checking(principal(a)) checking(principal(b)) attack(n_a, policy_level(unknown), attack_level(traded_1)) checking(principal(c)) attack(enk(k(a),pair(n_a,n_b)), policy_level(unknown), attack_level(traded_1)) attack(n_b, policy_level(unknown), attack_level(traded1))The syntax seems to be self-explanatory.
Line two reveals the new attack we have found on B, who has lowered his security level on Na from unknown to traded 1 .
Likewise, line three denounces that not only has C got hold of the nonce Nb but also of the message {|Na, Nb| } Ka (which was meant for A and not for B) that contains it.At this stage, integrating our framework with model-checking tools appears to be a straightforward exercise.
The entailment relation must be extended by a rule per each of the protocol messages in order to compute their security levels.
Hence, our constraints would be upgraded much the way multisets are rewritten in the work by Cervesato et al. [6] (though they only focus on a single attacker and their properties are classical yes/no properties).
Then, once suitable size limits are stated, the imputable SCSPs could be exhaustively generated and checked against our definitions of confidentiality.
