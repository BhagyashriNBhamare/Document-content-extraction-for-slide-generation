iClass is one of the most widely used contactless smartcards on the market.
It is used extensively in access control and payment systems all over the world.
This paper studies the built-in key diversification algorithm of iClass.
We reverse engineered this key diversification algorithm by inspecting the update card key messages sent by an iClass reader to the card.
This algorithm uses a combination of single DES and a proprietary key fortification function called 'hash0'.
We show that the function hash0 is not one-way nor collision resistant.
Moreover, we give the inverse function hash0 −1 that outputs a modest amount (on average 4) of candidate pre-images.
Finally, we show that recovering an iClass master key is not harder than a chosen plaintext attack on single DES.
Considering that there is only one master key in all iClass readers, this enables an attacker to clone cards and gain access to potentially any system using iClass.
Over the last few years, much attention has been paid to the (in)security of the cryptographic mechanisms used in contactless smartcards [NESP08, GdKGM + 08, GvRVS09, COQ09, GvRVS10].
This paper does not focus on the security of the cards themselves but on the security of the cryptographic protocols used in the embedding systems.
Concretely, we study the key diversification and the proprietary 'key fortification' functions of the HID iClass contactless smartcards and the secure key loading mode of the Omnikey readers.iClass is an ISO/IEC 15693 [ISO09] compatible contactless smartcard manufactured by HID Global.
It was introduced on the market back in 2002 as a secure replacement of the HID Prox card which had no cryptography at all.
According to the manufacturer more than 300 million iClass cards have been sold.
These cards are widely used in access control to secured buildings such as The Bank of America Merrill Lynch, the International Airport of Mexico City and the City of Los Angeles among many others 1 .
According to 1 http://hidglobal.com/mediacenter.php?cat2=2HID [Cum06] iClass is also deployed at the United States Navy base of Pearl Harbor.
Other applications include secure user authentication such as in the naviGO system included in Dell's Latitude and Precision laptops; e-payment such as in the FreedomPay and SmartCentric systems; and billing of electric vehicle charging such as in the Liberty PlugIns system.HID Global is also the manufacturer of the popular Omnikey readers.
The Omnikey 5321 reader family is a multiprotocol contactless reader which includes iClass compatibility.
Starting from firmware version 5.00 these readers have the so-called 'Omnikey Secure Mode' which is required to update iClass card keys.
This Secure Mode provides encryption of the USB traffic complying with ISO/IEC 24727 [ISO08] standard.
Experience has shown that, once obscurity has been circumvented, proprietary algorithms often do not provide a satisfactory level of security.
One of the most remarkable examples of that is the infamous case of the Mifare Classic [NESP08, GdKGM + 08, GvRVS09] used widely in access control and transport ticketing systems.
Other examples include KeeLoq [IKD + 08] and Hitag2 [SNC09], which are widely used in wireless car keys and the A5/1 [Gol97] and DECT [LST + 09] ciphers used in cell and cordless phones.
The contribution of this paper is manyfold.
First it describes the reverse engineering of the built-in key diversification algorithm of iClass.
This key diversification algorithm consists of two parts: a cipher that is used to encrypt the identity of the card; and a key fortification function, called hash0 in HID documentation, which is intended to add extra protection to the master key.
Our approach for reverse engineering is in line with that of [GdKGM + 08, LST + 09, GvRVS10] and consists of analyzing the update card key messages sent by an iClass compatible reader while we produce small modifications on the diversified key, just before fortification.
For this it was first necessary to bypass the encryption layer of the Omnikey Secure Mode.
We reverse engineered the Omnikey Secure Mode and wrote a library that is capable of communicating in Omnikey Secure Mode to any Omnikey reader.
To eavesdrop the contactless interface we have built a custom firmware for the Proxmark III in order to intercept ISO/IEC 15693 [ISO09] frames.
We have released the library, firmware and an implementation of hash0 under the GNU General Public License and they are available at the Proxmark website 2 .
Last but not least, we show that the key fortification function hash0 is actually not one-way nor collision resistant and therefore it adds little protection to the master key.
Concretely, we give the inverse function hash0 −1 that on input a 64 bit bitstring it outputs a modest amount (on average 4) of candidate pre-images.
We propose an attack that recovers a master key from an iClass reader of comparable complexity to that of breaking single DES, thus it can be accomplished within a few days on a RIVYERA 3 .
This is extremely sensitive since there is only one master key for all iClass readers and from which all diversified card keys can be computed.As an alternative, it is possible to emulate a predefined card identity and use a DES rainbow table [Hel80] based on this identity to perform the attack.
This allows an adversary to recover the master key within minutes.During the course of this research, Meriac and Plötz presented a powerful procedure to read out the EEPROM of a PIC microcontroller, like the ones used in iClass readers, at the 27th meeting of the Chaos Communication Congress [MP10, Mer10].
This attack is possible due to a misconfiguration of the memory access control bits of the PIC used in early reader models, for more details on this attack see the OpenPCD website 4 .
Their attack on the hardware is a viable alternative to retrieve the master key.
The Omnikey contactless smartcard reader has a range of key slots where it stores cryptographic keys.
These keys are used to authenticate with an HID iClass card.
After a valid authentication the reader gains read and write access to the memory in the card.All recent Omnikey 5321 and 6321 contactless smartcard readers manufactured by HID Global support encrypted communication with the host, which is called Secure Mode.
Applications compliant with ISO/IEC 24727 [ISO08] must provide end-to-end encryption and therefore the USB communication between the application and reader needs to be encrypted.To activate the Secure Mode, the host application uses a 3DES key K CUW to perform mutual authentication with the reader.
According to the Omnikey developers guide [WDS + 04] this key is only known by a limited group of developers under a non-disclosure agreement with HID Global.The Omnikey Secure Mode must be active in order to perform security sensitive operations like changing the key of a card.
In order to be able to eavesdrop and modify messages between the reader and a card during a key update, the Omnikey Secure Mode must be circumvented.The two-factor authentication application naviGO from HID Global provides a login procedure for Windows computers using an iClass card and a PIN-code.
A trial version of this software package is freely available online 5 .
NaviGO uses the Omnikey reader for the personalization phase where it authenticates, updates the key and writes credentials to an iClass card.
To perform these actions naviGO needs to know the cryptographic key K CUW in order to use the Secure Mode.
HID Global stores the secret key in an unprotected binary file.
After extracting K CUW from the file iCLASSCardLib.dll we gained full control over the secured USB channel.We have released a library called iClassified that makes it possible to send arbitrary commands to an Omnikey reader using the Omnikey reader in Secure Mode.
The iClass card is basically a re-branded version of the PicoPass contactless smartcard which is manufactured by Inside Secure 6 .
The documentation of the PicoPass [Con04] defines the configuration options, commands and memory structure of an iClass 2KS card.
Before HID Global sells the PicoPass as an iClass card, they configure the memory, store their cryptographic keys and blow the fuse that allows any future changes to the configuration.
The iClass cards come in two versions 2KS and 16KS with respectively 256 and 4096 bytes of memory.
The memory is divided into blocks of eight bytes as shown in Figure 1.
Memory blocks 0, 1, 2 and 5 are publicly accessible, they contain the card serial number id, configuration bits, the card challenge c C and issuer information.
Block 3 and 4 contain two diversified cryptographic keys which are derived from two different HID master keys.
These master keys are referred to in the documentation as debit key kd and credit key kc.
The card only stores the diversified keys kd id and kc id .
The remaining blocks are divided into two areas so-called applications.
The size of these applications is defined by the configuration block.
The first application of an iClass card represents the HID application which stores the identifier, PIN code, password and other access control information.
Read and write access to the HID application requires a valid mutual authentication using a proprietary algorithm that proves knowledge of kd id .
The second application is user defined and secured by a key kc id derived from kc.
The default kc (but not kd) is stored in the same binary file that contains the secret key for the Omnikey Secure Mode.
We use this key later on Section 4.1 during the reverse engineering process.We use our iClassified library to eavesdrop the USB communication while the card key is updated.
We observe that a default iClass master key is loaded into key slot 32 of the reader.
This key is used to derive the card key which is used for authentication.
Then, a new master key is loaded into slot 32 and the card key is updated with the new derived key.
Figure 2 shows the eavesdropped messages between the reader and a card during a sequence of card key update commands.
The application first updates the default key kc of an genuine iClass card to random kc ′ and kc ′′ .
Finally it sets the default key again.
The trace shows that the key update message contains as payload the exclusive-or (XOR) of the old and new key as mentioned in [MP10].
This can be verified computing(kc ′ id ⊕ kc id ) ⊕ (kc ′′ id ⊕ kc ′ id ) = kc id ⊕ kc ′′ id .
This section describes the authentication protocol between an iClass card and reader.
Furthermore, it gives an overview of the built-in key diversification algorithm.The authentication protocol between an iClass card and a reader is depicted in Figure 3.
First, the card sends its identity id and a card challenge c C .
This c C is called 'epurse' [Con04] and it is special in the sense that it is intended to provide freshness.
Apparently, the card lacks a pseudo-random generator and therefore, after a successful authentication, the reader should update c C to a new value in order to provide freshness in the next authentication.
Note that this is not enforced by the card.
Next, the reader answers with a nonce n R of its choosing and an answer a R to the challenge of the card.
This answer is presumable some sort of MAC depending on c C and n R .
Finally, the card answers with a similar message a C to achieve mutual authentication.iClass has a built-in key diversification algorithm.
suggests that the reader encrypts the card identity (id) using single DES.
Then it performs a fortification algorithm to obtain the diversified key.
The following steps verify that the card identity is the only input to the DES algorithm:• start with any 64 bit bitstring c, e.g., all zeros • choose a random key k and use DES to decrypt c.
This results in a plaintext p • choose a different key k ′ and use DES to decrypt c.This results in a plaintext p ′ • run a card key update with k with a reader that receives identity p from a card emulator.
Repeat this using key k ′ and identity p ′ and verify that the derived key k p is equal to k ′ p ′ .
Key fortification functions are non-injective functions (many-to-one) which, in contrast with hash functions, intentionally have many collisions [AL94].
The idea behind it is that even if an adversary has access to many diversified keys, these do not univocally determine a master key.
This comes, of course, at the cost of loosing entropy in the diversified key.In practice, it means that even if you manage to invert the fortification function, you will get many candidate preimages which in turn you need to brute force to get to the master secret key.
This section describes the reverse engineering of the key fortification function.
The design of this function, called h0 [Cum03] or hash0 [Cum06], is not publicly available.
Our primary goal is to learn the card key derivation which gives complete control over the card key.
In order to reach this goal it is necessary to reverse engineer the fortification function.As explained in Section 3.1 the input to the key diversification is a master secret key (e.g., kc or kd) and a card identity id.
From this key, say kc, and id a ciphertext c = DES enc (id, kc) is computed.
Finally, the actual diversified key kc id is computed hash0(c) = kc id .
A good first step to recover hash0 is to analyze its inputoutput relations on bit level.
This requires complete control over its input c which can be achieved in a test setup by the emulation of a card identity id knowing the master key kc.The following steps deliver XOR differences between two hash0 evaluations that differ only one bit in the input:• generate a large set of random bitstrings c i ∈ {0, 1} 64 .
• for each c i calculate id i = DES dec (c i , kc) and idj i = DES dec (c i ⊕ 2 j , kc) for j ∈ {0, . . . , 63}.
• for each c i execute 64 key updates as follows:-authenticate with id i -perform a key update, the reader requests the card identity again, now use id j i instead of id i Keep the key kc constant during the key updates described above.
This delivers the XOR of two function evaluations of the form hash0(c i ) ⊕ hash0(c i ⊕ 2 j ).
We performed this procedure for 3000 values c i with j ∈ {0, . . . , 63}.
The results are grouped by the position of the flipped bit.
Then, the AND and OR is computed of all the results in a group.
These cumulative AND and OR-masks for 64 bitflips in 3000 random bitstrings c i are presented in Figure 6 and 9.
Figure 6 shows that the hash0 function handles the 48 rightmost bits in smaller 6-bit pieces.
These 6-bit data chunks are defined as z 0 , . . . , z 7 .
The two bytes on the left are defined x and y.
Here x defines a permutation on the output and the individual bits of y define whether or not a complement operation is applied on one of the 6-bit output values.
The eight output bytes are defined as k 0 , . . . , k 7 and constitute the diversified key kc id .
Similarly, the input c to the hash0 function is constituted by c = x, y, z 0 , . . . , z 7 .
For the ease of reading we write x [b] to denote the b-th bit of variable x where x [0] means the rightmost bit of x.The structure of the masks in Figure 6 and 9 are computed with x = y = 0 and z 0 , . . . , z 7 as random bitstrings.
The masks lead to the following observations:• z 0 , . . . , z 3 affects k 4 , . . . , k 7 .
• z 4 , . . . , z 7 affects k 0 , . . . , k 3 .
• z 0 , . . . , z 3 and z 4 , . . . , z 7 generate a similar structure in the output but are mutually independent.
This suggests that there is a subfunction that is called twice, once with z 0 , . . . , z 3 and once with z 4 , . . . , z 7 .
In the context of this paper we refer to this function as scramble.
• y [i] affects k i for i ∈ {0, . . . , 7}.
The OR-mask for y indicates a complement operation on the output while the AND-mask presumes an injective function that maps y [i] to k i [7] .
• x creates a permutation.
The output is scrambled after flipping a single bit within x.
The AND-mask shows that k i [0] is exclusively affected by x for i ∈ {0, . . . , 7}.
• flipping bits in z 0 , . . . , z 7 does never affect the left-or rightmost bits of k 0 , . . . , k 7 .
This is inferred from the occurrences of the 0x7e value in the OR-mask which is 01111110 in binary.
The above observations suggest that the problem of function recovery can be split into parts.
Figure 5 summarizes how different parts of the input affect specific parts of the output when x is kept zero.
Note that the last observation shows that the subfunction scramble operates on four 6-bit input values and computes four 6-bit output values.
These output values constitute the middle 6 bits of output bytes k i , see Figure 5.
Furthermore, it is observed that the ordering of the 6-bit output values and the leftmost bit of the output bytes are determined by x. Each bit of y is simply copied into the rightmost bit of each output byte.Summarizing, the hash0 function can be split into three different parts.
The first part is the subfunction scramble which is called twice, once with input z 0 , . . . , z 3 and once with input z 4 , . . . , z 7 .
The second part computes a bitwise complement operation based on the complement byte y and the last part applies a permutation that is defined by the permute byte x.
The following sections discuss these different parts of the hash0 function.
Finally, Section 4.6 defines the complete function.
OR-mask AND-mask ⊕ → k 0 k 1 k 2 k 3 k 4 k 5 k 6 k 7 k 0 k 1 k 2 k 3 k 4 k 5 k 6 k 7 z 7                    07e7e7e7e00000000 Figure 6: OR and AND-mask for bitflip 0-47 This section describes the reverse engineering of the subfunction scramble which operates on four 6-bit input values z 0 , . . . , z 3 .
In order to recover this part of the function we keep x = y = 0 while z 0 , . . . , z 7 are randomly chosen.
For the scramble subfunction only bitflips at positions 0 to 47 matter (see Figure 6).
It makes sense to start with the recovery of either k 0 or k 4 as they both depend on a single input z i .
Notice that k 4 is just z 3 shifted one bit to the left since we keep x = y = 0.
However, k 0 seems less predictable.
The XOR between two outputs k i ⊕ k ′ i of two function calls is defined as k ⊕ i .
Furthermore, be aware that the subfunction scramble only affects bits k i [1] , . . . , k i [6] (See Fig 5).
To put it differently, the output is always shifted one bit to the left and therefore this shift can be omitted from the analysis.In order to find a relation between input values z 7 and output values k ⊕ 0 a selection of all observed values k ⊕ 0 is made.
Figure 7 shows a relation between z 7 and k ⊕ 0 and shows which bits of z 7 are fixed for a certain output value k ⊕ 0 .
Bits that do not matter are marked with a dot and the bitflip is marked f.
The two inputs are z 7 where f = 0 and z ′ 7 where f = 1.
= (z 7 mod 63) + 1 ⊕ (z ′ 7 mod 63) + 1 which gives confidence that k 0[1.
.6] = (z 7 mod 63) + 1.
The next step is to find k 1 [1.
.6] which is dependent on two input input values, namely z 6 and z 7 .
Again, an overview of all input-output relations (Figure 8) is constructed.
The first part where k ⊕ 1 ∈ {02, 0c, 52, 6c, . . .} is the result of flipping z 6[0] and the second part where k ⊕ 1 ∈ {0c, 1c, 3c, . . . , 4e, 64, . . .} is the result of flipping z 6 [1] .
z 7 /z ′ 7 k ⊕ 0 z 7 /z ′ 7 k ⊕ 0 ....The observations for flipping z 6[0] and z 6 [1] show that in 97 % of the cases input z 6 and z 7 are independent.
3 % of the bitflips in z 6 make z 6 + 1 equal to z 7 or destroy this equality instead.
% z 6 /z ′ 6 z 7 k ⊕ 1 0.97 .....f ...... 02                bitflip z 6[0] 0.03           00010f                ....f. ...... 0c                                          bitflip z 6[1].
When z 6 [1] is flipped more output variations in k ⊕ 1 are observed.
Example for k ⊕ 1 = 0x3c:               0010f0 001001 1az 6 = 001101, z 6 + 2 = .001111.
z ′ 6 = 001111, z ′ 6 + 2 = .010001.
⊕ 00111100 = 0x3cThe result k ⊕ 1 = 78 comes from a modulo operation.
Here input z 6 is taken modulo 62, which is 111110 in binary.
Example for k ⊕ 1 = 0x78:z 6 = 111100, (z 6 mod 62) + 2 = .111110.
z ′ 6 = 111110, (z ′ 6 mod 62) + 2 = .000010.
⊕ 01111000 = 0x78Then, 3 % of the output variations invoked by bitflips in z 6 [1] describe a relation z 6 + 1 = z 7 .
The corresponding k ⊕ 1 is obtained by taking k 1[1.
.6] = 1 when the relation holds and k 1[1.
.6] = (z 6 mod 62) + 2 when it does not hold.
Example for k ⊕ 1 = 0x4e:z 6 = 100100, (z 6 mod 62) + 2 = .100110.
z ′ 6 = 100110, ((z ′ 6 mod 62) + 1 = n 7 ) = .000001.
⊕ 01001110 = 0x4eEventually, the function for k 1 [1.
.6] is:k 1[1.
.6] = 1, (z 6 mod 62) + 1 = (z 7 mod 63);(z 6 mod 62) + 2, otherwise.The remaining k 2[1.
.6] and k 3[1.
.6] can be found in a similar way by flipping bits in the input and closely looking at the input-output relations.
Also, it helps to look for related modulo operations on z 5 and z 4 .
We give k 2[1.
.6] to give some idea of the evolving structure of the function: After the recovery of the first block z 4 , . . . , z 7 it is relatively easy to find the subfunction for z 0 , . . . , z 3 .
The modulos and additions differ but the structure of the function is completely the same.
For this reason it is possible to write it as a subfunction scramble that is called twice, once for z 0 , . . . , z 3 and once for z 4 , . . . , z 7 .
The final subfunction scramble is given by Definition 4.1.
k 2[1.
.6] =                      2,( The complement byte y performs a complement operation on the output of the function.
Figure 9 shows that flipping a bit y [i] means that bit k i [7] is flipped for i ∈ {0, . . . , 7}.
Notice that no other input bit influences any k i [7] .
Furthermore, k i [1] , . . . , k i [6] are flipped but be aware that these bits might come from any other z j due to the permute byte x. Finally, every k i [0] is not affected.
It is important to observe that for k 4 , . . . , k 7 the OR and AND-mask agree that the left 7 bits are always flipped while for k 0 , . . . , k 3 this is not true.
To be precise, the bits k 0 [1] , k 1 [1] , k 2 [1] and k 3 [1] are never flipped.
This is because the 6-bit output value z j that constitutes output byte k i is decremented by one if j ≤ 3 except when bit OR-mask AND-mask fc00000000000000 8000000000000000 49 00fc000000000000 0080000000000000 50 0000fc0000000000 0000800000000000 51 000000fc00000000 0000008000000000 52 00000000fe000000 00000000fe000000 53 0000000000fe0000 0000000000fe0000 54 000000000000fe00 000000000000fe00 55 00000000000000fe 00000000000000fe ⊕ → k 0 k 1 k 2 k 3 k 4 k 5 k 6 k 7 k 0 k 1 k 2 k 3 k 4 k 5 k 6 k 7 y                              48x                            z j = 101101, where j ≤ 3 y 0 = 0, k 0 = y 0 · z j · t = 0101101t y ′ 0 = 1, k ′ 0 = y ′ 0 · z j − 1 · t = 1010011t ⊕ 11111100 = 0xfc Finally, byte x applies a permutation.
Iterating over x while keeping y and z 0 , . . . , z 7 constant shows that x is taken modulo 70 since the same output is repeated again for every 70 consecutive inputs.
The cumulative bitmasks of the output differences, shown in Figure 9, do not give direct information about this permutation but do make clear that k i [0] is affected.
Experiments show that x is an injective mapping on k i [0] for i = 0, . . . , 7.
This means that it is possible to learn x from k i [0] .
Furthermore, the permutation is independent of y and z i .
This means that a table of mappings can be constructed which takes x as index and has particular mappings as its entries.
The mappings are presented in Figure 10.
To illustrate, π 0 = 01234567 means that there is no mixing at all and π 2 = 01342567 means that k 0 stays at position 0 while k 4 is moved to position 2.
To isolate one particular mapping we write π x (i) which returns the target position of 6-bit output valuê z i .
From the weaknesses that were explained in the previous section it can be concluded that hash0 does not significantly increase the complexity of an attack on the master key kc.
In fact, the attack explained in this section requires one brute force run on DES.
For this key recovery attack an attacker needs to control a reader and be able to issue key update commands.
This is the case, for example, in the Omnikey Secure Mode.
The attack consists of two phases:Phase 1• emulate a random identity id to the reader • issue an update key command that updates from a known user defined key kc ′ to the unknown master key kc.
Now, id kc = hash0(DES enc (id, kc)) can be obtained from the XOR difference.
• compute the pre-images c i of id kc .
• repeat Phase 1 until an output id kc is obtained which has three pre-images.
• for every candidate key kt ∈ {0, 1} 56 check if DES enc (id, kt) = c i for i ∈ {0, 1, 2} • when the check above succeeds the corresponding key kt needs to be verified against another set of id and kc id .
We verified this attack on the two master keys kc and kd that are stored in the Omnikey reader for the iClass application.
The first key kc was also stored in the naviGO software and we could check the key against pre-images that were selected as described above.
Although we did not find kd stored in software we were still able to verify it since we could dump the EEPROM of a reader where kd was stored.
The attack above comes down to a brute force attack on single DES.
A slightly different variant is to keep the card identity id fixed and use a DES rainbow table [Hel80] that is constructed for a specific plaintext and runs through all possible encryptions of this plaintext.
Note that the rainbow table needs to be pre-computed and thus a fixed plaintext is chosen on forehand.
This means that one fixed predefined id is to be used in the attack.
The number of pre-images can no longer be controlled.
In the worst case the number of pre-images is 512.
In this paper we have shown that obscurity does not provide extra security and it can be circumvented.
In fact, experience shows that instead of adding extra security it often covers for negligent designs.It is hard to imagine why HID decided, back in 2002, to use single DES for key diversification considering that DES was already broken in practice in 1997 [Fou98].
Especially when most (if not all) HID readers are capable of computing 3DES.
Another unfortunate choice was to design their proprietary hash0 function instead of using an openly designed and community reviewed hash function like SHA-1.
From a cryptographic perspective, their proprietary function hash0 fails to achieve any desirable security goal.
nThis section describes the recovered key diversification and fortification procedure.
Definition 4.2 gives the definition of the function hash0.
It uses a subfunction scramble which is defined by Definition 4.1.
First, the key diversification procedure where a diversified key kc id is computed from a card identity id and master key kc is as follows:kc id = hash0(DES enc (id, kc)) Here the DES encryption of id with master key kc outputs a cryptogram c of 64 bits.
These 64 bits are divided as c = x, y, z 0 , . . . , z 7 ∈ F 8 2 × F 8 2 × (F 6 2 ) 8 and used as input to the hash0 function.
Finally, the output of the hash0 function is kc id = k 0 , . . . , k 7 ∈ (F 8 2 ) 8 .
The function hash0 first computes x ′ = x mod 70 which results in 70 possible permutations (See Fig. 10).
Then for all z i the modulus and additions are computed before calling the subfunction scramble.Then, the subfunction scramble is called twice, first on input z ′ 0 , . . . , z ′ 3 and then on input z ′ 4 , . . . , z ′ 7 .
The definition of the function scramble is as follows.where sc :After this a permutation is applied to the output bytes.
The definition of hash0 is as follows.
WeaknessesThis section describes weaknesses in the design of the Omnikey Secure Mode and on the iClass built-in key diversification and fortification algorithms.
These weaknesses will be later exploited in Section 6.
Omnikey Secure ModeEven though encrypting the communication over USB is in principle a good practice, the way it is implemented in the Omnikey Secure Mode adds very little security.
The shared key k CUW is the same for all Omnikey readers and it is included in software that is publicly available online.
This only gives a false feeling of added security.
Weak key diversification algorithmiClass uses single DES encryption for key diversification.
This provides very weak protection of the master key.
This is a critical weakness, especially considering that there is only one master key for the HID application for all iClass cards.The manufacturer seems to be aware of this weakness and tries to tackle the problem by adding the key fortification function.This comes at the price of loosing entropy on the diversified card keys.
After the DES computation the diversified 64-bit card key have at most 56 bit of entropy.
Then, this key is put through the fortification function where it looses another 2.2 bits of entropy.
In the next section, we explain where these 2.2 bits come from and discuss the security properties of the fortification function.
Weak key fortificationThis section clarifies why the key fortification is not strengthening the diversified key kc id .
First, note that only the modulo operations in hash0 on x ( 256 70 ) and z 0 , . . . , z 2 , z 4 , . . . , z 7 are responsible for the collisions in the output.
The expected number of pre-images for an output of hash0 is given by:These modulo operations make inverting the function straightforward.
For every pre-image one needs to determine if there exists another value within the input domain that leads to the same output when the modulus is taken.
Note that each input value z i may have a second pre-image that maps to the same output value.
Furthermore, every permute byte x has at least two other values that map to the same output value and in some cases there is even a third one.
This means that the minimal number of pre-images is three.
The probability p that for a given random input c there are only two other pre-images is:This means that hash0 does not add that much of additional protection.
For example, imagine an attacker who can learn the output kc id of hash0(DES enc (id, kc)) for arbitrary values id.
Then, the probability p ′ for an attacker to obtain an output kc id which has only three pre-images is p ′ = 1 − (1 − p) n , where n is the number of function calls using random identities id.
For n = 15 this probability p ′ > 0.99.
Inverting hash0It is relatively easy to compute the inverse of the function hash0.
Let us first compute the inverse of the function scramble.
Observe that the function scramble −1 is defined just as scramble except for one case where the condition and assignment are swapped.
Concretely, Next, we define the function hash0 −1 , the inverse of hash0.
This function outputs a set C of candidate preimages.
These pre-images output the same key k when applying hash0.
The definition of hash0 −1 is as follows.
k π x ′ (7−i) [1...6] , otherwise.
i = 0 . . . 7 Definition 5.2.
Let the function hash0 This section describes the recovered key diversification and fortification procedure.
Definition 4.2 gives the definition of the function hash0.
It uses a subfunction scramble which is defined by Definition 4.1.
First, the key diversification procedure where a diversified key kc id is computed from a card identity id and master key kc is as follows:kc id = hash0(DES enc (id, kc)) Here the DES encryption of id with master key kc outputs a cryptogram c of 64 bits.
These 64 bits are divided as c = x, y, z 0 , . . . , z 7 ∈ F 8 2 × F 8 2 × (F 6 2 ) 8 and used as input to the hash0 function.
Finally, the output of the hash0 function is kc id = k 0 , . . . , k 7 ∈ (F 8 2 ) 8 .
The function hash0 first computes x ′ = x mod 70 which results in 70 possible permutations (See Fig. 10).
Then for all z i the modulus and additions are computed before calling the subfunction scramble.Then, the subfunction scramble is called twice, first on input z ′ 0 , . . . , z ′ 3 and then on input z ′ 4 , . . . , z ′ 7 .
The definition of the function scramble is as follows.where sc :After this a permutation is applied to the output bytes.
The definition of hash0 is as follows.
This section describes weaknesses in the design of the Omnikey Secure Mode and on the iClass built-in key diversification and fortification algorithms.
These weaknesses will be later exploited in Section 6.
Even though encrypting the communication over USB is in principle a good practice, the way it is implemented in the Omnikey Secure Mode adds very little security.
The shared key k CUW is the same for all Omnikey readers and it is included in software that is publicly available online.
This only gives a false feeling of added security.
iClass uses single DES encryption for key diversification.
This provides very weak protection of the master key.
This is a critical weakness, especially considering that there is only one master key for the HID application for all iClass cards.The manufacturer seems to be aware of this weakness and tries to tackle the problem by adding the key fortification function.This comes at the price of loosing entropy on the diversified card keys.
After the DES computation the diversified 64-bit card key have at most 56 bit of entropy.
Then, this key is put through the fortification function where it looses another 2.2 bits of entropy.
In the next section, we explain where these 2.2 bits come from and discuss the security properties of the fortification function.
This section clarifies why the key fortification is not strengthening the diversified key kc id .
First, note that only the modulo operations in hash0 on x ( 256 70 ) and z 0 , . . . , z 2 , z 4 , . . . , z 7 are responsible for the collisions in the output.
The expected number of pre-images for an output of hash0 is given by:These modulo operations make inverting the function straightforward.
For every pre-image one needs to determine if there exists another value within the input domain that leads to the same output when the modulus is taken.
Note that each input value z i may have a second pre-image that maps to the same output value.
Furthermore, every permute byte x has at least two other values that map to the same output value and in some cases there is even a third one.
This means that the minimal number of pre-images is three.
The probability p that for a given random input c there are only two other pre-images is:This means that hash0 does not add that much of additional protection.
For example, imagine an attacker who can learn the output kc id of hash0(DES enc (id, kc)) for arbitrary values id.
Then, the probability p ′ for an attacker to obtain an output kc id which has only three pre-images is p ′ = 1 − (1 − p) n , where n is the number of function calls using random identities id.
For n = 15 this probability p ′ > 0.99.
It is relatively easy to compute the inverse of the function hash0.
Let us first compute the inverse of the function scramble.
Observe that the function scramble −1 is defined just as scramble except for one case where the condition and assignment are swapped.
Concretely, Next, we define the function hash0 −1 , the inverse of hash0.
This function outputs a set C of candidate preimages.
These pre-images output the same key k when applying hash0.
The definition of hash0 −1 is as follows.
k π x ′ (7−i) [1...6] , otherwise.
i = 0 . . . 7
