This paper proposes and solves the Time-Interval All Fastest Path (allFP) query.
Given a user-defined leaving or arrival time interval I, a source node s and an end node e, allFP asks for a set of all fastest paths from s to e, one for each sub-interval of I. Note that the query algorithm should find a partitioning of I into sub-intervals.
Existing methods can only be used to solve a very special case of the problem, when the leaving time is a single time instant.
A straightforward solution to the allFP query is to run existing methods many times, once for every time instant in I.
This paper proposes a solution based on novel extensions to the A* algorithm.
Instead of expanding the network many times, we expand once.
The travel time on a path is kept as a function of leaving time.
Methods to combine travel-time functions are provided to expand a path.
A novel lower-bound estima-tor for travel time is proposed.
Performance results reveal that our method is more efficient and more accurate than the discrete-time approach.
Have you ever been stuck in traffic while driving, wishing that you had known a better route?
In the United states, only 9.3% of the households do not have cars.
Driving is part of people's daily life.
GIS systems like MapQuest and MapPoint are heavily relied on to provide driving directions.
However, surprisingly enough, existing systems either ignore the driving speed on road networks, or assume the speed remains constant on the road segments.
In both cases the users' preferred leaving time does not affect the query result.
For instance, MapQuest does not ask the users to input the day and time of driving.
But we all know that during rush hours, inbound highways to big cities have much lower speed than usual.
So a fastest path computed during non-rush hours, which may consists of some * Partially supported by NSF CAREER Award IIS-0347600.
inbound highway segments, may not remain the fastest path during rush hours.To capture speed changes, we propose the CAtegorized PiecewisE COnstant speeD (CapeCod) pattern, which is an extension of the Flow Speed Model (FSM) [19] by incorporating categorized speed patterns.
Here days are categorized, e.g. workdays and non-workdays.
Within each category, we assume the speed on each road segment is piecewise constant.
For instance, in a working day, during rush hour (say from 7am to 9am) the speed is 0.3 miles per minute (mpm), and at other times of the day the speed is 1mpm.
The paper proposes and solves the Time Interval All Fastest Paths (allFP) Query, on a road network with CapeCod speed patterns.
As the road network may be large, it is reasonable to assume that it is stored on disk.
We adapt the Connectivity-Cluster Access Method (CCAM) [18] to store and access the network information.
Besides the source node s and the end node e, a query consists of a leaving time interval at s (or e).
All fastest paths are enumerated, each corresponding to a disjoint sub-interval of leaving time.
The union of all sub-intervals should cover the entire query time interval.
An allFP query example is: I may leave for work any time between 7am and 9am; please suggest all fastest paths, e.g. take route A if the leaving time is between 7 and 7:45, and take route B otherwise.A variation is the Time Interval Single Fastest Path (singleFP) query, which only reports a single fastest path: the one that minimizes the travel time among all leaving time instants in the query time interval.If instead of a time interval, a single leaving time instant is given, both allFP and singleFP correspond to the same special case, which is trivial.
The special case actually degrades into the shortest-path problem.
The reason is that for each edge n i → n j , if we know the leaving time instant at n i , the arrival time at n j is fixed.
This special case is a well studied problem in multiple disciplines: transportation systems, networks, graph theory, artificial intelligence, and spatial databases.
One of the best algorithms, named A* [15], extends Dijkstra's single-source-shortest-path algorithm.
The idea is as follows.
Keep a set E of expanded nodes (initially empty) and a priority queue F of frontier nodes (initially consisting only of the source node s).
Each iteration chooses one node from F , expands it by adding its non-expanded neighbors to F , and moves it to E. To choose the next node from F , instead of choosing i where the travel time from s to i is the smallest (as in Dijkstra's algorithm), choose the node j such that the travel time from s to j plus the estimated travel time from j to e is the smallest.
As pointed in [15], the estimation must be a lower bound of the actual travel time to ensure correctness.
Also, the closer the estimation is to the actual travel time, the more efficient the search is.In allFP and singleFP queries, the leaving time l at s is not fixed, but can be any instant in a given interval I.
In this case, the travel time on each road segment is a function of time and therefore, none of the existing algorithms can be applied to solve these queries.
For instance, in A*, in each iteration a node is chosen to be expanded.
In the new queries, since different leaving time suggests that different nodes should be expanded, which one do we choose?
To get around this problem, one approach to answer the new queries (but only approximately) is to assume discrete time model.
For instance, if we assume the leaving time can only be at the very beginning of every minute, we can call the A* algorithm many times, one per minute.
But this approach is neither accurate nor efficient.We propose an algorithm called IntAllFastestPaths to accurately and efficiently solve the allFP query.
One intermediate step of the algorithm identifies the result for the singleFP query, and therefore the algorithm also can answer the singleFP query, without spending the time to find the complete result for the allFP query.
The algorithm consists of some novel extensions to the A* Algorithm.
(i) Each entry in the priority queue has a travel-time function instead of a single travel time value, and we tell which node should be expanded in each iteration.
(ii) Given the travel-time function T 1 (l ∈ I) of a path s ⇒ n i and an edge n i → n j , we discuss how to determine the interval I of leaving time at n i .
(iii) Once we get such an interval and the corresponding function T 2 (l ∈ I ), we present a way to combine T 1 () with T 2 () to get the new travel function for the expanded path s ⇒ n i → n j .
(iv) Another important issue is how to provide a lower-bound estimation to the travel time from some node n j to the end node e.
A straightforward choice is to use the Euclidean distance divided by the maximum speed in the network, as it is guaranteed to be a lower bound of the actual travel time.
In Section 5, we propose a better (i.e. closer to the actual travel time) estimator, namely the boundary node estimator.The major contributions of the paper are:1.
We propose the allFP query and its variation the singleFP query, where the speed changes are captured by the CapeCod patterns.
By allowing the users to provide a leaving time interval, the queries are practical extensions to the queries considered in existing pathcomputation systems.2.
We present an algorithm (IntAllFastestPaths) to solve the two fastest-path queries.
The algorithm is based on novel extensions to A*.
The priority queue stores travel-time functions associated with expanded paths.
We describe how to choose a path to keep expanding, how to determine the leaving time interval at each intermediate node, and how to produce the compounded function for the newly expanded path (Section 4).3.
We provide a novel lower-bound estimator to reduce the search space (Section 5).
The estimator is based on graph partitioning and pre-computation.
The rest of the paper is organized as follows.
Problem definition appears in Section 2.
Related work is reviewed in Section 3.
The fastest-path algorithms are presented in Section 4.
The new lower-bound estimator appear in Section 5.
Performance results are shown in Section 6.
Finally, Section 7 concludes the paper.
This section formally defines the CapeCod patterns, the road network which incorporates these patterns and the two queries addressed in this paper.
The storage model and the required operations are also discussed.
Definition 1 A (day-)category set D is a list of categories such that each day belongs to exactly one category in D. For any two days belonging to the same category, a road segment exhibits the same speed patterns.For example, such a category set may be: workday, nonworkday.
Here the assumption is that for two days in the same category, a road segment has the same speed at the same time of day.
Although this may not be 100% accurate, it is a reasonable assumption for two reasons.
First, if the volume of traffic on a road segment is high at some time on one workday, it is likely the same to happen the same time on another workday.
Second, the approximation becomes more accurate by increasing the number of categories.
For instance, if for some road segment the speed pattern for Fridays is different from that of other workdays, we can identify Friday as another category.
An example of a CapeCod pattern may be: for a nonworkday: [0:00-24:00):1mpm 1 ; and for a workday: [0:00-7:00):1mpm, [7:00-9:00):1/2mpm, [9:00-24:00):1mpm.
This pattern indicates that traffic congestion occurs every workday from 7am to 9am.
D, a CapeCod net- work is a directed graph G(N, E) such that, N = {(n i , loc i )|i ∈ [1, m]} is the set of nodes (road intersections and end points) with their spatial locations, andE = {(n i , n j , d ij , pat ij )|i, j ∈ [1, m]} is the set of edges n i → n j , where d ij is the distance and pat ij is the CapeCod pattern.The Flow Speed Model (FSM) in which the speed on each network edge is a piecewise-constant function, was proposed in [19].
The CapeCod model slightly extends FSM by involving a category of days to fit the need for spatial road networks.
and an end node e, and a leaving time interval I, the All Fastest Path (allFP) query returns a full partitioning of I: I 1 , . . . , I k , where each sub-interval is associated with a fastest path, such that two leaving time instants in one sub-interval leads to the same fastest-path and two leaving time instants in two adjacent sub-intervals leads to different fastest paths.While focusing on the allFP query, this paper also addresses the single fastest path (singleFP) query.
That is, given a start node s, an end node e, and a leaving time interval I, find the time instant l 0 ∈ I and the corresponding fastest path from s to e such that leaving from s at time l 0 minimizes the travel time from s to e.Both queries compute fastest paths from node s to e for a leaving time interval I.
The singleFP query reports the best leaving time instant during I to minimize travel time and the corresponding fastest path.
The allFP query finds all different fastest paths, one per disjoint sub-interval of I. Assuming that the network has reasonably large size, it needs to be stored on disk.
We adopt the connectivitycluster access method (CCAM) [18] to store and access the network information.In particular, for each node n i , the corresponding information to be stored on disk, denoted as inf o i , stores the location loc i of it in space plus a list of neighbors.
For each neighbor, n j , we store its Euclidean distance d ij from n i and the CapeCod speed pattern of the road segment pat ij .
To cluster the information of nodes in disk pages, according to [18], we should preserve the connectivity relationship by heuristically partitioning the graph.
Information for nodes in the same partition is stored in the same disk page.On top of the disk pages that store the node information, a B+-tree is kept to efficiently locate the information of any node.
The one-dimensional ordering of all nodes is generated using the Hilbert values of their locations.
CCAM supports all the necessary operations for our algorithmssuch as F indN ode(n i ) and GetSuccessor(n i ) -and the appropriate operations to update the network.
Most existing work on path computation has been focused on the shortest-path problem.
Several extensions of the Dijkstra algorithm have been proposed, mainly focusing on the maintenance of the priority queue.
The A* algorithm [15,10] finds a path from a given start node to a given end node by employing a heuristic estimate.
Each node is ranked by an estimate of the best route that goes through that node.
A* visits the nodes in order of this heuristic estimate.
A survey on shortest-path computation appeared in [14].
Performance analysis and experimental results regarding the secondary-memory adaptation of shortest path algorithms can be found in [5,17].
The work in [4] contributes on finding the shortest path that satisfies some spatial constraints.
A graph index that can be used to prune the search space was proposed in [20].
One promising idea to deal with large-scale networks is to partition a network into fragments.
The boundary nodes, which are nodes having direct links to other fragments, construct the nodes of a high-level, smaller graph.
This idea of hierarchical path-finding has been explored in the context of computer networks [9] and in the context of transportation systems [8,6,7].
In [16], the materialization trade-off in hierarchical shortest path algorithms is examined.The fastest-path problem is a generalization of the shortest-path problem in the sense that the cost measure (in particular, the travel time) to traverse a road segments varies over time.
This makes the fastest-path problem more complicated since the fastest path from a source node s and an end node e is not unique and depends on the leaving time from s.
One way to deal with this complexity is to assume a discrete-time model [1,11].
[1] proposes a backward labelling algorithm based on the assumption that the cost to traverse an edge remains constant after some time.
[11] applies the A* algorithm for every leaving time instant simultaneously.
Discrete-time models effectively capture transportation networks (e.g. railway or bus networks) in which vehicles depart on particular time instants.
However, regarding road networks they are not accurate enough, since what happens between two adjacent time instants cannot be told.
Moreover, discrete-time algorithms are not efficient.
Suppose we want to know all fastest paths during some time interval (allFP Query).
Independent to the number of different fastest paths (which may be small) in the answer set, the discrete-time algorithm needs to perform one query per time instant in the query interval.
Even if this is done simultaneously for all leaving time instants it is still computationally inefficient.Another work on fastest-path computation is [12,13].
However, the network model proposed is beyond GIS.
For instance, it allows unrestricted waiting of objects at the nodes, which is not applicable in road networks since unrestricted waiting at road junctions is prohibited.
Also, they consider the possibility of non-FIFO behavior, where an object that leaves a node later than a previous object may arrive the next-hop node earlier.
Moreover, continuous-time models necessitate the processing of functions of leaving time.
Here, [12] only suggested operations on functions that are necessary without investigating how this operations can be supported.
Therefore, regarding path computations in road networks, this work is of theoretical interest only.The Flow Speed Model (FSM) has been proposed in [19].
In FSM the travel time on each road segment n i → n j is a piece-wise linear function of the leaving time from n i .
The model is proven to preserve the FIFO property.
The paper only addresses the fastest path query for a given leaving time instant.
As we have discussed before, this makes the fastest path problem degrade to the shortest path problem and therefore it avoids the complexity of manipulating continuous-time functions.Moreover, [3] proposes a storage model and an update process of the speed on each road segment of road network.
The network model used is discrete-time model.
To solve the fastest path problem, the paper adopts an algorithm first proposed in [14] .
Although the system proposed is highly adaptive to any change in the status of the road network it does not guarantee that the actual fastest path is found.
In this section, we present the basic version of our algorithm.
It novelly extends the A* algorithm, while using the Euclidean distance divided by maximum network speed as the lower-bound travel-time estimator.
We first describe how to derive travel time functions on each road segment from the CapeCod speed patterns.
Consider a road segment n i → n j .
Let the distance be d. Let the speed be v 1 during [t 1 , t 2 ) and v 2 after t 2 (including t 2 ).
The travel time on the road segment n i → n j is a continuous, piecewise-linear function of the leaving time from n i , l.
In more detail, the travel-time function, denoted asT (l ∈ [t 1 , t 2 ], n i → n j ), is equal to: d v 1 , l ∈ [t 1 , t 2 − d v 1 ) (1 − v1 v 2 )(t 2 − l) + d v 2 , l ∈ [t 2 − d v 1 , t 2 ](1)The relationship between speed and travel time on a road segment is illustrated in Figure 1.
As a corollary, the travel time along any given path is also a continuous, piecewiselinear function of the leaving time.
In case an object moving on a single road segment encounters more than two different speed patterns (unlikely to happen in practice), the travel time function is still a continuous, piecewise linear function of leaving time with more than two linear segments.
A simple extension to the A* algorithm cannot be used to solve neither the allFP nor the singleFP query, for these queries involve a time interval instead of a single time instant.
Let n 0 be the node to be expanded next and let n 0 have three neighbor nodes, n 1 , n 2 and n 3 .
A* picks the neighbor node n i (i ∈ [1.
.3]) to continue expanding if T (l, s ⇒ n i ) plus the estimated travel time from n i to e is the smallest.
The problem is that the leaving time l is not a single value, i.e. l ∈ I and for different values of l, different neighbors should be picked.
One possible solution is to expand all such neighbors simultaneously.
However, expanding all picked neighbors may result in an exponential number of paths being expanded regardless the size of the answer set.Instead, we propose a new algorithm called IntAllFastestPaths.
The main idea of the algorithms is summarized below:1.
Maintain a priority queue of expanded paths, each of which starts with s. For each path s ⇒ n i , maintain T (l, s ⇒ n i ) + T est (n i ⇒ e) as a piecewise-linear function of l ∈ I. Here, T est (n i ⇒ e) is a lower bound estimation function of the travel time from n i to the end node e.
In the basic version, we choose the naive estimator, d euc (n i , e)/v max , which is the Euclidean distance between n i and e, divided by the max speed in the network.2.
Similar to the A* Algorithm, in each iteration pick a path from the priority queue to expand.
Pick the path, whose maintained function's minimum value during I is the minimum among all paths.
Here, how to expand a path is non-trivial and will be discussed in details later in this section.3.
The first path ending to e that is picked from the priority queue is the answer to the singleFP query.
The optimal leaving time is the time instant at which the travel time function of the path is getting its minimum value.4.
Maintain a special travel-time function called the lower border function.
It is the lower border of travel time functions for all identified paths (i.e. paths already picked from the priority queue) that end to e.
In other words, for any time instant l ∈ I, the lower border function has a value equal to the minimum value of all travel time functions of identified paths from s to e.
This function consists of multiple travel time functions, each corresponding to some path from s to e and some subinterval of I during which this path is the fastest.5.
Stop either when there is no more path left in the priority queue, or if the path picked to be expand next has a minimum value no less than the maximum value of the lower border function.
Report the lower border function as the answer to the allFP query.Below we use a running example to further describe the ideas of the algorithm.
The example involves a simple road network given in Figure 2.
We are interested in finding the fastest path from s to e at some time during I =[6:50-7:05].
As expressed in step 1 of Algorithm IntAllFastestPaths, in the priority queue we order the paths not by T (), but by T ()+T est ().
The functions of the two paths are compared in Figure 3.
Here, T est (n ⇒ e) = 1min, since d euc (n, e) = 1 mile and v max = 1mpm.
According to step 2, the path s → n to be expanded next, since its minimum value, 3, is smaller than the minimum value, 6, of the path s ⇒ e.
In general, to expand a path s ⇒ n, first all the required information for n and its adjacent nodes needs to be retrieved, Then, for each neighbor n j of n the following steps need to be followed:• Given the travel time function for the path s ⇒ n and the leaving time interval I from s, determine the time interval during which the travel time function for the road segment n → n j is needed.
• Determine the time instants t 1 , t 2 , . . . ∈ I at which the resulting function, i.e. the travel time function for the path s ⇒ n j , T (l ∈ I, s ⇒ n j ), changes from one linear function to another.
• For each time interval [t 1 , t 2 ), . . . , determine the corresponding linear function of the resulting function T (l ∈ I, s ⇒ n j ).
In our example, the time interval for n → e is determined to be [6:56, 7:07] as shown in Figure 4.
At time 6:50 (start of I), the travel time along the path s → n is 6 minutes.
Therefore, the start of the leaving time interval for n → e, i.e. the start of arrival time interval to n, is 6:50+6min = 6:56.
Similarly, the end of the leaving time interval is 7:05+2min = 7:07.
6:50 6:546:56 7:00 7:05 l There are two cases that trigger the resulting travel time function T (l, s ⇒ n → e) to change from one linear function to another.
In the first, simple case the function T (l, s ⇒ n) changes.
The time instants at which the resulting function changes are the ones at which T (l, s ⇒ n) changes.
In Figure 5, these correspond to time instants 6:50, 6:54 and 7:00.
In the second, trickier case, the changes of the resulting function are triggered by the changes of T (l, n → e), e.g. at time 7:05.
In this example, we determine that at time 7:03, T (l, s ⇒ n → e) changes.
The reason is that if one leaves s at 7:03, since the travel time on s ⇒ n is 2 minutes, one will arrive at n at 7:05.
At that time the travel time function of n → e changes.
To find the time instant 7:03, we find the intersection of the function T (l, s ⇒ n) with a 135 o line passing through the point (7:05, 0).
The time instant 7:03 is the leaving time corresponding to that intersection point.
Now that we have determined the four time instants 6:50, 6:54, 7:00, and 7:03, we are ready to create the 4-piece function T (l ∈ I, s ⇒ n → e) by combining T (l, s ⇒ n) and T (n → e).
We know that for each l,T (l, s ⇒ n → e) is equal to T (l, s ⇒ n) plus T (l , n → e),where l is the time at which node n is reached.
That is, l = l + T (l, s ⇒ n).
We have the following algorithm to expand a path, for every identified time instant t ∈ {t 1 , t 2 , . . . } (e.g. 6:50):• Retrieve the linear function of T (l, s ⇒ n) at time t.Let it be α * l + β.
• Retrieve the linear function of T (l , n → e) at time t = t + (α * t + β).
Let it be γ * l + δ.
• Compute a new linear function (α * l + β) + (γ * (l + α * l + β) + δ)), which can be re-written as(α * γ + α + γ) * l + (β * γ + β + δ).
This is the linear function as part of T (l, s ⇒ n → e), for the time interval from t to the next identified time instant.For instance, the combined function T (l ∈ I, n ⇒ e), which is shown in Figure 5, is computed as follows.
At t =6:50, the first linear function is a constant function 6.
We get t = t + 6=6:56.
The second linear function starting with 6:56 is another constant function 3.
So the combined function is 9, which is valid until the next identified time instant.At t =6:54, the first linear function is 2 3 (7:00 − l) + 2.
We have t =6:54+6=7:00.
The second linear function is 3.
The combined function is 2 3 (7:00 − l) + 5.
At t =7:00, the first function is constant 2.
At t =7:00+2=7:02, the second function is 3.
So the combined function is 5.
Finally, at t =7:03, the first function is 2, and at t =7:03+2=7:05, the second function as 10− 7 3 (7:08−l ).
And thus the combined function is 2 + (10 − 7 3 (7:08 − (l + 2))) = 12 − 7 3 (7:06 − l).
After the expansion, the priority queue contains two functions, as shown in Figure 6.
Note that in both functions, the lower bound estimation part is 0, since both paths already end to e.
The next step of Algorithm IntAllFastestPaths is to pick the path s ⇒ n → e, as its minimum value (5min) is globally the smallest in the queue.
As step 3 of Algorithm IntAllFastestPaths shows, this path is the answer to the singleFP query since it ends to e. Any time instant in [7:00-7:03] is an optimal leaving time, for it will result in the minimum travel time.
If we only want to solve the singleFP query, the algorithm terminates.
If we want to solve the allFP query, we are not done yet.
Some other path to be identified later on may be the fastest path at some time in I other than [7:00-7:03].
So we remove this path from the priority queue and continue expanding other paths.
An important question that arises here is when do we stop expanding, as expanding all paths to the end node is prohibitively expensive.
The algorithm terminates when the next path has a minimum value no less than the maximum value of the maintained lower border function.When there is only one identified path that ends with e, the lower border function is the function of this path.
In Figure 6, T (l, s ⇒ n → e) is the lower border function.
As each new path ending with e is identified, its function is combined with the previous lower border function.
E.g. in Figure 7 the new lower border function, after the function T (l, s → e) is removed from the priority queue, is shown as the thick polyline.The algorithm can terminate if the next path to be expanded has a minimum value no less than the maximum value of the lower border function (in this case, 6).
Since the maximum value of the lower border keeps decreasing, while the minimum travel time of paths in the priority queue keeps increasing, the algorithm IntAllFastestPaths is expected to terminate very fast.
In our example, the set of all fastest paths from s to e when l ∈[6:50-7:05] is:      s → e, if l ∈ [6 In Section 4, we used the Euclidean distance between an intermediate node n and the end node e divided by the maximum speed on the network to estimate the travel time from n to e. Although this estimator is guaranteed to be a lower bound of the actual travel time, it can be highly inaccurate.
This will result in an inefficient execution of the IntAllFastestPaths algorithm.In this section, we propose a novel lower-bound travel time estimator, the boundary-node estimator.The boundary-node estimator is based on pre-computation and, in most cases, is tighter than the Euclidean distance divided by the maximum speed estimator.
For clarity, we present the idea in terms of distance.
And extension to travel time is omitted due to space limitations.To compute the boundary-node distance estimator (1) we partition the space into non-overlaping cells.
Nonoverlaping space partinioning has appeared before in the literature, e.g. [2].
A boundary node [9] of a cell is a node directly connected with some other node in a different cell.
That is, any path linking a node in a cell C 1 with some node in a different cell C 2 must go through at least two boundary nodes, one in C 1 and one in C 2 .
(2) For each pair of cells, (C 1 , C 2 ), we pre-compute the distance of the shortest path from each boundary node in C 1 to each boundary node in C 2 and store the smallest one among them.
This computation can be performed efficiently by collapsing the set of boundary nodes in C 1 into a single start node and the set of boundary nodes in C 2 into a single end node.
is some boundary node in C 1 and b 2 some boundary node inC 2 , d(b 1 , b 2 ) ≤ d(b 1 , b 2 ).
Let b 3 be the nearest boundary node from n, and let b 4 be the nearest boundary to e.
The boundary-node distance estimator is calculated as:d est (n, e) = d(n, b 3 ) + d(b 1 , b 2 ) + d(b 4 , e)Theorem 1 The boundary-node estimator is a lower bound of the network distance d(n, e).
Proof.
Any path from n to e consists of three parts: (i) from n to some boundary node b 1 ∈ C 1 ; (ii) from b 1 to some boundary node b 2 ∈ C 2 ; and (iii) from b 2 to e. By the fact that d(n, b 1 ) ≤ d(n, b 1 ), d(b 1 , b 2 ) ≤ d(b 1 , b 2 ), and d(b 2 , e) ≤ d(b 2, e) the theorem holds.
In this section we experimentally evaluate the algorithm and the proposed optimizations for both allFP and singleFP Queries.
Moreover, we compare the CapeCod model approach to answer the singleFP Query with the Discrete Time model approach.Finally, under the experimental setup described in Table 1, we compare the CapeCod model approach with the approach used by most commercial navigation systems i.e. the speed on a road segment is assumed to be constant and equal to the speed limit.
The CapeCode model gives 50% improvement regarding the travel time.
This improvement varies depending on the speed on the road network during the rush hours.
For instance, if the there is no speed difference between the inbound highways and the local roads during the rush hours then our method saves nothing regarding the travel time.
Due to space limitations, we do not present the results of this comparison.
Our evaluation is performed using real data for the road network and synthetic data for the CapeCod speed patterns.In particular, our road network is built on a real dataset of 20,461 directed edges and 14,456 nodes, representing all roads in the Suffolk county of Massachusetts.
The Suffolk county covers the metropolitan of Boston and therefore, it suffers the rush-hour traffic symptoms.
The dataset is extracted from U.S. Census Bureau, 2003 Tiger/Line which classifies the roads into different types, e.g. interstate highways, local rural roads, etc.
The nodes in the road network represent the intersections and the start/end of roads.Note that, our solution is mostly meaningful in networks that exhibit traffic congestion, that is networks around metropolitan cities.
Countryside roads rarely get congested and this is the main reason we pick the small network of the Suffolk county.
On the other hand, our fastest path algorithm can easily scale in larger networks by employing hierarchical network partitioning [9,7,8,16].
In this case, the size of the network partitions can be chosen to be equal to the size of the network explored in our experiments.
That will require applying our algorithm few more times (twice at each level of the hierarchy and once at the top level) which will not affect much the performance of our approach.Regarding the CapeCod patterns, we define two daycategories: workday and non-workday, while we distinguish the road segments into (a) inbound highways, (b) outbound highways, (c) local roads outside Boston and (d) local roads in Boston.
Based on our unofficial driving experience, we assign realistic driving speed to roads as shown in Table 1.
To represent the disk-based road network, we used the connectivity-clustered access method (CCAM) [18] as described in Section 2.
In all our experiments, we set the page size to 2048 bytes.
All the algorithms are coded in Java, and running on a Dell PC with a 2.66-GHz Pentium 4 processor.
This set of experiments investigates the effect of the proposed optimizations, i.e. the new lower bound estimator.
The number of expanded nodes shows the extent to which the search space is pruned and the computational effort that is needed to answer a query.
We pick to report the number of expanded nodes instead of the query time, since the former is independent from any programming language and system used.
The query time for all the experiments varies between a fraction of a second to a few seconds.
For each experiment we pose 100 queries varying the Euclidean distance between the source and the destination nodes.
For each query we use the following approaches: (a) the naive (a) singleFP Query (b) allFP Query Figure 9.
The effect of the optimizations varying the Euclidean Distance lower bound estimator (naiveLB), i.e. the Euclidean distance divided by the maximum speed estimator; and (b) the boundary node lower bound estimator (bdLB).
Figure 9 illustrates the effect of the optimization for both singleFP (a) and allFP Query (b).
The query time interval is set to 3 hours (the morning rush hours) while the distance between source and end node varies from 1 to 8 miles.
As it can be seen the proposed lower-bound estimator significantly prunes the search space during the network expansion.
The effect of the optimizations becomes larger as the the Euclidean distance between the source and the destination node increases.
In the following set of experiments we compare the CapeCod model approach proposed in this paper to answer the singleFP Query (i.e. find the fastest path between a source and a destination node given a query time interval) and the Discrete Time model approach.
Recall that in the Discrete Time model the continuous query time interval is discretized into several time instants and a fastest path query is posed for every time instant.
The fastest path among all the resulting fastest paths is returned as an answer.
For the time instant fastest path query we use the original A* algorithm [15].
As mentioned in Section 3, the discrete time model lacks accuracy on picking the fastest path and therefore on the resulting travel time.
The accuracy of the result depends on the degree of the discretization.
The more the discrete time instants the better the accuracy and the worse the query time.
On the other hand our method is 100% accurate (since a continuous time models is used).
For each one of the two models we pose 100 queries.
Regarding the discrete time model, each one of the queries runs multiple times for different degree of discretization.
The query time interval for all the queries is set to 2 hours during the rush hours (during which the speed changes), while the Euclidean distance between the source and the destination node is about 7 to 8 miles.
We compare the travel time and the query time of the two models.
In both cases we use the ratio of the two measurements, i.e. Discrete Time model query time divided by CapeCod model travel time and Discrete Time model query time divided by CapeCod model query time respectively.
Figure 10(a) compares the travel time of the two approaches while Figure 10(b) compares the query time for four different degrees of discretization.
That is, for the discrete time model we pose a query every (i) 1 hour (ii) 10 minutes (iii) 1 minute and (iv) 10 seconds, within the query time interval.
Posing a query every 1 hour results in around 1.27 times worse travel time compared to our method while the query time is better than the query time of our method.
While the degree of discretization increases, although the travel time given by the discrete model approaches the travel time given by our model, the query time increases exponential.
Posing a query every 10 minutes results in 1.21 times worse travel time accuracy while making the discrete time approach 5 times slower than our approach.
For the last degree of discretization, i.e. posing a query every 10 seconds, although the discrete model is accurate enough regarding the travel time, the query time is around 200 times worse than our approach.
In this paper, we addressed the problem of computing fastest paths over road networks with traffic speed patterns.
We proposed the CapeCod patterns to capture reallife speed information.
Moreover, we proposed and solved two variations of the fastest path query given a leaving (or arrival) time interval.
These queries have direct real-life applications.
Our solutions to the queries are novel extensions to the A* algorithm.
An interesting and novel contribution is the proposal of a new lower-bound estimator.
Our algorithms were experimentally evaluated.
The experimental results confirmed that our methods are more accurate and more efficient than straightforward approaches (e.g. the discrete time model).
GIS systems like MapQuest can be improved by incorporating our ideas.
This paper opens many interesting and practical issues for future work.
Most existing work on spatial queries (kNN, RNN, closest pairs, clustering, etc.) considers either the Euclidean distance or the shortest network distance.
It is interesting to study the impact on these work if we consider the fastest travel time instead.
