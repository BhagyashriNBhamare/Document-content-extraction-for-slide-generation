Traffic monitoring and estimation of flow parameters in high speed routers have recently become challenging as the Internet grew in both scale and complexity.
In this paper, we focus on a family of flow-size estimation algorithms we call Residual-Geometric Sampling (RGS), which generates a random point within each flow according to a geometric random variable and records all remaining packets in a flow counter.
Our analytical investigation shows that previous estimation algorithms based on this method exhibit certain bias in recovering flow statistics from the sampled measurements.
To address this problem, we derive a novel set of unbiased estimators for RGS, validate them using real Internet traces, and show that they provide an accurate and scalable solution to Internet traffic monitoring.
Recent growth of the Internet in both scale and complexity has imposed a number of challenges on network management, operation, and traffic monitoring.
The main problem in this line of work is to scale measurement algorithms to achieve certain objectives (e.g., accuracy) while satisfying real-time resource constraints (e.g., fixed memory consumption and per-packet processing delay) of high-speed Internet routers.
This is commonly accomplished (e.g., [5], [6], [7], [8], [9], [10], [11], [14], [15], [17], [21], [18], [19], [20], [22], [25], [30]) by reducing the amount of information a router has to store in its internal tables, which comes at the expense of deploying special estimation techniques that can recover metrics of interest from the collected samples.In this paper, we study two problems in the general area of measuring flow sizes -1) determining the number of packets transmitted by "elephant" flows [11], [15], [17], [21], [20], [22] and 2) building the distribution of flow sizes seen by the router in some time window [7], [18], [30] -coupled in a single measurement technique.
The former problem arises in usage-based accounting and traffic engineering [6], [11], [12], [13], [26], while the latter has many security applications such as anomaly and intrusion detection [1], [23], [16].
Our interest falls within the family of residual sampling, which selects a random point A within each flow and then samples the remainder R of that flow until it ends.
Denoting by L the size (in packets) of a random flow, sampled residuals R are simply L − A. Stochastically larger A results in fewer flows being sampled and leads to lower overhead in terms of both CPU and RAM consumption.
Besides reduced overhead arising from omission of many small-size flows from counter * Supported by NSF grants CNS-0720571 and CNS-1017766.
tables, residual sampling guarantees to capture large flows with probability 1 − o(1) as their size L → ∞.
This allows ISPs to determine "heavy-hitters" and charge the corresponding customers for generated traffic.While in P2P networks residual sampling distributes the initial point A uniformly within user lifetimes [29], flow-based estimation [11], [17] usually employs geometric A since it can be easily implemented with a sequence of independent Bernoulli variables.
We call the resulting approach ResidualGeometric Sampling (RGS) and note that it has received some limited analytical attention in [11], [17]; however, unbiased estimation of individual flow sizes, analysis of the resulting error, asymptotically accurate recovery of flow-size distribution P (L = i) from sampled residuals R, and analysis of space-CPU requirements in steady state have not been explored.
We overcome these issues below.
We start with the problem of obtaining sizes of individual flows for accounting purposes.
Since residual sampling requires an estimator to convert residuals into the metrics of interest, our first task is to define proper notation and desired properties for the estimation algorithm.
Assume that for a flow of size L the sampling algorithm produces residual R L , where both L and R L are random variables.
We call an estimator e(R L ) unbiased if its expectation produces the correct flow size, i.e., E[e(R L )|L = l] = E[e(R l )] = l. Unbiased estimation allows one to average the estimated size of several flows of a given size l and accurately estimate their total contribution.
We further call an estimator elephant-accurate if ratio e(R l )/l converges to 1 in mean-square as l → ∞.
Elephant-accuracy ensures that the variance of e(R l )/l tends to zero as l → ∞, which means that the amount of relative error between e(R l ) and l becomes negligible for large flows.Prior work on RGS [11], [17] has suggested the following estimator:e(R L ) = R L − 1 + 1/p,(1)where 0 < p ≤ 1 is the parameter of geometric variable A.To understand the performance of (1), we first build a general probabilistic model for residual-geometric sampling and derive the relationship between flow size L and its residual R L .
Using this result, we prove that:E[e(R l )] = l 1 − (1 − p) l ,(2)which indicates that (2) is generally biased and on average tends to overestimate the original flow size by a factor of up to 1/p.
To address this problem, we derive a different estimator:ˆ e(R L ) = R L − 1 + 1/p − (1 − p) RL p(3)and prove that it is both unbiased and elephant-accurate.
We also derive in closed-form the mean-square errorδ l = E[(ˆ e(R l )/l − 1) 2 ]for finite l, which can be used to determine when (3) approximates the true flow size with accuracy sufficient for billing purposes.
Our second problem is estimation of the original flow-size probability mass function (PMF), which we assume is given by f i = P (L = i), i = 1, 2, . . . We call PMF estimator q i asymptotically unbiased if it converges in probability to f i for all i as the number of sampled flows M → ∞.
One may be at first tempted to compute this distribution based on the values produced by either (1) or (3) for each observed flow; however, we show that such q i almost always differ from the original distribution f i and the bias persists as sample size M → ∞.
The reason for this discrepancy is that e(.)
andêandˆandê(.)
both estimate the sizes of flows that have been sampled by the algorithm, which are not representative of the entire population passing through the router.
As longer flows are more likely to be selected by residual sampling, this approach overestimates their fraction and skews the PMF towards the tail.Denote by M i the number of sampled flows with R L = i and define a new estimator:˜ q i = M i − (1 − p)M i+1 M p + (1 − p)M 1 .
(4)Using the general model of RGS derived later in the paper, we prove that˜qthat˜ that˜q i tends to f i in probability as M = ∑ i M i → ∞ and obtain the amount of error |˜q|˜q i − f i | for finite M .
We also provide asymptotically unbiased estimators for the total number of flows n:˜ n = M + 1 − p p M 1(5)and the number of flows n i with exactly i packets:˜ n i = M i − (1 − p)M i+1 p ,(6)whereñwhere˜whereñ/n → 1 andñand˜andñ i /n i → 1, both in probability, as M → ∞.
We call the resulting combination (3)-(6) Unbiased Residual-Geometric Estimators (URGE).
To reduce RAM overhead, our implementation periodically discards flow records if the corresponding flows have completed (i.e., FIN, RST packets detected) or if no packets from these flows arrive within some timeout τ .
Unfortunately, no analytical results are available on the number of flows M (t) that a router needs to track in steady state or the amount of RAM needed to keep the counters.
We overcome this problem by deriving E[M (t)] in equilibrium and showing that it can be orders of magnitude smaller than both the total number of flows n and the number of sampled flows M .
We finish the paper by evaluating URGE with real Internet traces obtained from NLANR [24] and CAIDA [3].
Our experiments reveal that the proposed algorithm produces very accurate estimation of flow metrics and thus allows one to perform more aggressive sampling (i.e., smaller probability p) of the monitored traffic.
We also discover in experiments that URGE works very well even on short traces, which makes it suitable for monitoring small customer networks and individual protocols.
In this section, we review several sampling algorithms in the area of traffic monitoring.
In particular, we classify existing work into two categories: packet sampling and flow sampling, where the former makes per-packet and the latter per-flow decisions to sample incoming traffic.
Sampled NetFlow (SNF) [25] is a widely used technique in which incoming packets are sampled with a fixed probability p.
The general goal of SNF is to obtain the PMF of flow sizes; however, [14] shows that it is impossible to accurately recover the original flow-size distribution from sampled SNF data.
Estan et al. [10] propose Adaptive NetFlow (ANF), which adjusts the sampling probability p according to the size of the flow table; however, ANF's bias in the sampled data is equivalent to that in SNF and is similarly difficult to overcome in practice.Instead of using one uniform probability for all flows as in [10], [25], another direction in packet sampling is to compute p i (c) for each flow i based on its currently observed size c.
This approach has been studied by two independent papers, Sketch-Guided Sampling (SGS) [20] and Adaptive Non-Linear Sampling (ANLS) [15].
A common feature of these two methods is to sample a new flow with probability 1 and then monotonically decrease p i (c) as c grows.
Both methods must maintain a counter for each flow present in the network and are difficult to scale due to the high RAM/CPU usage.
In flow thinning [14], each flow is sampled independently with probability p and then all packets in sampled flows are counted.
Hohn et al. [14] show that flow thinning is able to accurately estimate the flow size distribution; however, this method typically misses 1 − p percent of elephant flows and thus does not support applications such as usage-based accounting and traffic engineering [6], [11], [12], [13], [26].
For highly skewed distributions with a few extremely large flows and many short ones (which is typical for Internet links), this method may also take a long time to converge.To address these problems of flow thinning, Estan et.
al. [11] introduce a size-dependent flow sampling algorithm called Sample-and-Hold (S&H), which is proposed to identify elephant flows.
For each packet from a new flow, the algorithm creates a flow counter with probability p; once a flow is sampled, all of its subsequent packets are then counted.
It is easy to verify that S&H samples a flow with size l with probability 1 − (1 − p) l , which quickly approaches 1 as l grows.
Creating a unifying analytical model for this approach and understanding the properties of samples it collects is the main topic of this paper.Another direction of size-dependent flow sampling has been explored by Duffield et al. in [5], [6], [8], which present another size-dependent flow measurement method called Smart Sampling.
Their approach selects each flow of size L with probability p(L) = min(1, L/z), where z is some constant.
Since this method requires flow size L before deciding whether to sample it or not, it can only be applied off-line.
Kompella et.
al.[17] examine a method called Flow Slicing (FS), which combines SNF and S&H with a variant of smart sampling.
Other non-sampling methods include exact counting [27], [31] and lossy counting [18], [22], which are orthogonal to our work.
In this section, we build a general probabilistic model of Sample-and-Hold [11] and establish the necessary analytical foundation for the results that follow.
Due to limited space, omitted proofs, simulations, and various implementation details can be found in the extended technical report [28].
Consider a sequence of packets traversing a router and assume that its flow-measurement algorithm checks each packet's flow identifier x in some RAM table.
If x is found in the table, the corresponding counter is incremented by 1; otherwise, with probability p a new entry for x is created in the table (with counter value 1) and with probability 1 − p the packet is ignored.To model this process, we first need several definitions.
Assume that flow sizes are i.i.d. random variables and define geometric age A L to be the number of packets discarded from the front of a flow with size L before it is sampled (see Fig.
1).
Let G be a shifted geometric random variable with success probability p, i.e.,P (G = j) = (1 − p) j p.
It thus follows that A L is simply: A L = min(G, L).
(7)Now define geometric residual R L to be the final counter value of a flow of size L conditioned on the fact that it has been sampled (i.e., A L < L):R L = L − A L ,(8)which is also illustrated in Fig. 1.
From the perspective of traffic monitoring in this paper, geometric residual R L is the only quantity collected during measurement and available to an estimation algorithm.
Since this approach belongs to the class of residual-sampling techniques [29] and specifically uses geometric age, this paper calls S&H by a more mathematicallyspecific name Residual-Geometric Sampling (RGS).
Assume that L has a PMF f i = P (L = i), where i = 1, 2, . . ., and denote by p s = P (A L < L) the probability that a random flow is sampled.
Then, we have the following result.packets in a flow discarded packet sampled packet Age A L Residual R L flow size LLemma 1: Probability p s that a flow is selected by RGS is:p s = E[1 − (1 − p) L ] = 1 − ∞ ∑ i=1 f i (1 − p) i .
(9)Next, let h i = P (R L = i) be the PMF of geometric residual R L .
The following lemma expresses h i in terms of f i .
Lemma 2: The PMF of geometric residual R L is:h i = p ∑ ∞ j=i f j (1 − p) j−i p s .
(10)The result of Lemma 2 is fundamental as most of the results in this paper are conveniently derived from (10).
We next analyze a special case of residual sampling where the original flow size is fixed at L = l. Note that residuals are now R l instead of R L since the original flow size is no longer a random variable.
Recall that the goal of single-flow size estimation is to obtain l from R l for each sampled flow.
The next corollary follows from (10) and gives the distribution and expectation of geometric residual R l .
Corollary 1: Given flow size L = l, the PMF of R l is:P (R l = i) = (1 − p) l−i p 1 − (1 − p) l(11)and its expectation is:E[R l ] = l 1 − (1 − p) l + 1 − 1/p.
(12)Next, we apply the results obtained in this section to analyze existing estimation methods that have been proposed for RGS.
In this section, we examine prior approaches [11], [17] to estimating single-flow usage and whether their results can be generalized to recover the PMF of L. To evaluate single-flow estimators, we use the following definition that is commonly used in statistics [2].
Definition 1: Estimator e(R l ) is called unbiased if E[e(R l )] = l for all l ≥ 1.
Unbiased estimation is a key property of an estimator as it allows accurate estimation of the total contribution from a sufficiently large pool of flows (e.g., one customer network).
However, since large flows are typically rare, one commonly (13) in simulations and its model (14).
faces an additional requirement to estimate their size with just a single sample e(R l ), which is formalized in the next definition.Definition 2: Estimator e(R l ) is called elephant-accurate if e(R l )/l → 1 in mean-square as l → ∞.
Elephant-accuracy guarantees that the amount of relative error between e(R l ) and l decays to zero as l → ∞.
As before, suppose that a flow of size l produces a counter with value R l .
Recall that [11], [17] suggest the following estimator:e(R l ) = R l − 1 + 1/p,(13)where p is the probability of residual-geometric sampling.
The next result directly follows from (12).
Theorem 1: Expectation E[e(R l )]is given by:E[e(R l )] = l 1 − (1 − p) l .
(14)Note that (14) indicates that (13) is generally biased, especially when lp is small.
Indeed, for lp ≈ 0, we have 1 − (1 − p) l ≈ lp and E[e(R l )] ≈ 1/p regardless of l, which shows that in such cases E[e(R l )] carries no information about the original flow size.
However, as l → ∞, it is straightforward to verify that the bias in e(R l ) vanishes exponentially, which is consistent with the analysis in [17], which has only considered the case of l → ∞.
To see the extent of bias in (13) and verify (14), we apply residual-geometric sampling to flows of size l ranging from 1 to 10 6 packets, feed the measured sizes to (13), and average the result after 1000 iterations for each l. Fig. 2 plots the obtained E[e(R l )] along with model (14).
The figure indicates that (14) indeed captures the bias and that (13) tends to overestimate the size of short flows even in expectation, where smaller sampling probability p leads to more error.To quantify the error of individual values e(R l ) in estimating flow size l and to understand elephant-accuracy, denote by Y l = e(R l )/l and define the Relative Root Mean Square Error (RRMSE) to be:δ l = √ E[(Y l − 1) 2 ].
(15)Note that δ l → 0 indicates that Y l → 1 in mean-square and thus implies elephant-accurate estimation.
The next result derives δ l in closed form.
(13) in simulations and its model (16).
The RRMSE of (13) is given by:δ l = √ 1 − p − l(l − 1)p 2 (1 − p) l − (1 − p) l+1 l 2 p 2 (1 − (1 − p) l ) .
(16)Observe from (16) that for flows with size l = 1, the relative error is √ 1 − p/p, but as l → ∞, δ l → 0 and the estimator is elephant-accurate.
Fig. 3 plots (16) We now investigate whether e(R L ) defined in (13) can be used to estimate the actual flow-size distribution {f i } ∞ i=1 .
Denote by q i = P (e(R L ) = i) the PMF of estimated sizes among the sampled flows.
To understand our objectives with approximating the PMF of L, the following definition is in order.Definition 3: An estimator{q i } ∞ i=1 of PMF {f i } ∞ i=1is called asymptotically unbiased if q i converges in probability to f i for all i as the number of sampled flows M → ∞.
The next theorem follows directly from (10).
Theorem 3: The PMF of flow sizes estimated from (13) is given by:q i = ∑ ∞ j=y(i) f j (1 − p) j−y(i) p p s ,(17)where y(i) = ⌈i + 1 − 1/p⌉ and p s is in (9).
The result in (17) indicates that each q i is different from f i regardless of the sampling duration and thus cannot be used to approximate the flow-size distribution.
We verify (17) with a simulated packet stream with 5M flows, where flow sizes follow a power-law distribution P (L ≤ i) = 1 − i −α for i = 1, 2, . . . and α = 1.1.
Fig. 4 plots the CCDF of random variable e(R L ) obtained from simulations as well as model (17), both in comparison to the tail of the actual distribution.
The figure shows that (17) accurately predicts the values obtained from simulations and that PMF {q i } is indeed quite different from {f i }.
So far, our study of existing methods in residual-geometric sampling has shown that they are not only generally biased, but also unable to recover the flow-size distribution from residuals R L .
This motivates us to seek better estimation approaches, which we perform next.
This section proposes a family of algorithms called Unbiased Residual-Geometric Estimators (URGE), proves their accuracy, and verifies them in simulations.
For estimating individual flow sizes, we first consider an estimator directly implied by the result in (12).
Notice that solving (12) for l and expressing flow size l in terms of E[R l ], we get:l = u − 1 log(1 − p) W ( u(1 − p) u log(1 − p) ) ,(18)where u = E[R l ] + 1/p − 1 and W (z) is Lambert's function (i.e., a multi-valued solution to W e W = z) [4].
Thus, a possible estimator can be computed from (18) ˆ e(R l ) = R l − 1 + 1/p − (1 − p) R l p .
(19)and next show that it is unbiased.Lemma 3: EstimatorêEstimatorˆEstimatorê(R l ) in (19) is unbiased, i.e., E[ˆ e(R l )] = l.(20)We plot in Fig. 5 simulation results obtained from (19).
The figure indicates thatêthatˆthatê(R l ) accurately estimates actual sizes for all flows in both cases of p. Next, we derive the RRMSE of URGE.Theorem 4: The RRMSE of (19) is given by:ˆ δ l = √ 1 − p + lp(p − 2)(1 − p) l − (1 − p) 2l+1 l 2 p 2 (1 − (1 − p) l ) .
(21)It is easy to verify from (21) that URGE has zero RRMSE for l = 1 or l → ∞, confirming its elephant-accuracy.
We plotˆδplotˆ plotˆδ l obtained from simulations along with the model in Fig.
6, which shows that (21) accurately tracks the actual relative error.
From Figures 5-6, it is clear thatêthatˆthatê(R l ) significantly improves the accuracy of estimating small flow sizes compared to e(R l ).
In practice, (21) can be used to determine threshold l 0 , which leads to desired bounds on error for all l ≥ l 0 and allows ISPs to use e(R l ) instead of l.
It is worth mentioning that while (19) produces unbiased estimation of flow sizes, ˆ e(R L ) is not suitable for computing the flow-size distribution, as we show below.
Denote byˆq byˆ byˆq i = P (ˆ e(R L ) = i) the PMF ofêofˆofê(R L ).
Then, we have the following result.Lemma 4: PMF ofêofˆofê(R L ) is given by:ˆ q i = 1 p s ∞ ∑ j=y(i) (1 − p) j−y(i) f j p,(22)where p s is in (9), function y(i) is:y(i) = ⌈i + 1 − 1/p − ω⌉,(23)andω = W ( −(1 − p) i+1−1/p log(1 − p)) .
Notice from (22)-(23) that distributionˆqdistributionˆ distributionˆq i does not even remotely approximate the original PMF f i .
This problem is fundamental since residual sampling exhibits bias towards larger flows and even if we could recover L from R L exactly, the distribution of sampled flow sizes would not accurately approximate that of all flows passing through the router.We thus explore another technique for estimating the flowsize distribution.
Before doing that, we need the next lemma.Lemma 5: The flow size distribution f i can be expressed using the PMF of geometric residuals {h i } in (10) as: This result leads to a new estimator for the flow-size distribution:f i = h i − (1 − p)h i+1 p + (1 − p)h 1 .
(24)˜ q i = M i − (1 − p)M i+1 M p + (1 − p)M 1 ,(25)where M is the total number of sampled flows and M i is the number of them with the geometric residual equal to i.
Since M i /M → h i in probability as M → ∞ (from the weak law of large numbers), we immediately get the following result.
Corollary 2: The estimator in (25) is asymptotically unbiased.We next verify the accuracy of˜qof˜ of˜q i in simulations with 5M flows in the same setting as in the previous section.
We plot in Fig. 7 the CCDF estimated from (25) along with the actual distribution.
The figure shows that˜qthat˜ that˜q i accurately follows the actual distribution for both cases of p.
We next examine the effect of sample size M on the convergence of estimator˜qestimator˜ estimator˜q i .
To illustrate the problems arising from small M , we study (25) with p = 10 −4 and 10 −5 in simulations with the same 5M flows.
The estimator obtained M = 3, 090 flows for p = 10 −4 and just M = 337 for p = 10 −5 .
Fig. 8 indicates that while the estimated curves under both choices of p still approximate the trend of the original distribution, they exhibit different levels of noise.
As the next result indicates, small p leads to a small sample size M and thus more noise in the estimated values.Corollary 3: Suppose that M flows are selected by residual-geometric sampling from a total of n flows.
Then, the expected value of M is given by:E[M ] = np s = nE[1 − (1 − p) L ].
(26)To shed light on the choice of proper p for RGS, we show how to determine the minimum M that would guarantee a certain level of accuracy iñ q i .
Define˜hDefine˜ Define˜h i = M i /M to be an estimate of h i = P (R L = i).
The next lemma follows from Lemma 5 and Corollary 2 and indicates that the accuracy of˜q of˜ of˜q i directly depends on whether˜hwhether˜ whether˜h i approximates h i accurately.Lemma 6: Suppose that | ˜ h j − h j | ≤ ηh j holds with probability 1 − ξ for j ∈ [1, i + 1] and small constants η and ξ.
Then, there exists a constant ζ: such that ζ → 0 as η → 0 and P (|˜qζ = η(p + 2η(1 − p)h 1 ) p + (1 − p)(1 − η)h 1(27)|˜q i − f i | ≤ ζf i ) = 1 − ξ.Next, we obtain a bound on M from the requirement that˜h that˜ that˜h i be bounded in probability within a given range[h i (1 − η), h i (1 + η)].
Theorem 5: For small constants η and ξ, | ˜ h i − h i | ≤ ηh i holds with probability 1 − ξ if sample size M is no less than:M ≥ (1 − h i ) h i η 2 ( Φ −1 (1 − ξ/2) ) 2 ,(28)where Φ(x) is the CDF of the standard Gaussian distribution N (0, 1).
For example, to bound˜hbound˜ bound˜h i within 10% percent of h i (i.e., η = 0.1) with probability 1 − ξ = 95% for all h i ≥ 10 −2 , the following must hold:M ≥ (1 − 10 −2 ) × 1.96 2 10 −2 × 0.1 2 ≈ 3.8 × 10 4 ,(29)which indicates that M = 38K flows must be sampled to achieve target accuracy.
If we reduce η to 1%, increase 1−ξ to 99%, and require the approximation to hold for all h i ≥ 10 −3 , then M must be at least 66M flows.
Converting η into ζ using (27), one can establish similar bounds on the deviation of˜qof˜ of˜q i from f i .
Besides flow sizes and the flow-size distribution, URGE also provides estimators for the total number of flows and the number of them with size i. Before introducing these estimators, we need the next lemma.Lemma 7: The expected number of flows with sampled residuals R L = i is:E[M i ] = E[M ]h i = nh i p s ,(30)where h i is the PMF of geometric residuals R L and p s is given by (9).
Based on this, we next develop two estimators and prove their accuracy.
LetñLet˜Letñ be an estimator of the total number of flows n observed in the measurement window [0, T ]:˜ n = M + (1 − p) p M 1(31)andñand˜andñ i be an estimator of the number of flows n i with size i:˜ n i = M i − (1 − p)M i+1 p .
(32)Then, the next result shows that both of these estimators are asymptotically unbiased.Lemma 8: RatiosñRatios˜Ratiosñ/n andñand˜andñ i /n i converge to 1 in probability as M → ∞.
Note that [17] provided a similar estimator as (31) and proved E[˜ n] = n using a different approach from ours; however, our results are stronger as they show convergence in probability and additionally address estimation of n i .
Simulations verifying (31)-(32) are omitted for brevity.
In a typical implementation of URGE, one needs a flow table to keep a mapping between flow identifiers and associated counters.
An important element of any sampling algorithm is to ensure that the table keeps only active flows, which can be accomplished by periodic sweeps through RAM and removal of all flows that have completed.
Such a strategy together with RGS can achieve a significant reduction in the table size.To understand how much benefit removal of dead flows provides to memory consumption, we next derive the expected number of active flows at any time t and their fraction sampled by the algorithm.
Assume a measurement window [0, T ], where T is given in packets seen by the router.
For each flow j, let inter-packet delays within the flow be given by a random variable ∆ j , which counts the number of packet arrivals from other flows between adjacent packets of j. Denoting by ∆ = E[∆ j ], we have the following result.Lemma 9: Assuming stationary flow arrivals in [0, T ] and T → ∞, the expected number of active flows N (t) at time t is given by:E[N (t)] = ∆ + 1.
(33)Our baseline reduction in flow volume comes from geometric sampling in previous sections and reduces the number of flows by a factor of r 1 = n/E [M ].
Now additionally define ratio r 2 = n/E[N (t)] = T /(∆ + 1)E [L] and observe that longer observation windows (i.e., larger T ), smaller flow sizes (i.e., smaller E[L]), and denser arrivals (i.e., smaller ∆) imply more savings of memory.
In fact, T → ∞ results in r 2 → ∞ if the other parameters are fixed.
However, even more reduction is possible by discarding dead flows in RGS.
Denote by M (t) the number of sampled flows that are still alive at t and consider the next result.Lemma 10: Assuming the flow arrival process is stationary in [0, T ] and T → ∞, the expected number of active sampled flows at time t is given by:E[M (t)] = (∆ + 1) ( 1 − 1 − p pE[L] p s ) ,(34)where p s in (9) is the fraction of all flows sampled by RGS.
Define r 3 = n/E[M (t)] and notice that it increases not only as T grows, but also when p decreases.
Performing a selfcheck using Jensen's inequality, observe that 0≤ p s /pE[L] ≤ 1 and therefore E[M (t)] ≤ E[N (t)], which means that the former indeed always results in more reduction in table size.
Simulations with heavy-tailed flows (omitted due to limited space) show that the model is very accurate.
In this section, we evaluate our models using several Internet traces in Table I from NLANR [24] and CAIDA [3].
Trace FRG was collected from a gigabit link between UCSD and Abilene in 2006.
We extracted from it additional traces with only Web, DNS, and NTP flows (also seen in the table).
Additionally, we use three traces from CAIDA: LARGE -a one-hour trace from an OC48 link, MEDIUM -a one-minute trace from a OC192 link, and SMALL -a 7-minute trace from a gigabit link.As the table shows, URGE typically sees a reasonably large number of flows M over the entire interval [0, T ]; however, the number of active flows N (t) and those constantly kept in memory M (t) is much smaller.
For the FRG trace, for example, E[M ] is 15 times smaller than n, while E[N (t)] is 81 and E[M (t)] is 658 times smaller.
In general, NLANR traces benefit more from the removal of dead flows than CAIDA data, because former was collected over two consecutive days and thus had a larger observation window T , which led to larger ratios r 2 and r 3 .
The same reasoning also explains the fact that the LARGE trace exhibits much higher benefit from removing dead flows than MEDIUM or SMALL traces.
First, we examine the problem of estimating the total number of flows n in [0, T ] and size-one flows n 1 in this interval.
The fifth and eighth columns of Table II list the absolute error of models (31) and (32), respectively.
The table indicates that these estimates are commonly within 2.5% of the correct value.We next evaluate the performance of URGE in estimating single-flow usage.
Fig. 9 plots the expectation of estimated flow sizes (averaged over 100 iterations) along with the actual values obtained from the FRG trace using p = 0.001.
The figure shows that the estimator e(R l ) from previous work tends to overestimate the sizes of small flows, while URGE's estimatorêestimatorˆestimatorê(R l ) accurately follows the actual values.
We also compare the relative errors of the two studied methods in Fig.
10, which indicates that URGE has RRMSE bounded by 1 for all flows, while e(R l ) exhibits very large δ l for small and medium flows, which is an increasing function of 1/p.
For the flow-size distribution, we first examine three values of p to compare its effect on the accuracy of URGE in the FRG trace.
Fig. 11 indicates that estimation for all three values of p are very consistent and all of them follow the actual distribution accurately.
In our experiments with p = 0.0001, URGE recovered the original PMF {f i } using only M = 7, 616 total flows out of n = 1.75M.Finally, we apply URGE with p = 0.001 to NLANR traces of different traffic types and plot in Fig. 12 the estimated distributions along with the actual ones.
As the figure shows, the flow statistics of different applications can be accurately estimated by URGE.
We observe a similar match in our experiments with three CAIDA traces as shown in Fig. 13.
In this paper, we proved that previous methods based on residual-geometric sampling had certain bias in estimating single-flow usage and were unable to recover the flow-size distribution from the sampled residuals.
To overcome this limitation, we proposed a novel modeling framework for analyzing residual sampling and developed a set of algorithms that were able to perform accurate estimation of flow statistics, even under the constraints of small router RAM size, short trace duration, and low CPU sampling overhead.
