Functional decomposition is a fundamental operation in logic synthesis.
Prior BDD-based approaches to functional decomposition suffer from the memory explosion problem and do not scale well to large Boolean functions.
Variable partitioning has to be specified a priori and often restricted to a few bound-set variables.
Moreover, non-disjoint decomposition requires substantial sophistication.
This paper shows that, when Ashenhurst decomposition (the simplest and preferable functional decomposition) is considered, both single-and multiple-output decomposition can be formulated with satisfiability solving, Craig interpolation, and functional dependency.
Variable partitioning can be automated and integrated into the decomposition process without the bound-set size restriction.
The computation naturally extends to non-disjoint decomposition.
Experimental results show that the proposed method can effectively decompose functions with up to 300 input variables.
Functional decomposition [1,5,9] aims at decomposing a Boolean function into a network of smaller sub-functions.
It is a fundamental operation in logic synthesis and has various applications to FPGA synthesis and to the minimization of circuit communication complexity.
There has been intensive work on this subject since FPGAs became a viable design style and BDD packages were available.
See, e.g., [14] for a survey.Most prior work on functional decomposition used BDD as the underlying data structure.
With proper variable ordering, BDD can be exploited for the computation of functional decomposition.
Despite having been a powerful tool, BDD poses several limitations: Firstly, BDD suffers from the memory explosion problem.
In representing a Boolean function, a BDD can be of large size (in the worst case, exponential in the number of variables).
It is even more so when special variable ordering rules need to be imposed on BDDs for functional decomposition.
Therefore it is typical that a function under decomposition can have just a few variables.
Secondly, variable partitioning needs to be specified a priori, and cannot be automated as an integrated part of the decomposition process.
In order to effectively enumerate different variable partitions and keep BDD sizes reasonably small, the set of bound set variables cannot be large.
Thirdly, for BDD-based approaches, non-disjoint decomposition cannot be handled easily.
In essence, decomposability needs to be analyzed by cases exponential in the number of joint (or common) variables.
Finally, even though multiple-output decomposition [16] can be converted to single-output decomposition [8], BDD sizes may grow largely in this conversion.The above limitations motivate the need for new data structures and computation methods for functional decom- position.
This paper shows that, when Ashenhurst decomposition [1] is considered, these limitations can be overcome through satisfiability (SAT) based formulation.
Ashenhurst decomposition is a special case of functional decomposition, where, as illustrated in Figure 1, a function f (X) is decomposed into two sub-functions h(X H , X C , x g ) and g(X G , X C ) with f (X) = h(X H , X C , g(X G , X C )).
For general functional decomposition, the function g can be a functional vector (g1, . . . , g k ) instead.
It is this simplicity that makes Ashenhurst decomposition particularly attractive in practical applications.The enabling techniques of our method, in addition to SAT solving, include Craig interpolation [4] and functional dependency [10].
Specifically, the decomposability of function f is formulated as SAT solving, the derivation of function g is by Craig interpolation, and the derivation of function h is by functional dependency.Compared with BDD-based methods, the proposed algorithm is advantageous in the following aspects.
Firstly, it does not suffer from the memory explosion problem and is scalable to large functions.
Experimental results show that Boolean functions with more than 300 input variables can be decomposed effectively.
Secondly, variable partitioning needs not be specified a priori, and can be automated and derived on the fly during decomposition.
Hence the size of the bound set variables X G need not be small.
Thirdly, it works for non-disjoint decomposition naturally.
Finally, it is easily extendable to multiple-output decomposition.
Nonetheless, a limitation of the method is its expensive generalization to functional decomposition beyond Ashenhurst's special case.As interconnects become a dominating concern in modern nanometer IC designs, scalable decomposition methods play a pivotal role in circuit communication minimization.
With the advantages of the proposed method, hierarchical logic decomposition could be made feasible in practice.
In addition, our results may shed light on scalable Boolean matching for heterogeneous FPGAs as well as topologically constrained logic synthesis.
This paper is organized as follows.
Section 2 introduces essential preliminaries.
Our main algorithms are presented in Section 3, and evaluated with experimental results in Section 4.
Section 5 compares some related prior work.
Finally, Section 6 concludes the paper and outlines future work.
As conventional notation, sets are denoted by upper-case letters, e.g., S; set elements are in lower-case letters, e.g., e ∈ S.
The cardinality of S is denoted by |S|.
A partition of a set S into S i ⊆ S for i = 1, . . . , k (with S i ∩ S j = ∅, i = j, andi S i = S) is denoted by {S 1 |S 2 | . . . |S k }.
For a set X of Boolean variables, its set of valuations (or truth assignments) is denoted by [[X]], e.g., [[X]] = {(0, 0), (0, 1), (1, 0), (1, 1)} for X = {x 1 , x 2 }.
Definition 1.
Given a completely specified Boolean function f , variable x is a support variable of f if fx = f¬x, where fx and f¬x are the positive and negative cofactors of f on x, respectively.
Definition 2.
A set {f1(X), . . . , fm(X)} of completely specified Boolean functions is (jointly) decomposable with respect to some variable partition X = {X H |X G |X C } if every function f i , i = 1, . . . , m, can be written asf i (X) = h i (X H , X C , g 1 (X G , X C ), . . . , g k (X G , X C )) for some functions h i , g 1 , . . . , g k with k < |X G |.
The de- composition is called disjoint if X C = ∅, and non-disjoint otherwise.It is known as single-output decomposition for m = 1, and multiple-output decomposition for m > 1.
Note that, in multiple-output decomposition, functions h1, . . . , hm share the same functions g1, . . . , g k .
For k = 1, the decomposition is known as the so-called Ashenhurst decomposition [1].
Note that, for |X G | = 1, there is no successful decomposition because of the violation of the criterion k < |X G |.
On the other hand, the decomposition trivially holds if XC ∪ XG or X C ∪ X H equals X.
The corresponding variable partition is called trivial.
This paper is concerned about decomposition under non-trivial variable partition.
Moreover, we focus on Ashenhurst decomposition.The decomposability of a set {f1, . . . , fm} of functions under the variable partition X = {X H |X G |X C } can be analyzed through the so-called decomposition chart, consisting of a set of matrices, one for each member of [ (X H = a, X G = b, X C = c).
Proposition 1.
[1, 5, 9] A set {f 1 , . . . , f m } of Boolean functions is decomposable as f i (X) = h i (X H , X C , g 1 (X G , X C ), . . . , g k (X G , X C )) for i = 1, . . . , m under variable partition X = {X H |X G |X C } if and only if, for every c ∈ [[X C ]], the corresponding matrix of c has at most 2 k column patterns (i.e., at most 2 k different kinds of column vectors).
Definition 3.
Given a Boolean function f : B m → B and a vector of Boolean functions G = (g 1 (X), . . . , g n (X)) with gi : B m → B for i = 1, . . . , n, over the same set of variable vector X = (x1, . . . , xm), we say that f functionally depends on G if there exists a Boolean function h : B n → B, called the dependency function, such that f (X) = h(g 1 (X), . . . , g n (X)).
We call functions f , G, and h the target function, base functions, and dependency function, respectively.Note that functions f and G are over the same domain in the definition; h needs not depend on all of the functions in G.The necessary and sufficient condition of the existence of the dependency function h was given in [7].
Moreover a SATbased computation of functional dependency was presented in [10].
It forms an important ingredient in part of our formulation.
A brief introduction to SAT solving and circuit-to-CNF conversion, essential to our development, can be found in [10].
To introduce terminology and notation for later use, we mention the following theorem.
Given two Boolean formulas ϕA and ϕB, with ϕA ∧ϕB unsatisfiable, then there exists a Boolean formula ψA referring only to the common variables of ϕ A and ϕ B such that ϕ A ⇒ ψ A and ψ A ∧ ϕ B is unsatisfiable.The Boolean formula ψA is referred to as the interpolant of ϕ A with respect to ϕ B .
Some modern SAT solvers, e.g., MiniSat [6], are capable of constructing an interpolant from an unsatisfiable SAT instance [13].
We show that Ashenhurst decomposition of a set of Boolean functions {f 1 , . . . , f m } can be achieved by SAT solving, Craig interpolation, and functional dependency.
Whenever a nontrivial decomposition exists, we derive functions hi and g automatically forf i (X) = h i (X H , X C , g(X G , X C )) along with the corresponding variable partition X = {X H |X G |X C }.
We first consider Ashenhurst decomposition for a single function f (X) = h(XH , XC , g(XG, XC )).
Proposition 1 in the context of Ashenhurst decomposition of a single function can be formulated as satisfiability solving as follows.Proposition 2.
A completely specified Boolean function f (X) can be expressed as h(XH , XC , g(XG, XC )) for some functions g and h if and only if the Boolean formula(f (X 1 H , X 1 G , X C ) ≡ f (X 1 H , X 2 G , X C )) ∧ (f (X 2 H , X 2 G , XC ) ≡ f (X 2 H , X 3 G , XC )) ∧ (f (X 3 H , X 3 G , X C ) ≡ f (X 3 H , X 1 G , X C ))(1)is unsatisfiable, where a superscript i in Y i denotes the i th copy of the instantiation of variables Y .
Observe that Formula (1) is satisfiable if and only if there exists more than two distinct column patterns in some matrix of the decomposition chart.
Hence its unsatisfiability is exactly the condition of Ashenhurst decomposition.
Note that, unlike BDD-based counterparts, the above SATbased formulation of Ashenhurst decomposition naturally extends to non-disjoint decomposition.
It is because the unsatisfiability checking of Formula (1) essentially tries to assert that under every valuation of variables X C the corresponding matrix of the decomposition chart has at most two column patterns.
In contrast, BDD-based methods have to check the decomposability under every valuation of X C separately.Whereas the decomposability of function f can be checked through SAT solving of Formula (1), the derivations of functions g and h can be realized through Craig interpolation and functional dependency, respectively, as shown below.
(2) and (3) X 1 G X 2 G … … X 1 G X 2 G … … (a)(b)(X 1 G , X 2 G , c) for some c ∈ [[XC ]]; (b) relation after cofactoring ψ A (X 1 G = p, X 2 G , c) with respect to some p ∈ [[X 1 G ]]To derive function g, we partition Formula (1) into two sub-formulas Figure 2 shows the corresponding circuit representation of Formulas (2) and (3).
The circuit representation can be converted into a CNF formula in linear time [15], and thus can be checked for satisfiability.ϕ A = f (X 1 H , X 1 G , X C ) ≡ f (X 1 H , X 2 G , X C ), and (2) ϕB = (f (X 2 H , X 2 G , XC ) ≡ f (X 2 H , X 3 G , XC )) ∧ (f (X 3 H , X 3 G , X C ) ≡ f (X 3 H , X 1 G , X C )).
(3)Lemma 1.
For function f (X) decomposable under Ashenhurst decomposition with variable partition X = {X H |X G |X C }, the interpolant ψ A with respect to ϕ A of Formula (2) and ϕ B of Formula (3) corresponds to a characteristic function such that, (i) for ϕ A satisfiable under some c ∈ [[X C ]], ψ A (b 1 , b 2 , c) = 1 with b 1 ∈ [[X 1 G ]] and b 2 ∈ [[X 2 G ]] ifX i G ]].
An edge (b 1 , b 2 ) between b 1 ∈ [[X 1 G ]] and b 2 ∈ [[X 2 G ]] denotes that b1 is not in the same equivalence class as b2, i.e., ψA(b1, b2, c) = 1.
For example, p and r in the figure are in different equivalence classes and ψ A (p, r, c) = 1, whereas p and q are in the same equivalence class and ψ A (p, q, c) = 0.
Essentially the set of such edges are characterized by the equivalence relation ψA(X 1 G , X 2 G , c).
So every element in one equivalence class of [ [X 1 G ]] is connected to every element in the other equivalence class of [ [X 2 G ]], and vice versa, in Fig- ure 3(a).
We next show how to extract function g from the interpolant ψA.Lemma 2.
For an arbitrary a ∈ [[X 1 G ]], the cofactored in- terpolant ψA(X 1 G = a, X 2 G , XC ) is a legal implementation of function g(X 2G , X C ).
After renaming X 2 G to XG, we get the desired g(XG, XC ).
Consider Figure 3.
After cofactoring So far we have successfully obtained function g by interpolation.
Next we need to compute function h.
The problem can be formulated as computing functional dependency as follows.
Let f (X) be our target function; let function g(X G , X C ) and identity functions ı x (x) = x, one for every variable x ∈ X H ∪ X C , be our base functions.
So the computed dependency function corresponds to our desired h.
Since functional dependency can be formulated using SAT solving and interpolation [10], it well fits in our computation framework.ψ A (X 1 G , X 2 G , c) with respect to p ∈ [[X 1 G ]],Remark 1.
For disjoint decomposition, i.e., X C = ∅, we can simplify the derivation of function h, without using functional dependency.Given two functions f (X) and g(XG) with variable partition X = {XH |XG}, we aim to find a function h(XH , xg) such that f (X) = h(X H , g(X G )), where x g is the output variable of function g(X G ).
The correctness of the so-derived Ashenhurst decomposition follows from Lemma 2 and Proposition 1, as the following theorem states.h(X H , x g ) = (¬x g ∧ h ¬xg (X H )) ∨ (x g ∧ h xg (X H )), where h ¬x g (X H ) = f (X H , X G = a) and h x g (X H ) = f (X H , X G = b).
Theorem 2.
Given a function f decomposable under Ashenhurst decomposition with variable partition X = {XH |XG|XC }, then f (X) = h(X H , X C , g(X G , X C )) for functions g and h obtained by the above derivation.
The previous construction assumes that a variable partition X = {X H |X G |X C } is given.
We show how to automate the variable partition within the decomposition process of function f .
A similar approach was used in [11] for bi-decomposition of Boolean functions.For each variable x i ∈ X we introduce two control variables αx i and βx i .
In addition we instantiate variable X into six copies X 1 , X 2 , X 3 , X 4 , X 5 , and X 6 .
Letϕ A = (f (X 1 ) ≡ f (X 2 )) ∧ i ((x 1 i ≡ x 2 i ) ∨ β x i ) and (4) ϕ B = (f (X 3 ) ≡ f (X 4 )) ∧ (f (X 5 ) ≡ f (X 6 )) ∧ i (((x 2 i ≡ x 3 i ) ∧ (x 4 i ≡ x 5 i ) ∧ (x 6 i ≡ x 1 i )) ∨ α x i ) ∧ i (((x 3 i ≡ x 4 i ) ∧ (x 5 i ≡ x 6 i )) ∨ β x i ),(5)where x j i ∈ X j for j = 1, . . . , 6 are the instantiated versions of x i ∈ X. Observe that (α x i , β x i ) = (0, 0), (0, 1), (1, 0), and (1,1) indicate that x i ∈ X C , x i ∈ X G , x i ∈ X H , and x i can be in either of XG and XH , respectively.In SAT solving the conjunction of Formulas (4) and (5), we make unit assumptions [6] on the control variables.
Similar to [11] but with a subtle difference, we introduce the following seed variable partition to avoid trivial variable partition and to avoid |XG| = 1.
For the unit assumption, initially we specify three distinct variables with one, say, x j , in X H and two, say, x k , x l , in X G , and specify all other variables inX C .
That is, we have (α x j , β x j ) = (1, 0), (α x k , β x k ) = (0, 1), (αx l , βx l ) = (0, 1), and (αx i , βx i ) = (0, 0) for i = j, k, l.Lemma 3.
For an unsatisfiable conjunction of Formulas (4) and (5) under a seed variable partition, the final conflict clause consists of only the control variables, which indicates a valid non-trivial variable partition.If the conjunction of Formulas (4) and (5) is unsatisfiable under a seed variable partition, then the corresponding decomposition (indicated by the final conflict clause) is successful.
Otherwise, we should try another seed variable partition.
For a given function f (X) with |X| = n, the existence of non-trivial Ashenhurst decomposition can be checked with at most 3 · C n 3 different seed partitions.
Rather than just looking for a valid variable partition, we may further target one that is more balanced (i.e., |X H | and |X G | are of similar sizes) and closer to disjoint (i.e., |X C | is small) by enumerating different seed variable partitions.
As SAT solvers usually refer to a small unsatisfiable core, the returned variable partition is desirable because |X C | tends to be small.
Even if a returned unsatisfiable core is unnecessarily large, the corresponding variable partition can be further refined by modifying the unit assumption to reduce the unsatisfiable core and reduce |X C | as well.
The process can be iterated until the unsatisfiable core is minimal.After automatic variable partition, functions g and h can be derived through a construction similar to the foregoing one.
The correctness of the overall construction can be asserted.Theorem 3.
For a function f decomposable under Ashenhurst decomposition, we have f (X) = h(X H , X C , g(X G , X C )) for functions g and h, and a non-trivial variable partition X = {XH |XG|XC } derived from the above construction.
Is the above algorithm extendable to general functional decomposition, namely,f (X) = h(X H , X C , g 1 (X G , X C ), . . . , g k (X G , X C ))for k > 1?
The answer is yes, but with prohibitive cost.
Taking k = 2 for example, we need 20 copies of f to assert the non-existence of five different column patterns for every matrix of a decomposition chart, in contrast to the six for Ashenhurst decomposition shown in Figure 2.
This number grows in 2 k (2 k + 1).
Aside from this duplication issue, the derivation of functions g1, . . . , g k , and h may involve several iterations of finding satisfying assignments and performing cofactoring.
The number of iterations varies depending on how the interpolation is computed and can be exponential in k. Therefore we focus mostly on Ashenhurst decomposition.
The proposed approach to Ashenhurst decomposition was implemented in C++ within the ABC package [2] and used MiniSAT [6] as the underlying solver.
All the experiments were conducted on a Linux machine with Xeon 3.4GHz CPU and 6Gb RAM.Large ISCAS, MCNC and ITC benchmark circuits were chosen to evaluate the proposed method.
Only large transition and output functions (with no less than 50 inputs in the transitive fanin cone) were considered.
We evaluated both single-output and two-output Ashenhurst decompositions.
For the latter, we decomposed simultaneously a pair of functions with similar input variables.
For a circuit, we heuristically performed pairwise matching among its transition and output functions for decomposition.
Only function pairs with joint input variables no less than 50 were decomposed.
Note that the experiments target the study of scalability, rather than comprehensiveness as a synthesis methodology.
Tables 1 and 2 show the decomposition statistics of singleoutput and two-output decompositions, respectively.
In these tables, circuits to be decomposed are listed in Column 1.
Columns 2 and 3 list the numbers of instances (i.e., functions for single-output decomposition and function pairs for twooutput decomposition) with no less than 50 inputs and the ranges of the input sizes of these instances, respectively.
Column 4 lists the numbers of instances that we cannot find any successful variable partition within 60 seconds or within 1500 seed variable partitions.
Column 5 lists the numbers of instances that are decomposable but spending over 30 seconds in SAT solving for the derivation of function g or h. Columns 6 and 7 list the numbers of successfully decomposed instances and the ranges of the input sizes of these instances, respectively.
Columns 8 and 9 list the average numbers of tried seed partitions in 60 seconds and the average rates hitting valid seed partitions.
Column 10 shows the average CPU times spending on decomposing an instance.
Finally, Column 11 shows the memory consumption.
As can be seen, our method can effectively decompose functions or function pairs with up to 300 input variables.We measure the quality of a variable partition in terms of disjointness, indicated by |XC |/|X|, and balancedness, indicated by ||XG| − |XH ||/|X|.
The smaller the values are, the better a variable partition is.
Figures 4 and 5 depict, for each decomposition instance, the quality of best variable partition found within 60 seconds 1 in terms of the above two metrics, with emphasis on disjointness.
A spot on these two figures corresponds to a variable partition for some decomposition instance.
Figure 4 and Figure 5 show the variable partition data without and with further minimal unsatisfiable (UNSAT) core refinement 2 , respectively.
Since a final conflict clause returned by a SAT solver may not reflect a minimal UNSAT core, very likely we can further refine the corresponding variable partition.
Suppose the variable par- 1 The search for a best variable partition may quit before 60 seconds if both disjointness and balancedness cannot be improved in consecutive 1500 trials.
2 For every decomposition instance, the UNSAT core refinement is applied only once to the best found variable partition.
The CPU times listed in Tables 1 and 2 This work was supported in part by NSC grants 95-2218-E-002-064-MY3 and 96-2221-E-002-278-MY3.
KAside from BDD-based functional decomposition, we compare some related work using SAT.
In bi-decomposition [11], a function f is written as f (X) = h(g 1 (X A , X C ), g 2 (X B , X C )) under variable partition X = {XA|XB|XC }, where function h is known a priori and is of special function types (namely, two-input or, and, and xor gates) while functions g 1 and g 2 are the unknown to be computed.
In contrast, the complication of Ashenhurst decomposition f (X) = h(XH , XC , g(XG, XC )) comes from the fact that both functions h and g are unknown.
The problem needs be formulated and solved differently while the basic technique used is similar to that in [11].
FPGA Boolean matching, see, e.g., [3], is a subject closely related to functional decomposition.
In [12], Boolean matching was achieved with SAT solving, where quantified Boolean formulas were converted into CNF formulas.
The intrinsic exponential explosion in formula sizes limits the scalability of the approach.
Our method may provide a partial solution to this problem, at least for some special PLB configurations.
CONCLUSIONS AND FUTURE WORKA new formulation of Ashenhurst decomposition was proposed based on SAT solving, Craig interpolation, and functional dependency.
Traditionally difficult non-disjoint and multiple-output decompositions can be handled naturally.
Moreover variable partition needs not be specified a priori and can be embedded into the decomposition process.
It allows effective enumeration over a wide range of partition choices, which is not possible before.
Although Ashenhurst decomposition is a special case of functional decomposition, its simplicity is particularly attractive and preferable.Because of its scalability to large designs as justified by experimental results, our approach can be applied at a top level of hierarchical decomposition in logic synthesis, which may provide a global view on optimization.
It can be a step forward towards topologically constrained logic synthesis.For future work, how to perform general functional decomposition and how to minimize interpolants await future investigation.
Also the application of our approach to FPGA Boolean matching can be an interesting subject to explore.
Aside from BDD-based functional decomposition, we compare some related work using SAT.
In bi-decomposition [11], a function f is written as f (X) = h(g 1 (X A , X C ), g 2 (X B , X C )) under variable partition X = {XA|XB|XC }, where function h is known a priori and is of special function types (namely, two-input or, and, and xor gates) while functions g 1 and g 2 are the unknown to be computed.
In contrast, the complication of Ashenhurst decomposition f (X) = h(XH , XC , g(XG, XC )) comes from the fact that both functions h and g are unknown.
The problem needs be formulated and solved differently while the basic technique used is similar to that in [11].
FPGA Boolean matching, see, e.g., [3], is a subject closely related to functional decomposition.
In [12], Boolean matching was achieved with SAT solving, where quantified Boolean formulas were converted into CNF formulas.
The intrinsic exponential explosion in formula sizes limits the scalability of the approach.
Our method may provide a partial solution to this problem, at least for some special PLB configurations.
A new formulation of Ashenhurst decomposition was proposed based on SAT solving, Craig interpolation, and functional dependency.
Traditionally difficult non-disjoint and multiple-output decompositions can be handled naturally.
Moreover variable partition needs not be specified a priori and can be embedded into the decomposition process.
It allows effective enumeration over a wide range of partition choices, which is not possible before.
Although Ashenhurst decomposition is a special case of functional decomposition, its simplicity is particularly attractive and preferable.Because of its scalability to large designs as justified by experimental results, our approach can be applied at a top level of hierarchical decomposition in logic synthesis, which may provide a global view on optimization.
It can be a step forward towards topologically constrained logic synthesis.For future work, how to perform general functional decomposition and how to minimize interpolants await future investigation.
Also the application of our approach to FPGA Boolean matching can be an interesting subject to explore.
