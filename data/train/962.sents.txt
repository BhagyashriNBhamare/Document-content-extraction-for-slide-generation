We study the problem of assigning transmission ranges to the nodes of ad hoc wireless networks so that to minimize power consumption while ensuring network connectivity.
We give (1) an exact branch and cut algorithm based on a new integer linear program formulation solving instances with up to 35-40 nodes in 1 hour; (2) a proof that MIN-POWER SYMMETRIC CONNECTIVITY WITH ASYMMETRIC POWER REQUIREMENTS is in-approximable within factor´½factor´½ ¯µ Ð Ò 񮽙 Î 񮽙 for any ¯ 񮽙 ¼ unless È 񮽙 AE È ; (3) an improved analysis for two approximation algorithms recently proposed by C˘ alinescu et al. (TCS'02), decreasing the best known approximation factor to 񮽙񮽙¿ · ¯ ; (4) a comprehensive experimental study comparing new and previously proposed heuristics with the above exact and approximation algorithms.
INTRODUCTION Ad hoc wireless networks have received significant attention in recent years due to their potential applications in battlefield, emergency disaster relief, and other application scenarios (see, e.g., [1], [2], [3], [4], [5], [6], [7], [8], [9], [10]).
Unlike wired networks or cellular networks, no wired backbone infrastructure is installed in ad hoc wireless networks.
A communication session is achieved either through single-hop transmission if the recipient is within the transmission range of the source node, or by relaying through intermediate nodes otherwise.
When a transmission is made by a node it can be received by all nodes within its transmission range.
This feature is extremely useful for energy-efficient multicast and broadcast communications.
For the purpose of energy conservation, each node can (pos-sibly dynamically) adjust its transmitting power, based on the distance to the receiving node and the background noise.
In the most commonly used power-attenuation model [11], the signal power falls as ½ Ö 񮽙 where Ö is the distance from the transmitter antenna and 񮽙 is a coefficient dependent on the wireless en Ad hoc wireless networks have received significant attention in recent years due to their potential applications in battlefield, emergency disaster relief, and other application scenarios (see, e.g., [1], [2], [3], [4], [5], [6], [7], [8], [9], [10]).
Unlike wired networks or cellular networks, no wired backbone infrastructure is installed in ad hoc wireless networks.
A communication session is achieved either through single-hop transmission if the recipient is within the transmission range of the source node, or by relaying through intermediate nodes otherwise.
When a transmission is made by a node it can be received by all nodes within its transmission range.
This feature is extremely useful for energy-efficient multicast and broadcast communications.For the purpose of energy conservation, each node can (possibly dynamically) adjust its transmitting power, based on the distance to the receiving node and the background noise.
In the most commonly used power-attenuation model [11], the signal power falls as ½ Ö 񮽙 where Ö is the distance from the transmitter antenna and 񮽙 is a coefficient dependent on the wireless environment, typically between ¾ and 񮽙.
Under this model the power requirement for supporting a link from node Ù to node Ú separated by a distance Ö is given by Ô´ÙÙ Úµ µ 񮽙 Ù 񮽙 Ú Ö 񮽙 ÙÚ (1) where 񮽙 Ù 񮽙 ¼ is the transmission efficiency of node Ù, 񮽙 Ú 񮽙 ¼ is the signal detection sensitivity threshold of node Ú, and 񮽙 ÙÚ is the signal attenuation exponent for the link from Ù to Ú.
Typically it is assumed that all nodes have the same transmission efficiency and detection sensitivity coefficients, both normalized to 1, and that signal attenuation exponents 񮽙 ÙÚ have a common value 񮽙 (see, e.g., [12]).
With these assumptions, the power Ô´ÙÙ Úµ µ Ô ´ ÚÚÙµ µ Ö 񮽙 (2) Unless explicitly stated otherwise, in this paper we assume symmetric power requirements such as those given by (2).
Having every link established in both directions simplifies one-hop transmission protocols by allowing acknowledgement messages to be sent back for every packet (see, for example [13]).
This motivates the study of the MIN-POWER SYMMET-RIC CONNECTIVITY problem, where a link is established only if both nodes have transmission range at least as big as the distance between them, and the goal is to ensure that the network is connected [1], [14].
Formally Implicit in the work of Clementi, Penna, and Silvestri [4] is a proof that MIN-POWER SYMMETRIC CONNECTIVITY in 񮽙 ¾ is NP-Hard.
Therefore, we study approximation algorithms and heuristics for the problem.
In this paper we make the following contributions:¯ We give an exact branch and cut algorithm based on a new integer linear program formulation for the problem (Section I).
Experimental results show that the branch and cut algorithm solves instances with 25 nodes in less than one minute and instances with up to 35-40 nodes in 1 hour (Section III).
¯ We give an improved analysis for two approximation algorithms from [14], decreasing the best known approximation factor 1 ¯ We present a comprehensive experimental study comparing new and previously proposed heuristics with the above exact and approximation algorithms.
Experimental results show an average of 5-6% reduction in power consumption compared to the simple MST based solution (Section III).
For the important special case of nodes located on a line and monotonic symmetric power requirements, MIN-POWER SYM-METRIC CONNECTIVITY can be solved in polynomial time by dynamic programming; we omit the details for space reasons.
Kirousis, Kranakis, Krizanc, and Pelc [5] give a minimum spanning tree (MST) based 2-approximation algorithm for MIN-POWER SYMMETRIC CONNECTIVITY (their algorithm is actually designed for the COMPLETE RANGE AS-SIGNMENT problem discussed below).
C˘ alinescu et al. [14] push the approximation ratio below 2 by exploiting similarities between MIN-POWER SYMMETRIC CONNECTIVITY and the classic STEINER TREE problem.
In particular, [14] gives a fully polynomial ½ · Ð Ò ¾ approximation scheme 2 based on [15] and a more practical ½½񮽙񮽙 approximation algorithm based on [16].
Blough et al. [1] give asymptotic bounds on the solution cost for random and so called´¡񮽙called´¡񮽙 AE µ Euclidean instances.The objective of minimizing the total power has been more extensively addressed under the specific power requirements given by (2) and the related asymmetric connectivity model, in which unidirectional links give raise to a directed graph on Î (see [12]).
Four problems have been studied under this model.1.
ASYMMETRIC UNICAST, which requires establishing a minimum power directed path from a source × to a destination Ø.
ASYMMETRIC UNICAST is easily solved in polynomial time by shortest-path algorithms.
The related MIN-POWER SYMMETRIC UNICAST problem can also be solved efficiently by a shortest-path computation in an appropriately constructed graph [14].2.
ASYMMETRIC BROADCAST, which requires establishing a minimum power arborescence rooted at a given vertex × [8], [10].
Clementi et al. [3] prove that ASYMMETRIC BROAD-CAST is NP-Hard when the nodes are in 񮽙 ¾ .
The best known approximation algorithm for ASYMMETRIC BROADCAST [9], based on computing a minimum spanning tree, has performance ratio of at most 12 when the nodes are in 񮽙 ¾ .
Chu and Nikolaidis [2] give an experimental study of asymmetric broadcast algorithms for mobile ad hoc networks.
As noted in [14], the related SYMMETRIC BROADCAST problem is identical to MIN-POWER SYMMETRIC CONNECTIVITY.3.
ASYMMETRIC MULTICAST, in which one is given a root × and a set of terminals Ì , and the goal is to establish a minimumpower branching rooted at × which reaches all vertices of Ì .
As a generalization of ASYMMETRIC BROADCAST, ASYMMET-RIC MULTICAST is also NP-Hard, and based on the work of [9], it is immediate that a minimum Steiner tree would give an approximation ratio of ½¾񮽙, where 񮽙 is the approximation for Steiner tree in graphs (the best result known at this moment, given in [17], is 񮽙 ½ · ½ ¾ ÐÒ ¿ · 񮽙).
4.
COMPLETE RANGE ASSIGNMENT, in which the objective is establishing a strongly connected subgraph of Î .
Kirousis, ¾ A fully polynomial « approximation scheme is a family of algorithms 񮽙񮽙 such that, for every 񮽙 񮽙 ¼ , 񮽙 񮽙 (1) has performance ratio at most « · 񮽙, and (2) runs in time polynomial in the size of the instance and ½񮽙񮽙.
Kranakis, Krizanc, and Pelc [5] give an Ç´Ò 񮽙 µ dynamic programmig algorithm for the case of Ò colinear nodes and power requirements given by (2), prove that COMPLETE RANGE AS-SIGNMENT in 񮽙 ¿ is NP-Hard, and give a 2-approximation algorithm based on the minimum spanning tree, As opposed to the ASYMMETRIC BROADCAST approximation of [9], the COM-PLETE RANGE ASSIGNMENT approximation of [5] is valid in arbitrary graphs (that is, the distance between two points could be arbitrary, not necessarily Euclidean).
Clementi, Penna, and Silvestri [4] give an elaborate reduction proving that COM-PLETE RANGE ASSIGNMENT in 񮽙 ¾ is also NP-Hard.
As shown in [14], the power required by for the asymmetric COM-PLETE RANGE ASSIGNMENT can be as low as half the power required for MIN-POWER SYMMETRIC CONNECTIVITY.
In this section we give an integer linear program (ILP) formulation for MIN-POWER SYMMETRIC CONNECTIVITY and describe a branch and cut algorithm based on it.
The results in Section III show that the algorithm is practical for instances with up to 35-40 nodes.We To solve the ILP we use branch and cut, i.e., we drop the integrality constraints and solve the corresponding LP relaxation.
If the solution of the LP is integral, we found the optimal solution, otherwise we pick a variable with a fractional value and split the problem into two subproblems by setting the variable to ¼ and ½ in the subproblems.
We solve the subproblems recursively and disregard a subproblem if its LP bound is worse than the best known solution.Since there are an exponential number of inequalities in this formulation of spanning trees, we can not solve the LP directly.
Instead, we start with a small subset of these inequalities and algorithmically test whether the LP solution violates an inequality which is not in the current LP.
If so, we add the inequality to the LP, otherwise we found the solution of the LP with the exponential number of inequalities.
The inequalities added to the LP if needed are called cutting planes, algorithms that find violated cutting planes are called separation algorithms.In our case, the initial LP consists of the constraints (3) and (4) for these inequalities is due to Padberg and Wolsey [18].
The running time of a branch and cut algorithm can improved by tightening the LP relaxation, i.e., by finding additional inequalities which are valid for all integer points, but may be violated by solutions to the LP relaxation (Figure 1 shows Recently, [14] proposed an algorithm with approximation ratio of 񮽙񮽙񮽙 · ¯ based on polynomial time approximation scheme for computing the minimum-weight spanning cactus in a 3-uniform hypergraph, and a more practical greedy algorithm with approximation ratio of 15/8.
Below we improve the approximation factors of these two algorithms to 񮽙񮽙¿ · ¯ and 11/6, respectively.
The greedy algorithm in [14] (see Figure 2) iteratively improves the MST by inserting the best fork, i.e.
The proof of the approximation ratios in [14] is based on on the notion of 3-restricted decomposition of a tree Ì , which is a partition of the edges of Ì into forks and individual edges.
The power-cost of a 3-restricted decomposition É, Ô´Éµ, is the sum of power-costs of its elements, i.e., forks and individual edges.
It is proved in [14] that, if there exists a 3-restricted decomposition É with È ´Éµ 񮽙 񮽙Ô´Ì µ, then the greedy algorithm in Figure 2 has approximation ratio ½ · 񮽙񮽙¾ and there is PTAS with approximation ratio 񮽙 · ¯.
Below we prove that 񮽙 񮽙 񮽙񮽙¿ improving the ratio 񮽙񮽙񮽙 from [14].
Proof: The proof proceeds in three steps.
First we partition the edges of Ì into disjoint components using structural information derived from power requirements.
Then we construct a weighted subgraph of the line graph of each component, which we refer to as the "consecutive" line graph.
Finally, we show that the consecutive line graph of each component has a matching exceeding a certain weight; the edges in these matchings correspond to the forks in the desired 3-restricted decomposition of Ì .
To describe how we partition the edges of Ì (see Figure 3(a)) we need to introduce some additional notations.
Let ÑÑÜ´Ùµ be the maximum edge of Ì incident to a vertex Ù.
3 where the last inequality comes from (7) and the fact that 񮽙´Ì µ 񮽙 Ô´Ì µ (see, e.g., [14]).
By Edmonds' theorem [19] it is sufficient to construct a fractional matching 񮽙 񮽙 satisfying (8).
A fractional matching of Ä 񮽙 is an assignment of nonnegative fractions Ü´񮽙 ½ 񮽙 񮽙 ¾ µ to every edgé񮽙 ½ 񮽙 񮽙 ¾ µ ¾ Ä 񮽙 such that (i) the sum of fractions assigned to the edges incident to a vertex 񮽙 of Ä 񮽙 is at most 1, and (ii) the sum of fractions assigned to all edges with both endpoints in a set of ¾񮽙 · ½ vertices of Ä 񮽙 is at most 񮽙.
The following theorem shows that handling asymmetric power requirements is intrinsically more difficult than handling symmetric requirements, e.g., under asymmetric power requirements the minimum total power cannot be approximated within any constant.Theorem 2: MIN-POWER SYMMETRIC CONNECTIVITY WITH ASYMMETRIC POWER REQUIREMENTS cannot be approximated in polynomial time within factor´½factor´½ ¯µ Ð Ò 񮽙 Î 񮽙 for any ¯ ¯ ¼ unles È 񮽙 AE È .
Proof: We will prove the theorem by reduction from the set cover problem which is known to be non-approximable within factor´½factor´½ ¯µ Ð Ò 񮽙 Î 񮽙 for any ¯ ¯ ¼ unles È 񮽙 AE È [20].
For any instance of the set cover problem, we construct an instance of the problem of MIN-POWER SYMMETRIC CONNEC-TIVITY WITH ASYMMETRIC POWER REQUIREMENTS such that approximating the second problem within a factor 񮽙 implies approximating the first problem within the same factor.
Let Ë ½ 񮽙 Ë ¾ 񮽙 񮽙 񮽙 񮽙 񮽙 Ë 񮽙 be subsets of a ground set 񮽙 񮽙 񮽙Ü ½ 񮽙 Ü ¾ Ü Ò .
The set cover problem asks for the minimum number of subsets covering the entire set 񮽙.
We construct an instance of Min-Power Symmetric Connectivity in which each point cooresponds to either a set Ë 񮽙 or an element Ü 񮽙 ¾ 񮽙 or is an auxiliary point 񮽙 (see Figure 4) we leave open the aproximability status of MIN-POWER SYM-METRIC CONNECTIVITY with power requirements given by (1).
III.
EXPERIMENTAL STUDY We have implemented the exact branch and cut algorithm described in Section I (OPT), the greedy fork-contraction algorithm of [14] (GFC), and three new heuristics: ¯ A simple edge-switching (ES) heuristic that starts from the MST, and repeatedly replaces a tree edge with a non-tree edge re-establishing connectivity.
At every step, the algorithm chooses the pair of edges that results in the largest reduction in power cost; the process is repeated as long as improvement is still possible.
We simulated a distributed implementation of the algorithm in which only non-tree edges that connect nodes within 10 tree-hops from each other are considered for switching.
¯ A heuristic performing both edge and fork switching (EFS).
At every step the algorithm chooses the edge or the fork whose addition to the tree leads to the largest reduction in power cost.
Unlike GFC, forks are not contracted, which means that an edge in an added fork can later be removed from the tree by other edge or fork switches.
¯ A Kruskal-like heuristic (KR) that starts with isolated nodes and iteratively adds an edge connecting two different components with minimum increase in power cost.
A similar heuristic (called incremental search) was studied by Chu and Nikolaidis for computing low-power ASYM-METRIC BROADCAST trees in a mobile environment [2].
We included in our comparison faster versions of OPT and GFC, OPT-D and GFC-D, which speed-up the computation by working on the Delaunay graph defined by the nodes instead of the complete graph.
We also implemented a faster version of EFS, EFS-D, in which only forks consisting of Delaunay edges (but still all non-tree edges) are considered as switching candidates.All algorithms were implemented in C++, including the branch and bound algorithm whose implementation is built on SCIL [21].
The heuristics were compiled using gpp with -O2 optimization, and run on an AMD Duron 600MHz PC.
The experiments were run on randomly generated testcases.
For each instance size Ò between 10 and 100, in increments of 5, 50 different instances were generated by chosing Ò points uniformly at random from a grid of size ½¼񮽙 ¼¼¼ ¢ ½¼񮽙 ¼¼¼.
In rithms.
Running times are reported in Table II.
The results show that OPT has practical running time up to 35 nodes, and produces an average improvement over MST of 5-6%.
The Delaunay version of OPT has practical runtime up to 60 nodes, but gives slightly worse solutions.The provably good GFC algorithm, its faster Delaunay version, GFC-D, as well as the natural Kruskal-like heuristic KR are all very fast, but give less than half of the optimum improvement.
In contrast, EFS, EFS-D, and even the distributed ES heuristic, come on the average within a fraction of a percent of the optimal improvement with very well scaling runtime.
