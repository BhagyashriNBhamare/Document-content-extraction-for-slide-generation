This paper presents a hierarchical image representation that preserves spatial relationships, and an image segmentation algorithm that efficiently constructs this representation.
The overall structure of the hierarchical representation assumes a tree-like organization , in which a node at a higher level represents of a group of nodes from the next lower level.
The root node of the representation is the full image, and the leaf nodes are ¢ ¡ Object extraction via image segmentation plays a key role in many applications.
Unfortunately however, it remains a difficult problem.
There does not exist a single generic algorithm that works well for all applications.
Target applications vary in the necessary degrees of precision, efficiency, and feature information required from image segmentation, so different algorithms are typically better suited to different applications.
For some application areas, like content-based image retrieval (CBIR) and MPEG-4 video compression, it is desirable to have a segmentation algorithm that preserves information regarding the spatial relationships between objects.
Toward this end, we present an efficient image segmentation algorithm that generates a hierarchical image representation that preserves these spatial relationships.Compared with most non-hierarchical segmentation algorithms, such as the K-means algorithm used in SIMPLIcity [1], algorithms based on a hierarchical representation preserve the spatial and neighboring information among segmented regions.
For applications like content-based image retrieval and MPEG-4 video compression, the ability to preserve spatial relationships between objects can improve image retrieval and motion estimation efficiency.
For content-based image retrieval, segmentation schemes can be used to extract objects and their features from images, and then use the object feature information to increase image retrieval efficiency [2].
The additional feature information regarding neighbor relationships between objects can be used to further improve image retrieval for image queries where spatial information about objects in the image is key to effective image recall.For MPEG-4 video compression [3], and other content-based video compression schemes, image segmentation is used to divide scenes up into objects.
By performing motion estimation and compensation on objects, the minimal temporal variations within each object enables higher compression ratios.
The added benefit of spatial information could further improve algorithm efficiency, allowing potentially simpler and more efficient motion tracking and object occlusion detection.A number of segmentation algorithms for building a hierarchical image representations have been proposed [4,5,6,7].
Although these hierarchical segmentation algorithms perform well in some specific areas, all of them suffer from various drawbacks.
Nacken [5] and Shen et al. [6] employ methods similar to ours of iteratively grouping nodes in a hierarchical structure.
However, their methods can lead to excessive iterations, generating a large number of hierarchy levels.
Montanvert et al. [4] use stochastic analysis for image segmentation, but their segmentation results are not unique due to the stochastic decimation applied at each level.
Furthermore, all of the above algorithms use only the original pixel values when performing pixel clustering, which Marr argues is not sufficient [8].
Finally, none of these prior studies has examined the computation complexity of their algorithms.
No data is provided in [4,5,6] regarding computation complexity, and only empirical results are provided by Marr [7].
In this paper, we propose an efficient hierarchical image representation data structure and a powerful image segmentation algorithm for constructing this representation.
We propose three new enhancements to hierarchical image segmentation to alleviate some of the drawbacks of previous approaches.
First, we propose an efficient new clustering scheme using a modified UNION-FIND data structure.
This algorithm achieves low computation complexity by minimizing both the number of hierarchy levels and the computation complexity for each level of the image hierarchy.
Second, when clustering nodes from different regions in each level, besides just color information, the algorithm considers a variety of additional features, including the orientation, texture, size, neighbors, and energy.
Finally, this algorithm provides a flexible scheme for specifying when to stop the clustering procedure.
The user can specify either the desired number of objects or the desired feature distance (i.e. the maximum feature distance below which clusters may be combined).
Or, if the user specifies neither, a full hierarchical representation of the original image will be constructed (i.e. with the root node of the tree being a single object corresponding to the whole image).
The remainder of this paper is organized as follows.
Section S 0a S 0d S 0e S 0g S 0i S 0k S 0m S 0b S 0c S 0f S 0h S 0j S 0l S 0n S 1a S 1b S 1c S 1d S 2a S 2b In defining an image representation, it is important to recognize that the intensity values in an image are derived from four main factors: geometry, surface reflectance, illumination, and viewpoint.
Consequently, it is insufficient to utilize just intensity information during image segmentation.
As elaborated by Marr [8], in addition to color intensity information, it is important to define a representation of both surface reflectance and geometrical organization.
The representation should contain features that can be derived reliably and repeatedly from images, and to which can be assigned values of attributes like orientation, brightness, size, and position.
Further, Marr [8] provides some important underlying physical assumptions for the surface reflectance function of an image: Existence of surface, Hierarchical organization, Similarity, Spatial continuity, Continuity of discontinuities, and Continuity of flow.
Based on these physical assumptions, we propose a hierarchical image representation.
This representation embodies a treelike organization based on the UNION-FIND data structure [9] U Q V X W Y a ` a nd b F c e d g f i h T p, which define the relationship between nodes in two adjacent levels.Algorithm 1 segmentation 1: r q g ` e f ( S s f t p v u C I x w X p R d g c e U P p 2 y x f i c  p A  F d g f  §  W   c   f0 2: 5 7  x u C    h T W  p 2 5 1 d g c  b  V  §  r q g ` e f ( S s f t p0 3: S   7 u C    h T W  p  S s f t p t § 5 7 0 4: Y  f i  e f ( Y  u C  d 5: while (S  p A q P b T e 1 q g h T `  W  p A W  q ( h f §0C g p A d (   f ) do 6:for (fx h i I # 6 9 8 A @ Q 8 R 6 ) do 7: if (f k j `  W H l Q p v m n p 2 V o d ' f ( l i V X q g Y a `  p Y  f i  e f ( Y r q ) then 8: l k s t u C  y 7  e v u w S s I 7 x § S T 6 9 8 A @ B 8 A 6 H G  f k j y z f ( { o p A r q g ` e f0 9: l ( | D u C  y 7  e v u w S s I 7 x § S6 9 8 A @ B 8 A 6G  f k j } 1 W   V o p 2  q g ` e f0 10: if ((l s x ~ C l  | ) then 11:  1 r  e ¦ x 4 § S T 6 9 8 A @ Q 8 R 6 2 G  l k s i G  l|0 12: end if 13: end if 14: end for 15: for (l 7 h  S6 9 8 A @ Q 8 R 6 ) do 16: if ( l e  ' C   ) then 17: l i W   Q Y a W  h T w u C  y 7 W  h  ` e r f  c e d ' S W  g § S  6 9 8 R @ Q 8 A 6 R G P 5 7 6 9 8 R @ Q 8 A 6 R G P l0 18: p v u C  y 7  e r u w S f I 7 x  § S6 9 8 A @ Q 8 A 6G P S W  Q Y a W  h  0 19: y  W  h    § S T 6 9 8 A @ B 8 A 6 R G P l ' G A p0 20: end if 21: end for 22: Y  f i  e f ( Y  u C  Y  f i  e f  Y e   23: 5 7 6 9 8 A @ Q 8 A 6 u C e 1 d ' f i c  p 2 f ( 5 1 d ( c ( b F V  § S  6 9 8 R @ Q 8 A 6 a sG P 5 7 6 9 8 A @ B 8 A 6 a s0 24: S  6 9 8 A @ B 8 A 6 u C  e 1 d g f i c e p A f ( S f f t p Q § 5 7 6 9 8 A @ Q 8 A 6025: end while 26: a ttributes of each vertex are illustrated by double-arrow edges, which define the relationship between the nodes of adjacent levels.
¦ 7  X p  b F  o p 2 } 7 f ( l t   Y  p The segmentation algorithm is presented in Alg.
1 , but this may vary by image size such that large images have large blobs while small images use small blobs), called blobs.
Each blob has an associated set of features extracted from the original pixel intensity values of the image, including color, orientation, texture, and energy information.
Based on these extracted features, and the neighboring relationships among blobs, the lowest level of the representation is built.
Then node clustering and region merging are performed at each level using a bottom-up strategy.
At the end of each iteration of the while loop, the algorithm has completed one level of the hierarchy, so a new level is constructed and the representation is updated.
The procedure is repeated until the stopping condition has been attained, which is defined as either the desired final number of objects,S s f t  r  F    t f i d , or the maximum feature distance, u ¨ W H l Q p R x D V X d g f ( l i V X q ' Y  `, for merging regions.
Or if not specified, the algorithm will continue until a single root node exists that defines the full image.
From this representation, objects and features can be extracted easily through a top-down traversal of the final hierarchical representation of the image.In each iteration of the while loop, the first { X q ( d loop clusters neighboring regions of this level according to somep 2 V X d g f ( l i V X q ' Y  ` value (p A V X d ' f ( l i V X q g Y a `m ay be defined locally for each level, or globally for all levels).
This threshold is usually small, no more than  .
i nclude at least two nodes.
Consequently, each new level of the hierarchy is guaranteed to have no more than half the number of nodes as the previous level, ensuring fast convergence of the algorithm.Below are the implementation details of subroutines: I  w o p A d ( c  U P p 2 y x f i c  p A  F d g f  §  W   r c   f0 p artitions an image into  ¡ D blobs (usually ¤ ¡ ¤ o r ¥ ¡ ¥ ), with each blob corresponding to a vertex of 5 7 .
Then, the wavelet transform [10] extracts orientation and texture information from each blob, using a similar method to Wang et al.'s [1].
Two kinds of orthonormal wavelet filters are used, the Haar filter and the Daubechies-4 filter [10].
Finally, nine features are extracted for each blob: the first three are the mean color values of the blob; the second three are the orientation values in the horizontal, vertical, and oblique directions (which also implicitly define the texture information in these directions as demonstrated by Wang et al. [1]); the last three are the deviations of the color values of this blob.
   h  W  p 2 5 1 d g c  b  V  §   q g ` e f ( S s f t p0c reates and initializes the lowest level's weighted graph, 5 7 .
Two vertices are connected by an edge if and only if the two corresponding blobs in the original image are neighbors of each other.
In this paper, the Euclidean distance of the feature vectors for two connected nodes is calculated and assigned to the edge, and each feature has the same weight when calculating distance.
   h  W  p 2 S f f t p Q § 50c reates and initializes the disjoint set S o f the lowest level, such that each set has only one element and each element points to one vertex of5 .
 y 7  e v u w S s I x x  § S T 6 9 8 A @ Q 8 R 6 H G P l0 a nd  1 r  e ¦ x 4 § S T 6 9 8 A @ Q 8 A 6 R G  l k s i G  l|0a re the standard implementations of disjoint-set operations for the UNION-FIND data structure [9] .
Path compression [11,12]  F j {   C     e  '    j l t W  k f   e  '   j l t W  k f t ! 
 j {   (1) where  ¢ ¡ £ W  ¡ ¥ ¤ .
This paper examined a hierarchical image representation data structure that perserves spatial information between neighboring objects, and an efficient image segmentation algorithm for constructing this representation.
The algorithm segments images by iteratively clustering pixels into a hierarchy, using feature information such as color layout, neighbors, size, energy, texture, and orientation.
The final result is a hierarchical representation of the original image with each segmented region representing an object.
Features characterizing each object can be obtained easily by traversing the final representation.
This hierarchical image segmentation algorithm makes three contributions: First, a novel clustering scheme is propopsed that achieves low computation complexity by minimizing both the number of hierarchy levels and the computation complexity per level.Second, in addition to just pixel intensity information, the algorithm also considers the orientation, texture, size, neighbors, and energy when comparing feature distance during clustering.
Finally, this algorithm offers a flexible stopping scheme, allowing the user to stop early by specifying the desired number of objects or maximum feature distance objects, or completing a full hierarchical image representation.In future research, we intend to combine this segmentation algorithm with multiple instances learning algorithms [2] for further improving image retrieval and classification precision in the CBIR applications.
We also plan to comprehensively compare our algorithm with other hierarchical and non-hierarchical segmentation algorithms, and explore use of this algorithm, and future variations, with MPEG-4, as well as CBIR.
YTo determine the computation complexity of the proposed hierarchical image segmentation algorithm, we need to examine the computation complexity of each step within the algorithm.
To determine the computation complexity of the proposed hierarchical image segmentation algorithm, we need to examine the computation complexity of each step within the algorithm.
