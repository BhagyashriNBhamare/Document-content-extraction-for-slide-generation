Bandwidth estimation plays an important role in characterizing Internet paths.
Existing approaches can be classified into measurement tools [3], [6], [9], [10], [16], [17], [23], [29], which usually have extensive simulations, but no convergence analysis for general cross-traffic, and theoretical models [5], [14], [19], [20], [22], which usually have provable convergence, but no practical implementation.
Another issue in related work is the unknown performance of certain proposed algorithms in real networks where delay measurements are not perfect due to various OS and hardware-related timing irregularities [26].
We address the former issue by developing a measurement tool PRC-MT that not only achieves asymptotic accuracy in multi-path networks with arbitrary cross-traffic, but also simultaneously measures the capacity and available bandwidth of the tight link.
We address the latter issue by performing a comparison study of existing tools in Emulab and assessing their susceptibility to timing irregularities of end-hosts.
Our results show that PRC-MT outperforms all existing tools in terms of accuracy, achieves similar convergence delay, and does not require any manual configuration.
We also find that interrupt moderation may cause existing tools (such as Pathload [10], Pathchirp [27], and CapProbe [16]) to become quite inaccurate in certain network configurations and exhibit behavior completely different from that in ns2 [28].
Bandwidth of Internet paths is an important metric for many applications.
However, without a direct access to network resources, end-to-end bandwidth measurement under general conditions on cross-traffic is a rather complex process [5], [20].
Unfortunately, theoretically justified techniques [19], [20], [22] are commonly not available as practical tools that can be used in real networks and vice versa (i.e., existing implementations are often based on fluid models that exhibit bias in bursty networks [20] and/or rely on heuristics with unknown theoretical performance).
In addition, many current techniques produce unreliable results in actual networks where packet dispersions cannot be sampled accurately due to hardware interrupt moderation and various OS-imposed overhead [26].
Our goal in this paper is to provide a useful implementation of a theoretical model and examine its performance in nonsimulated networks in comparison with existing tools.
We perform this task below.
Existing techniques usually estimate either the available bandwidth [6], [11], [27], [29], or the bottleneck bandwidth [3], [16] of the path.
The former term refers to the unused bandwidth A t of the tight link (i.e., link with the smallest available bandwidth) and is closely related to the rate at which new applications can send into the path without congesting it.
The latter metric is the capacity C n of the narrow link (i.e., link with the lowest speed), which can be viewed as an upper bound on the sending rate that the path can support.
Note that A t can be measured in all network configurations, while this is not necessarily true for C n .
Even though both A t and C n are useful metrics, certain applications require capacity C t of the tight link instead of C n , which allows them to compute the utilization of the tight link and possibly achieve better characterization of what causes bottlenecks in the path.
1 Only a few approaches can measure C t [13], [14], [23], but they are either based on single-hop models that are inaccurate in multi-path networks, or rely on hop-by-hop probing, which we do not study in this paper.
A recent theoretical development [20] shows that both A t and C t can be provably measured in any end-to-end path with infinite buffers by exploiting a certain piece-wise linear relationship between the sending rate r I of probe packets and the corresponding arrival rate r O at the receiver.
Although this work opens a door for developing a new characterization technique for tight links, it remains to be seen if an automated implementation can achieve good performance in networks with limited buffer space and exhibit overhead comparable to that of existing tools.Recall that [20] relies on correctly identifying the first two linear segments of the probing response curve (PRC), which is a functional relationship between r I /r O and r I .
Identifying and separating the linear segments in a stochastic PRC is a non-trivial task since the curve itself may fluctuate and/or deviate from the fluid piece-wise linear limit depending on path-specific characteristics as well as the number of probes per train and their size.
In addition, building an entire PRC sometimes requires sending a large amount of traffic into the path and exhaustively probing a wide variety of sending rates (i.e., as done in [21]).
Thus, the main challenge in PRC-based estimation is the development of automated algorithms for detecting linear segments in practice and selecting probing rates that result in quick convergence of the method.In this paper, we tackle the above problems using an iterative probing technique that we call PRC Measurement Tool (PRC-MT), which is capable of estimating both A t and C t in arbitrary multi-hop paths.
PRC-MT autonomously selects probing rates, train and packet size, and termination conditions so as to achieve any desired tradeoff between accuracy and overhead (i.e., better accuracy requires more probes and vice versa).
We implement PRC-MT in Linux and evaluate its performance using Emulab [4].
We find that PRC-MT, limited to the execution delay of prior methods (i.e., 90−120 seconds), estimates A t and C t with 90 − 99% accuracy in a wide range of network configurations.
Attempting to run existing tools in PlanetLab, we found that some of them frequently produced no estimate at all (e.g., Pathload [10], [11], [26]) while others returned results that did not seem reasonable (e.g., CapProbe [16]).
It became immediately clear that one of the main factors that differentiates bandwidth estimation in real networks from that in ns2 is end-host timing irregularities, which include hardware interrupt moderation [26] and OS scheduling delay jitter (which depends on the CPU utilization of the host).
We sampled a number of hosts in PlanetLab and found that many of them used interrupt moderation, which could be enabled at the sender (i.e., packets did not leave the host immediately), at the receiver (i.e., arriving packets were delivered to the OS "bunched up"), or at both.
In fact, modern gigabit NICs enable interrupt moderation by default, which means that bandwidthmeasurement tools that are not robust to timing irregularities are unlikely to be successful in real networks.To reduce the effect of interrupt moderation, techniques such as Pathchirp [27] and the current version of Pathload [26] incorporate mechanisms that aim to "weed out" packets affected by interrupt delays.
Specifically, Pathchirp requires manual modification to force it to send more probing packets to obtain an accurate estimate.
For Emulab experiments in this paper, we use 6 times more packets per probing train (i.e., chirp) than the default value in order to achieve reasonable accuracy.
This modification reduces the effect of interrupt delay, but prolongs the measurement.
On the other hand, Pathload attempts to filter out affected packets without increasing the number of probing packets, which unfortunately has a limited effect when interrupt delays become non-trivial.
This makes Pathload's estimation much more susceptible to error, which happens fairly often in practice.
Kang et al. [15] overcome this problem in a recent proposal called Interrupt Moderation Resilient Pathload (IMR-Pathload), which utilizes signal de-noising techniques such as wavelet decomposition and window-based averaging in detecting a delay trend exists in one-way delay samples of probe packets.We assess the performance of PRC-MT in scenarios with non-negligible interrupt delays in comparison with Pathload [26], IMR-Pathload [15], Pathchirp [27], IGI/PTR [6] using metric A t and Pathrate [3], CapProbe [16] using metric C t when the narrow link coincides with the tight link.
For available bandwidth A t , our results show that PRC-MT exhibits no negative side-effects related to interrupt moderation, converges in 90 − 140 seconds in all examined topologies, and outperforms the other studied methods in terms of accuracy (1−5% error).
We also find that IMR-Pathload's estimates are generally within 7% of the correct value and its convergence delay is 80−100 seconds.
After manually tweaking Pathchirp's train size and running duration, we were able to reduce its error to about 15% and execution time to 200 seconds; however, its default version performs much worse.
Even though we supply IGI/PTR with the correct tight-link capacity C t , both methods exhibit 40 − 60% error, but on the bright side converge within just 3 − 5 seconds.For tight-link capacity C t , PRC-MT's error is below 7% in all studied cases, while that of Pathrate exceeds 15% and that of CapProbe is close to 60%.
The measurement delay of prior methods is also significantly higher than that of PRC-MT -almost 2200 seconds in Pathrate and 500 seconds in CapProbe.
Our Emulab results suggest that existing methods (in their unmodified form) may experience certain non-negligible performance issues in real networks, while techniques PRC-MT (introduced in this work) and IMR-Pathload are much more likely to remain robust in practical settings.
In fact, PRC-MT not only provides automatic self-configuration that overcomes interrupt-moderation effects and achieves quick convergence, but also simultaneously estimates A t and C t and is asymptotically accurate.
In this section, we investigate practical issues and difficulties of using PRC in measuring available bandwidth A t and capacity C t of the tight link.
We then develop empirical algorithms that overcome these problems and lead to a new measurement tool called PRC-MT, which can measure both bandwidth metrics of the tight link over multi-hop paths under arbitrary cross-traffic and routing patterns.
We start by describing the basic idea of this approach.
Define r I to be a sending rate of packets in a probe-packet train at the sender and r O to be their arrival rate at the receiver.
Further define F = r I /r O to be the ratio of r I and r O under fluid cross-traffic.
Then, F can be expressed as [20]:F = r I r O =    1 r I ≤ A t λ t + r I C t A t ≤ r I ≤ B ,(1)where λ t is the amount of cross-traffic that traverses the tight link, A t and C t are the respective available bandwidth and capacity of the tight link, and B represents a certain input rate that is greater than A t but no less than the second smallest available bandwidth of the path.
Note that B is dependent on the routing matrix of cross-traffic that traverses the path and thus it is not possible to compute its value without complete knowledge of cross-traffic routing patterns.
Fig. 1 illustrates a hypothetical fluid response curve F , which shows the relationship between r I /r O and r I .
Observe from the figure that F consists of piece-wise linear segments (at least two in multi-link paths), which breaks at particular input rates A t and B.
The first segment ends when input rate r I equals the available bandwidth A t of the tight link, while the second segment breaks down at rate B. Hence, to extract A t , we need to identify the first break point where F starts to become larger than one.
On the other hand, it requires to identify the second linear segment in F to compute the tightlink capacity C t since C t = 1/α, where α is the slope of the second line segment.
Now the question we have is how to find the first break point for estimation of A t and how to identify the second line segment and compute its slope α for capacity estimation C t without even knowing the exact value of B in practice.
We address these issues in the following subsections.
Define Z to be the real probing response curve of a path over which arbitrarily routed bursty cross-traffic flows traverse.
Note that Z is different from the fluid curve F (as long as a probe-train length N and a probe-packet size q are finite) and this makes the task of identifying the first break point and the second linear segment in Z significantly more challenging than that in the fluid case.
Note from [20] that Z is lower-bounded by fluid response curve F and asymptotically approaches F as N → ∞ or q → ∞.
However, the difference between Z and F is non-zero (i.e., Z − F > 0) in real networks, where the size of packets is typically limited by the maximum transfer unit (MTU) of network elements and the packet-train length N cannot be arbitrarily large since router queue sizes are limited.Before discussing implications of this deviation of Z from F , we explore how the response curve Z behaves with a different probe-train length N by conducting experiments in Emulab and ns2 [24] using a single-hop topology of capacity C t = 90 Mb/s.
For this experiment, we keep link utilization at 32% (i.e., A t = 61 Mb/s and λ t = 29 Mb/s) and plot the response curve Z for several different values of N in Fig. 2.
Notice in Fig. 2(a) that when N is small (e.g., 15), Z fluctuates substantially and exhibits large deviation from the fluid lower-bound F .
However, as N increases, Z shows prominent two linear lines and its deviation from F becomes smaller.
For example, with N = 240, r O is within 1.5% of r I until r I reaches around 61 Mb/s, which is the available bandwidth A t of the path in this setup.
Note that the difference between Z and F would be zero as N → ∞.
We do not show this since we cannot use arbitrarily large N in Emulab without causing packet loss due to queue size limit.
Instead, we conduct ns2 simulations for different N with a smaller probepacket size q = 200 bytes to better demonstrate behavior of Z for a large probe-train length N .
As shown in Fig. 2(b), we observe that the behavior of Z is similar to the Emulab result and gets very close to F when N = 480.
Next, we discuss how the evolution of the real response curve Z on input probe rate r I affects bandwidth estimation.
Recall that to estimate the tight-link bandwidth A t and C t , we need to identify the end of the first line segment (for estimation of A t ) and stable second linear line (for extraction of C t ) from the response curve Z. For accurate discovery of the first break point in Z, it is required that variation in Z should be small for different r I .
More importantly, in order to extract accurate capacity estimates C t , the second line segment in Z should be parallel to that in F even though they do not match (i.e., deviation Z − F > 0).
Note that if the second line segments in Z and F are parallel, then we can use any two points on the line in Z to compute its slope α, which reflects the true capacity C t of the tight link regardless of their locations as long as they are on the second line segment.
Further note that under this condition, the amount of deviation Z − F has no direct impact on estimation accuracy.
However, if the second line segment in Z is not parallel to that of fluid counter part F , then estimation accuracy of C t depends on which two points we select in computing the slope α, which makes the capacity estimation be more susceptible to measurement errors.To confirm the above discussion and demonstrate the direct impact of the probe-train length N on estimation accuracy, we conduct experiments using the same single-hop setup.
First define e C and e A to be the respective relative estimation errors of capacity and available bandwidth of the tight link L t of a path:e C = |C t − ˜ C t | C t , e A = |A t − ˜ A t | A t ,(2)where˜Cwhere˜ where˜C t and˜Aand˜ and˜A t are the respective estimates of the true capacity C t and available bandwidth A t of the tight link L t .
We then illustrate evolution of e A and e C for different N in Fig. 3.
As Fig. 3(a) shows, e A quickly drops from 28% (for N = 10) to a value that is less than 2% as N becomes 60.
Similarly, estimation accuracy of C t is significantly improved from e C = 80% for N = 10 to e C = 3% for N = 120 (see Fig. 3(b)).
These results indicate the importance of having sufficiently large N , which makes the line segments in the response curve Z straight without much fluctuation and allows accurate bandwidth estimation.Note that even though a large N brings down fluctuation of line segments in Z, using an arbitrarily large value is not desirable since it increases measurement overhead and can also induce too much packet loss within a probe train.
On the other hand, use of too small N results in high estimation errors.
Hence, it is clear that there exists a trade-off between accuracy and overhead and thus proper selection of the probetrain length N is very important in developing PRC-MT.
However, selection of appropriate value of N is non-trivial since fluctuation of line segments in the real response curve Z depends on many unknown factors (such as amount of crosstraffic) that are specific for a path under investigation.
Now, the problem we need to solve is how to select N in practice for a particular path such that the second line segment in Z becomes parallel to that in F .
We investigate this next.
Recall that for a sufficiently large N , the slope of the second line segment in Z converges to a value that makes it parallel to that of fluid curve F in an input rate range r I ∈ [A t , B].
We can interpret this as that the ratio r I /r O saturates at a certain value when the probe-train length N becomes large.
To confirm this, we examine the quantity of r I /r O for a different N using the setup discussed in the previous subsection.
For this purpose, we send packets with rate r I = 68 Mb/s (which is higher than the available bandwidth A t = 61 Mb/s of the path in this setup) with a varying N and plot r I /r O in Fig.
4.
As the figure shows, r I /r O quickly drops to a value that is slightly larger than the fluid-bound (i.e., (λ t + r I )/C t = 1.07) as N increases.
This leads us to investigating an empirical method, which iteratively probes for N that makes the ratio r I /r O saturate for a given input rate r I .
In what follows below in this section, we discuss a simple selection procedure for N , which adjusts its value based on variation of r I /r O for a given sending rate r I discussed above.
Although there is no particular constraints on the input sending rate for this routine, it is preferable to use a rate that is not so smaller than the available bandwidth A t of the path since variation of the ratio r I /r O for an input rate that is smaller than A t diminishes rather fast with small increase in a probe- train length N [20].
Finding a rate that is no less than A t would be sufficient for this purpose and Asymptotic Dispersion Rate (ADR) [2] of a path is a good candidate for the initial value of r I since it is proven in [2] that A t < ADR.
Hence, PRC-MT probes for ADR by sending a single packet train and computes ADR = q/E[y] at the receiver (where E [y] is the average inter-packet dispersion of packets in the probe train).
With the input sending rate r I determined, the rest of the procedure for train-length probing is as follows.Define γ to be the ratio of the current input and output rates: γ = r I /r O and γ old to be the previous value of γ.
Further define N min and N max to be a respective minimum and maximum train length that can be adjusted by the user and σ to be a certain threshold that can vary between zero and one.
The selection routine conducts binary search between N min and N max to find a value that saturates γ.
This procedure tests if γ converges to a certain value for a given length N by sending to the receiver packet trains of length N with rate r I = ADR.
To assess saturation of γ, the selection procedure computes the following relative error metric ε:ε = |γ − γ old | γ .
(3)Then, the routine decreases N if ε ≤ σ; increases otherwise.
Note that users can use any packet size q min ≤ q ≤ q max (where we use q min = 200 bytes and q max = 1500 bytes), in which case N min and N max are scaled up or down by q max /q.
This routine ensures us to select a larger N when a user chooses a smaller packet q, sufficing the condition for stabilizing fluctuation of the line segments in Z as discussed in the previous subsection.
For experiments in Sections III and IV, we use N min = 60, N max = 3000, σ = 0.02, and q = 200 bytes.
With the probe-train length N in hands, our next question is how to identify the first break point in the response curve Z, at which the input sending rate r I starts to become larger than the arrival rate r O (see Fig. 1).
To efficiently search for this point, PRC-MT uses iterative probing-based search, which is similar to Pathload [11].
Note, however, that the two tools are different in a way that assesses whether an input rate r I corresponds to A t .
For example, PRC-MT determines if the current rate r I > A t by directly comparing r I with r O , while Pathload infers it by examining one-way delays of the probe packets.For probing, PRC-MT sends a group of K packet-trains with a given rate r I .
Then, based on how much fraction η of them belongs to either r I > r O or r I < r O , it adjusts its sending rate r I for next K probe-trains.
Specifically, PRC-MT decreases r I if ηK probe-trains are asserted to be r I > r O ; increases r I if they are asserted to be r I < r O .
Note that it is possible that neither of the above two cases happens (i.e., number of probe-trains that belong to either r I > r O or r I < r O are less than ηK).
If this is the case, we treat it like a "grey region" in Pathload (see [11] for details).
Let [W L , W H ] be an available bandwidth range updated after each round of K probe-train measurements, where W L represents the highest rate that has been identified to be less than A t for a certain round and W H represents the lowest rate that has been identified to be higher than A t up to that round.
After each round of probing, PRC-MT updates the bandwidth range and selects a new probing rate r I for next round using the way Pathload does.
This search process continues until the bandwidth range [W L , W H ] around A t becomes smaller than a certain threshold ω that can be automatically selected (e.g., ω = 0.02ADR) based on measured ADR or given by the user.
PRC-MT returns˜Areturns˜ returns˜A t = (W L + W H )/2 as the available bandwidth estimate of the tight link when its internal algorithm terminates.
We empirically set η = 60% and K = 12 as their respective default value in PRC-MT.
After finished probing the available bandwidth, PRC-MT starts a procedure for the tight-link capacity C t estimation.
The main focus of this routine is to select two points that will be used to extract C t from the second line segment.
Note that to facilitate estimation of C t , PRC-MT records the sending rate r I and its corresponding receiving rate r O during available bandwidth probing whenever the current r I reduces the upper bound W H due to r I being larger than r O .
These recorded points are the possible candidates for computing a capacity estimate˜Cestimate˜ estimate˜C t .
Note that we can select any two among the recorded points to extract C t in ideal case (i.e., the second segment is a perfect straight line and there is no measurement noise).
Unfortunately, however, there is no straightforward method that chooses optimal two points with certain measurement noise and an imperfect straight line, which leads us to exploring empirical method (which we explain below).
Assume that there are m ≥ 2 recorded points (x 1 , y 1 ), . . . , (x m , y m ), where x i and y i (i = 1, . . . , m) are the respective sending and receiving rates used during the available bandwidth probing.
PRC-MT first chooses (x i , y i ), where x i is the smallest among m points that satisfies x i ≥ W H .
We have two reasons for not using the point with r I = ˜ A t as the first point.
First, it is not very clear from the response curve Z where the second line segment starts around A t (see Fig.
2(a)).
The other reason is that the estimated value˜Avalue˜ value˜A t may be on the first line segment due to measurement error (e.g., ˜ A < A t ), in which case can result in high errors in capacity estimation.Recall that to produce accurate capacity estimates˜Cestimates˜ estimates˜C t , the second point should be on the second line segment.
Since PRC-MT picks the first point (x i , y i ) whose sending rate x i is closest to W H among recorded points, we may consider the point that is close to the first one as the best candidate for the second point since it has higher chance to be on the second line segment.
However, if two points are close to each other, then computing the linear slope of the two points is more susceptible to measurement noise.
Hence, it is better to have the second point as far away as possible from the first one as long as they are on the second line segment.
Thus, we select the farthest two points among the recorded points to extract C t .
Based on the above discussion, PRC-MT uses (x j , y j ) as the second point, where x j is the largest among the recorded points.
Having two points (x i , y i ) and (x j , y j ) selected, PRC-MT computes the tight-link capacity estimate˜Cestimate˜ estimate˜C t :˜ C t = y i y j (x i − x j ) x i y j − x j y i ,(4)which is inverse of the slope of the linear line segment between (x i , x i /y i ) and (x j , x j /y j ).
Before concluding this section, we should note that if the number of recorded points m is less than 2, PRC-MT requires to send additional packets with rates r I that is larger thañ A t to obtain (r I , r O ) pairs.
Even though this case will rarely happen (only when a very large threshold ω is used to terminate the algorithm), we include this for the sake of completeness.
To evaluate the performance of PRC-MT, we conduct experiments in Emulab 2 [4].
We examine estimation accuracy of PRC-MT and its convergence behavior and then compare these results with those in existing methods.
For experiments in this section, we do not use interrupt moderation (i.e., interrupt delay δ = 0) at the receiver and defer discussion of these tools under interrupt delay to Section IV.
We start by describing the experimental setup.
For all experiments, we use a topology shown in Fig. 5, in which source PS sends probe data to the destination PR through five routers R 1 , . . . , R 5 .
Nodes S i (i = 1, 2, 3, 4) send Table I, which lists the capacity and available bandwidth of each link for different experimental scenarios.
Note that the table shows a fair amount of cross-traffic at each node, which is needed to ensure that each case represents some non-degenerate scenario.
Without cross-traffic, most studied techniques are accurate and their comparison is not very insightful.
The shaded values in each row represent the tight-link capacity C t and available bandwidth A t of the path for each case.
The values in square brackets are the capacities C n of the narrow link (i.e., bottleneck bandwidth) for each case.
Notice from the table that the experimental settings cover all possible relationships between the location of the tight link and narrow link.
For instance, in cases II and IV, the narrow link coincides with the tight link; in cases I and VI, the narrow link follows the tight link; while in cases III and V, the narrow link precedes the tight link.In all experiments, we use TCP cross-traffic generated by the Iperf traffic generator [8] to load network paths.
Although Iperf traffic does not exactly resemble Internet traffic, it is adequate for our purposes in this paper.
We run 100 threads in each cross-traffic source S i to generate TCP flows that are injected into routers R 1 , R 2 , and R 3 and keep the utilization of each router R i according to the values shown in Table I. To maintain a fixed average utilization at each link in the experiment, we place an additional router (not shown in the figure) between node S 1 and router R 1 , S 2 and R 1 , S 3 and R 3 , and S 4 and R 2 to limit the aggregate sending rate of TCP flows to the capacity of the additional router.
The utilization of R 1 , R 2 , and R 3 is controlled by properly setting the capacity of the auxiliary router.
We next investigate estimation accuracy and convergence behavior of PRC-MT.
Experimental results of PRC-MT are summarized in Table II, which shows relative estimation errors e A and e C and convergence time of PRC-MT's internal algorithm.
Note that like many other existing methods (e..
g, Pathload [26], IGI/PTR [6]), PRC-MT's running time depends on round-trip delay (that includes propagation delay of each Table II shows, PRC-MT estimates available bandwidth of the tight link with over 90% accuracy for all cases studied in this paper.
Its estimation accuracy of the tight-link capacity is as good as that of available bandwidth for all studied cases.
In all experimentations, PRC-MT's algorithm converges within 140 seconds.
In this subsection, we compare PRC-MT with several existing available bandwidth estimators (Pathload [26], Pathchirp [27], and IGI/PTR [6]) and recent capacity estimation tools (Pathrate [2] and CapProbe [16]) with respect to estimation accuracy using the setup shown in Table I. For existing methods, we use user-level implementations 3 (which do not require super-user privilege to run the program) that are publicly available or obtained from the authors.1) Available Bandwidth Comparison: We first compare PRC-MT with Pathload, Pathchirp, and IGI/PTR.
We also have studied Spruce [29], but do not include its result here since it performs significantly worse than the other tools in all cases studied in this paper (see [18], [20] for details of Spruce and possible causes of its estimation inaccuracy in multi-hop paths).
Table III shows relative estimation errors e A for different cases.
For Pathload, we average the low and high values of the produced estimates after its internal algorithm terminates.
For Pathchirp, we use "jumbo" option J that increases accuracy by sending more packets in each probe train (called chirp) than the default.
We manually set this option J = 6 to send 6 times more packets than the default to produce accurate and reliable available bandwidth estimates.
Selection of the value J is purely based on trial and error since Pathchirp does not offer any automatic selection mechanism for it.
Different from other tools studied in this subsection, Pathchirp is an open loop system, which does not have an automatic convergence mechanism.
It runs for a specified time t and stops when the running time reaches t, without knowing convergence of its estimate.
We use t = 200 seconds to obtain results in this paper even though its default execution time is t = 600 seconds since its estimation accuracy has not been improved even we run it more than 200 seconds in our experimental setup.
In IGI/PTR case, we use the estimates available at the end of its internal convergence algorithm.
Note that we feed IGI/PTR the exact tight-link capacity C t , while all other tools operate without this information.
As the table shows, Pathchirp produces estimates with less than 20% of error for all cases.
Note that IGI/PTR produces estimates very quickly (40 times faster than Pathchirp), but its estimation error is significantly higher than that of Pathchirp (see [13] for details of possible causes of IGI's estimation inaccuracy even with more probe samples and longer measurement time in multi-hop paths).
Pathload measures the paths with accuracy that is similar to Pathchirp.
Notice in the table that PRC-MT produces bandwidth estimates with accuracy that is comparable to or better than those of Pathload and Pathchirp.2) Bottleneck Bandwidth Comparison: Note that only in cases II and IV, the narrow link coincides with the tight link of the path.
Hence, we compare PRC-MT only in these path configurations with recent bottleneck bandwidth estimators CapProbe and Pathrate.
For CapProbe, we use 1800 packetpairs for estimation since it often does not produce good estimates (on the studied paths) with 100 pairs recommended in the paper [16].
In Pathrate, the internal algorithm executes for over 2000 seconds (around 36 minutes) to get an estimate of the bottleneck capacity of the end-to-end path (note that Pathrate has quick termination mode that takes about 100 seconds, but we do not use this since its estimate is not accurate in the cases studied in this paper).
Table IV illustrates relative capacity estimation errors e C of the different methods.
As the table shows, PRC-MT produces capacity estimates˜Cestimates˜ estimates˜C t of the tight link within 5% of its true values C t in the studied cases, which is significantly better than those of Pathrate and CapProbe (see [13] for details of possible causes of CapProbe's random convergence and estimation inaccuracy in heavily congested paths).
As use of interrupt moderation (that delays generation of new interrupts) has become a common practice in modern network settings, host machines in real networks employ interrupt delays that vary widely in order to reduce CPU utilization and to increase network throughput.
It is reported in [7] that Microsoft Windows-based operating systems perform best when Intel Gigabit NIC (GbE) controller interrupts with delays between 83 and 250 µs, while Linux-based systems perform best with interrupt delays between 125 and 1000 µs.
Jin et al. [12] also report that a variety of systems equipped with Gigabit NICs require to delay generation of interrupts over 470 µs to achieve good throughput in receiving highspeed TCP streams and to substantially reduce CPU utilization.To assess robustness of bandwidth estimation tools under the influence of interrupt moderation, we investigate how nontrivial interrupt delay affects the tools by comparing their estimation accuracy using the same setup in Table I. Among tools evaluated with no interrupt delay (δ = 0) in Section III, use of interrupt moderation affects Pathload the most, while others exhibit estimation accuracy that is similar to that in the cases without using interrupt moderation.
Recently, Kang et al. [15] proposed a measurement tool called IMR-Pathload that is resilient to various interrupt delays and significantly improves Pathload's estimation reliability under such conditions (see [15] for detailed behavior of Pathload and IMR-Pathload under a wide range of interrupt delays).
We include this method in comparison of estimation tools under interrupt moderation in the following subsections.
We compare PRC-MT with IMR-Pathload as well as the same existing available bandwidth estimators and capacity estimation tools studied in Section III with non-trivial interrupt delay to understand their robustness to end-host interrupt moderation.
For this purpose, we use the same path configurations discussed in Section III.1) Available Bandwidth Estimation: Table V illustrates relative estimation errors e A of all available bandwidth estimators studied in this paper for different cases under an interrupt delay δ = 500 µs.As the table shows, PRC-MT produces very accurate bandwidth estimates (less than 6% of error) and outperforms all other existing methods studied.
Notice that IMR-Pathload's estimation accuracy is as good as PRC-MT, but Pathload is unable to produce estimates for any of the cases as shown in the table as empty cells.
This suggests that Pathload's algorithm is susceptible to non-trivial interrupt delays (see [15] for details).
Observe that Pathchirp exhibits estimation accuracy that is slightly worse than PRC-MT and IMR-Pathload in some cases (e.g., cases II, IV, and V), but comparable to them in other cases.
Note that Pathchirp's estimation accuracy is similar to that observed without the influence of interrupt moderation (i.e., δ = 0) (see Table III), which implies that its "jumbo" option (if selected properly) that sends substantially more probe packets makes it resilient to interrupt delays.
Estimation accuracy of IGI/PTR is not much different from those cases with no interrupt delay shown in Table III, but is a lot worse than those of PRC-MT, IMR-Pathload, and Pathchirp.2) Capacity Estimation: We compare PRC-MT with CapProbe and Pathrate in cases II and IV, in which tight link and narrow link coincide.
We show relative estimation errors e C of the above methods in Table VI.
As the table shows, PRC-MT produces capacity estimates with over 90% accuracy, which significantly outperforms Pathrate and CapProbe in the studied cases.
We next briefly discuss the amount of probe data used in bandwidth sampling for different methods.
To allow Pathload's algorithm to terminate normally and produce some bandwidth estimate, we use a small interrupt delay δ = 100 µs (other values of δ produce similar results and are omitted for brevity).
For the existing methods, we use the same packet size and number of trains or packet pairs recommended in the original paper.
As the table shows, IGI/PTR and CapProbe do not use many samples while PRC-MT, IMR-Pathload, Pathload, Pachchirp, and Pathrate require significantly more probe packets for their measurement.
Note that PRC-MT requires even more samples in case II than Pathrate to examine the path.
However, since it uses smaller packet size on average, the amount of data used is significantly less than that of Pathrate.
For instance, Pathrate sends 26000 samples in both cases, which amounts to 37 MB of data, while PRC-MT uses 4 − 8 MB of probe packets.
Also note that both IMR-Pathload and Pathload incur almost 4 times less overhead than Pathchirp.Recall that in this paper we use "jumbo" option to increase Pathchirp's estimation accuracy since without using that option, its accuracy is significantly worse than that of Pathload.
This result is somewhat different from that reported in [28], which conducted simulations using ns2 with low link utilization (at most 53%).
In our experimental setup used in this work where link utilization reaches up to 80%, Pathchirp were not able to produce accurate estimates without using the jumbo option due to higher cross-traffic interference, timestamping inaccuracy, and interrupt moderation.
Higher measurement overhead of Pathchirp in this paper (different from that in [28]) accounts for the use of the jumbo option.V.
RELATED WORK Bandwidth estimation has been extensively studied in the past 10 to 15 years and many techniques have been proposed in the literature.
One direction of this prior work is to measure capacity of the tight link, which utilizes inter-packet spacings sampled at the receiver to identify the capacity mode presented in their histogram (bprobe [1], PBM [25], Nettimer [17], and Pathrate [2]) or uses minimally delayed packet pairs to produce its estimate (CapProbe [16]).
Another dimension of related work focuses on measuring available bandwidth of the tight link (Pathload [11], IMR-Pathload [15], IGI/PTR [6], and TOPP [23]).
These techniques adjust sending rates of probe packets to infer the available bandwidth using relationship between the sending rate and corresponding receiving rate.
Note that unlike PRC-MT introduced in this paper, none of these methods can measure both bandwidth metrics in real network environments with arbitrary cross-traffic and routing patterns.Recently, there have been a growing demand to evaluate existing tools under real network settings, where timestamping inaccuracy, interrupt delays, and high link utilization of network paths can significantly affects estimation accuracy and reliability of existing tools.
Although studies (such as [28]) based on ns2 use traffic reproduced from real networks, their evaluation setup provides perfect timestamping and no interrupt delays and arguably does not capture the real behavior of these tools in the Internet.
This paper implemented a new bandwidth measurement tool called PRC-MT that can extract both bandwidth metrics of the tight link over multi-hop paths under arbitrary crosstraffic and routing patterns.
We evaluated PRC-MT in Emulab and showed that PRC-MT produces available bandwidth and capacity estimates with very high accuracy even under the influence of a large interrupt delay.
We also evaluated existing bandwidth estimation tools under various network settings and found that Pathload is susceptible to timing irregularities caused by interrupt moderation while IMR-Pathload and Pathchirp showed resilience to such conditions.
