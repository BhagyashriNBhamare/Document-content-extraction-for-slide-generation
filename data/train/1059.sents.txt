The Internet consists of a large number of Autonomous Systems (ASes) that exchange routing information using the Border Gateway Protocol (BGP).
Each AS applies local policies for selecting routes and propagating routes to others, with important implications for the reliability and stability of the global system.
In and of itself, BGP does not ensure that every pair of hosts can communicate.
In addition, routing policies are not guaranteed be safe, and may cause protocol divergence.
Backup routing is often used to increase the reliability of the network under link and router failures, at the possible expense of safety.
This paper presents a general model for backup routing that increases network reliability while allowing each AS to apply local routing policies that are consistent with the commercial relationships it has with its neighbors.
In addition, our model is inherently safe in the sense that the global system remains safe under any combination of link and router failures.
Our model and the proof of inherent safety are cast in terms of the stable paths problem, a static formalism that captures the semantics of interdomain routing policies.
Then, we describe how to realize our model in BGP with locally-implementable routing policies.
To simplify the specification of local policies, we propose a new BGP attribute that conveys the avoidance level of a route.
We also describe how to realize these policies without modification to BGP by using the BGP community attribute.
The Internet consists of thousands of autonomous systems (ASes) that interact to coordinate the delivery of IP traffic.
An AS is a collection of routers and links administered by a single institution, such as a company, university, or Internet service provider.
Neighboring ASes use the Border Gateway Protocol (BGP) to exchange routing information [1], [2], [3].
Each BGP route advertisement concerns a particular block of IP addresses and includes a list of the ASes in the path, along with a number of other attributes.
Each AS applies local policies to select the best route and to decide whether or not to propagate this route to neighboring ASes, without divulging their policies and internal topology to others.
In practice, BGP policies reflect the commercial relationships between neighboring ASes.
AS pairs typically have a customer-provider or peer-peer relationship.
A provider provides connectivity to the Internet as a service to its customers, whereas peers simply provide connectivity between their respective customers.
The relationships between ASes translate into local rules that that determine whether or not an AS exports its best routes to a neighboring AS [4], [5].
These policies limit the possible paths between each pair of Internet hosts.
In and of itself, BGP does not ensure that every pair of hosts can communicate, even if the underlying topology is connected.
In addition, link and router failures may cause L. Gao was was supported in part by NSF grant ANI-9977555, and NSF CA-REER Award grant ANI-9875513.
Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.
an AS to withdraw a route, forcing some of the ASes to select alternate paths.
However, these alternate paths are typically constrained by the commercial relationships between the ASes.
As a result, some AS pairs may not have alternate routes in certain failure scenarios.
Therefore, ASes are increasingly moving beyond traditional customer-provider and peer-peer relationships to form backup relationships to provide connectivity in the event of a network failure.
These local backup arrangements between ASes introduce additional BGP route advertisements that announce the backup routes.
On the surface, the announcement of backup routes should improve the robustness of the Internet in the face of link and router failures.
However, the backup routes have negative implications on the global properties of the Internet routing system.
The backup routes can introduce global BGP convergence problems that result in protocol divergence, which undermines the robustness of the network.
Even if the system converges, the use of backup routes incurs a global cost in terms of increased convergence delay after the withdrawal of a route [6].
In this paper, we focus on ensuring that the system converges rather than analyzing how backup routes affect the convergence time.Two kinds of backup arrangements are most common in practice.
First, a multi-homed backup relationship involves using a secondary provider-customer link if the connection to the primary provider fails, as illustrated in Figure 1(a).
If the link between AS 1 and AS 4 fails, then traffic to and from AS 1 travels via the secondary provider AS 2.
Second, a peer-peer backup relationship uses an existing peer-peer link for backup routes in the event of a failure, as suggested in RFC 1998 [7].
For example, consider a university consisting of two campuses (AS 1 and AS 2) that each have a different provider, as shown in Fig- ure 1(b).
Normally the peer-peer link would only carry traffic between the two campuses.
However, if AS 1 loses its connection to its upstream provider (AS 4), then traffic from AS 1 to AS 3 and AS 4 would travel via AS 2.
Likewise, traffic from AS 3 and AS 4 to AS 1 would travel via AS 2.
This requires AS 2 to advertise its ability to reach destinations in AS 1 to AS 3; likewise, AS 2 must advertise routes learned from AS 3 to AS 1.
In this paper, we demonstrate that these additional advertisements can cause global convergence problems, unless certain basic guidelines are followed.Previous research has demonstrated that the interaction of locally defined routing policies can have global ramifications for the stability of the BGP system.
Conflicting local policies among a collection of ASes can result in BGP route oscillations [8].
We call a collection of routing policies safe if they can never lead to BGP divergence.
Verifying the safety of a set of routing policies is computationally expensive [9] and would require ASes to reveal their (often proprietary) routing policies.
In practice, these routing policies depend on the commercial relationships with the neighboring ASes.
Focusing on customerprovider and peer-peer relationships, the work in [10] demonstrates that local policies that favor routes via customers over routes via peers and providers ensure that the global BGP system converges.
However, backup routes introduce two new challenges.
First, under both the multi-homed and peer-peer backup relationships, an AS may prefer a path via a provider or peer rather than choosing a customer route that traverses one or more backup links.
Second, under the peer-peer backup relationship, an AS violates the traditional routing policies by advertising its peer's routes to other peers or upstream providers.In this paper, we extend the results of [10] to backup routing.
We present routing policy guidelines that guarantee that the BGP system is inherently safe -safe under any combination of link and router failures.
At the same time, the routing policies are locally implementable.
That is, only coordination between an AS and its neighbors is required.
Our results can be summarized as follows.
We show that, in order to guarantee safety, if a route is marked as a backup route, then it must retain this marking as it propagates to subsequent ASes.
An AS should always prefer a primary route over a backup route to the same destination.
Then, we investigate policies for selecting among a set of backup routes to the same destination.
We show by example that preferring backup routes via a customer over backup routes via a peer or provider can result in an unsafe system.
Instead, we introduce the notion of an avoidance level that increases as a path traverses additional backup edges.
This model allows a generalization of [10] where each AS can now prefer customers to peers and providers within an avoidance level.Proving properties about a dynamic, distributed protocol is very difficult in practice.
This is especially true for BGP due to the complex interaction of local routing policies.
Instead, we investigate backup routing in the context of the stable paths problem (SPP), a static formalism that captures the semantics of the interdomain routing policies [11], [12], [13].
This allows us to define a high-level, global model of backup routing that is independent of the low-level implementation of local policies.
In addition, we employ the results of [11], [12], [13] in the proofs that our model is inherently safe.
Section II-A reviews the stable paths problem (SPP) while Section II-B reviews the main result of [10].
Section III discusses how to support peer-peer backup relationships without sacrificing the inherent safety of the underlying system.
Section IV presents a general model of backup routing that also incorporates multi-homed backup relationships and load balancing.
In Section V, we propose a new BGP attribute for propagating the avoidance level in route advertisements and describe how to implement our scheme without modifying BGP by using the BGP community attribute.
Section VI concludes the paper with a summary of future research directions.
In Appendix VII we prove that BGP realizations of our SPP model would not suffer from protocol divergence, even under link and router failures.
This section reviews the Stable Paths Problem (SPP) formalism of [11], [12], [13] and revisits the key result of [10] in the context of SPP.
The Stable Paths Problem is a static formalism similar to the shortest paths problem, that can be described in a manner independent of any dynamic protocol used to solve instances of this problem.
SPP is based on the notion of permitted paths and ranking functions on these paths.
, there is a non-negative, .
If no such assignment exists, then Â© is unsolvable.
Figure 2 presents the SPP called BAD GADGET, which has no solution.A Simple Path Vector Protocol (SPVP) was defined in [12], [13] to solve the Stable Paths Problem in a distributed manner.
SPVP can be thought of as an abstraction of BGP.
There are two desirable properties for an instance of SPP with respect to behavior we can expect from SPVP: Safety: An instance of the SPP is safe if the protocol SPVP can never diverge.
The example BAD GADGET is not safe since it has no solution and so the protocol can never converge.
Inherent safety: An instance of the SPP is inherently safe if it is safe, and remains safe after removing any nodes, edges, or permitted paths.
Inherent safety guarantees that a system will remain safe under network failures and under more restrictive routing policies that filter out some permitted paths.
In Appendix VII, we present a sufficient condition for an SPP to be inherently safe.As outlined in Section V, a given set of BGP routing policies gives rise to a separate instance of SPP for each IP address block announced.
The nodes of the graph model either individual routers or entire autonomous systems.
Since the presentation in this paper will ignore the details of BGP configuration within an autonomous system, we will usually identify nodes with ASes.
Motivated by the commercial relationships between autonomous systems in the Internet, we consider the possibility that adjacent nodes have either a customer-provider or peerpeer relationship.
Although a customer-provider or peer-peer relationship may apply across all blocks of IP addresses, our analysis allows for the possibility of ASes having different relationships for each address block.
Consider a node.
We parti- tion ! "
Â¢ Â¦ into three sets " ! "
Â¢ Â¦ , ! "
Â¢ Â¦, and! '
! "
Â¢ Â¦-the customers, peers, and providers of , respectively.
Relationships must be consistent between a pair of nodes.
That is, if# % " ! "
Â¢ Â¦ then % ! '
! "
Â¢ # Â¦ ; similarly, if # % ! "
Â¢ Â¦ then % ! "
Â¢ # Â¦.
We also classify a path as a customer, peer, or provider path, depending on the relationship between the first two nodes in the path.
A pathÂ¢ # Â¦ 6is a customer path if# % " ! "
Â¢ Â¦ , a peer path if # % ! "
Â¢ Â¦, or a provider path if Figure 3 shows an example graph where peer-peer relationships are represented by a dotted line and provider-customer relationships are represented by a solid line with an arrow pointing from the provider to the customer.
Based on these relationships, we can define special cases of the Stable Paths Problem that impose practical restrictions on the graph structure, the permitted paths, and the ranking functions.
In particular, the work in [10] identified several combinations of restrictions that are sufficient to guarantee that the resulting system is inherently safe.
The restrictions are reasonable in the sense that they are faithful to the commercial relationships between neighboring autonomous systems.
In the remainder of this section, we revisit one of these scenarios in the context of the Stable Paths Problem and introduce terminology that will be used in the rest of the paper.
# % ! '
! "
Â¢ Â¦ .
First, we use the provider-customer relationship to impose directionality on some of the edges in the graph .
The providercustomer digraph refers to the directed graph resulting from the provider-customer edges of .
We assume that providercustomer relationships are hierarchical; in other words, the provider-customer digraph is acyclic.
Informally, if For example, a nationwide AS may be a provider for a regional AS, which in turn may be a provider for a particular university campus, but this university campus would not be a provider for the nation-wide AS.Second, we assume that no permitted path has a valleya provider-customer edge followed by one or more customerprovider edges.
That is, a path between two nodes should not traverse an intermediate node that is lower in the hierarchy, since this would cause a customer to transit traffic between two of its upstream providers [4], [5] (5 4 2) (6 5 3 2), (6 5 4 2) ( 1 6 5 3 2), (1 6 5 4 2 .
This is consistent with the commercial relationships between ASes.
An AS has a financial incentive to limit the amount of traffic that traverses peer and provider links, and may receive payment based on the amount of traffic that travels via customer links.
We do not impose any restriction on the ranking of different customer paths, or of different peer and provider paths.In summary, we consider a stable paths problem with the following four properties:(acyclic provider-customer digraph) The directed graph induced by the customer-provider relationships is acyclic.
with an acyclic provider-customer digraph and the no-valley, no-step, and prefer-customer properties is inherently safe.
(no-valley) If Â¢ ' ( ' 0 ' 1 Â¦ % @ and ' ) 0 % " ! "
Â¢ ' Â¦ for some Â¡ Â¡ 2 Â¤ Â¤ Â© , then ' 5 ) 0 Â¡ ! '
! "
Â¢ ' 5 Â¦ for all Â¡ Â¡ Â¨ Â© Â¤ Â¤ Â© .
(no-step) If Â¢ ' ( ' 0 ' 1 Â¦ % @ and ' ) 0 % ! "
Â¢ ' Â¦ for some Â¡ Â¡ 2 Â¤ Â¤ Â© , then ' Â¢ ) 0 % ! '
! "
Â¢The theorem is a special case of Theorem IV.1, presented in the next section.
Peer-peer backup relationships violate the restrictions introduced in Section II-B.
After introducing the notion of a backup path, we explain why backup paths should always have a lower ranking than other paths.
Then, we explore policies for ranking between backup paths and show that preferring customer backup paths over peer and provider backup paths can result in an unsafe system.
Finally, we propose a policy that prefers paths with fewer steps over paths with more steps, with preference for customer paths among paths with the same number of steps.
Normally, the selection and export of routes is constrained by the customer-provider and peer-peer relationships.
Backup relationships introduce additional paths that provide connectivity in the event of a failure and change how nodes select among paths to the same destination.
Consider the example in Figure 3 after removing the edge Â§ Â¤ 9.
The new solution to the stable paths problem may select different paths for some node pairs.
For example, deleting edge Â§ Â¤ 9would remove the customer path .
Enlarging the set of permissible paths has important implications on whether the system remains inherently safe.
On the one extreme, every path could be permissible.
However, paths with valleys violate the basic notion of hierarchical relationships between nodes.
Instead, we define a slightly weaker notion of reachability where the set of permitted paths can include paths that have steps.
Figure 4 shows an example where node 1 provides backup service for node 2.
This backup relationship allows paths like ensure that the rest of the Internet can reach node 2 and its downstream customers.These paths fall into the three categories shown in Figure 5.
In Figure 5 .
Having a lower ranking for backup paths is important for the safety of the system.
In the example in Figure 6, nodes 2, 3, and 4 each have a providercustomer relationship with node 1 and peer-peer relationships with each other.
Node 1 also has a peer-peer relationship with 0, which is a customer of 2.
Limiting the consideration to primary, valley-free paths, nodes 2, 3, and 4 would each select a path that uses the edge from 2 to 0, and node 1 would select a direct path.
Now, suppose that the set of permissible paths is extended to include paths with steps, such as , following the approach in Figure 5(a).
Nodes 2, 3, and 4 should still prefer the primary path that uses the edge from 2 to 0.
If the edge between 0 and 2 fails, nodes 2, 3, and 4 select paths to 0 that include node 1 does not involve a step.
Otherwise, the example in Figure 6 could devolve to the BAD GADGET scenario in Figure 2.
In addition to preferring primary paths over backup paths, each node needs to rank amongst the backup paths.
The simplest policy ranks the backup paths based on the path length, favoring shorter backup paths over longer backup paths.
This approach has the desirable property of minimizing the length of backup paths.
In addition, always selecting the shortest backup path ensures that the system is inherently safe.
Informally, ranking primary paths over backup paths reduces the problem to two subproblems related to primary paths and backup paths, respectively.
The prefer-customer requirement in Section II-B addresses the subproblem concerning primary paths, and the shortest-path requirement addresses the subproblem concerning backup paths.
However, the shortest-path policy is very restrictive, since it does not incorporate information about the commercial relationships between nodes or the number of steps in the backup paths.
The shortest-path policy would prefer a provider path with two steps over a longer customer path with one step.Extending the prefer-customer policy to backup paths is an appealing first approach to allowing a more liberal ranking of backup paths.
In this scheme, a node would assign a higher rank to a backup path through a customer over a backup path through a peer or provider.
However, this policy can result in an unsafe system.
Consider the example in Figure 7, where ....
each node prefers customer backup paths over peer and provider backup paths.
Also, suppose that each node ranks among customer paths (or among peer and provider paths) based on the length of the path.
Nodes 1, 2, 3, and 4 do not have any stepfree paths to node 0.
The prefer-customer property would result in node 4 preferring a path via node 3 and node 3 preferring a path via node 2.
Node 1 prefers the shorter customer path via node 4 over the path via node 2.
In addition, node 2 prefers the shorter provider path via node 1 over the peer path via node 8.
This system is unsafe.
Similar examples can be shown for preferring peers over providers, preferring providers over peers, and for preferring customers over peers.
Figure 8 shows a an example of an unsafe system where provider paths are preferred over peer paths at nodes 1, 2 and 3.
Ranking backup paths based on path length would have avoided these problems, at the expense of imposing significant restrictions on backup policies.
The shortest-path policy would force a node to prefer a path with a large number of steps with a small number of steps, whenever the path with more steps has a shorter overall length.
Instead, we consider another approach that ranks paths based on the number of steps.
Among paths with the same number of steps, customer paths are ranked higher than peer and provider paths, consistent with the approach in Section II-B.
This policy is consistent with the commercial relationships between nodes and also ensures that the system is inherently safe.
Informally, ranking paths with fewer steps higher than paths with more steps reduces the problem to a collection of subproblems, each corresponding to paths with a fixed number of steps.
The safety of each of these subproblems is assured by the prefer-customer requirement, as shown in the next section.
This section proposes a general technique for dividing the permissible paths into avoidance levels.
Paths with a lower avoidance level are preferred over paths with a higher avoidance level; within an avoidance level, customer paths are preferred over peer and provider paths.
In addition to capturing the peer-peer backup relationship (i.e., steps), this model incorporates multihomed backup relationships and load balancing while ensuring that the system remains inherently safe.The idea of counting the number of steps in a path suggests a general routing model based on avoidance levels, where each node assigns a higher rank to paths with a lower avoidance level.
The assignment of an avoidance level to each path should preserve the maximum flexibility for each node to apply local policies for backup routing and load balancing.
The notion of an avoidance level is more general than counting steps in a path in two ways.
First, the avoidance level does not have to increase by unit increments.
For example, a path with two steps could have a higher avoidance level than another path with three steps.
Second, the avoidance level can increase for any edge in the path.
For example, a provider-customer edge can increase the avoidance level of a path.
Conceptually, a backup edge with respect to a path is any edge that increases the avoidance level.
The model does not prescribe how much to increase the avoidance level for each backup edge; in practice, this may depend on local policies.
However, some basic restrictions on avoidance levels are necessary to ensure that the global system is inherently safe.
An edge if it matches any of the three conditions outlined in Figure 5 We now consider how safe backup routing might be implemented in BGP with locally-implementable routing policies that do not require global knowledge.
The goal is to define a set of recommendations that, if followed by all ASes, would allow for a very flexible framework for implementing backup routes and load balancing, while at the same time provide a guarantee of the inherent safety of interdomain routing.Our recommendations will ensure that all conforming interdomain BGP routing policies could be translated into inherently safe instances of the Stable Paths Problem for every network destination.
In particular, we require that (1) valleys are not permitted, (2) we can define an avoidance classifier on the associated SPP that is step aware, (3) the ranking of paths prefers customers with respect to the avoidance levels of .
We do not explicitly enforce the condition that the providercustomer digraph is acyclic, depending instead on natural market considerations.
Note that we are not advocating the the translation of BGP policies into instances of the SPP.
The SPP formalism is serving only as a simple semantic framework in which we can more easily prove inherent safety.Section V-A first describes how routing policies are implemented with BGP and how BGP policies can be translated to an instance of the Stable Paths Problem.
Section V-B then outlines how the rules of [10] can be implemented in BGP.
Section V-C proposes a new attribute for BGP, called the avoidance level, and describes a very natural extension to the implementation of [10] that covers the inherently safe backup routing defined the current paper.
Since the avoidance level attribute does not yet exist in BGP, Section V-D describes how it can be simulated using the BGP communities attribute, at the cost of introducing some complexity into the definition of routing policies.
BGP exchanges route announcements between BGP speaking routers.
These announcements are records containing a destination network (also called an address block, CIDR block, or IP prefix) and attributes associated with this destination.
Route announcements include the following attributes.
.
Finally, the import policies of are applied to the announcement.
This is the point that a local preference value is assigned.The BGP route selection procedure selects best route by first preferring highest values of local preference, then shortest AS paths, and so on.
For a complete description of this process, see [2], [3], [1].
Informally, the process of transforming a set of BGP policies into an instance of SPP could proceed as follows.
Designate any AS as the origin .
A distinct instance of the SPP would be constructed for each prefix originated by an .
For each AS we then enumerate every possible simple path in the AS graph from AS to AS .
For each such path 6 , we start at and compose the export policies, BGP transformation, and import policies, marching along the path in a hop-by-hop fashion toward .
If we do not make it to the end of the path (that is, the route was filtered out somewhere along the path), then the path is not in the set of permitted paths at .
Otherwise, the path must come from the same next-hop router.
Since a BGP speaking router only announces at most one route to any prefix (its best route), there is no possibility of a router simultaneously having two routes of the same rank.
(Note that this accounts for the strictness condition in the definition of a ranking function for Stable Paths Problems, given in Section II-A.)
Observe that many distinct sets of BGP routing policies could translate to the same instance of SPP.
Put another way, the set of SPP permitted paths at node and the ranking of those paths via Â¤ does not simply represent the routing policy of AS , but rather the composition of all routing policies along paths from the origin to .
We now describe how the simple routing of [10] and Section II-B can be implemented in BGP.The following table indicates whether or not an AS announces a route to its neighbor depending on its relationship to the AS that sent the route.
A Y indicates that the route may be announced, while a N indicates that it may not be.
For example, an announcement from a peer may be passed along to a customer but not to another peer.To customer peer provider customer Y Y Y From peer Y N N provider Y N NThese export rules ensure that no permitted path will have a step (N in peer-peer, peer-provider, and provider-peer entries) or a valley (N in provider-provider entry).
In addition to these rules, each AS must ensure that all values of local preference assigned to customer announcements are greater than all local preference values assigned to peers and providers.
The easiest way to describe inherently safe backup routing is to imagine that BGP is extended with a new attribute, the avoidance level of a route.
The idea is that the higher this value, the less preferable a route.
The avoidance level attribute must be considered before any other attribute in the BGP decision process.
Other approaches that affect later stages of the decision process are not sufficient.
One example is the commonly-used technique of AS prepending (inflating AS path length by repeating an AS number multiple times) that affects the decision process after the local preference attribute.We can now extend the export rules to allow the three cases covered by Figure 5: The more liberal export rules allow the possibility of forming a valley involving one or more steps.
To avoid this, an AS must never send to a provider an upstream route that was received from a peer.
An AS must mark routes that it receives from a provider before it sends them to a peer.
An AS should never export such a marked route to a provider.
A special community value could be employed between peers to signal that a route was received from an upstream provider.Local preference must be assigned in a way that ensures that no customer route can get a value less than or equal to a peer or provider route.
This ensures that customers are preferred within an avoidance level since the selection process will consider local preference only after the avoidance level.
Together these simple rules ensure that the conditions of Theorem IV.1 are met.
RFC 1998 [7] suggests using BGP communities as a way to influence a neighbor's routing policies.
It applies this technique to the implementation of peer-peer backup.
We extend this approach to simulate inherently safe backup routing described in Section V-C.
Since we will use communities to carry several bits of information, it is perhaps best to think of them as extended community values [16].
We Â£ If % " ! "
Â¢ # Â¦ Â¤ ' % ! "
Â¢ # Â¦ Â£ ! '
! "
Â¢ # Â¦ , then for each level Â¡ we have Â¡ Â¢ Â¢ # Â¤ ' Â¤ Â¡ Â¦ Â¦ Â¡ Â¢ Â¢ # Â¤ Â¤ Â¡ Â¦ .
Â£ For each Â¡ 0 Â¤ Â¡ Â¥ Â¤ Â¤ ' , if Â¡ 0 Â¦ Â¡ Â¥ , then Â¡ Â¢ Â¢ # Â¤ Â¤ Â¡ Â¥ Â¦ Â¦ Â¡ Â¢ Â¢ # Â¤ ' Â¤ Â¡ 0 Â¦.
That is, within each avoidance level customer routes are preferred over peer and provider routes, and routes of level lower avoidance levels are always preferred over routes of higher avoidance levels.In practice, this scheme requires imposing some limit Selecting efficient, stable routes between each pair of hosts is a major challenge for the distributed Internet routing infrastructure.
In and of itself, BGP does not ensure that hosts can communicate, even if the network is connected.
In addition, conflicting local policies amongst a collection of ASes can cause the protocol to oscillate.
This paper has has presented a model for backup routing that increase global network reliability without compromising the stability of the routing protocol.Several issues remain to be addressed.
First, the interaction of backup routing with prefix aggregation needs to be studied.
Second, the models presented in this paper are simplified in that they ignore the internal structure of ASes.
It should be noted that we are ignoring the configuration of BGP within each AS, and so our recommendations will not exclude all types of BGP divergence.
This follows from the fact that some types of internal BGP configurations can lead to BGP divergence within a single AS.
For example, the interaction of BGP route reflectors, the processing of BGP routes using multi-exit discriminator values, and internal routing metrics, is not guaranteed to converge (see for example Scudder [17]).
Routing policies may not actually be AS-wide, but may vary between border routers, mostly to meet traffic engineering goals.
The interaction and tradeoffs between external routing (both normal and backup) and internal routing should be explored.
This appendix presents the proofs of all of results stated in the body of the paper.
Some definitions are repeated here for ease of reading.
We first introduce a sufficient condition that guarantees that an instance of the Stable Paths Problem is inherently safe.
This definition is taken from [11], [12].
A is a customer-provider edge.
Since this is the only remaining case, this must be true for the last edge in every path Â¥ in the dispute wheel.
Then we know, by Lemma VII.4 (2), that all edges on the rim of the wheel are customer-provider edges.
This contradicts the assumption that the customer-provider digraph is acyclic.
