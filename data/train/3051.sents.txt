In order to learn quickly with few samples, meta-learning utilizes prior knowledge learned from previous tasks.
However, a critical challenge in meta-learning is task uncertainty and heterogene-ity, which can not be handled via globally sharing knowledge among tasks.
In this paper, based on gradient-based meta-learning, we propose a hierarchically structured meta-learning (HSML) algorithm that explicitly tailors the transferable knowledge to different clusters of tasks.
Inspired by the way human beings organize knowledge, we resort to a hierarchical task clustering structure to cluster tasks.
As a result, the proposed approach not only addresses the challenge via the knowledge customization to different clusters of tasks, but also preserves knowledge generalization among a cluster of similar tasks.
To tackle the changing of task relationship, in addition, we extend the hierarchical structure to a continual learning environment.
The experimental results show that our approach can achieve state-of-the-art performance in both toy-regression and few-shot image classification problems.
Learning quickly with a few samples is one of the key characteristics of human intelligence, while it remains a daunting challenge for artificial intelligence.
Learning to learn (a.k.a., meta-learning) ( Braun et al., 2010), as a common practice to address this challenge, leverages the transferable knowledge learned from previous tasks to improve the learning effectiveness in a new task.
There have been several lines of meta-learning algorithms, including recurrent network based methods (Ravi & Larochelle, 2016), optimizer based † Part of the work was done when the author interned in Tencent AI Lab.
1 methods ( Andrychowicz et al., 2016), nearest neighbours based methods ( Snell et al., 2017;Vinyals et al., 2016) and gradient descent based methods ( Finn et al., 2017), which instantiate the transferable knowledge as latent representations, an optimizer, a metric space, and parameter initialization, respectively.Despite their early success in few-shot image classification (Ravi & Larochelle, 2016) and machine translation ( Gu et al., 2018), most of the existing meta-learning algorithms assume the transferable knowledge to be globally shared across all tasks.
As a consequence, they suffer from handling a sequence of tasks originated from different distributions.
At the other end of the spectrum, recently, a few research works ( Finn et al., 2018;Yoon et al., 2018a;Lee & Choi, 2018) try to fix the problem by tailoring the transferable knowledge to each task.
Yet the downside of such methods lies in the impaired knowledge generalization among closely correlated tasks (e.g., the tasks sampled from the same distribution).
Hence we are motivated to pursue a meta-learning framework to effectively balance generalization and customization.
The inspiration comes from a hypothesis which has been formulated and tested by psychological researchers ( Gershman et al., 2010;).
The hypothesis suggests that the key to human beings' capability of solving a task with little training data is the way how human beings organize the learned knowledge from tasks.
As bits of tasks impinge on us, we human beings cluster the tasks into several states based on task similarity, so that the learning occurs within each cluster instead of across cluster boundaries.
Thus, when a new task arrives, it can either quickly take advantage of the knowledge learned within the cluster it belongs to or initiate a new cluster if it is wildly different from any existing clusters.Inspired by this, we propose a novel meta-learning framework called Hierarchically Structured Meta-Learning (HSML).
The key idea of the HSML is to enhance the meta-learning effectiveness by promoting knowledge customization to different clusters of tasks but simultaneously preserving knowledge generalization among a cluster of closely related tasks.
In this paper, without loss of generality, we ground HSML on a gradient based meta learning algorithm ( Finn et al., 2017) with the transferable knowlHierarchically Structured Meta-learning task 1 task 2 task 3 task 4 t (a) : globally shared task 1 task 2 task 3 task 4 t (b) : task specific edge instantiated as parameter initializations.
Specifically, first, the HSML resorts to a hierarchical clustering structure to perform soft clustering on tasks.
The representation of each task is learned from either of the two proposed candidate aggregators, i.e., pooling autoencoder aggregator and recurrent autoencoder aggregator, and is passed to the hierarchical clustering structure to obtain the clustering result of this task.
The sequentially incoming tasks, in turn, update the clustering structure.
Especially, if the existing structure does not fit the task, we dynamically expand the structure.
Secondly, a globally shared parameter initialization is tailored to each cluster via a parameter gate, to serve as the initializations for all tasks belonging to the cluster.Again we would highlight the contribution of the proposed HSML: 1) it achieves a better balance between generalization and customization of the transferable knowledge, so that it empirically outperforms state-of-the-art meta-learning algorithms in both toy regression and few-shot image classification problems; 2) it is interpretable in terms of the task relationship; 3) it has been theoretically proved to be superior than existing gradient-based meta-learning algorithms.
Meta-learning, allowing machines to learn new skills or adapt to new environments rapidly with a few training examples, has demonstrated success in both supervised learning such as few-shot image classification and reinforcement learning settings.
There are four common approaches: 1) use a recurrent neural network equipped with either external or internal memory storing and querying meta-knowledge (Munkhdalai & Yu, 2017;Santoro et al., 2016;Munkhdalai et al., 2018;Mishra et al., 2018); 2) learn a meta-optimizer which can quickly optimize the model parameters (Ravi & Larochelle, 2016;Andrychowicz et al., 2016;Li & Malik, 2016); 3) learn an effective distance metric between examples ( Snell et al., 2017;Vinyals et al., 2016;Yang et al., 2018); 4) learn an appropriate initialization from which the model parameters can be updated within a few gradient steps ( Finn et al., 2017;Lee & Choi, 2018).
HSML falls into the fourth aforementioned category named as gradient-based meta-learning.
Most of the gradient-based meta-learning algorithms ( Finn et al., 2017;Li et al., 2017;Flennerhag et al., 2018) assume a globally shared initialization across all tasks, as shown in Figure 1a.
To accommodate dynamically changing tasks, as illustrated in Figure 1b, recent studies tailor the global shared initialization to each task by taking advantage of probabilistic models ( Finn et al., 2018;Grant et al., 2018;Yoon et al., 2018a) and incorporating task-specific information (Lee & Choi, 2018;Vuo- rio et al., 2018).
However, our proposed HSML outlined in Figure 1c customizes the global shared initialization to each cluster using a hierarchical clustering structure, which enjoys not only knowledge customization but also generalization (e.g., between task 1 and 3).
Better yet, HSML right fit to a continual learning scenario with evolving clustering structures.
The Meta-Learning Problem Suppose that a sequence of tasks {T1, ..., TN t } are sampled from an environment which is a probability distribution E on tasks (Baxter, 1998 .
Given a base learner f with θ as parameters, the optimal parameters θT i are learned to make accurate predictions, i.e.,f θ T i (xi,j) → yi,j.
The effectiveness of such a base learner on D tr T i is evaluated by the loss function L(f θ T i , D tr T i), which equals the mean square error(x i,j ,y i,j )∈D tr T i f θ T i (xi,j)− yi,j 22 for regression problems or the cross entropy loss − (x i,j ,y i,j )∈D tr T i log p(yi,j|xi,j, f θ T i ) for classification problems.The goal of meta-learning is to learn from previous tasks a well-generalized meta-learner M(·) which can facilitate the training of the base learner in a future task with a few examples.
In fulfillment of this, meta-learning involves two stages, i.e., meta-training and meta-testing.
During metatraining, the parameters of the base learner for all tasks, i.e.,{θT i } N t i=1, and the meta-learner M(·) are optimized alternatingly.
In virtue of M, the parameters {θT i } N t i=1 are learned to minimize the expected empirical loss over training sets of all Nt historical tasks, i.e.,min {θ T i } N t i=1 N t i=1 L(M(f θ T i ), D tr T i ).
In turn, a well-generalized M can be obtained by minimizing the expected empirical loss over test sets, i.e.,minM N t i=1 L(M(f θ T i ), D te T i).
When it comes to the metatesting phase, provided with a future task Tt, the learning effectiveness and efficiency are improved by applying the meta-learner M and solvingmin θ T t L(M(f θ T t ), D tr T t ).
Gradient-based Meta-Learning Here we give an overview of the representative algorithm, model-agnostic metalearning (MAML) ( Finn et al., 2017).
MAML instantiates the meta-learner M as a well-generalized initialization for the parameters of a base learner from which a few gradient descent steps can be performed to reach the optimal θT i for the task Ti, which meansM(f θ T i ) = f θ 0 −α θ L(f θ ,D tr T i ) .
As a result, the optimization of M during meta-training is formulated as (one gradient step as exemplary):min θ 0 N t i=1 L(f θ 0 −α θ L(f θ ,D tr T i ) , D te T i ).
(1) In this section, we detail the proposed HSML algorithm whose framework is presented in Figure 2.
The HSML aims to adapt the transferable knowledge learned from previous tasks, namely the initialization for parameters of the base learner in gradient based meta-learning (θ 0 here), to the task T i in a cluster-specific manner, so that the optimal parameters θ Ti can be achieved in as few gradient descent steps as possible.
As shown in the part (c) of Figure 2, the possibilities to adaptation are completely dictated by the hierarchical task clustering structure in part (b), and the eventual path for adaptation follows the clustering result on the task T i (i.e., θ B1 ).
By this means, the HSML balances between customization and generalization: the transferable knowledge is adapted to different clusters of tasks, while it is still shared among closely related tasks pertaining to the same cluster.To perform hierarchical clustering on tasks, we learn the representation of a task using the proposed task embedding network, i.e., the part (a).
Next we will introduce the three stages, i.e., task representation learning, hierarchical task clustering, and knowledge adaptation, respectively.
Learning the representation of a task Ti with the whole training set D trT ias input is much more challenging than the common representation learning over examples, which bears a striking similarity to the connection between sentence embeddings and word embeddings in natural language processing.
Inspired by common practices in learning sentence embeddings ( Conneau et al., 2017), we tackle the challenge by aggregating representations of all examples{xi,j, yi,j} n tr j=1 ∈ D tr T i.
The desiderata of an ideal aggregator include 1) high representational capacity, and 2) permutational invariance to its inputs.
In light of these, we propose two candidate aggregators, i.e., pooling autoencoder aggregator (PAA) and recurrent autoencoder aggregator (RAA).
Pooling Autoencoder Aggregator To meet the first desideratum, foremost, we resort to an autoencoder that learns highly effective representation for each example.
The recontruction loss for training the autoencoder is as follows,Lr(D tr T i ) = n tr j=1 FC dec (gi,j) − F (x tr i,j , y tr i,j ) 2 2 ,(2)where gi,j = FCenc(F(x tr i,j , y tr i,j )) is the representation for the j-th example.
In order to characterize the joint distribution instead of the marginal distribution only, we use F(·, ·) to preliminarily embed both features and predictions of an example.
The definition of F varies from dataset to dataset, which we will detail in supplementary material C. FCenc and FC dec stand for the encoder composed of a stack of fully connected layers and the decoder consisting of two fully connected layers with ReLU activation, respectively.
Consequently, the aggregation satisfying the permutational invariance follows,gi = Pool n tr j=1 (gi,j),(3)where gi ∈ R d is the desired representation of task Ti.
Pool denotes a max or mean pooling operator over examples.
Recurrent Autoencoder Aggregator Motivated by recent success of the recurrent embedding aggregation in orderinvariant problems such as graph embedding (Hamilton et al., 2017), we also consider a recurrent autoencoder aggregator which demonstrates more remarkable expressivity especially for a task with few examples.
Different from the pooling autoencoder, examples are sequentially fed into the recurrent autoencoder, i.e.,F(x tr i,1 , y tr i,1 ) → gi,1 → · · · → g i,n tr → d i,n tr → · · · → di,1, (4)where ∀j, gi,j = RNNenc(F(x tr i,j , y tr i,j ), gi,j−1) and di,j = RNN dec (di,j+1) represent the learned representation and the reconstruction of the j-th example, respectively.
Here RNNenc and RNN dec stand for a recurrent encoder (LSTM or GRU) and a recurrent decoder, respectively.
The reconstruction loss is similar to Eqn.
(2), except that FC dec (gi,j) is replaced with di,j. Thereupon, the task representation is aggregated over representations of all examples, i.e.,gi = 1 n tr n tr j (gi,j).
(5)Regrettably, the sequential feeding of examples makes the final task representation to be permutation sensitive, which violates the second prerequisite of an ideal aggregator.
We address the problem by applying the recurrent aggregator to random permutations of examples ( Hamilton et al., 2017).
Given the representation of a task, we propose a hierarchical task clustering structure to locate the cluster the task belongs to.
Before proceeding to detail the structure, we first explicate why the hierarchical clustering is preferred over flat clustering: a single level of task groups is likely insufficient to model complex task relationship in real-world applications; for example, to identify the cross-talks between gene expressions of multiple species, the study (Kim & Xing, 2010) suggests multi-level clustering of such gene interaction.The hierarchical clustering, following the tradition of clustering, proceeds by alternating between two steps, i.e., assignment step and update step, in a layer-wise manner.
Assignment step: Each task receives a cluster assignment score on each hierarchical level, and the assignment that it Figure 2.
The framework of the proposed HSML involving three essential stages.
(a) Task representation learning: we learn the representation for the task Ti using an autoencoder aggregator (e.g., pooling aggregator, recurrent aggregator).
(b) Hierarchical task clustering: provided with the task representation, we learn the soft clustering assignment with this differentiable hierarchical clustering structure.
Darker nodes signify more likely assigned clusters (e.g., the cluster 1 in the first level and the cluster B in the second level).
(c) Knowledge adaptation: we next use a parameter gate to adapt the transferable knowledge (θ0) to a cluster-specific initialization (θB1) from which only a few gradient descent steps are required to achieve the optimal parameters θT i .
receives in a particular level is a function of its representation in the previous level.
Thus, we assign a task represented in the k l -th cluster of the l-th level, i.e., h k l i ∈ R d , to the k l+1 -th cluster in the (l + 1)-th level.
Note that we conduct soft assignment for the following two reasons: (1) task groups have been demonstrated to overlap, since there is always a continuum in the sharing between tasks (Kumar & Daumé III, 2012); (2) the soft instead of hard assignment guarantees the differentiability, so that the full HSML framework can still be trained in an end-to-end fashion.
In particular, for each task Ti, the soft-assignment p k l →k l+1 i is computed by applying softmax over Euclidean distances between h k l i and the learnable cluster centers {c k l+1 } K l+1 k l+1 =1 , i.e.,p k l →k l+1 i = exp (−−(h k l i − c k l+1 )/σ l 2 2 /2) K l+1 k l+1 =1 exp (−−(h k l i − c k l+1 )/σ l 2 2 /2) ,(6)where σ l is a scaling factor in the l-th level and K l+1 denotes the number of clusters in the (l+1)-th level.Update step: As a result of assignment, the representation of a task in the k l+1 -th cluster of the (l +1)-th level, i.e.,h k l+1 i, can be updated with the following weighted average,h k l+1 i = K l k l =1 p k l →k l+1 i tanh (W k l+1 h k l i + b k l+1 ),(7)where W k l+1 ∈ R d×d and b k l+1 ∈ R d are learned to transform from representations of the l-th to those of the (l+1)-th level.The full pipeline of clustering starts from l = 0, where the initialization for h k 0 i equals the task representation gi and K 0 = 1, and ends at K L = 1.
We would especially discuss the cluster centers.
The meta-learning scenario where training tasks come sequentially poses a unique challenge which requires the hierarchical clustering structure to be accordingly online.
Therefore, the cluster centers are parameterized and learned as the learning proceeds.
Each center is randomly initialized.
The final representation h L i , which encrypts the hierarchical clustering result, is believed to be cluster specific.
Previous works ( Xu et al., 2015;Lee & Choi, 2018) suggest that similar tasks activate similar meta-parameters (e.g., initialization) while different tasks trigger disparate ones.
Inspired by this finding, we design a cluster-specific parameter gate,oi = FC σ Wg (gi ⊕ h L i ),(8)where the fully connected layer FC σ Wg is parameterized by Wg and activated by a sigmoid function σ.
It is worth mentioning here that concatenating the task representation gi together with h L i not only preserves but also reinforces the cluster-specific property of the parameter gate.
Most importantly, the globally transferable knowledge, i.e., the initial parameters θ 0 , is adapted to the cluster-specific initial parameters θ 0i via the parameter gate, i.e., θ0i = θ0 • oi.Recalling the objectives for a meta-learning algorithm in Section 3, we reach the optimization problem for HSML:min Θ N t i=1 L(f θ 0i −α θ L(θ,D tr T i ) , D te T i ) + ξLr(D tr T i ),(9)where L defined in Section 3 measures the empirical risk over D te Ti and L r measures the reconstruction error as defined in Eqn.
(2).
ξ is used to balance the importance of these two items.
Θ represents all learnable parameters including the global transferable initialization θ 0 , the parameters for clustering, and those for knowledge adaptation (i.e., Wg).
Continual Adaptation We especially pay attention to the case where a new task does not fit any of the learned task clusters, which implies that additional clusters should be introduced to the hierarchical clustering structure.
Incrementally adding model capacity ( Yoon et al., 2018b;Daniely et al., 2015 Update parameters with gradient descent (taking one step as an example):θT i = θ0i −α θ L(θ, D tr T i ) 12:end for 13:Update Θ ← Θ − βΘ N t i=1 L(f θ T i , D te T i ) + ξLr(D tr T i ) 14:Compute ¯ Lnew and save ¯ L old for every Q rounds 15: end while across different tasks during the online meta-training process, setting the loss value as threshold would obviously be futile.
Instead, for every Q training tasks, we compute the average loss value ¯ L.
If the new average value ¯ Lnew is more than µ times the previous value ¯ L old (i.e., ¯ Lnew > µ ¯ L old ), the number of clusters will be increased, and the parameters for new clusters are randomly initialized.
The whole algorithm of our proposed model is detailed in Alg.
1.
The core of HSML is to adapt a globally shared initialization of stochastic gradient descent (SGD) to be cluster specific via the proposed hierarchical clustering structure.
Hence, in this section, we theoretically analyze the advantage of such adaptation in terms of the generalization bound.
(Kuzborskij & Lampert, 2017), a base learner f θ T i is (Si, θ0)-on-average stable if its generalization is bounded by (Si, θ0), i.e., , respectively.
ES i E f θ T i [R(f θ T i (D tr T i ))− ˆ R D tr T i (f θ T i (D tr T i ))] ≤ (Si, θ0Transferring the globally shared initialization θ0 (i.e., MAML) to the target task Tt is equivalent to transferring a hypothesis f θ 0 learned from meta-training tasks like (Kuzborskij & Orabona, 2017).
For HSML, the initialization can be represented as θ0t = K k=1ˆB k=1ˆ k=1ˆB k θ0, which we demonstrate in the supplementary material A.
In the following two theorems, provided with an initialization θ0t, we derive according to (Kuzborskij & Lampert, 2017) the generalization bounds of the base learner f θ T t when the loss L is convex and non-convex, respectively.
St, θ0t-on-average stable.
Then St, θ0t is bounded by,O ˆ R D tr T t (θ0t) + 1 n tr .
(10)Theorem 2 Assume that L ∈ [0,1] is η-smooth and has a ρ-Lipschitz Hessian.
The step size at the u-step αu = c/u sat-isfying c ≤ min{ 1 η , 1 4(2η ln U ) 2 } with total steps U = n tr andˆγ andˆ andˆγ ± = 1 n tr n tr j=1 2 L(θ0t, (xt,j, yt,j))2 + ˆ R D tr T t (θ0t) ± 1 4 √ n trand then (St, θ0t) is bounded by,O 1 + 1 cˆγcˆγ − ˆ R D tr T t (θ0t) cˆγcˆγ + 1+cˆγ1+cˆγ + 1 (n tr ) 1 1+cˆγ1+cˆγ + .
(11)Though some standard base learners (e.g., 4 convolutional layers in few-shot image classification ( Finn et al., 2017)) with ReLU do not meet the property of Lipschitz Hessian, following (Nguyen & Hein, 2018), a softplus functionf (x) = 1 κ log(1 + exp(κx))can arbitrarily well approximate ReLU by adjusting κ and thus Theorem 2 holds.
In both cases, MAML can be regarded as the special case of HSML, i.e., ∀k, ˆ B k = I, where I is an identity matrix.
Remarkably, by proving ∃{ˆB∃{ˆ∃{ˆB k } K k=1 , s.t., ˆ R D tr T t (θ0t) ≤ ˆ R D tr T t(θ0), we conclude that HSML achieves a tighter generalization bound than MAML and thereby is much more favored.
Consider the optimization process starting from θ 0 , through the negative gradient direction, ˆ θ0 = (I − αL(θ0)(θ0I) −1 )θ0 andˆR∃{ˆB k } K k=1 , s.t., ˆ R D tr T t (θ0t) ≤ ˆ R D tr T t(θ0).
Thus, we can find a K k=1ˆB k=1ˆ k=1ˆB k = I − αL(θ0)(θ0I) −1 .
We provide more details about analysis in supplementary material A.
In this section, we evaluate the effectiveness of HSML.
The goal of our experimental evaluation is to answer the following questions: (1) Can our approach outperform other meta-learning algorithms in toy regression and few-shot image classification tasks?
(2) Can our approach discover reasonable task clusters?
(3) Can our approach update the clustering structure in the continual learning manner and achieve better performance?We study these questions on toy regression and few-shot image classification problems.
For gradient-based metalearning algorithms, we select the following as baselines: (1) The empirical results indicate that recurrent autoencoder aggregator (RAA) is on average better than PAA for task representation, so that RAA is used as the default aggregator.
We also provide a comparison of RAA and PAA on fewshot classification problem in supplementary material G. All the baselines use the same neural network structure (base learner).
For hierarchical task clustering, like (Ying et al., 2018), the number of clusters in a high layer is half of that in its consecutive lower layer.
We specify the hyperparameters for meta-training in supplementary material C. Dataset and Experimental Settings In the toy regression problem, different tasks are sampled from different family of functions.
In this paper, the underlying family functions are (1) Sinusoids: We train all models for 5-shot and 10-shot regression.
Mean square error (MSE) is used as evaluation metric.
In hierarchical clustering, we set the number of layers to be three with 4, 2, 1 clusters in each layer, respectively.y(x) = Asin(wx) + b, A ∼ U [0.1, 5.0], w ∼ U [0.8, 1.2] and b ∼ U [0, 2π]; (2) Line: y(x) = A l x + b l , A l ∼ U [−3.0, 3.0] and b l ∼ U [−3.0, 3.0]; (3) Cubic: y(x) = A c x 3 +b c x 2 +c c x+d c , A c ∼ U [−0.1, 0.1], b c ∼ U [−0.2, 0.2], c c ∼ U [−2.0, 2.0] and d c ∼ U [−3.0, 3.0]; (4) Quadratic: y(x) = A q x 2 +b q x+c q , A q ∼ U [−0.2, 0.2], b q ∼ U [−2.
The results of 5-shot and 10-shot regression are shown in Table 1.
HSML improves the performance of global models (e.g., MAML) and task specific models (e.g., MUMOMAML), indicating the effectiveness of task clustering.
Table 1.
Performance of MSE ± 95% confidence intervals on toy regression tasks, averaged over 4,000 tasks.
Both 5-shot and 10-shot results are reported.
respectively.
Qualitative results of MAML, MUMOMAML (best baseline), HSML are shown in different colors.As shown in the heatmap, sinusoids and linear with positive slope activate cluster 1 and 3, respectively.
Both quadratic 1 and 2 activate cluster 2, while quadratic 1 also activates cluster 1 and quadratic 2 also activates cluster 3.
From the qualitative results, we can see the shape of quadratic 2 is similar to that of linear with positive slope, while quadratic 1 has more apparent curvature.
Similar findings also verify in cubic cases.
The shape of cubic 2 is very similar to sinusoids, thus cluster 1 is activated.
Different from cubic 2, cubic 1 mainly activates cluster 4, whose shape is similar to linear with negative slope.
The results indicate that the main cluster criteria of HSML is the shapes of tasks despite the underlying family functions.
Furthermore, according to the qualitative results, HSML fits better than other baselines.
Results of Continual Adaptation To demonstrate the effectiveness of HSML under the continual learning scenario (HSML-D), we add more underlying functions during metatraining.
First, we generate tasks from sinusoids and linear, and quadratic and cubic functions are added after 15,000 and 30,000 training rounds, respectively.
For comparison, one baseline is HSML with 2 fixed clusters (HSML-S(2C)), and the other is HSML with 10 fixed clusters with much more representational capability (HSML-S(10C)).
The metatraining loss curve and the meta-testing performance (MSE) are shown in Figure 4.
We can see that HSML-D outperforms as expected.
Especially, HSML-D performs better than HSML-S(10C) which are prone to overfit and stuck at local optima at early stages.
Dataset and Experimental Settings In the few-shot classification problem, we construct a new benchmark which currently consists of four image classification , the base learner is a standard four-block convolutional architecture.
The number of layers in hierarchical clustering structure is set as 3 with 4, 2, 1 clusters in each layer.
Note that, in this section, for the tables without confidence interval, we provide the full results in supplementary material F.
In addition, we provide the comparison to MiniImagenet benchmark in supplementary material D. Note that, the sampled tasks from MiniImagenet do not have obvious heterogeneity and uncertainty.
Our approach achieves comparable results among gradient-based meta-learning methods.Results of Classification Performance For each dataset, we report the averaged accuracy over 1000 tasks of 5-way 1-shot/5-shot classification in Table 2.
HSML consistently outperforms the other baselines on each dataset, which demonstrates the power of modeling hierarchical clustering structure.
To verify the effectiveness of our proposed three components (i.e., task representation, hierarchical task clustering, knowledge adaptation), we also propose some variants of HSML.
The detailed description of these variants and their corresponding results can be found in the supplementary material H, which further enhance the contribution of each component.
In addition, we design another challenging leave-one-out experiment in this benchmark.
We use one dataset for meta-testing and the rest three for meta-training.
The results are reported in the supplementary material E and the HSML still achieves the best performance.
Task Clustering Analysis in Few-shot Classification Like the analysis of toy regression, we select four tasks in 5-way 1-shot classification and show their soft-assignment in Fig- ure 5 (more results are shown in the supplementary material J).
Darker color means higher probability.
Furthermore, in Figure 5, we show the learned hierarchical clustering of each task.
In each layer, the top activated clusters are shown in darker color and then the activation paths are generated.
From Figure 5, we can see different datasets mainly activate different clusters: bird→cluster 2, texture→cluster 4, aircraft→cluster 1, fungi→cluster 3.
It is also interesting to find the clustering across different tasks via the second largest activated cluster which further promote knowledge transfer between tasks.
The correlation may represent the similarity of shape (bird and aircraft), environment (fungi and bird), surface texture (texture and fungi).
Note that, aircraft is correlated to texture because the classification of aircraft variants is mainly based on their shape and texture.
The clustering can be further verified in the learned activated path.
In the second layer, the left node, which may represent the environment, is activated by cluster 2 (activated by bird) and 3 (activated by fungi).
The right node that reflects surface texture is activated by cluster 1 (activated by aircraft) and 4 (activated by texture).
In Figure 6, in addition, we randomly select 1000 tasks from each dataset, and show the t-SNE (Maaten & Hinton, 2008) visualization of the gated weight, i.e., θ 0i , in Eqn.
(9).
Compared with MUMO-MAML, the results indicate that our clustering structure are able to identify the tasks in different clusters.Results of Continual Adaptation In few-shot classification task, we conduct the experiments for continual adaptation in the 5-way 1-shot scenario.
Initially, the tasks are generated from bird and texture datasets.
Then, aircraft and fungi datasets are added after approximately meta-training round 15000 and 25000, respectively.
We show the average meta-training accuracy curve and meta-testing accuracy in Figure 7, where MUMOMAML, HSML-S(2C) and HSML- Figure 6.
t-SNE visualization of gated weight, i.e., θ0i, in Eqn.
(9) S(10C) are used as baselines.
As shown in Figure 7, HSML-D consistently achieves better performance.
Bird We further analyze the effect of cluster numbers.
The results are shown in Table 3.
The cluster numbers from bottom layer to top layer are saved in a tuple.
We can see that too few clusters may not enough to learn the task clustering characteristic (e.g., case (2,2,1)).
In this dataset, increasing layers (e.g., case (8,4,4,1)) achieves similar performance compared with case (4,2,1).
However, the former introduces more parameters.
In this paper, we introduce HSML to improve the metalearning effectiveness, which simultaneously customizing task knowledge and preserving knowledge generalization via hierarchical clustering structure.
Compared with several baselines, experiments demonstrated the effectiveness and interpretability of our algorithm in both toy regression and few-shot classification problems.Although our method is widely applicable, there are some limitations and interesting future directions.
(1) In this paper, we provide a simple version for continual learning, where tasks from new underlying groups are added continually.
However, to construct a more reliable lifelong learning system, it is will be necessary to consider more complex evolution relations between tasks (e.g., relationship forgetting); (2) Another interesting direction is to combining active learning with task relation learning for automatically exploring evolutionary task relations.
The work was supported in part by NSF awards #1652525, #1618448, and #1639150.
Zhenhui Li would also like to acHierarchically Structured Meta-learning knowledge the support from the Haile Family Early Career endowment.
The views and conclusions contained in this paper are those of the authors and should not be interpreted as representing any funding agencies.
