To support dynamic loading of applications on portable devices, one needs compositional reasoning techniques to ensure that newly loaded applications cannot break the overall security of a device.
In earlier work, we developed an algorithmic verification technique for control flow based safety properties of smart card applications, which allows global system properties to be inferred from the properties of the components.
Application of the technique requires knowledge of the names of all methods implemented by these components.
In a truly compositional setting, however , one only knows the public interface of the new applet and does not have access to any implementation details.
To compositionally verify interface properties of applets, one therefore has to combine our verification technique with an abstraction which preserves the interface behaviour and reduces the set of implemented methods to the set of public methods.
In this paper, we develop such an abstraction technique: we formally define the notion of interface behaviour, and propose an inlining transformation which we prove to preserve the interface properties expressible in our specification language.
In addition, we show on a concrete case study how the reduction in the number of methods resulting from the interface abstraction drastically improves the performance of the computationally most expensive step of the compositional verification technique.
With the emergence of small and mobile personal devices, such as smart cards and mobile phones, security has become a major concern.
Typically, such personal devices contain privacy-sensitive information, e.g. financial data, health care information or electronic identities.
Thus, for the widespread acceptance of the use of such devices, security of private information needs to be guaranteed.Ideally, a smart device user should have the flexibility to install new applications (usually called applets) by need.
To enable this, efficient verification techniques are needed for checking, prior to loading a new applet, whether it could break the security of the device.
In earlier work, we developed a control-flow based compositional verification technique supporting post-issuance loading of applets, and showed its feasibility by means of an industrial case study [7,12].
The technique is based on a program model suggested by Jensen and others (see [8]), and addresses safety properties of inter-procedural control flow.
These are either structural, i.e. properties of the control-flow graph, or behavioural, i.e. applet interaction properties describing safe sequences of method invocations.
In our set-up, global properties are structural or behavioural, while local properties are structural 1 .
Following our technique, compositional verification includes the following steps:1.
Specify a global property 񮽙 that should hold of the composed system.2.
For each applet 񮽙 񮽙 , specify a structural local property 񮽙 񮽙񮽙 .3.
Verify the correctness of the property decomposition (i.e., that the local properties guarantee the global one) Notice that the approach also allows a different scenario, where a new applet comes with its own local property, and step 3 is repeated (possibly on-device) to ensure that this local property is sufficient to ensure the security of the whole system.The maximal model construction of step 3 is the centrepiece of the technique; the remaining verification tasks are standard model checking problems for finite state machines (step 4) resp.
pushdown automata (step 3).
It is inspired by a similar construction due to Grumberg and Long (see [6]), forming the basis of an automatic modular verification technique.
Our construction takes a structural property and a set of method names, and returns an applet which satisfies the property and implements the set of methods, and which in addition is maximal, in the sense that it simulates, both structurally and behaviourally, all other such applets.
Furthermore, properties are preserved by simulation, and simulation is preserved by composition.
So, by composing the respective maximal models and by checking that their composition satisfies the global property, one can show that any applet implementations satisfying the respective structural properties and implementing the respective sets of methods, when put together will satisfy the given global property.
Notice, however, that the maximal model construction needs the names of all methods implemented by the given applets.
The correctness of a property decomposition can thus only be established for applets with a known interface.
This is a limitation of the proposed technique, since in a truly compositional setting one only knows the public interface of yet unavailable applets and one does not know their implementation details.
Component properties can hence only be specified at the public level.
Moreover, the lack of a mechanism for abstraction from private methods causes a blowup in the size of the formulae and hence of the maximal models used for the verifications, since these are parameterized on the interface considered.
For example, in the industrial case study we considered an electronic purse applet which implemented 367 methods, of which only 4 were public, all others were private.To be able to abstract from internal, private behaviour and apply our compositional verification method to interface properties of applets, one therefore needs an abstraction technique which (i) preserves the interface behaviour of applets, while (ii) reducing their set of methods to the set of public methods.
The latter requirement comes from the maximal model construction.
In this paper we propose an abstraction based on inlining of private methods.
We define the notion of interface behaviour, and show the abstraction to be sound with respect to public interface properties: every property that holds for the interface behaviour of the inlined applet (which coincides with its behaviour since it has no private behaviour) also holds for the interface behaviour of the original applet.
Moreover, in case the concrete implementation is last-call recursive (that is, recursive calls are not followed in the control flow graph by any other method calls 2 ), the abstraction technique is also complete with respect to public interface properties: if such a property does not hold of the inlined applet it does not hold of the origi-nal applet either.
Completeness, however, does not hold in general, since the abstraction transformation can introduce new observable behaviours.Using the abstraction techniques described in this paper, our improved scenario for secure post-issuance loading becomes:1.
Identify the set of public methods Å used for interaction between applets 񮽙 ½ 񮽙 Ò .2.
Specify a public global property 񮽙 over Å that should hold of the composed system.3.
For each applet 񮽙 񮽙 , specify a structural local property 񮽙 񮽙񮽙 which only mentions (public) methods in Å.
In addition, we show that specifying structural properties for an inlined applet allows some natural properties to be expressed which are not expressible as properties of the original applet.
For instance, reachability properties of the call graph can only be expressed as structural properties of the inlined applet, since there are no explicit inter-method call arcs in our program model.
The present paper shows that all verifications can be done efficiently.
In particular, Section 7 reconsiders the case study [7].
Related work The inlining procedure as described in this paper closely resembles standard inlining procedures used in compiler optimisations, see e.g. [9].
However, compiler optimisations must be behaviourally equivalent, while our verification technique only requires that all existing behaviours are preserved by inlining.
We believe that our approach for proving property preservation is applicable to such compiler optimisations as well.The approach of combining property preserving abstraction with verification is standard, see e.g. [3].
Usually, the goal of applying abstraction is to obtain a smaller or simply finite model for verification.
In our case, the primary purpose of applying the inlining transformation is different: to reduce the set of methods to the set of public methods while preserving the interface behaviour.Typically, the behaviour of programs with recursion is modeled as pushdown systems, as e.g. in [5].
The notion of interface behaviour presented in the present paper also defines a pushdown system, and hence inlining is generally not needed for the verification of behavioural properties.
In our approach, the need for inlining comes from the requirements of the maximal model construction.Finally, we should mention the temporal logic of calls and returns CARET [1].
This logic allows to specify properties in terms of method calls and returns.
A special verification strategy is defined, that is able to jump over internal computations.
Our approach is in a way the opposite: we compute an abstract model, and use standard verification techniques to verify properties -expressed in a standard temporal logic -on this abstract model.
The remainder of this paper is organised as follows.
Sections 2 and 3 introduce the necessary background, and in particular the logic and program model that we use.
Section 4 defines the behaviour of an applet w.r.t. a set of public methods.
Next, Section 5 presents the inlining algorithm that forms the basis of our abstraction technique, and proves that it is property preserving.
Section 6 describes formally how the abstraction techniques are used for compositional reasoning.
Finally, Section 7 revisits the industrial case study, and shows the practical impact of the abstraction techniques, while Section 8 draws more general conclusions on the applicability of our method.
First, we briefly recall some definitions and results that form the basis for our compositional verification method.
For a full overview, the reader is referred to [11,12].
We use a subset of the modal 񮽙-calculus [10] as our specification language.
We exploit that formulae in this subset can be characterised by simulation, and vice versa, therefore we call this logic simulation logic.
Throughout, we fix a set of labels Ä, a set of atomic propositions 񮽙, and a set of propositional variables Î .
[11].
Finally, a standard transformation from weak to strong formulae exists [13].
This transformation, which we denote AE, can be characterised as follows.Proposition 2.5.
Ë 񮽙 񮽙 Û 񮽙 iff Ë 񮽙 񮽙 AE´񮽙µ.
Our program model, inspired by [8], is control-flow based and thus over-approximates actual program behaviour.
It defines two different views on applets: a structural and a behavioural view.
Both views are instantiations of the general notions of model and specification, allowing the results presented above to be instantiated at both levels.
Notice in particular that these instantiations yield a structural and a behavioural version of simulation and simulation logic.
Again, we refer to [11,12] for more detail.Applet Structure Since we abstract away from all data, applet structure is defined as a collection of call graphs for the methods the applet implements.
Further, since smart cards are our primary application domain, we only consider sequential methods 3 .
Let Å񮽙ØØ be a countably infinite set of method names.
A method specification is an instance of the general notion of specification.
Next we define the notion of applet interface.
For each applet, we distinguish an implementation interface, defining all methods provided and required by the applet, and a public interface, defining all methods that are visible to and used from other applets.
where ¯ denotes the empty sequence over Î .
Ñ ¾ Á · Ú 񮽙 Ñ Ú ¼ Ú 񮽙 񮽙 񮽙Ö´Ú 񮽙Ö´Ú µ 񮽙´Ú 񮽙´Ú ¼ µ (call) Ñ ½ Ñ ¾ ¾ Á · Ú ½ Ñ¾ Ñ½ Ú ¼ ½ Ú ½ 񮽙 񮽙 񮽙Ö Ú ¾ 񮽙 񮽙 Ñ ¾ Ú ¾ ¾ 񮽙´Ú 񮽙´Ú ½ µ Ñ½ ÐÐ Ñ¾´Ú Ñ¾´Ú ¾ Ú ¼ ½ ¡ 񮽙µ (return) Ñ ½ Ñ ¾ ¾ Á · Ú ¾ 񮽙 񮽙 Ñ ¾ 񮽙 Ö Ú ½ 񮽙 񮽙 Ñ ½ ´Ú ¾ Ú ½ ¡ 񮽙µ Ñ¾ ÖÖØ Ñ½´Ú Ñ½´Ú ½ µNote that applet behaviour defines a pushdown automaton.
We exploit this by using a model checker for PDAs to verify behavioural properties (see, e.g., [2] for a survey of verification techniques for infinite process structures).
Also on the behavioural level, we instantiate the definitions of simulation 񮽙 񮽙 and satisfaction 񮽙 񮽙 񮽙 .
Any two applets that are related by structural simulation, are also related by behavioural simulation (Theorem 3.9 in [12]), but the converse is not true (since behavioural simulation only requires reachable states to be related The next section defines an inlining algorithm that transforms a concrete applet implementation into an applet that contains only method calls to public methods.
We want to prove that for any closed applet, every behaviour of the concrete applet is also a behaviour of the inlined applet.
However, for this to hold, we have to abstract the concrete behaviour to the level of public methods.
Therefore, we intro-duce the notion of interface behaviour of an applet w.r.t. a set of public methods Å.
First Next we define an inlining algorithm « Å that, given a set of public methods Å, transforms an applet graph by inlining all private calls.
Recursive calls to private methods are not inlined, but create loops in the resulting graph.
We prove that the interface behaviour of the original applet 񮽙 is simulated by the behaviour of the inlined applet « Å ´񮽙µ, thus (by Theorem 2.3) all properties 񮽙 of the latter, i.e. « Å ´񮽙µ 񮽙 񮽙 񮽙 񮽙, are also properties of the former, i.e. 񮽙 񮽙 񮽙 Å 񮽙 񮽙.
Moreover, we prove that if the applet is last-call recursive, the two behaviours are weak simulation equivalent -thus both applets satisfy exactly the same observable properties at the public interface level.Notice that the inlining algorithm does not require the applet to be closed and treats all external methods as public.The Inlining Algorithm.
The algorithm is applied to each public method and (recursively) inlines all calls to private methods.
Intuitively, constructing the transformed (or inlined) graph for a public method Ñ corresponds to executing the interface behaviour of Ñ, where method calls to public methods are skipped and recursion is replaced by iteration.
The nodes of the inlined applet can thus be seen as states of the (interface) behaviour of the original applet, modulo an abstraction function which replaces recursion by iteration.During the inlining, each edge that represents internal transfer or a call to a public method is left unchanged.
Each edge that represents a call to a private method is replaced by two internal edges: one from the calling point to the entry point of the method; and another from the return point of the method to the destination of the calling edge 4 .
The private method is inlined recursively.
Each node is replaced by a sequence denoting the fragment of the call stack from the activation of the public method up to the current node (except for the case of a recursive call).
Since we keep track of the pending call stack, we can recognise recursive calls to private methods.
In that case, the appropriate initial fragment of the call stack is used to decide the exact new edges.For Example Before discussing properties of the inlining algorithm, we first show a simple example.
Suppose we have an applet as depicted in the left-hand column of Figure 1.
Inlining this applet with the public method set 񮽙Ñ񮽙 results in the applet depicted in the right-hand column of Figure 1.
Notice that all internal and public edges are preserved, while private method calls are replaced by two edges: to the entry and from the return point of the called method, respectively.Properties We state several useful properties of the inlining algorithm.
First of all, the inlining algorithm computes an applet having as interface the public interface of the original applet.
Notice that in general we do not have behavioural simulation equivalence.
The inlining construction introduces transfer edges for calls to and returns from private methods.
Because of the latter, the behaviour of the inlined applet can contain a silent transition corresponding to a return from a private method (in the original applet), even when the inlined applet has not yet followed a silent transition corresponding to a call to this private method (in the original applet).
The inlining thus introduces new behaviours.
Notice however, that these new behaviours are only observable in applets which are not last-call recursive.A set of methods is recursive if every method in the set contains a (reachable) call edge to some method in the set.
A call edge is recursive if the calling and the called methods belong to some minimal (and thus, mutually) recursive method set.
A program is called last-call recursive if from any destination node of any recursive call edge, only transfer edges are reachable.
In addition, we shall assume that a return node is reachable from every such destination node.For last-call recursive applets, we prove the reverse correspondence for observable behaviours.
Using the results obtained above, we can state several verification principles that can be used to prove properties of applet interface behaviour.
We first present two abstraction principles, and then show how these can be combined with our compositional verification principle from [12] to support the improved scenario for secure post-issuance loading of applets on smart devices presented in the Introduction.
with interface Á 񮽙 that simulates all other applets with this interface satisfying property 񮽙.
Observe that the maximal model construction can only be applied if the complete interface Á 񮽙 of applet 񮽙 is known.
The correctness of a property decomposition can thus only be established for applets with a known interface, and knowledge of the public interface only is hence not sufficient.
To allow compositional verification of public interface properties, we combine the above rule with the abstraction principle (abstract) to obtain the following abstract compositional verification principle (abstract-compos): Proof.
Follows from the abstraction and the compositional verification principle, plus Propositions 5.3 and 5.4.
« ÅThe improved scenario for secure post-issuance loading of applets presented in the Introduction is based on the verification principle embodied by this rule.
Notice that the interface of required methods that is used for the maximal model construction uses Á 񮽙 Á · 񮽙 .
Typically, this will correspond to the public interface of 񮽙, and for each implementation of 񮽙 it should be checked whether it respects this public interface of 񮽙.
Finally, similarly as for the abstraction principle, we can state a faithful compositional verification principle (weakabstract-compos) for properties of the observable interface behaviour of applets which are last-call recursive.
As explained above, we are interested in studying the abstract behaviour of applets, because in a truly compositional setting nothing is known about the different components, except (some properties of) their interface behaviour.
For a newly downloaded applet we only require that it implements the shareable interface; we do not put any restrictions on how it implements this shareable interface, except that the implementation should respect the global security requirements.
Studying compositional verification at the abstract level allows to specify the local and global properties at the abstract level, without taking any implementation Å񮽙Ü´񮽙 Ä µ Å񮽙Ü´񮽙 Ä µ in [7] Table 2.
Size and timing for maximal model construction details into account.
Moreover, when considering shareable interfaces only, the maximal models that we compute to verify the decomposition of the global property into the local ones are significantly reduced in size, making the verification much more efficient.
In order to show the impact of abstraction and inlining on a realistic case study, this section revisits the electronic purse case study [7], specifying an illicit interaction between applets Purse and Loyalty.
In the original case study we computed maximal applets using the implementation interfaces (containing about 300 methods per applet).
This was time-consuming (25 mins.
to 13 hrs.)
and moreover, the size of the outcome was so large that verification was unfeasible.
However, the public interfaces (i.e. the shareable interfaces) of these applets both provide only 4 methods.
If we refer to the shareable interfaces as ËÁ È (methods provided by Purse for Purse and Loyalty) and ËÁ Ä (Loyalty for Purse and Loyalty), respectively, we can identify the following public interfaces: ´ËÁ È ËÁ È 񮽙 ËÁ Ä µ for Purse, and´ËÁ and´ËÁ Ä ËÁ È 񮽙 ËÁ Ä µ for Loyalty.We use the tool set described in [7], plus an implementation of the inlining algorithm in Ocaml to redo the case study at the abstract level.
For convenience we repeat the global and local specifications, but this time specified at the interface level; for further motivations we refer to [7].
The global specification 񮽙 says that a call to Loyalty.logFull does not trigger any calls to any other loyalty, including indirect communications, via the Purse.
These specifications refer to the inlined versions of the applets.
To exclude external calls from a method of an inlined applet is equivalent to excluding transitive external calls made from the public method with the same name in the original applet.
Notice that such a property is not directly expressible in our logic (cf. [7]).
To redo the case study at the abstract level, we take the following steps (where È and Ä denote implementations of [4].
Table 2 compares the outcome and timing for the maximal model construction with the corresponding step in the original case study.
Checking the correctness of the decomposition took approximately 5 seconds.
The inlining algorithm took 0.6 seconds on both Loyalty and Purse.
Even though theoretically the worst-case blowup in the number of nodes of the inlined applets, determined by the number of normal M-frames, is exponential in the number of private methods, in practice this is not likely to happen.
In our case, we even observed a reduction in size of the graphs, due to the fact that the inlining focuses on interaction with other applets, and thus any code that is executed only when the applet is selected and receives commands from the runtime environment, is left out by the inlining.
Verifying the local properties of the inlined applets of Loyalty and Purse took approximately 15 and 10 seconds, respectively.
In this paper, we propose a notion of interface behaviour of program components which abstracts from the internal, private behaviour.
Based on this notion, behavioural properties can be specified at the public interface level without requiring knowledge about the implementation.
Focusing on interface behaviour is significant from a methodological, software engineering point of view.
In particular, it supports compositional verification by allowing global, programwide properties to be inferred from the interface properties of the not yet available components.We propose a program transformation based on inlining of private methods, and show that it preserves the interface behaviour.
The inlining transformation reduces the number of methods of a program to the number of its public methods.
This is a necessary condition for applying the maximal model construction from [7,12] in a truly compositional manner, and gives rise to an improved scenario for secure post-issuance loading of applets on smart devices.
The reduction in the number of methods resulting from the interface abstraction drastically improves the performance of the maximal model construction which is of exponential worst-case complexity.
Finally, we observe that some natural structural properties are only directly expressible as properties of the inlined applet.
This concludes the proof.
We would like to thank Gennady Chugunov for helping us redoing the verifications, and Christoph Sprenger for numerous suggestions for improvement on an earlier draft.
