A core-based group-shared multicast tree is a shortest path tree rooted at core node that distributes packets to and from all group members.
Traditionally, the bandwidth cost consumed by transmitting a packet via the tree is evaluated by the total weights of all the edges.
And, the cost is minimized by constructing the multicast tree that has minimum total weights of edges to span all group members.
However, when the local broadcasting operation is used to multicast a packet, we found that the cost is supposed to be evaluated by the total weights of all senders that include the core and all non-leaves.
Since the multicast tree with the number of nodes greater than or equal to three has minimum cost only when the core is not a leaf, it leads us to find the multicast tree with the minimum number of non-leaves when each sender node has a unit weight.
However, no polynomial time approximation scheme can be found for the minimum non-leaf multicast tree problem unless P NP = since the problem is not only NP-hard but also MAX-SNP hard.
Thus, a heuristic is proposed to dynamically construct and adjust the multicast tree in a mobile ad hoc network.
Experimental results show that our multicast tree has smaller number of non-leaves than others in the geometrically distributed network model.
A mobile ad hoc network (MANET) has mobile nodes that are connected dynamically in arbitrary manner.
These nodes function as routers that discover and maintain routes to others in the network.
When two nodes are within each transmission range, they can exchange packets each other.
Otherwise, communications between non-neighbor nodes need multi-hop protocols [9].
Multicast communication, which delivers a data stream from a single source to multiple destinations by routing protocols, is widely used in information sharing applications, such as conferences, emergency services, law enforcement, etc.
In this paper, we undertake the development of multicast protocols in MANETs.The design of multicast protocols in MANETs has received considerable attention, such as Ad hoc Multicast Routing Protocol (AMRoute) [1], Core-Assisted Mesh Protocol (CAMP) [4], Differential Destination Multicast (DDM) [8], and Ad hoc Multicast Routing Protocol Utilizing Increasing ID Numbers (AMRIS) [10].
The AMRIS constructs a group-shared multicast tree and the CAMP creates a group-shared mesh.
The AMRoute employs the mesh links to construct the multicast tree, combining advantages of tree-based and meshed-based approaches.
The DDM is proposed in an attempt that the effect of increasing overhead in maintaining multicast tree/mesh with frequently fluctuant environment is minimized.Since core-based group-shared tree architecture has less forwarding overhead than mesh-based architecture, it is used to be the routing topology in many multicast protocols, such as Gupta's core selection and migration protocol [6] and Lightweight Adaptive Multicast (LAM) [7].
A core-based group-shared tree is rooted at core node that is responsible for distributing packets to and from all group members.
Since MANETs have limited bandwidth, the bandwidth cost consumed for transmitting a packet needs to be conserved.
And, two issues are addressed for this purpose: the selection of the core and the construction of the multicast tree.
On the first issue, Gupta designs an adaptive core selection and migration method in MANETs.
On the second one, since the cost consumed by transmitting a packet via the multicast tree is evaluated by the total weights of all the edges traditionally, it is minimized by constructing a minimum edge weight multicast tree.
In [6], each edge is assumed to have a unit weight and a heuristic of constructing minimum edge weight multicast tree is proposed there.When the local broadcasting operation is used to multicast a packet, we found that the cost is supposed to be evaluated by the total weights of all senders that include the core and all non-leaves.
Since the multicast tree with the number of nodes greater than or equal to three has minimum cost only when the core is not a leaf, it leads us to find the multicast tree with the minimum number of non-leaves when each sender node has a unit weight.
However, the minimum non-leaf multicast tree problem is not only NP-hard but also MAX-SNP hard.
It implies no polynomial time approximation scheme can be found for the problem unless NP P = .
In this paper, a heuristic of constructing the minimum non-leaf multicast tree in a mobile ad hoc network is proposed.
The rest of this paper is organized as follows.
In the next section, some notations and theorems are introduced.
It then goes to describe how to reduce the cost of the multicast tree in the proposed heuristic in Section 3.
Hereafter, unless specified otherwise, the cost of the multicast tree refers to the bandwidth consumption of multicasting a packet via this tree and is evaluated by the number of non-leaves in this tree.
Performance evaluation by computer simulation is given in Section 4.
Finally, Section 5 concludes this paper.
( ) { , } T W N A D E = and ( ) { , } T BN A B C = by Definition 1.
Here, necessary notations are first introduced.
When all hosts in a MANET have the same transmission range, the MANET can be represented as an undirected graph ( , ) N v are summarized in Definition 1.
G G G V E ,Take Figure 1, for example, where( ) { , } T W N A D E = and ( ) { , } T B N A B C = .
It is noted that node ( ) T B F N A ∉ since ( , ) T A F E ∉ .
It is also noted that node ( ) T W E N A ∈ since ( , ) G A E E ∈ .
Definition 1.
Let ( , ) G G G V Ebe an undirected graph, and ( , )T T T V E be a multicast tree in G .
Then, ( ) { | ,( , ) } T W T G N v u u W u v E = ∈ ∈ and | { ) ( u v N T B = } ) , ( , T T E v u B u ∈ ∈ . 񮽙
In the following, we prove two theorems: Theorem 1 characterizes the properties of the multicast tree and Theorem 2 shows that a fast algorithm for the minimum non-leaf multicast tree problem is unlikely to exist.
Theorem 1.
Let the cost of a multicast tree be evaluated by the total weights of all senders that include the core and all non-leaves.
If the number of nodes in the multicast tree is greater than or equal to three, the multicast tree has the minimum cost only when the core is not a leaf.
Proof.
Assume that the multicast tree 1 , where k denotes the weight of node 1 T core .
We have a contradiction, and we must therefore conclude that the multicast tree has the minimum cost only when the core is not a leaf. 񮽙
Theorem 2.
The minimum non-leaf multicast tree problem is not only NP-hard but also MAX-SNP hard.
That is, the minimum non-leaf multicast tree problem has no polynomial time approximation scheme unless P NP = .
Proof.
It suffices to show the minimum non-leaf multicast tree problem is MAX-SNP hard.
Assume that the minimum non-leaf multicast tree problem is not MAX-SNP hard.
Then, the problem of finding a minimum non-leaf spanning tree that spans all nodes is not MAX-SNP hard also since it is a subproblem of the minimum non-leaf multicast tree problem.
It implies the maximum leaf spanning tree problem is not MAX-SNP hard also since the minimum non-leaf spanning tree problem is equal to the maximum leaf spanning tree problem.
However, the maximum leaf spanning tree problem is proven to be not only NP-complete [5] but also MAX SNP-complete [3].
It is a contradiction, which tells us that our assumption must be false.
In this section, the heuristic is proposed for the minimum non-leaf multicast tree problem.
Our method is to change the topology of the multicast tree, which is initially a shortest path tree rooted at the core, such that the cost can be reduced.
Consider a multicast tree in which the number of nodes is greater than or equal to three.
If one node has many non-leaf neighbors, the cost may be reduced by connecting this node to these neighbors.
Take Figure 2, for example.
Figure 2(b) shows the multicast tree 2 T after a reduction is applied to node A in the multicast tree 1 T shown in Figure 2( 1 T , and 1 in 2 T .
The reduction process can be simultaneously applied to many nodes to locally minimize the cost.
When one non-leaf node, say v , becomes a leaf due to the reduction on one of its neighbor, it connects with this neighbor by an edge, say e , in the multicast tree.
After, there may be another neighbor of node v , say u , which executes a reduction.
However, it is unnecessary that node v connects to node u and deletes edge e when a reduction is applied to node u .
Take Figure 3, for example.
In Figure 3 T .
To avoid an unnecessary reduction, we classify all nodes in the multicast tree into black nodes and white nodes.
Initially, each node is a white node and becomes a black node when one reduction is applied to it or one of its neighbors.
When one node executes the reduction, it connects to the neighbors which are white nodes only.
Take Figure 4, for example.
In Figure 4(a), all nodes in the multicast tree 1 T are white nodes.
When a reduction is applied to node B in 1 T , nodes B , C , E , and F become black ones in the multicast tree 3 T as shown in Figure 4(c).
Later, when a reduction is applied to node A in 3 T , nodes A , D , G and H become black ones in the multicast tree 4 T as shown in Figure 4(d).
It is noted that node A does not connect to node C when a reduction is applied to node A in 3 T , since node C is a black one in 3 T before the reduction on node A .
The cost of the multicast tree depends on which node executes a reduction.
In Figure 4, D E in the reduction process.
However, the reduction is unnecessary since leaf node A becomes a non-leaf and no cost is reduced.
Besides, consider node A in Figure 5( N A .
Based on the same argument just described, at most three non-leaves, say E , H and I , may become leaves due to the reduction on node A .
Since leaf node A becomes a non-leaf, the number of non-leaves is reduced by at most two when a reduction is applied to node A .
Thus, .
A profit is set to 2.
Clearly, when node A executes a reduction, the number of non-leaves is reduced by at most | ( profit v. to 2 | ) ( | | ) ( | − + v N v N T T B W if + | ) ( | v N T W 2 | ) ( | > v N T B and 2 | ) ( | < v N T B.
In addition, consider node A in Figure 5( .
Since node A is a non-leaf between two black nodes, the three white nodes can be used to reduce the cost by the reduction even though it reduces at most two non-leaves in this case.
Thus, .
A profit is set to 3.
Clearly, when node A executes a reduction, the number of non-leaves is reduced by at most | ( )|T W N A if | ( )| | ( )| 2 T T W B N A N A + > and | ) ( | A N T B 2 ≥ .
It then goes to set profit v. to | ) ( | v N T W if + | ) ( | v N T W 2 | ) ( | > v N T B and 2 | ) ( | ≥ v N T B .
The evaluation of profit v.is summarized in Definition 2.
Definition 2.
profit v. is evaluated by (a) .
0 v profit = , if 2 | ) ( | | ) ( | ≤ + v N v N T T B W , (b) .
| ( ) | | ( ) | 2 T T W B v profit N v N v = + − , if 2 | ) ( | | ) ( | > + v N v N T T B W and 2 | ) ( | < v N T B , (c) .
| ( )| T W v profit N v = ,( ) { } T W u N v v ∈ U . 񮽙
After a period of time, most nodes in the multicast tree are set to be black ones.
And, the cost of the multicast tree can not be reduced further even when the network topology is changed.
To avoid this situation, the core is responsible for periodically flushing the multicast tree.
When a node receives a flush message from the core, it is reset to a white node and a non-determinant node.
The reduction method, which is executed by each node in the multicast tree, is described in Figure 6.
In the reduction method, each node evaluates its profit value, elects its candidate, and decides whether it is a determinant node at any time.
Figure 6.
The reduction method.
(%% !
$!!
#$ v '''(( ($$ +(#$##$#(&"##(( #$#(!!
,, (%%%%%% #$ v ''(&"##((#$(##(('''((($$!
#$ (%% !'
#$ v '' +( #$ # '' (&"##(( #$ ) (v N u T ∈ (# (%%%%%%% #$ v '''((($$!
#$ (%%%%%%% T E v u ∉ ) , ( (## ) , ( v u ''#'&(#($$ T E # ) , ( w v 񮽙񮽙 u w ≠ '' &"$* &$"" T E +& ) , ( w v ''##(%($(")!
('(((&(+###$'' v 񮽙 # u 񮽙񮽙 (%%%%%% #$ v &*''!)'"''
&$""$&(##$($$(%%% (%%%%%% !'
$($$(%%%%%% Step 1, the current node v is reset to a white node and a non-determinant node.
When node v joins the multicast tree or receives the flush message from the core, it executes Step 1.
Then, if node v is a determinant node, it is set to a black one and the determinant message is sent to each node in ( ) T W N v as described in Step 2.1.
And, if node v is a white node and receives a determinant message from node) (v N u T ∈, then it is set to a black node as described in Step 2.2.1.
Then, if ( , )T u v E ∉ , edge ( , )u v is inserted into the edge set of the multicast tree and edge ( , ) v w is removed from the edge set of the multicast tree as described in Step Here, cost comparison among the multicast tree constructed by the reduction method and other well-known core-based group-shared multicast trees is made by computer simulation in the static network, where the cost is evaluated by the number of non-leaves.
In the simulation, ad hoc network graph model [6] is used to generate the network, and the group members are randomly selected from all nodes in the network.In the static network, graph-center tree (GCT), multicast-center tree (MCT), and random-member tree (RMT) [2] are three of the most famous core-based multicast trees, which are the shortest path trees rooted at the center of graph, the center of multicast group, and any group member, respectively.
To evaluate the performance of the proposed heuristic, we construct the multicast tree, called reduced random-member tree (RRMT) hereafter, by applying the reduction method for random-member tree, and evaluate the ratios of the cost of GCT to the cost of RRMT, the cost of MCT to the cost of RRMT, and the cost of RMT to the cost of RRMT as shown in Figure 7.
In Figure 7(a) and Figure 7(b), there are 50 and 150 nodes in the networks, respectively.
For each experiment data, we have experimented with 50 various topologies or multicast groups.
It is observed that GCT, MCT, and RMT cost more than RRMT in all cases since the ratio of the cost of each of them to RRMT is between 1.09 and 1.90.
The ratio of the cost of each of them to RRMT is between 1.25 and 1.84 in 90% cases.
In addition, we find that the cost of RRMT and the cost of each of GCT, MCT, and RMT differ in an increasing order of the number of group members.
When the number of group members increases, we think the node in the multicast tree has much chance of increasing the number of the neighbors, and thus there is much probability that the reduction method transfers more non-leaves into leaves.
In this paper, we approach the problem of dynamically constructing a core-based group-shared multicast tree in MANETs.
We attempt to reduce the bandwidth cost of multicasting a packet via the tree by minimizing the number of non-leaves of the multicast tree.
However, it is proven that the minimum non-leaf multicast tree problem cannot be solved by a polynomial time approximation scheme unless P NP = .
Thus, a distributed heuristic which dynamically constructs and adjusts the multicast tree is proposed here.
Instead of finding a new multicast tree, we transfer several non-leaves into leaves in an existed multicast tree by a reduction method.
This work is supported by the National Science Council of the Republic of China under Grant #NSC93-2213-E-007-103 and #NSC93-2213-E-007-071.
