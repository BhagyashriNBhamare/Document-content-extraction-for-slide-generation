Knowledge of the security zone classification of devices in an enterprise information technology (IT) infrastructure is essential in many enterprise IT transformation and optimization activities.
We describe a systematic and semi-automated approach for discovering the security zone classification of devices in an enterprise network.
For reduced interference with normal operation of the IT infrastructure, our approach is structured in stages, each consisting of two phases: one phase involves collecting information about actually allowed network flows, followed by an analysis phase.
As part of our approach, we describe an elimination-based inference algorithm.
We also present an alternative to the algorithm based on the Constraint Satisfaction Problem, and explore trade-offs between the two.
Using a case study, we demonstrate the validity of our approach.
The network infrastructure of a modern enterprise is a complex system partitioned by enterprise firewalls into several logical network areas, called security zones.
Informally, a security zone consists of one or more subnets.
Each security zone belongs to a zone classification (or simply, classification), and consists of devices 1 subject to the same enterprise-level security requirements.
The classifications in an enterprise network along with security requirements for systems and services within each classification, is usually documented in the security policy of the enterprise.
The policy defines permitted flows between classifications.Most enterprises have at least three classifications: intranet, extranet, and opennet ( Figure 1).
The intranet is a trusted network environment for hosting systems, services, and data internal to the enterprise.
The opennet is an untrusted network environment (e.g., the Internet) that includes all systems external to the enterprise.
Security zones belonging to the extranet classification are commonly referred to as demilitarized zones (DMZ), and serve as a buffer between zones belonging to the intranet and extranet classifications.
Large enterprises often have more than three classifications.
There may be special extranets to host services used jointly by partners, vendors, and suppliers.
Zones hosting test and development services typically have classifications different from those hosting production services.
Often, the intranet itself may consist of further classifications, depending on the sensitivity of the data resident and the business value supported by the constituent systems.While most enterprises only have a small number of classifications, there may be a large number of security zones for each classification.
The reason is that, despite what the name may suggest, security zones are not created solely for security purposes.
Organizational, geographical, functional, and administrative factors also drive the creation of security zones.
Even if they have the same classification, geographically distinct devices would have to be placed in different security zones.
Within a given location, different organizational divisions may create and govern their own security zones.
Within a given division, different business applications may be placed within their own zones.
As a result, many enterprises have a sprawl of security zones.
It is not uncommon for large enterprises to have hundreds or even thousands of security zones spanning multiple locations.Knowledge of the zone classification of devices is a requirement in many enterprise IT transformation and optimization activities, such as desktop migration, cloud migration, firewall migration, and enterprise security refresh.
The reason is that security zone classification provides important connectivity and isolation criteria that need to be upheld during and after such activities.
For example, in server consolidation and virtualization activities, servers have to be migrated from a source environment to a target environment, and communication controls between servers belonging to different zones have to be reproduced in the target environment.
Security zone classification of devices is also required for compliance and audit purposes, e.g., to assess whether end-to-end From our experience in several client engagements, we have observed that many enterprises lack an inventory that details the zone classification of devices.
Typically, when needed, such information is obtained by contacting system and network administrators.
This manual approach often yields unreliable, outdated, and incomplete information.
If a system or network administrator had moved on to a different company, no one in the enterprise may have security zone classification information for devices previously under his/her responsibility.
Thus, there is a clear need for automated approaches to obtaining security zone information.
The need is even greater when an external service provider or consulting organization which has no prior knowledge of or privileged access to the enterprise environment is called upon to perform enterprise IT transformation or optimization activities.There are many network administration tools such as Nmap [6], traceroute, netstat, and SNMP-based approaches that can collect and analyze information about network configuration of devices in the infrastructure.
Advanced tools can estimate the run-time network configuration of applications by analyzing traffic information provided by network services.
There are also many academic and commercial firewall configuration analysis tools (e.g., [1,2,8]).
However, these tools alone will not reveal what security zone classification (e.g., service provider extranet, customer extranet, or confidential intranet) a firewall interface or the devices placed behind that interface belong to.In this paper, we describe a systematic and semiautomated approach for discovering security zone information in enterprise networks.
Our approach is based on the observation that for reliably discovering security zone classification, information about network configuration alone is not sufficient.
Since zones are created with enterprise security policies in mind, that information has to be compared against what is expected from a policy point of view.
Our approach proceeds in stages, with each stage consisting of an information collection phase and an analysis phase.
The collection phase obtains information about actually allowed network flows.
In the analysis phase, an elimination-based inference algorithm may be executed.
The algorithm eliminates classifications from an initial assignment of all possible classifications by comparing actually allowed network flows with flows permitted by enterprise security policy.
We provide an alternative to the algorithm based on the Constraint Satisfaction Problem (CSP) [7].
We explore the trade-offs between the inference algorithm and the CSPbased solution, and outline how they can be used in concert for improved efficiency.
We describe a case study to demonstrate the utility and validity of our approach.
We distinguish between network flows actually allowed and those permitted by policy.
There are several known methods for collecting information about actually allowed network flows.
Examples include (i) configuration analysis of firewalls, hosts, and applications [8], (ii) analysis of network statistics and flow logs [3], (iii) active probes [6], and (iv) packet analysis [9].
Different collection methods involve varying interference with the normal network operation.
Our approach sequences them in such a way that lower interference methods are executed before higher interference ones.
The collection phases are interleaved with analysis phases whose results are used to reduce the scope of deployment of subsequent higher-interference collection methods.
We call this strategy incremental discovery.We now illustrate incremental discovery, based on two sample collection methods: netstat and connectivity probing.
The netstat command, supported on most devices and OS platforms, is one way of collecting network configuration and run-time (network-related) application behavior.
Execution of the command does not generate any external traffic.
End-to-end connectivity probing can determine whether packets are able to reach a peer device through any intermediate filters.
It can also identify open ports at the peer.
Common applications and tools such as telnet, ftp, nslookup, and Nmap can be used for probing.
Since the probe traffic may raise security concerns, proper coordination with administrators and users may be necessary when using this method.In incremental discovery, netstat-based discovery is performed prior to connectivity probing.
Flows already observed through netstat-based discovery can be skipped during connectivity probing.
More importantly, analysis of netstat command output from various devices helps identify which devices belong to the same subnet.
That result coupled with the observation that all devices in the same subnet have the same classification can be used to reduce the scope of probing; instead of probing device-to-device connectivity, probing subnetto-subnet connectivity may suffice to determine the filters placed at the intermediate enterprise firewalls.Each analysis phase may involve executing an inference algorithm which derives the security zone information by comparing enterprise security policy with information about actually allowed network flows.
We describe our system model in Section 2.1, and present the inference algorithm in Section 2.2.
In Section 2.3, we describe an alternative formulation of the zone classification problem based on the Constraint Satisfaction Problem (CSP).
We illustrate how these two methods can be used in concert for improved efficiency.
Network area is an intermediate construct we use in the process of deriving security zones in a network environment and identifying their classifications.
A network area may consist of a device or a grouping of logically adjacent devices (such as subnet).
A security zone is composed of one or more subnets.We use a unified framework based on the notion of feasibility sets [5] for representing both actually allowed network flows and those permitted by enterprise policy.
A feasibility set F ai−>aj = {x|f ij (x)} is used to denote the traffic flows from one network area a i to another a j .
Guttman and Herzog [5] define it as the set of all abstract packets that survive all of the filters traversed along the path between a i and a j .
Here, x is a packet and the predicate f ij (x) is defined over the fields of x.
The predicate may include regular expression matches, denoted by ∼ =.
A field y of packet x is denoted by x.y, a sub-field z of y is denoted by x.y.z, and so on.
Typical packet fields that are considered include source IP address, source port, destination IP address, destination port, and protocol type.
If F ai−>aj = true, then all flows are allowed from a i to a j .
If F ai−>aj = false, then no flow is allowed from a i to a j .
Example 1.
Suppose that a firewall with its inside interface on network area a j is configured to allow all traffic from the 192.168.1.0/8 network, and only SSH and HTTPS traffic from all other networks.
In this case, the feasibility set for traffic reaching a j from any network area a i , where i = j, is expressed as:F ai−>aj = {x | (x.IP.SourceAddr ∼ = 192.168.1.
[0.
.255]) ∨ (x.IP.Protocol = 6 ∧ x.TCP.DstPort ∈ {22,443})}.
High-level security policies are usually documented in natural language or in a format intuitive to a human operator.
The policy guides network, security, and system administrators to construct and maintain the infrastructure that complies with the security goal.
Manual effort is needed to transform these policies into feasibility sets.
However, since enterprise security policies are relatively static, the translation is typically a one-time effort.Example 2.
Consider an enterprise-level policy that permits only strongly authenticated traffic from the DMZ to the intranet.
Strong authentication exists when a system or user can prove knowledge of a secret (e.g., password, private key) without it being observed or revealed.A lower-level policy may further enumerate the allowed set of strongly authenticated protocols as: (i) TCP traffic (i.e., IP Protocol 6) to ports 22 (SSH), 25 (SMTP), 389 (LDAP), and 443 (HTTPS), (ii) UDP traffic (i.e., IP Protocol 17) to port 500 (IPSec -Internet Key Exchange), and (ii) IPSec traffic (i.e., IP Protocols 50 and 51).
The feasibility set for the policy can be expressed as:F ai−>aj = {x | (x.IP.Protocol = 6 ∧ x.TCP.DstPort ∈ {22,25,389,443}) ∨ (x.IP.Protocol = 17 ∧ x.TCP.DstPort ∈ {500}) ∨ (x.IP.Protocol ∈ {50,51}) }.
At a high-level, the inference algorithm works as follows: Initially, each network area with unknown classification is assigned all possible classifications.
The inference algorithm successively excludes potential classifications for a network area if the actually allowed network flows between that network area and others would contradict the security policy for those classifications.
The inferencing is based on the assumption that the actually allowed network flows are a subset of the flows permitted by policy.
Extending our approach to work without this assumption is the focus of ongoing work.We now describe the algorithm.
Let A = {a 1 , a 2 , . . . a n } be the set of network areas.
For a given invocation of the algorithm, the number of network areas is fixed.
However, the composition of A can vary between successive invocations of the algorithm, i.e., stages of our approach.
Let C = {c 1 , c 2 , . . . c n }, where c i is the set of possible colors (i.e., classifications) for area a i .
The values of c i are drawn from a domain D of colors, defined by the enterprise policy.
For example, for the simplistic enterprise shown in Figure 1, D = {Blue, Yellow, Red}, with the elements representing intranet, extranet, and opennet respectively.
If a i 's color is known a priori, then c i is initialized with that value.
Otherwise, c i is initialized with all values in D (for the first stage), or with values left after the previous stage (for all stages other than the first stage).
The set A must include at least two elements that belong to different colors, and whose colors are known in advance.
Those elements serve as the baseline for comparison.
This requirement can be easily satisfied in practice by considering one known subnet on the Internet and another on the Intranet.Let N (a i , a j ) be the feasibility set of actually allowed network flows from area a i to a j as indicated by data from various collection methods.
Let P(c i , c j ) be the feasibility set of packets from an area of color c i to another of color c j that are permitted by the security policy.During each iteration, a color α is allowed to exist as a possible color for network area a i if there is at least one color β ∈ c j such that the feasibility set of actually allowed packets between areas a i and a j is a subset of the feasibility set for the colors α and β.
Otherwise, α Algorithm 1: Algorithm CLASSIFY (C, A, P, N )1.1 repeat 1.2color eliminated ← false {indicates whether any color was eliminated in this iteration} 1.3 foreach network area ai ∈ A that has |ci| > 1 do 1.4 foreach color α ∈ ci do 1.5 foreach network area aj ∈ A, where i = j, do 1.6 α possible ← false {indicates whether α is a possible color for ai} 1.7 foreach color β in cj do 1.8 if N (ai, aj ) ⊆ P(α, β) ∧ N (aj , ai) ⊆ P(β, α) then is eliminated from the list of possible colors for a i .
The algorithm iterates until no color elimination is possible.Algorithm CLASSIFY (C, A, P, N ) may be invoked multiple times during the course of the incremental discovery process.
Specifically, it may be invoked at most once during the analysis phase of each stage; at most once, because other types of analysis not involving the algorithm may be performed.
For example, hosts belonging to the same subnet may be identified and aggregated into one network area.
Similarly, two network areas that are observed to have unrestrained connectivity without any intermediate enterprise firewalls may be merged into one network area.
Similarly, new network areas of interest may be revealed by analyzing new connection logs.
Such analysis may alter the sets A and C between successive invocations of Algorithm CLASSIFY (C, A, P, N ).
If two network areas a i and a j are being merged, then the set A will be changed to A = A \ {a i , a j } ∪ {a k }.
Also, set C will be changed to C = C \ {c i , c j } ∪ {c k }, where the color of the merged network area a k is given by c k = c i ∩ c j .
The feasibility sets for a k with respect to another network area a l are given byF a k −>a l = F ai−>a l ∪F aj −>a l = {x|f il (x)∨f jl (x)} F a l −>a k = F a l −>ai ∪F a l −>aj = {x|f li (x)∨f lj (x)} The comparison in line 1.8 of Algorithm CLASSIFY (C, A, P, N ) considers only two network areas at a time.
As shown in Example 3 below, this may result in certain possible color eliminations being overlooked by Algorithm CLASSIFY (C, A, P, N ).
To address this issue, we formulate a finite-domain CSP [7] that can be then solved using a general-purpose CSP solver.Variables: C = {c 1 , c 2 , . . . c n } Domain of Values: D Constraints: N (a i , a j ) ⊆ P(c i , c j ), where 1 ≤ i, k ≤ nA complete assignment to a CSP is defined as one in which every variable is mentioned, and a solution to a CSP is a complete assignment that satisfies all the constraints [7].
For the above CSP, each variable c i has a domain D of possible values, and the number of possible complete assignments is n i=1 c i = O(d n ), which is exponential in the number of variables.
Here, d = |D|.
The worst-case complexity of Algorithm CLAS-SIFY (C, A, P, N ) can be shown to be a much smaller O(n 3 d 3 k).
Here, k is the maximum number of clauses in the predicate defining N (a i , a j ) or P(c i , c j ) for any 1 ≤ i, j ≤ j. Thus, it is typically much more efficient to first run Algorithm CLASSIFY (C, A, P, N ) and use the output of the algorithm to narrow down the domain of possible values for each c i .
Essentially, each color elimination done in advance using Algorithm CLASSIFY (C, A, P, N ) adds a unary constraint to the CSP that restricts the value of some c i .
A, P, N ).
Here, the domain C of colors is {α, β, γ, δ, , θ} (i.e., d = 6) and a subsection of the network topology is shown highlighting three areas a 1 , a 2 , and a 3 among the n network areas.
The edges are labeled with the types of network flows observed between each pair of nodes.
For instance, Flow Type X was observed between a 1 and a 2 .
Table 1 shows the enterprise-level flow control policy between various classifications expressed as feasibility sets.
Per Table 1, this implies that c 1 = {α, β} and c 2 = {γ, δ}.
Algorithm CLASSIFY (C, A, P, N ) will not be able to eliminate further colors beyond what is shown in Fig- ure 2.
On the other hand, if the output of the algorithm were used to initialize the domain values {c i |1 ≤ i ≤ n} and then fed to a CSP solver, then the solver would consider the following six constraints simultaneously:{ x | x ∈ Flow X} ⊆ P(c 1 , c 2 ) { x | x ∈ Flow X} ⊆ P(c 2 , c 1 ) { x | x ∈ Flow Y} ⊆ P(c 2 , c 3 ) { x | x ∈ Flow Y} ⊆ P(c 3 , c 2 ) { x | x ∈ Flow Z} ⊆ P(c 3 , c 1 ) { x | x ∈ Flow Z} ⊆ P(c 1 , c 3 )As a result, the solver would arrive at the solution {c 1 = α, c 2 = γ, c 3 = } (Figure 3).
It is important to note that if only the CSP solver were used (i.e., without first running Algorithm CLASSIFY (C, A, P, N ), then a total of 6 3 = 216 possible complete assignments would have been considered for the three network areas.
However, when the output of the algorithm is used to initialize the domain values, the number of possible color assignments for the three network areas reduces to just 8.
We have implemented a prototype of the solution approach described above as a tool called BlueGates.
The tool is capable of analyzing actually allowed network flows from individual hosts, connectivity probes between peer devices, and CISCO PIX/ASA [4] firewall configuration files.
Based on the analysis results, the tool derives feasibility sets to represent configuration information, and compares them with feasibility sets derived from an XML representation of the enterprise policy.We now use a case study to illustrate our approach.
The case study represents an abstracted subset of a reallife, operational enterprise environment.
Table 2 shows the enterprise-level flow policy, i.e., the predicates for feasibility sets with the domain of colors, D = {Blue, Green, Yellow, Red} (indicated by the letters B, G, Y, and R respectively in Figure 4).
In the particular enterprise environment we considered, these colors roughly corresponded to the classifications intranet, secure extranet, extranet, and Internet, respectively.
Predicate "Flow X" holds for all packets with characteristics of flow type X. Thus, "Flow Standard Auth" holds for all packets that are part of a standard authentication flow (such as the FTP or Telnet protocol).
"Flow Strong Auth" holds for all packets that are part of a strong authentication flow (such as the HTTPS or SSH protocol).
Initialization: Figure 4(a) shows the stage before any discovery in which we are given seven hosts X 1 , X 2 , X 3 ,, X 4 , X 5 , B 1 , and R 1 .
The colors for the hosts X i are initially unknown, whereas B 1 is of color Blue and R 1 is of color Red.
In the absence of any other information, each network area is initialized to contain a single host.
Thus, the set A of network areas is initialized to {a 1 ,. . .,a 7 } and C is initialized to {c 1 ,. . .,c 7 }.
Here, network area a i = {Host X i }, for 1 ≤ i ≤ 5, whose color c i is unknown and therefore initialized to the set D. Further, a 6 = {Host B 1 } whose color c 6 = {Blue}, and a 7 = {Host R 1 } whose color c 7 = {Red}.
Stage 1: Figure 4(b) shows the first stage of discovery, which involves analysis of netstat files obtained from the individual hosts.
Analysis of these files by the BlueGates tool has established that hosts X 1 and X 2 belong to the same subnet.
Consequently, a 1 and a 2 are merged into a single area a 8 , whose color c 8 = c 1 ∩ c 2 .
Thus, A = {a 3 ,. . .,a 8 } and C becomes {c 3 ,. . .,c 8 }.
The analysis also reveals the existence of active (unauthenticated) HTTP connections from host R 1 to X 2 and X 4 ; the feasibility sets N are updated accordingly before invoking Algorithm CLASSIFY (C, A, P, N ).
When the algorithm completes execution, c 4 and c 8 are reduced to the set {Yellow, Red}.
Stage 2: Figure 4(c) shows the second stage of discovery, which involves active probing and analyzing connectivity between hosts.
BlueGates' analysis has established that (i) hosts X 1 , X 3 , and X 5 can communicate with host B 1 using the HTTPS protocol (i.e., strong authentication), and (ii) TFTP (a basic file transfer protocol with no user authentication) is allowed from host X 4 to X 3 .
The feasibility sets N are updated accordingly before invoking Algorithm CLASSIFY (C, A, P, N ).
When the algorithm completes execution, c 3 and c 8 are reduced to the set {Yellow}. . .,a 9 } and C becomes {c 5 ,. . .,c 9 }.
Further, the firewall configuration analysis reveals that HTTP traffic is allowed from R 1 to a previously unknown host X 6 , which is in the same subnet as host X 5 .
Consequently, network area a 5 is expanded to the set {Host X 5 , Host X 6 }.
The feasibility sets N is updated accordingly before invoking Algorithm CLASSIFY (C, A, P, N ).
When the algorithm completes execution, c 5 is reduced to the set {Yellow}.
We described a systematic and semi-automated approach for discovering security zone classifications of devices in an enterprise environment.
We use a common format (based on feasibility sets [5]) to represent both network flows actually allowed (as seen in configuration settings or traffic observed) and the flows permitted by the enterprise security policy.
As part of our approach, we described an elimination-based inference algorithm and an alternative based on the constraint satisfaction problem.
For improved efficiency and reduced interference to normal network operation, we described a staged approach to collecting information about actually allowed flows.
One limitation of our approach is the assumption that the actually allowed network flows are a subset of the network flows allowed by enterprise security policy.
The validity of this assumption can be increased by applying our approach to obtain the classifications for network areas in a small subset of (rather than) the entire enterprise network, and then repeating this process for different subsets of the enterprise network.
When this assumption does not hold, our approach will indicate that there is a non-compliance (e.g., the CSP solver will indicate that no solution is possible).
However, it will not pinpoint the exact sources of the non-compliance.
Our ongoing work focuses on addressing this limitation.
One promising approach that we are exploring involves incrementally adding network areas to the input set A until the inference algorithm or the CSP solver indicates a noncompliance situation.
Future work will also include applying this approach in large-scale IT environments and evaluating its performance and effectiveness.
