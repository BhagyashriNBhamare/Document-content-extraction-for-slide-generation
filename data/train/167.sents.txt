User-contributed wireless mesh networks are a disruptive technology that may fundamentally change the economics of edge network access and bring the benefits of a computer network infrastructure to local communities at low cost, anywhere in the world.
To achieve high throughput despite highly unpredictable and lossy wireless channels, it is essential that such networks take advantage of transmission opportunities wherever they emerge.
However, as opportunistic routing departs from the traditional but less effective deterministic, shortest-path based routing, user nodes in such networks may have less incentive to follow protocols and contribute.
In this paper, we present the first routing protocols in which it is incentive-compatible for each user node to honestly participate in the routing despite opportunistic transmissions.
We not only rigorously prove the properties of our protocols but also thoroughly evaluate a complete implementation of our protocols.
Experiments show that there is a 5.8%-58.0% gain in throughput when compared with an opportunistic routing protocol that does not provide incentives and users can act selfishly.
User-contributed wireless mesh networks are envisioned as a disruptive technology to deploy broadband network infrastructures to local communities at low cost [2,4,30,32].
Avoiding the problem of rights of installation by installing at private properties and distributing the equipment and management costs among the participating users, such networks present a major cost-effective alternative for overcoming the issues that are stalling the deployment of carrierdeployed wireless mesh networks.However, the deployment of user-contributed wireless mesh netPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page.
To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
MobiCom'08, September 14-19, 2008 works has its own challenges.
A major challenge, which is not limited only to user-contributed wireless mesh networks but applies to wireless mesh networks in general, is throughput scalability.
Due to the highly unpredictable and lossy wireless channels, the throughput achieved by traditional wireless mesh networks can be quite poor.
Wireless channel variations and losses are particularly serious in urban environments with many sources of interference [2,15,24].
Although users of wireless networks may not demand the same level of available bandwidth as wired networks, it is important that such networks provide sufficient throughput for adaptive, elastic applications to give acceptable user experiences.
To achieve high throughput despite the highly unpredictable and lossy wireless channels, it is essential that such networks take advantage of multi-user diversity and explore transmission opportunities wherever they emerge [37].
Thus, instead of deterministically choosing the next hop before transmitting a data packet, opportunistic routing is emerging as a novel technique to allow any nodes overhearing the packet to participate in forwarding it.
In particular, Biswas and Morris [6] introduce the novel ExOR protocol and show that through test-bed experiments, by asking network nodes to opportunistically forward received data packets, they can achieve superior performance than the traditional deterministic forwarding.
In [13], Chachulski et al. introduce the MORE opportunistic routing protocol to address issues in ExOR and achieve higher throughput in wireless networks.The adoption of such opportunistic routing protocols, however, might lead to reduced network throughput when nodes have selfish behavior.
In particular, user-contributed wireless mesh networks, like many distributed autonomous systems, suffer common incentive problems such as the free-rider problem, where only a small fraction of user nodes contribute their resources [1], or the adverse selection problem, where user nodes do not reveal truthfully their channel states [7].
Although much progress has been made in designing incentive mechanisms for wireless networks [11], opportunistic routing represents a major departure from the traditional shortest-path based routing paradigm.
There can be serious incentive issues in opportunistic routing (see Section 2.2).
However, existing incentive mechanisms are mainly based on the simplicity of shortest path routing, and thus no longer fully apply to opportunistic routing.In this paper, we present the first routing system in which each user is stimulated to honestly participate in network routing despite opportunistic transmissions.
We make the following contributions:• We are the first to study the problem of incentives in opportunistic routing and provide solutions.
• We present a simple, novel and practical technique to make any member of a class of opportunistic routing protocols incentive compatible.
Specifically, this class includes any opportunistic routing protocols that use loss probabilities to calculate the number of forwarding transmissions to impose structure and avoid the scalability issues of opportunistic transmissions.
As a comparison, previous incentive-compatible routing mechanisms (e.g., [5,40]) are typically based on the Vickrey-Clarke-Grove mechanism and thus require that a routing protocol solve the routing problem optimally.
They cannot be applied to any theoretically suboptimal, or heuristicbased routing protocols (like MORE).
The optimality condition imposes an onerous burden on the designers of opportunistic routing and thus limits their ability to design practical protocols.
Unlike the VCG-based techniques, our technique does not impose any such mainly theoretical conditions for optimality.
• We rigorously prove that our technique guarantees that it is a strict dominant strategy for each user node to behave honestly.
Here strict dominant strategy is a very strong solution concept in game theory.
Intuitively, it means that the strategy (of behaving honestly) is strictly better than any other strategy for each node regardless of other nodes' behavior.
• We also design an enhanced protocol to prevent cheating not only in reporting loss rates but also in measuring them.
Formally, we show that, with this enhanced protocol, it is a strict Nash equilibrium for each user node to behave honestly in both measuring and reporting.
Intuitively, this means that the strategy of behaving honestly is strictly better than any other strategy for each node when other nodes are honest.
• We completely implement our protocols in Linux and test their performance on the ORBIT lab [33].
The experimental results verify that, with our protocols, a selfish node's cheating behavior decreases its utility.
Consequently, there are incentives for nodes to follow our protocols.
Our experiments also show that compared with an opportunistic routing protocol that does not provide incentives, our protocols have a throughput gain of 5.8%-58.0%.
This is because our protocols can prevent cheating behavior by selfish nodes.
Hence they can bring the system throughput back to the high level achieved by opportunistic routing.The rest of this paper is organized as follows.
In Section 2, we present technical preliminaries.
In Section 3, we present a simple technique to achieve incentive compatibility in reporting loss probabilities.
In Section 4, we develop our technique to prevent cheating in both measuring and reporting loss probabilities.
In Section 5, we discuss implementation issues.
In Section 6, we report experimental results using the ORBIT testbed.
In Section 7, we review related work.
In Section 8, we draw conclusions and discuss future work.
Before presenting our system architecture and developing our protocols, we first review the opportunistic routing protocols we consider.
We give a simple example to illustrate that nodes have incentives to cheat MORE, an opportunistic routing protocol.
We also review relevant game theoretic definitions.
We focus on opportunistic routing, which is an emerging technique to achieve high throughput with lossy wireless links.
Instead of choosing the next hop before transmitting a packet, opportunistic routing allows multiple nodes that overhear the transmission to participate in forwarding the packet.The key issues in the design of opportunistic routing protocols are how to avoid duplicate forwarding, achieve high spatial reuse, and be scalable.
Different opportunistic routing protocols (e.g., [6,13]) solve these issues differently.
Since researchers are still trying to improve opportunistic routing and different networks may make different tradeoffs, we set the goal that we develop techniques that can be integrated with a wide class of opportunistic routing protocols.
We consider an opportunistic routing protocol as a module which collects link states and computes a forwarding behavior profile for each node i.
This modular approach reduces the constraints on designing practical protocols, in particular for opportunistic routing.Specifically, for ease of presentation, we focus on the class of opportunistic routing protocols whose input is link loss probabilities.
Let (i, j) be the link from node i to node j.
Then let i,j be the link loss probability; that is, if a packet is sent from node i to node j, then with probability i,j the packet cannot be decoded.
One certainly can extend the input to include link rates.
But for simplicity, we focus on the case of fixed link rates.
For the forwarding behavior profile, we focus on the case that it specifies the number of times a node forwards a received packet.
This can depend on the packet header information such as source address or destination address.
We refer to an opportunistic routing protocol satisfying the aforementioned specification a basic opportunistic routing protocol.
Our objective is to extend an arbitrary member of this protocol class to be incentive compatible.Formally, a basic opportunistic routing protocol (e.g., MORE) works as follows.Source Node: The source node of a session divides its traffic into a number of batches, where each batch consists of a number of coded packets.
These coded packets are computed from the original packets using certain network encoding techniques.
Each coded packet has a packet header containing sufficient information for routing.
The source node keeps sending coded packets in a batch.
It stops the transmission of a batch if the batch is acknowledged by the destination.Intermediate Node: When an intermediate node hears a packet, the contents of this packet (including the header) decide whether this intermediate node needs to forward the packet.
If it needs, then it computes the number of transmissions it needs to make using the loss probabilities.
Formally, let zi be the number of transmissions that node i should make for this packet when the basic routing protocol is used.
Let E be the set of edges that are considered by the basic routing protocol for forwarding packets from S to D. Then, the basic routing protocol specifies a function f () which computeszi = f (S, D, i, {(i, j, i,j)|(i, j) ∈ E}),where (S, D) indicates the source and destination.The preceding computation depends on the loss probabilities of the links in E. Previous protocols assume that this knowledge can be obtained by having each node i report the loss probabilities of its links in Ei, where Ei is a subset of E.
We should have that E = ∪i∈V P Ei, where VP is the set of players, and for all (i, j) such that i = j, Ei ∩ Ej = φ.Specifically, in MORE, zi is computed by a distributed algorithm using ETX as the metric [14].
When a transmission is triggered, the node creates a random linear combination of the innovative coded packets that it has heard from the same batch and broadcasts it.Destination Node: The destination uses the contents of its received packets to decide whether it has sufficient information for decoding.
If so, it decodes the packets in this batch and sends an acknowledgment using a traditional routing protocol.
The basic opportunistic routing protocols assume that user nodes are obedient and follow the protocols.
However, a user node may deviate from the specified protocols.
In particular, user nodes may not report loss probabilities {(i, j, i,j)|(i, j) ∈ E} truthfully, because reporting non-truthful loss probabilities may lead to routing decisions {zi}i∈V P that are more favorable to some nodes.Consider the MORE protocol, which is one instance of the class of basic opportunistic routing protocols.
We use an example scenario shown in Figure 1 to illustrate that a node can benefit from adverse selection in the MORE protocol.
The example scenario has a session from source S to destination D.
An intermediate node R is between S and D. True link loss probabilities are shown near the links.
Using the truthful link loss probabilities, MORE will calculate that R's expected number of transmissions is 1.18.
However, by cheating MORE to use 0.1 as the loss probability on link (R, D), node R can reduce its expected number of transmissions to 0.78, a reduction of expected workload by 34%.
Consequently, R has incentive to cheat, but this cheating may lead to reduced throughput for the session from S to D. To study the incentive compatibility of opportunistic routing, we use a strategic game model.
The players of this game are the intermediate nodes that are required to forward packets.
Recall that VP denotes the set of players.
Each player node i ∈ VP can choose an action ai in this game.
If every player has chosen an action, then the utility of player i is a function of the profile of all players' actions:ui = ui((aj)j∈V P ).
Note that a key component of the definition of a strategic game is the set of potential actions of each player.
In this paper, in Sections 3 and 4, we have different sets of available actions and different functions for calculating the utility (because in Section 3 we make a simplifying assumption which we remove in Section 4).
We specify the corresponding action sets and functions in detail in these two sections.Also note that, in reality, a player i can take not only a fixed action, but also a random action following a certain probability distribution.
In the latter case, the random action is called a mixed strategy.
In contrast, a fixed action is also called a pure strategy.
Suppose that each player i takes a strategy si, which can be either pure or mixed.
We can always write the utility as a function of the profile of all players' strategies:ui = ui((sj)j∈V P ).
As we have mentioned, one solution concept we use in this paper is strict dominant strategy.
It can be defined as follows.
.
Remark Since an action profile is also a strategy profile, it can also be a strict dominant strategy equilibrium.It is worth noting that strict dominant strategy equilibrium is a very strong solution concept.
It requires the equilibrium strategy to be strictly better than any other choice in all situations.
Hence it is stronger than a widely used solution concept-dominant strategy equilibrium.
Compared with a dominant strategy equilibrium, a strict dominant strategy equilibrium gives an economically rational player an even strong attraction to follow the equilibrium strategy.
Specifically, if all nodes following a protocol is a dominant strategy equilibrium, then a node may be able to deviate from the protocol without being punished, although the deviation is not beneficial to the node.
However, if all nodes following a protocol is a strictly dominant strategy equilibrium, then any node deviating from the protocol is punished for its deviation.
So, the advantage of using strict dominant strategy equilibrium is that, for each node, deviating from the protocol always hurts.We also use another solution concept called strict Nash equilibrium.
= s * i of player i, ui(s * i , s * −i ) > ui(si, s * −i ).
The relationship among the involved solution concepts is shown in Figure 2.
We can see that a strict Nash equilibrium (which is achieved by our second protocol-the enhanced protocol) is not as strong as a strict dominant strategy equilibrium (which is achieved by our first protocol-the simple extension of basic routing protocol).
The reason is that, in the enhanced protocol, we need to deal with more sophisticated cheating behavior.
Nevertheless, a strict Nash equilibrium is still stronger than a Nash equilibrium.
The difference between these two solution concepts is analogous to the difference between a strict dominant strategy equilibrium and a dominant strategy equilibrium.
The relationship between strict Nash equilibrium and dominant strategy equilibrium is more complicated.
On one hand, dominant strategy equilibrium requires the consideration of more situations than strict Nash equilibrium, which requires the consideration of only a single situation (where all other players follow the equilibrium strategies).
On the other hand, strict Nash equilibrium requires a strict advantage of following the equilibrium strategy, which dominant strategy equilibrium does not.
Hence, neither of these two solution concepts is stronger than the other.
Now we present our techniques to integrate incentive compatibility into a given basic opportunistic routing protocol.
To make the presentation clearer, we present our core ideas in two steps.
In this section, we assume that each node i can measure the loss probabilities of all of its outgoing links, i.e., i,j for all (i, j) ∈ E.
This may require a slight modification to some basic opportunistic routing protocols (e.g., MORE), if they require that each node report the loss probabilities of its incoming links.
We address the measurement issues in the next section.
Implementation issues will be discussed in Section 5.
If a routing system does not build in proper incentives, a user node may not report its link loss probabilities honestly.
Instead, it may compute or conduct probing experiments to determine reporting loss probabilities that can lead to more favorable routing decisions to the node than the true loss probabilities can.
Such behaviors can lead to network performance degradation and disruptions.To prevent dishonest and/or probing behaviors, we need to design the routing protocol so that reporting true loss probabilities is the best strategy of each node.
For this objective, we introduce a novel, well-designed payment formula together with an auxiliary transmission.
Specifically, in our technique, each intermediate node receives a payment for its service.
By payment we mean either payment of real money or transfer of credits.
It depends on the application which of these two methods should be used.
In a community network where nodes are voluntarily provided by users, transfer of credits having no monetary values may be a better method.
In a more business-oriented environment, some of the users may need to be paid by virtual money that has a cash value.
In the sequel, we use the term payment only for simplicity of presentation.Specifically, the payment to an intermediate node consists of two parts: one part is used to cover the data transmissions, while the other part is used to cover auxiliary transmissions that the node is required to make in addition to data transmissions.What is an auxiliary transmission?
It is a transmission that can be used for multiple purposes.
For example, it can be used for sending checksums of the data, so that the data transmissions are more reliable.
Or it can be used for various control information (like updates of loss probabilities).
Note that, in our technique, the volume of auxiliary traffic is very small compared with that of data traffic.
Hence, it does not introduce much overhead in communications.The part of payment for auxiliary transmissions and the volume of auxiliary traffic are carefully designed such that the following requirements are satisfied:• Both of them are very small (see Sec. 6.4 and Sec. 6.5).
• This part of payment is at least sufficient to cover the cost of auxiliary transmissions.
• A node's gain from the auxiliary transmissions (i.e., the payment it receives for this purpose minus its cost for this purpose) is maximized when it faithfully reports the loss probabilities of its outgoing links.Therefore, with the payment and auxiliary transmission, a node has incentives to report the loss probabilities faithfully.
Using the preceding technique, we design an extension of the basic opportunistic routing protocol.
In the extended protocol, there are a number of control messages.
These control messages should be sent and received reliably using a traditional routing protocol.
The cost of control messages should be small such that it can be ignored in the analysis of incentive compatibility --this is a standard assumption in related literature (e.g., [40]).
Hereafter, we assume that each data packet has a size of L. (It is straightforward to further extend our work to the case in which different packets has different sizes.
We ignore this possibility here for simplicity of presentation.)
Also, we assume that transmitting a packet of size 1 has one unit of cost.
Now we summarize our protocol.
In the protocol description below, we assume there is a Routing Decision Maker (RDM) who collects information of loss probabilities and computes the number of data/auxiliary transmissions and the amount of payment.
We have a detailed discussion of RDM in Section 5.
Computing and Sending Routing Decision: In this technique, suppose that the routing protocol receives loss probability i,j for link (i, j) from node i.
The RDM computes, for each (i, j) ∈ E,z i = f (S, D, i, {(i, j, i,j )|(i, j) ∈ E}), z i,j = α(1 − i,j ) 2 2 ,andpi = z i L + (i,j)∈E α(1 − i,j ),where α > 0 is a parameter chosen by the system administrator, L is the packet length.
The value of α is very small 1 .
The output of the routing protocol for each node i, is (z i , {z i,j } (i,j)∈E , pi).
Making Transmissions and Receiving Payments: Each node i makes z i regular data transmissions for each packet it should forward.
In addition, for each such packet it is required to send an auxiliary traffic of size z i,j to node j, such that node j receives the auxiliary traffic.
That is, node i has to repeatedly send this auxiliary traffic until it is received by node j. Note that, since z i,j is very small, node i does not need to send a packet immediately.
In stead, it can accumulate the auxiliary traffic of the entire batch and send them together, when the network is not busy.As a reward for its service in sending a packet, node i should receive a payment pi from the source node.
Again, this payment is not immediate made to node i.
In stead, it is accumulated until the session finishes.
At the end of the session, node i receives the total payment in the entire session.
This needs only a single control message (which is transmitted reliably using traditional routing).
For convenience of the reader, we have summarized the important symbols we use in Table 1.
We can analyze the above extended protocol using the strategic game model we present in Section 2.
When we analyze this protocol, the action set available to each player node i is [0,1] |{j|(i,j)∈E}| .
Intuitively, this means that the ui(s * i , s−i) = α 2 (i,j)∈E (1 − i,j) 2 (1 − i,j) .
In contrast, consider the situation in which node i uses a strategy si = s * i , which assigns probability P1 to action ai , . . . , probability PK to action a(K) i (P1, . . . , PK > 0; K k=1 P k = 1).
There must be an action a (k 0 ) i = { (k 0 ) i,j } (i,j)∈E and j0 such that (k 0 ) i,j 0 = i,j.Then the expected utility of node i when it takes action a(k) i = { (k) i,j } (i,j)∈E : ui(a (k) i , s−i) =pi − z i L + (i,j)∈E z i,j 1 − i,j = z i L + (i,j)∈E α(1 − (k) i,j ) − z i L + (i,j)∈E α(1 − (k) i,j ) 2 2(1 − i,j) = −α 2 (i,j)∈E (((1 − (k) i,j ) − (1 − i,j)) 2 − (1 − i,j) 2 )/(1 − i,j) ≤ui(s * i , s−i).
For a(k 0 ) i , since (k 0 ) i,j 0 = i,j, we have ui(a (k 0 ) i , s−i) < ui(s * i , s−i).
Therefore, ui(si, s−i) = K k=1 P k ui(a (k) i , s−i) < ui(s * i , s−i).
This means s * is a strict dominant strategy equilibrium.In the above, we have shown that, with our simple extension, it is a strict dominant strategy for each node to behave honestly.
As we have emphasized, strict dominant strategy equilibrium is a very strong solution concept.
By its definition, in a system there cannot be more than one strict dominant strategy equilibria.
Consequently, there is a very strong guarantee that the system should converge to the state in which all nodes follow the protocol.
The preceding section presents a simple and effective technique to motivate each node to honestly report its loss probabilities.
The assumption is that a node can determine the true loss probabilities of its links by itself.
However, a node needs the cooperation (feedback) of its neighbors to measure link loss probabilities This may lead to cheating behaviors.
Note that this problem caused by neighbor feedback may look on the surface similar to the problem of mutual-dependent type in [40].
However, the issues caused by loss probabilities are more challenging than the simpler power control.
Thus, additional mechanisms (e.g., a more sophisticated payment formula) are needed to prevent cheating.
In this section, we design techniques involving both measurement signals and payment to prevent cheating.
The result is an enhanced protocol for incentive-compatible opportunistic routing.
Recall that, in Section 3 we use an appropriately designed payment formula, together with an auxiliary transmission to effectively prevent cheating in reporting the loss probabilities of outgoing links.
In our enhanced protocol, suppose that we still have each intermediate node report the loss probabilities of its outgoing links.
Then, we do not need to worry about each node's cheating in measuring the loss probabilities of its outgoing links, because such cheating in measurement is equivalent to cheating in reporting the measured probabilities, which has been prevented.
Hence, the major technical challenge to our enhancement is to prevent nodes' cheating in measuring the loss probabilities of their incoming links.If node i wants to cheat in measuring the loss probability of incoming link (j, i), there are two possibilities for its cheating behavior: Either by cheating in this measurement it makes the measured loss probability larger than the real loss probability, or it makes the measured loss probability smaller.
To prevent the first type of cheating, we only need to give node i a small amount of payment, which decreases with the loss probability of link (j, i).
To maximize this payment, node i has incentives to keep the loss probability as low as possible.
Thus, node i does not have incentives to carry out the first type of cheating.To prevent the second type of cheating, we introduce a special method to measure the loss probability of link (j, i), which ensures that node i cannot decrease the measured loss probability.
This method requires node j to send a number of test signals.
To report the loss probability of link (j, i), node i does not directly compute the loss probability and send it to the source node.
In stead, node i should just forward the test signals it hears to the source, as its "report" for loss probability of this link.
The source node computes the loss probability using a number of these test signals.
We use a simple Message Authentication Code function to prevent node i from forging these test signals.
Hence, node i either forwards all packets it hears, or forwards part of them.
There is no way for node i to forward more packets than it actually hears.
That is to say, there is no way for node i to decrease the loss probability of link (j, i).
Below we give a more detailed description of our enhanced protocol.
Just as the simple protocol in Sec. 3, it still has a RDM which collects information and performs computation.
But unlike the simple protocol, it uses the newly introduced method to measure the loss probabilities.Sending and Forwarding Test Signals: When there is a request to initialize a session from source node S to destination D, each node i ∈ {S} ∪ VP sends nt test signals.
Here each test signal is of the format (TEST, i, j, MAC k S,i (TEST, i, j)), where kS,i is a secret key shared by S and i, and MAC is a cryptographic Message Authentication Code function.
Each node i ∈ VP ∪ {D} forwards received test signals to the RDM using traditional routing protocol.Computing and Sending Routing Decision: Suppose that the RDM collects ni,j test signals for link (i, j), which are forwarded by node j.
Then the RDM computes i,j = 1 − ni,j nt ,z i = f (S, D, i, {(i, j, i,j )|(i, j) ∈ E}), ˆ z i,j = α(1 − i,j ) 2 2 , andˆpi andˆ andˆpi = z i L + (i,j)∈E α(1 − i,j ) + (j,i)∈E β(1 − j,i ),where β > 0 is a new parameter chosen by the system administrator.
Just as for α, the value of β should also be very small.Making Transmissions and Receiving Payments: Each node i makes z i regular data transmissions for each packet it should forward.
In addition, for each such packet it is required to send an auxiliary traffic of sizê z i,j to node j, such that node j receives the auxiliary traffic.
As a reward for its service in sending a packet, node i should receive a paymentˆpipaymentˆ paymentˆpi from the source node.Each node i accumulates the auxiliary traffic for the packets of a batch, and send them together after successful delivery of the whole batch.
The payments due to node i are accumulated and made together at the end of the session.
We can analyze the above enhanced protocol using the strategic game model we present in Section 2.
Denote by R the set of non-negative real numbers.
When we analyze this protocol, the action set available to each player node i is R × [0,1] |{j|(j,i)∈E}| .
Intuitively, if node i takes action (γi, {γj,i} (j,i)∈E ), then node sends γint test signals for measuring loss probabilities, and forwards γj,inj,i test signals to the source S when it receives nj,i test signals for link (j, i).
Clearly, if node i is honest, it should use a pure strategy s * i that chooses γi = 1 and γj,i = 1 for all (j, i) ∈ E.
If a player node i deviates from the protocol, it either chooses γi = 1 (which means it changes the number of test signals to send for measuring loss probabilities), or chooses γj,i < 1 for one or more incoming links (j, i) (which means it does not forward all test signals it receives for these incoming link), or does both.
Compared with the analysis in Section 3, now a cheating node can have more complicated behavior.
This reflects the fact that, in this section, we consider cheating in both measuring and reporting loss probabilities.The utility of player node i is still defined as the payment it receives minus the cost of transmissions it makes.
PROOF.
Recall that s * is the pure strategy profile of all player nodes in which each node behave honestly.
Hence, s * −i is a strategy profile of all player nodes other than i such that all other nodes behave honest.
In general, if node i takes action ai and other nodes behave honestly, the expected utility of node i isui(ai, s * −i ) =ˆpi=ˆpi −   z i L + (i,j)∈Eˆz ∈Eˆ ∈Eˆz i,j 1 − i,j   =   z i L + (i,j)∈E α(1 − i,j ) + (j,i)∈E β(1 − j,i )   −   z i L + (i,j)∈E α(1 − i,j ) 2 2(1 − i,j)   .
We can easily rewrite the above as:ui(a (k) i , s * −i ) = −α 2 (i,j)∈E (i,j − i,j ) 2 1 − i,j + (j,i)∈E β(1 − j,i ) + α 2 (i,j)∈E (1 − i,j).
Plugging ai = (γi, {γj,i} (j,i)∈E ) into this equation, we get thatui(a (k) i , s * −i ) = −α 2 (i,j)∈E (i,j − (1 − (1 − i,j ))) 2 1 − i,j + (j,i)∈E β(1 − j,i ) + α 2 (i,j)∈E (1 − i,j) = −α 2 (i,j)∈E (i,j − (1 − γi(1 − i,j))) 2 1 − i,j + (j,i)∈E βγj,i(1 − j,i) + α 2 (i,j)∈E (1 − i,j) = −α 2 (i,j)∈E (1 − γi) 2 (1 − i,j) + (j,i)∈E βγj,i(1 − j,i) + α 2 (i,j)∈E (1 − i,j).
Now consider two strategies of node i.
The first strategy of node i is pure strategy s * i .
If it uses this strategy, its expected utility isui(s * i , s * −i ) = (j,i)∈E β(1 − j,i) + α 2 (i,j)∈E (1 − i,j).
The second strategy of node i is an arbitrary strategy si = s * i .
Suppose that si assigns probability P1 to action a(1) i , . . . , probabil- ity PK to action a (K) i (P1, . . . , PK > 0; K k=1 P k = 1).
Because si = s * i , there must be an action a (k 0 ) i = (γ (k 0 ) i , {γ (k 0 )j,i } (j,i)∈E ) that falls into one of the following two cases:• Case 1: γ (k 0 ) i = 1;• Case 2: There exists j0 such that γ(k 0 ) j 0 ,i = 1.
In the first case, because α > 0, we can easily obtain that ui(a(k 0 ) i , s * −i ) < ui(s * i , s * −i ).
In the second case, because β > 0, 0 ≤ γ(k 0 )j 0 ,i < 1, we can obtain the same inequality.On the other hand, for all k, clearly we also have thatui(a (k) i , s * −i ) ≤ ui(s * i , s * −i ).
Combining the above two inequalities, we get thatui(si, s * −i ) = K k=1 P k ui(a (k) i , s * −i ) < ui(s * i , s * −i ).
This means s * is a strict Nash equilibrium.Unlike a strict dominant strategy equilibrium, a strict Nash equilibrium is not guaranteed to be unique by definition.
Below we show that, with our enhanced protocol, the strict Nash equilibrium in Theorem 4 is actually unique.THEOREM 5.
Suppose that each node i makes z i data transmissions and receives paymentˆpipaymentˆ paymentˆpi.
Suppose that for each (i, j) ∈ E, node j receives an auxiliary data traffic of sizê z i,j from node i.
Then there is no strict Nash equilibrium other than all player nodes behaving honestly in sending test signals and forwarding the received test signals.
PROOF.
Suppose s is a strict Nash equilibrium.
For an arbitrary player node i, suppose that s i assigns probability P1 to action a (1) i , . . . , probability PK to action a (K) i (P1, . . . , PK > 0; K k=1 P k = 1).
Also suppose that, for each k, a(k) i = (γ (k) i , {γ (k) j,i } (j,i)∈E ).
Because s is a strict Nash equilibrium and P k > 0, a (k) i must be a best response to s −i .
This means:a (k) i = arg max a i ui(ai, s −i ).
(1)On the other hand, using derivations similar to (but slightly different from) those in the proof of Theorem 4, for a general action ai = (γi, {γj,i} (j,i)∈E ) of player node i, assuming that s −i assigns probability P k > 0 to actions that forward γ(k ) i,j ni,j test signals upon receiving ni,j test signals (k = 1, . . . , K ), we can get that ui(ai, s −i ) = −α 2 K k =1 (i,j)∈E P k (1 − γiγ (k ) i,j ) 2 (1 − i,j) + K k =1 (j,i)∈E P k βγj,i(1 − j,i) + K k =1 α 2 P k (i,j)∈E (1 − i,j).
(2)Combining equations (1) and (2), we can easily have thatγ (k) j,i = arg max γ j,i K k =1 (j,i)∈E P k βγj,i(1 − j,i) =1.
Because the above equation holds for all link (j, i) and all action a (k) i assigned positive probability by s i , we know that, for all (i, j) and k , γ(k ) i,j = 1.
Hence, equation (2) becomes ui(ai, s −i ) = −α 2 K k =1 (i,j)∈E P k (1 − γi) 2 (1 − i,j) + K k =1 (j,i)∈E P k βγj,i(1 − j,i) + K k =1 α 2 P k (i,j)∈E (1 − i,j).
(3)Combining equations (1) and (3), we can easily have thatγ (k) i = arg max γ i −α 2 K k =1 (i,j)∈E P k (1 − γi) 2 (1 − i,j) =1.
So, s i is actually the pure strategy of honestly following the protocol.
Equivalently, we have s = s * .
Putting Theorems 4 and 5 together, we have rigorously shown that, with our enhanced protocol, the only strict Nash equilibrium is that all nodes follow the protocol.
Hence, it is reasonable for the system to converge to this state.
Using the preceding core techniques, we now present our system implementation architecture to integrate incentive compatibility into a given opportunistic routing protocol.
Due to space limitations, we focus on a high-level overview of two key components: routing decision maker and enforcement of routing decision.Routing Decision Module (RDM): In the preceding sections, we intentionally leave it open on where the link loss probabilities and/or loss probability measurement signals are collected and then the routing decision (payments and forwarding behaviors) are computed.
We refer to the module implementing this functionality as the routing decision module (RDM).
Note that the RDM's role is to coordinates duplicate forwarding, instead of making an end-to-end (or hop-by-hop) routing decision.
The key issues to consider when configuring the RDM include (a) avoiding manipulation (e.g., miscalculation) by involved nodes and (b) being scalable and avoiding single point of failure.
In our current design, we support two configurations, indicated by an option in routing messages:• In the first configuration, the source or destination of each session does the collection and computation.
This is particularly suitable for on-demand routing and/or in a hybrid architecture such as [17,27,34], where for most traffic either the source or the destination is a base station.
If there is a possibility that the RDM node is not trustworthy, a sampling technique is used to validate the computation of the RDM node.
That is, for a randomly chosen session, a node may initiate a validation session to test the RDM node.
If cheating is detected, a high penalty is assessed (e.g., the node is removed from the system).
To prevent potential denial of service attack on such a validation process, we limit the number of sessions that a node initiate sampling.
• In the second configuration, each node computes the part of routing decision that needs to be enforced by itself.
The source and destination make random sampling of the RDM at each node.
After the routing decisions are computed, these decisions need to be securely enforced.
That is, we must ensure that each node honestly makes all of the transmissions and payments required by the computed routing decision.
We refer to the module in charge of this work as the routing decision enforcement module.Similar to the RDM module, there are also multiple possibilities to implement this module.
Part of this module can be implemented by adapting the existing techniques from Sprite [39] and Corsac [40].
First, we calculate the expected number of packets each node should receive in a session, using the routing decision and the loss probabilities.
Second, we ensure that the number of packets indeed received is sufficiently close to the expected number.
Third, to reduce overheads of secure enforcement, we apply randomly sampling and impose a high punishment on detected cheating behaviors.
However, we still need to ensure that the control packets are transmitted securely and that none of them are dropped or ignored.
For this issue, more complicated cryptographic techniques are necessary.
We leave it to future study.
We implement our protocols and conduct extensive experiments on the ORBIT wireless testbed [33].
Our experiments have two objectives.
One is to verify that our protocols indeed prevent nodes from deviating from the protocol.
The other is to measure the influence of our protocols on the system throughput of opportunistic routing in a wireless network with selfish nodes.
We randomly select 25 nodes from the ORBIT testbed.
Figure 3 shows the locations of the nodes.
Each node in the testbed is a PC equipped with Atheros AR5002X Mini PCI 802.11a/b/g wireless card attached to an omni-directional antenna.
We configure the wireless interface card to operate in 802.11b ad hoc mode, and set the transmission power level at 20 dBm, and the bit-rate at 11Mbps.Each node in the testbed runs Linux Debian kernel v2.6.22, MadWifi v0.9.3.3 [28], Click v1.6.0 [36], and the MORE package [13].
We set MORE batch size at 32 packets, and packet size at 1500 bytes.Before running the experiments, we measure pair-wise loss probabilities using a module provided with MORE's package.
The loss probabilities between nodes in the testbed are set to values between 24% and 100%.
Source-Destination Pairs: To evaluate the effects of node locations, we randomly select source-destination pairs in our experiments.
After choosing a source-destination pair, we run a session between the pair of nodes for 30 seconds.
The source is always backlogged.Node Behavior: In our experiments, we compare two types of node behavior:• Honest behavior: Each node follows the protocol faithfully.
• Cheating behavior: As we have mentioned in previous sections, selfish nodes may deviate from the protocol.
For each extension of opportunistic routing protocol we have designed, we report results when 20% and 40% of the nodes deviate from the protocol.
For experiments on the simple extension, the difference between the loss probability reported by each cheating node and the corresponding real loss probability is Metrics: We evaluate two metrics:∆i,j = i,j − i,j ∈ (−0.7, −0.1] ∪ [0.1, 0.7).
• Node utility: This metric reflects the impacts of a node's behavior on its own.
The target of our evaluation is to verify that, with our protocols, a node's cheating behavior reduces its own utilities.
(Thus, our protocols can effectively prevent cheating.)
When computing utilities, we set α = 0.1 and β = 0.05.
• Source-destination unicast throughput: This metric reflects the impacts of our designs on the performance of a wireless network with selfish nodes.
Our target is to measure these impacts.
In our first set of experiments we demonstrate that, if a node deviates from our protocols, then its own utility is reduced.
For this purpose, we randomly sample several nodes and record the utilities they obtain by following the protocols and by cheating randomly, respectively.
The experiment is repeated 100 times with randomly selected source-destination pairs.
Simple Extension: Figure 4 illustrates the utilities per batch of a randomly selected node (node 18) if the simple extension is used.In this experiment, the other nodes may either follow the protocol faithfully, or deviate from the protocol by reporting false loss probabilities.
We can observe that, the utility obtained by cheating changes from one run to another, sometimes even becoming negative.
The reason for this change is that, in each run, the cheating strategy is randomly selected.
However, regardless of which cheating strategy is selected, the utility obtained by cheating is always less than the utility obtained by following the protocol.
Further results of utility comparison are illustrated in Figure 5.
This figure shows five nodes' utilities when each of them uses one of five different strategies: ∆i,j = 0 (i.e., being honest), ±0.2, ±0.4.
We can see that the highest utility is always achieved by the honest strategy only.
Furthermore, the more a node deviates from being honest, the less utility this node can obtain.
Enhanced Protocol: Similar experiments are also carried out for the enhanced protocol.
Figure 6 shows the utilities obtained by a randomly selected node (node 11) if the enhanced protocol is used.
In each run, the cheating strategy is randomly selected.
In this experiment, we assume that the other nodes follow the protocol faithfully.
Again, regardless of what cheating strategy is used, the utility obtained is always less than the utility obtained by the honest strategy.
Just like what we have seen for the simple extension, the highest utility is achieved by the honest strategy only.
Our second set of experiments are to demonstrate that our protocols improve the end-to-end performance of opportunistic routing in face of selfish nodes.
We use the source-destination unicast throughput as the performance metric.
As we have mentioned, selfish nodes may cheat in reporting and/or measuring loss probabilities.
Consequently, an opportunistic protocol without incentive compatibility (like the original protocol of MORE) can compute routing decisions that have lower end-to-end performance.
In contrast, our protocols can prevent cheating of selfish nodes, and thus can boost the end-to-end performance in face of selfish nodes.
without the simple extension on 200 source-destination pairs.
When the original MORE protocol is used, 20% or 40% of the nodes cheat in reporting loss probabilities.Simple Extension: Figure 8 shows the cumulative distribution function (CDF) of the achieved throughput on 200 randomly selected source-destination pairs in the testbed.
The figure shows the results both when nodes honestly report loss probabilities (i.e., when our simple extension is used) and when some of them do not (i.e., when the original MORE protocol is used without our extension).
In the latter case, we consider two situations, in which 20% and 40% of the nodes cheat randomly in reporting the loss probabilities, respectively.
Cheating nodes randomly select their strategies in the range given before.
We observe that the throughput of our simple extension is significantly higher than those of the original MORE protocol.
Specifically, for the median case, our simple extension achieves 14.8% (resp., 32.8%) higher throughput than the original MORE protocol when 20% (resp., 40%) of the nodes cheat.To further understand the benefits of honest reporting and the effects of the length of routing paths, we evaluate the throughput taken over 50 experiments with different source-destination pairs on each number of hops.
Figure 9 shows the average throughput over 50 runs as a function of the number of hops on the path.
As expected, the average throughput decreases with the number of hops.
However, when the number of hops is larger, the advantage of using our simple extension is more significant.
Overall our simple extension achieves 7.8-33.2% and 9.9-58.0% gain in throughput in the case where 20% and 40% of the nodes are cheating, respectively.
Enhanced Protocol: We also carried out similar experiments for the enhanced extension.
Figure 10 shows the CDF of the achieved throughput taken over 200 randomly selected source-destination pairs.
The figure shows the results both when nodes are honest (i.e., when our enhanced protocol is used) and when some of them cheat randomly (i.e., when the original MORE protocol is used).
In the latter case, again we consider two situations in which 20% and 40% of the nodes cheat, respectively.
Cheating nodes randomly select their strategies.
The throughput of our enhanced protocol is clearly higher than those of the original MORE protocol.
For the median case, it is 8.0% (resp., 14.6%) more than the original MORE protocol when 20% (resp., 40%) of the nodes cheat.
Compared with Figure 8, the throughput gain of the enhanced protocol looks less significant than that of the simple extension on average.
This is because the experiments using the enhanced protocol allow the cheating strategy to be more complicated.
A random strategy here is harder to prevent, but has less influence on the throughput.
Figure 11 shows the average throughput over 50 runs as a function of the number of hops on the path.
Overall our enhanced protocol achieves 5.8-13.7% and 8.6-23.4% gain in throughput in the cases where 20% and 40% of the nodes are cheating, respectively.
The protocols presented in this paper inherit coding overhead, memory overhead, and packet header overhead from existing opportunistic routing protocols (e.g., MORE).
In addition, our protocols require auxiliary transmission to enforce the incentive-capability.
On average, the auxiliary traffic for each session is 26.73 KB, which is very small compared with 3.93 MB of data transmitted in 30 seconds.
The ratio between auxiliary traffic and data throughput is 0.66%.
Note that the link loss reporting packets and the test signals used to measure link loss probabilities do not constitute our protocols' specific overhead.
These packets are used by most of existing wireless routing protocols.
The auxiliary payment is also very small compared with the total payment.
We randomly sampled 200 source-destination pairs.
The results show that the ratio between auxiliary payment and total payment is only 0.23% and 1.20% for the simple extension and the enhanced extension, respectively.
To the best of our knowledge, so far there has not been any research work on incentive-compatible opportunistic routing.
So in this section we focus on the related work on opportunistic routing and cooperation in wireless networks.
Opportunistic routing belongs to cooperative diversity techniques (e.g. [6,23,31]) which take advantage of broadcast transmissions to send information through multiple concurrent relays.
Nodes can combine information from multiple signals so that they can make best decisions of routing or forwarding.
As an example, protocols in [23] fully exploit spatial diversity in the channel by allowing all nodes that overheard a transmission to simultaneously forward the signal.
Another example is the protocol in [6], which optimizes the choice of forwarder from multiple receivers by deferring to choose each hop after transmission.The concept of opportunistic routing was first developed by Biswas and Morris in the context of wireless mesh networks.
They claimed that opportunistic routing can potentially increase the throughput and proposed an integrated routing and MAC protocol, named ExOR, to achieve the throughput gain [6].
To improve the system throughput, Chachulski et al. designed MORE [13], which combines random network coding and opportunistic routing to avoid transmission duplication.
Our protocols are incentive-compatible extensions for an opportunistic routing protocol, like MORE, such that the system performance can be maintained in face of selfish nodes.The basic opportunistic routing protocol uses network coding, which lets the routers encode information in received packets before transmission.
Earlier works on network coding [3,16,22,25] mainly focused on mixing information in different packets to achieve multicast capacity.
Some recent works studied possible coding opportunities in wireless networks [18][19][20][21]26] to increase system throughput.
The problem of cooperation in wireless networks has received a lot of attention in recent years (e.g., [8,9,29,35]).
The solutions proposed so far fall into two categories, credit-based approaches and reputation-based approaches.
As our protocols belong to the former category, we mainly discuss works in this category.Buttyan and Hubaux proposed the first credit-based system [10,12] in wireless ad-hoc networks in the Terminodes project.
In [10], they propose the usage of nuglets, a virtual currency, to pay nodes to forward others' packets.
Motivated by the nuglet, several other credit-based systems were proposed to stimulate cooperation in packet forwarding.
In [39], Zhong et al. proposed Sprite, a creditbased system which uses a central authority to collect receipts from forwarding nodes.
Charges and rewards are based on the receipts.
In [34], Ben Salem et al. proposed a charging and rewarding scheme based on symmetric cryptography to make collaboration rational for selfish nodes.
In [17], Jakobsson et al. proposed a micropayment scheme for multi-hop cellular networks to encourage collaboration in packet forwarding.In [5], Anderegg and Eidenbenz studied cooperation in the (deterministic) routing problem.
They applied the VCG mechanism to design a routing protocol for a wireless network with selfish nodes.
Then, the authors of [40] proposed Corsac, which integrates VCG and cryptographic technique to solve the combined problem of routing and packet forwarding.
Recently, OURS was proposed by Wang et al. [38].
It has much smaller over-payments than VCGbased solutions.
Another recent work by Zhong and Wu [41] studied collusion resistance for incentive-compatible routing.It is easy to see that all the above works to stimulate cooperation are dedicated to traditional, deterministic routing, which chooses the next hop before transmitting a packet.
In contrast, our incentivecompatible schemes are designed for opportunistic routing, and can bring the system throughput back to the high level achieved by opportunistic routing protocols despite of potentially selfish nodes.
In this paper, we present simple, novel techniques to integrate incentive compatibility into a class of opportunistic routing protocols.
We integrate our protocols with MORE in a Linux implementation and demonstrate on the ORBIT testbed that (a) cheating decreases a node's utility under our protocols and (b) incentive can substantially improve overall network throughput (5.8%-58.0% in our evaluated settings) in the presence of selfish nodes.
Our paper has focused on providing incentives for single-rate opportunistic routing protocols.
As for future work, we are interested designing similar simple techniques that can work in multi-rate wireless networks.
F. Wu was supported by NSF CNS-0524030; T. Chen and S. Zhong were supported in part by NSF CNS-0524030.
Y. Richard Yang was supported in part by grants from the U.S. NSF.
We appreciate the anonymous reviewers whose comments led to improvement of the paper.
Our shepherd, Tristan Henderson, gave us highly valuable comments to improve the paper.
