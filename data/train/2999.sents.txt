The voltage level of flash cells is directly correlated with the wear they experience.
Previous studies showed that increasing the ratio of ones to zeroes within a flash page can reduce the amount of bit errors in this page as well as the long-term wear of its cells.
Biased programming ensures more ones are programmed than zeroes by employing specialized codes which, in turn, incur non-negligible storage overhead.
We propose a novel approach to utilize the page spare area for biased programming, introducing a new trade-off: while using the spare area for a stronger ECC can correct more errors, biased programming can reduce the number of those errors.
We show that as long as the bit error rate is below a predetermined threshold, biased programming can be applied without compromising the data's durability.
When the threshold is reached, we revert to normal programming, but we can use the chip for as much as 24% additional writes, thanks to its reduced wear.
We demonstrate the applicability of our approach on real MLC chips.
We also perform an initial evaluation on a TLC chip, which exposes the challenges in applying any type of biased programming to TLC flash.
Flash-based storage can be found in most computing devices.
It has become popular thanks to its fast random access, low energy consumption, and increasingly large capacity.
However, flash memories are limited in the number of times they can be written.
After a page is written, it can be written again only after its entire block has been erased.
Each such program and erase (P/E) cycle wears the pages and increases their bit error rate (BER), up to the point where they can no longer be used reliably.
A flash chip's lifetime is measured by the number of P/E cycles its blocks can endure.A common approach to increase the SSD's lifetime is to reduce the amount of data written to it.
Write buffering [16], deduplication [6,14,17,21,22], and compression [7,38] can be used to reduce the amount of user data that is sent to the device from the upper-level application or file system.
The amount of internal writes performed during the garbage collection process can be further reduced by techniques such as separating hot and cold data [10,31], increasing I/O request sizes, and trimming invalid pages by the upper level [30,32].
Another approach is to extend the number of P/E cycles a block may endure.
This is primarily done by protecting the data written in each flash page by an error correction code (ECC).
The redundancy bits required for this code are stored in the page's spare area.
The number of bit errors the code can correct can be increased by increasing the size of the spare area and by employing stronger and more efficient codes, such as BCH [2,20] and LDPC [12,24].
In general, the spare-area size is determined by the expected BER at the end of the chip's lifetime [28].
As a result, the ECC is stronger than what is necessary when the chip is still 'young'.
Previous studies proposed to implement a weaker ECC in the beginning of the chip's lifetime to reduce flash read and write latencies [3,19,27,37,39].
Alternatively, the unused bits in the spare area can be leveraged to implement specialized codes that allow rewriting flash pages without erasing them first [25,35,36].
Previous studies correlate the bit values programmed on the flash cells with the extent of their wear [4,13,33,35], a phenomenon termed content-dependent memory damage [18].
Generally speaking, increasing the number of ones reduces the average voltage level sustained by the flash cells, which has been shown to reduce their wear and increase their lifetime.
Jagmohan et.
al suggested to leverage this property for increasing SSD lifetime by employing biased programming [15].
They proposed to encode the data written to the flash pages with enumerative (or endurance) codes [8], whose output is biased (shaped)-it includes either more ones or more zeroes.The first endurance codes had a high computational complexity, but more efficient codes have since been proposed, whose complexity is comparable to that of commonly used error correction codes [23,29].
The storage overhead of these codes is correlated with their bias.
Thus, the designs that use them compress the data written to each page, internally, and utilize the saved space for the code's overhead.
As a result, the applicability of this approach depends on the compressibility of the data written to the SSD, and its efficiency is limited when the data is compressed externally, by the upper-level.
A recent study compared page-level ('implicit') compression, combined with biased programming, with external ('explicit') com- pression, and concluded that the latter is more effective for increasing the SSD lifetime [18].
In this study, we propose a novel applicable approach for programming biased data on flash.
Instead of compression, we accommodate the extra overhead in unused bits of the page spare area.
The benefit of this approach is threefold: it does not depend on the compressibility (or other properties) of the incoming data, it does not incur any storage or computational overhead, and it can be fully implemented within the flash controller, at the chip level.
Thus, it is orthogonal to other device-level optimizations.The applicability of our biased programming approach depends on the flash chip characteristics: the size of the page spare area and the cells' sensitivity to their voltage level.
The latter is strongly influenced by proprietary flash-level optimizations applied by manufacturers for minimizing program and read disturbance.
Nevertheless, our initial results demonstrate that biased programming can be applied successfully even without detailed information about these optimizations.We evaluate the applicability of this approach on two MLC chips, and show that it can increase flash lifetime by as much as 24.17%.
Our main contributions are:• We provide the theoretical framework for determining which bias values are feasible for each combination of page and spare area sizes, and derive the conditions that must hold for biased programming to preserve the original chip's reliability guarantees (Sections 2 and 3).
• We demonstrate the effect of biased programming with different bias values on the wear of MLC flash chips from two manufacturers, one of which exhibits previously undocumented wear patterns (Sections 2 and 4).
• We apply biased programming according to our derived 'safety conditions', successfully increasing the lifetime of one of the chips by as much as 24.17% (Section 3).
• We present initial steps in the first feasibility study of biased programming in TLC flash chips, and identify major challenges that must be addressed for this approach to be applicable (Section 4).
Motivation.
Flash pages are composed of cells that can sustain different voltage levels representing their bit values.
Multi-level cells (MLC) can store two bits, while triple-level cells (TLC) can store three bits.
Figure 1 shows the mapping of voltage levels to two-bit values in MLC flash.
Each bit is mapped to a different flash page, the low (LSB) page or the high (MSB) page.
Previous studies showed that programming cells to the higher voltage levels increases their short-term and longterm wear, and, as a result, their BER.
When the probability to program 1 or 0 is equal (p = 0.5), the probability of a cell to be in each voltage level is 0.25.
This probability changes if the probabilities to program 1 or 0 are not equal.
For example, if the probability of 0 is p = 0.4, the probability to be in each of the states, 11, 10, 00, and 01, is 0.36, 0.24, 0.16, and 0.24, respectively.
As a result, the average voltage level of each cell is reduced, reducing its overall wear.
Biased programming takes advantage of this property to increase SSD lifetime.Page spare area.
Let k denote the size of the data in a flash page, in bits, and r denote the size of its spare area.
The strength of the ECC implemented in the spare area is measured by the number of bit errors it can correct, t. With BCH codes 1 , the number of correctable errors is given by t = r ⌈log(k+r)⌉ .
Similarly, the tolerated BER is the fraction of correctable errors, given by T BER = t r+k .
The tolerated BER is usually higher than the BER expected at the end of the chip's lifetime.
As a result, a weaker ECC (with smaller t), is sufficient in the early stages of the chip's life [5,9,26].
The k + r bits of a flash page are programmed simultaneously.
Thus, we can increase the size of the data area by "reallocating" a portion of the r redundant bits.
In this work, we use this extra allocation to reduce the entropy of the data.
In other words, we use more bits to encode the same amount of data.
The purpose of this manipulation is to increase the ratio of ones in the data that is written on the flash page.The amount of information that can be stored in k physical bits is given by h(p)k, where p is the probability that a bit is 0, and h(p) is the binary entropy function [8].
The amount of information is maximal when p = 0.5 and h(p) = 1.
In other words, when the probabilities that a bit is 0 or 1 are equal, k physical bits can store k bits of information.
When p < 0.5, k p physical bits are required to store k bits of information,k p = k h(p).
Let q be the portion of the spare area that is reallocated to the data area, i.e., k p = k + qr.
Then, if we wish to store k bits in the new data area, we re- quire (k + qr)h(p) = k, andq = k r · 1−h(p) h(p) .
The remaining spare area size is r p = (1 − q)r. Figure 2 illustrates this allocation.
For example, in the MLC chips used in our evaluation, k = 16KB and r = 1280B.
Encoding 16KB of data with a bias of p = 0.4, where h(p) = 0.971, requires 16KB+490B, which implies q = 0.383.
Note that the reallocation of the spare area bits is logical-it determines the type of data they will be used for, but does not have any implication on how they are written or read.When qr bits are reallocated to the data area, the number of bit errors the ECC can correct is reduced to t p = (1−q)r ⌈log(k+r)⌉ , which is (1 − q)× the original TBER.
Table 1 shows the new TBER with several values of p.
We address this reduction in the ECC strength in Section 3.
In the remainder of this section, we present our initial experiments that demonstrate the effect of biased programming on the BER.
Its effect on latency and throughput are outside the scope of this initial study.Experimental setup.
We use the SigNASII flash evaluation board [1], in which we directly program different flash chips.
The interface of the evaluation board allows to specify k + r bits of data and the physical page on which they will be programmed.
The raw data can be read and analyzed without prior correction by any ECC.We use two MLC flash chips in our evaluation.
MLC-A is manufactured with 1Znm technology, and has a lifetime of 3000 P/E cycles.
MLC-B, from a different vendor, is manufactured with sub-20nm technology, and its lifetime is not specified.
In both chips, the size of the data page and spare area are 16KB and 1280B, respectively.Each experiment consists of multiple P/E cycles in which we program all the pages in one block, read them, and then erase the block.
For analysis purposes, we intentionally exceed the block's reported (or estimated) lifetime.
We calculate the BER in each page, and report the maximal BER observed in the block within 25 consecutive P/E cycles.
We report the maximal BER rather than the average because it provides a better measure of the ability of the ECC to return the correct data.
We repeat each experiment three times, with three different blocks, and report the maximal BER values in the results.In our first set of experiments, we program all the pages in the block with randomly generated biased data, with a different value of p in each experiment.
For completeness, we also consider values of p that are inapplicable with current spare area sizes.
Figure 3 shows the resulting BER of chip MLC-A.
As we expected, when p < 0.5 and more ones are programmed, the BER decreases compared to the baseline.
For example, when the blocks reach the end of their reported lifetime (3000 P/E cycles) with p = 0.3 and p = 0.4, their maximal BER is 66.5% and 43% lower than that of the baseline, respectively.We expected a symmetrical increase in BER with p > 0.5.
Surprisingly, there was hardly any difference between the maximal BER of the baseline and that of p = 0.6 and p = 0.7.
To explain these results, we take a closer look at the distribution of voltage levels with each bias, p, in Table 2.
While the average voltage level always increases with p, the probability of a cell to be in the highest level, P 3 , is lower with p = 0.7 than with p = 0.5 (its probability to be in P 2 is considerably higher).
The wear incurred by each voltage level is higher than the previous level, although this increase is usually non-linear, and depends on the chip's physical properties [23].
The page's short-term BER further depends on the optimizations applied to it during programming.
Thus, a reduction of 4% in the probability to be in P 3 may outweigh an increase of 24% in the probability to be in P 2 , resulting in the same BER for p = 0.7 and p = 0.5.
We note that with p = 0.4, the probability to be in both P 2 and P 3 is lower than the baseline, ensuring a reduction in BER.
These initial results demonstrate the possible reduction in BER when biased data is programmed.
In the following section, we describe how the utilization of the spare area can be maximized by combining biased programming with ECC.
Previous work [35] as well as our initial experiments show that the maximum BER in the end of the chip's reported lifetime is considerably lower than its TBER.
The reason is that the ECC and spare area are designed for the worst-case scenarios of bit errors, while these scenarios do not necessarily materialize in simple lab settings.
For example, the TBER of the MLC-A chip is 4.019 × 10 −3 , but its maximal BER at 3000 P/E cycles (its reported lifetime) is only 1.415 × 10 −3 .
In order to apply biased programming without compromising these "safety measures", we define the conditions for safe reallocation of the spare area as follows.Let T be the lifetime of a chip, and let BER max (T ) be the maximal BER of its blocks after T P/E cycles.
We define the safety ratio as α = BER max (T )T BER .
Any modification in the allocation of the spare area must ensure that the safety ratio is preserved throughout the block's lifetime.
Let T p be the number of P/E cycles in which the block is programmed with biased data with a bias p, with appropriate reallocation of the spare area.
This reallocation is safe as long as After T p P/E cycles, the ECC implemented in the partial spare area cannot guarantee the correctness of the data.
However, the original ECC, implemented in the entire spare area, can now be used.
Thus, when the block reaches T p P/E cycles, we "return" the reallocated bits to the spare area and continue to program the pages without bias.
The block can then be used until its maximal BER is α T BER.
Let T ′ be the P/E cycle for which BER(T ′ ) = α T BER.
The lifetime extension as a result of using the spare area for both ECC and biased programming is thus T ′ −T T .
Figure 4 shows the BER of chip MLC-A with biased programming and safe reallocation of the spare area.
.
There is a noticeable difference between the plots of the low and high pages.
The point of discontinuity in the plot of the high page suggests that its short-term reduction in BER is sensitive to the average voltage level of the low page and to related programming optimizations.
These results agree with previous studies that showed that the high page usually experiences a higher BER [4,33,35].
The difference between the BER of the high and low pages allows for a finer distinction between the amount of ECC bits required for each of the pages.
This may allow low pages to be programmed with biased data during more P/E cycles, further extending the block's lifetime.
To explore this option, we repeated our first set of experiments when only the low pages are programmed with biased data and the high pages are programmed normally.
Figure 5 shows the maximal BER of the high and low pages of chip MLC-A with biased programming of the low page and of both pages.
Due to space limitations, we show only results for p = 0.4.
The reduction in the BER of the high page is larger than that of the low page in both variations of biased programming.
As we expected, the reduction in BER is higher when both pages are programmed with biased data, but there is a substantial reduction even when only the data on the low page is biased.
This indicates that the BER of the high page is affected by the value of the low page.
Characterising this effect is part of our future work.
The results we obtained from chip MLC-A were consistent with our expectations and with results of previous studies.
We expected similar results from chip MLC-B, but were surprised to see a BER pattern which, as far as we know, has not been publicly documented.
Figures 7 and 8 show the BER of the low and high pages, respectively, of chip MLC-B when both pages are programmed with biased data.
The lifetime of this chip is not given, so we ran each experiment for 10,000 P/E cycles.
We observe an iterative process, where the BER increases with every P/E cycle, and then decreases abruptly before in- creasing again.
The BER of the low pages shows a larger variation within each iteration, but reaches the same maximal BER at the end of each iteration.
The BER of the high pages experiences less variability, but its maximal value increases in each iteration.Our industry collaborators confirmed that the reduction in BER is the result of a special "deep erase" operation, but were unable to share additional details.
Most importantly, we could not accurately identify the trigger for this operation.
However, our results show that biased programming reduces the BER of both pages, and that as a result, deep erasures occur at different P/E cycles for different values of p. Due to this unusual BER pattern, we could not determine the safe reallocation for biased programming for our second experiment.
Nevertheless, these initial results support the applicability of biased programming to this type of chip as well.TLC flash chips.
The three bits represented by a triplelevel flash cell are mapped to three different pages: high, middle, and low.
Unlike in MLC chips, the mapping of voltage levels to bit values in TLC chips is not standard, and different manufacturers use different mapping schemes.
Figure 6 shows two such schemes.
The potential to reduce the cell's voltage level via biased programming is different in each scheme.
For example, in Scheme I [34], the low and the middle pages are mapped to one in both the highest and the lowest voltage levels (like in MLC chips).
However, in Scheme II [11], ones are more often mapped to the lower levels in all three pages.Applying a bias of p = 0.4 to Schemes I and II reduces the average voltage level from 3.5 to 3.01 and 2.9, respectively.
This corresponds to a reduction of 13% and 17%, respectively, compared to the reduction of 15% with p = 0.4 in the MLC chip, suggesting that comparable lifetime gains can be achieved for TLC chips.We repeated our first set of experiments with a TLC chip from manufacturer B, whose page size (k) and spare area size (r) are 8KB and 976B, respectively, resulting in T BER = 6.258 × 10 −3 .
The lifetime of this chip is not specified, and its mapping of voltage levels to bit values is different from both schemes in Figure 6 2 .
With this scheme, a bias of p = 0.4 achieved a reduction of only 8% in the average voltage level.
By applying a different bias to each page we were able to achieve a reduction of 11%.
However, in our experiments, the maximal BER of all the pages increased in almost all cases.
This increase might be explained by a detailed analysis of voltage level distribution, similar to that in Table 2.
Thus, further research is required to identify the precise limitations of biased programming in TLC chips, by distinguishing between short and long term effects and between the effect of biased programming on the different pages.
This research is part of our future work.
We presented a generally applicable approach for applying biased programming to flash pages.
Our approach does not assume anything about the incoming data, and does not incur any computational or storage overheads.
We have demonstrated its applicability on real MLC flash chips, showing a potential increase of up to 24% in the chip's lifetime compared to using ECC alone.
These results indicate that both uses of the page spare area should be considered when determining its size during chip design.
This initial study opens several interesting research questions.
One is identifying the best combination of bias values of low and high pages for a specific chip's physical properties.
Another is identifying a pattern of biased programming that will be suitable for TLC and 3D-NAND flash chips, possibly using different code types.
Finally, integrating biased programming directly into the chip's ECC logic may achieve further reduction in BER, and requires additional research and architectural support.
