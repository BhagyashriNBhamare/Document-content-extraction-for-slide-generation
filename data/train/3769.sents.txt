This paper presents a new Win32 API emula-tion layer called nt2unix.
It supports source code compatible Win32 console applications on UNIX.
We focus on the emulation of specific Win32 features used for systems programming like exception handling, virtual memory management, Windows NT multithreading / synchronization and the WinSock API for networking.
As a case study, we ported the all-software distributed shared memory (DSM) system SVMlib-consisting of about 15.000 lines of C++ code written natively for the Win32 API-to Sun Solaris 2.5 with absolutely no source code changes.
While there exist numerous products and toolkits designed for porting software from UNIX 1 to Windows NT on source code level (like OpenNT from Softway Systems, Inc. [14], or other tools [17]), much less effort has been conducted to provide a toolkit to port Windows NT applications, especially those using the Win32 API directly, to UNIX.
Apart from some very expensive commercial products in this area like Wind/U from Bristol Technology, Inc. [2] or MainWin XDE from MainSoft Corp. [9], a small low cost solution is not known to the authors.
With the emerging importance of Windows NT [10], more and more applications are newly developed for the Win32 API, so a migration path to support the various UNIX flavors even for low level applications is highly desirable.
In this paper, we propose a library based approach to achieve source code level compatibility for a specific subset of the Win32 API under the UNIX operating system.
In this section, we introduce the functionality of nt2unix and its strategy to implement a relevant subset of the Win32 API on Solaris [15], a popular UNIX System V implementation.
Since a complete implementation of the Win32 API under UNIX is not practicable, we had to decide which features to support.
As our focus lies on systems programming, we chose the following function groups to form a reasonable subset:• Windows NT Multithreading and Synchronization.This group includes functions for creating, destroying, suspending and resuming preemptive threads.
It also includes functions to synchronize concurrent threads and TLS (thread local storage) functions.
• Virtual Memory Management.
This group includes the interface to the virtual memory (VM) manager as well as functions for memory mapped I/O.
• Windows NT Exception Handling.
Win32 supports user level handlers to catch special exceptions as well as certain error handling routines.
These functions form another group to be supported.
• Networking.
This group concerns networking, which includes the complete WinSock API (restricted to the TCP/IP protocol family, however).
Naturally, an emulation layer firstly has to support the basic data types found in the various C++ header files of the Win32 API.
nt2unix supports most specific simple Win32 data types, like DWORD, BOOL, BYTE and so on.The much more interesting problems arise from the implementation of certain functions.
Some specific problems we encountered are presented in the next sections.
In order to support Windows NT multithreading, nt2unix must keep track of thread associated data normally the Windows NT kernel stores.
This data includes:• The state of a thread (running, suspended or terminated) -by default, a thread is created in running state;• The suspend counter of a thread (a concept unknown in the Solaris or POSIX thread API);• The exit code of the thread.nt2unix uses the Standard Template Library (STL) type map to store the above information for each thread.
The entries in the map are indexed by the Windows NT handle of the thread.
Accesses to this map are protected by a special lock object of class CriticalSection, which is a comfortable wrapper around the Windows NT CRITICAL_SECTION type: Important problems occur in order to support the Win32 functions SuspendThread() and ResumeThread().
At first glance, it seems obvious that these two functions can easily be emulated by the Solaris functions thr_suspend() and thr_resume().
However, this is not the case, since there is a lost signal problem to be avoided when a thread suspends.
The situation using the POSIX thread API is even worse, because there are no functions available for resuming or suspending threads anyway.
To understand this, we have a deeper look at our implementation of SuspendThread() using the Solaris thread API.
When this function is called, the lock protecting the thread data is acquired.
Afterwards, the suspend counter of the thread is incremented, if possible.
If the old suspend counter is zero, two cases may occur: the thread may suspend itself or another thread.
If the first case is true, the lock is released before actually calling thr_suspend() to avoid deadlock.
In the second case, a lost signal problem must be avoided, since under Solaris, resuming threads doesnot work in advance, that is, resume actions are not queued if the target thread is not yet suspended at all.
Our solution to this problem is to let the ResumeThread() implementation poll until the thread which has to be resumed has indicated its new state by setting a special flag, threadHasBeenResumed.
So the code for SuspendThread() looks like the following: for each critical section object and its thus possible to keep track of recursive lock acquires and releases: If the thread acquiring a lock is the same thread already owning the lock, the recursion counter is incremented.
This cannot be a race condition, because no other thread can change this value at the time the lock is blocked.
Otherwise, mutex_lock() (or pthread_mutex_lock() in the POSIX version) is called.
If the lock is successfully acquired, the recursion counter must be 0 and is set to 1 afterwards.DWORDWINBASEAPI VOID WINAPI LeaveCriticalSection( LPCRITICAL_SECTION lpCriticalSection) { thread_t me = thr_self(); if (lpCriticalSection->OwningThread == (HANDLE)me) { lpCriticalSection->RecursionCount--; if(lpCriticalSection->RecursionCount < 1) { lpCriticalSection->OwningThread = (HANDLE)0xFFFFFFFF; if(mutex_unlock((mutex_t *)lpCriticalSection->LockSemaphore)) DBG("mutex_unlock() failed"); } } else DBG("not lock owner"); return; } When leaving a critical section, the recursion counter is decremented if the call was recursive.
If the counter is 0 no thread owns the lock anymore, hence mutex_unlock() (or pthread_mutex_unlock() in the POSIX version) must be called.
It is an error if the caller of LeaveCriticalSection() was not the owner of the lock.
Win32 supports an interface to the VM system, especially to protect and map virtual memory pages.
Like for threads, nt2unix has to keep track of data for each file mapping in the system.
nt2unix stores the following information for each mapping: The similar function MapViewOfFile() is now easily implemented by calling MapViewOfFileEx() with the last parameter lpBaseAddress set to 0.
The mentioned refcnt for each mapping is decremented by a call to UnMapViewOfFile().
However, the above implementation has a 4 GB limit concerning the maximum size of the mapped file, because this is the maximum file mapping size possible under Solaris.
The memory access protection bits of a file mapping under Windows NT have more a less equivalent values under UNIX.
However, not all bit masks are supported, namely PAGE_GUARD and PAGE_NOCACHE: Windows NT provides two means of delivering exceptions to user level processes:• by embracing the code with a __try{} ... __except(){} block;• by installing an exception handler calling SetUnhandledExceptionFilter().
Because the first method is a proprietary language extension, only the second method is supported by nt2unix.
Exceptions are mapped to semantically more or less equivalent UNIX-style signals, like denoted in the following The standard protocol family available under UNIX is TCP/IP.
With nt2unix, we map the WinSock API with respect to this protocol to the standard BSD sockets API.
The main difference between the Windows NT and the BSD socket API is due to some new Windows NT data types and definitions:typedef int SOCKET; #define INVALID_SOCKET (SOCKET)(-1) #define SOCKET_ERROR (-1)Additionally, Windows NT defines the Windows Sockets (WinSock) API error codes (WSA* A source of hard to find programming errors is that the fd_set data type is usually implemented as a bit mask under UNIX, while Windows NT implements this data type as an ordinary array.
That is the reason why Windows NT ignores the first parameter nfds which defines the highest bit to be scanned while waiting for pending input.
That is, you can unfortunately write Windows NT code using select() which doesnot run under BSD.
The following [7] and [12]) SVM systems for this operating system.
The source code of SVMlib consists of about 15.000 lines of C++ code written natively for the Win32 API.
The library has been designed to benefit from several Windows NT features like preemptive multithreading and support for SMP machines.
Unlike most software DSM systems, SVMlib itself is truly multithreaded.
It also allows users to create several preemptive user threads to speed up the computation on SMP nodes in the cluster.
Currently the library uses TCP/IP sockets for communication purposes but it will also support efficient message passing using the Dolphin implementation [3] of the Scalable Coherent Interface (SCI) [5].
SVMlib provides a C/C++ API that allows the user to create and destroy regions of virtual shared memory that can be accessed fully transparently.
Different synchronization primitives such as barriers and mutexes are part of the API.To keep track of accesses to the shared regions, SVMlib handles page faults within the regions via structured exception handling provided by the C++ run time system of Windows NT.
At the current stage, two different memory consistency models are supported by three different consistency protocols.
The first consistency model offers the widely used though fairly inefficient sequential consistency [8] model.
This model is supported by single writer as well as multiple writer protocols.
Secondly, the distributed lock based scope consistency [6] is implemented.
When designing an SVM system, several design choices have to be made.
When we started this project our primary goal was to develop a highly flexible and extendable research instrument.
We therefore decided to build SVMlib as a set of independent modules where each can be exchanged without influencing the other modules.
Another important choice was the platform to build SVMlib on.
As Windows NT is a modern operating system with some interesting features like true preemptive kernel threads, SMP support and a rich API we decided to use workstations running Windows NT as the primary platform.
Figure 1 shows the overall design of SVMlib.
On the top level four modules are used.
The first is the memory manager that handles the creation and destruction of shared memory regions, catches page faults and implements the memory dependent part of the user interface.
The memory manager manages a set of regions where each region can use a different consistency model and coherence protocol.
The second part is the lock manager that provides an interface that allows the user to create and destroy primitives for distributed process synchronization -mutexes as wellThread Synchro- nization InitializeCritical- Section() DeleteCriticalSection() EnterCriticalSection() LeaveCriticalSection() mutex_init() mutex_destroy() mutex_lock() mutex_unlock() Thread Local Storage (TLS) TlsAlloc() TlsGetValue() TlsSetValue() TlsFree() thr_keycreate() thr_getspecific() thr_setspecific() pthread_key_ delete() Object Handles CloseHandle() DuplicateHandle() WaitForSingleObject() close() dup(), dup2() thr_join() Process Functions GetCurrentProcess() GetCurrentProcessId() ExitProcess() getpid() getpid() exit() VM Manage- ment VirtualAlloc() VirtualFree() VirtualProtect() VirtualLock() VirtualUnlock() mmap(), valloc(), mprotect() mprotect(), free() mprotect(), memcntl() mlock() munlock() Memory Mapped I/O MapViewOfFile() MapViewOfFileEx() UnmapViewOfFile() CreateFileMapping() mmap() mmap() munmap() STL Error Handling WSAGetLastError() GetLastError() SetLastError() WSASetLastError() errno errno errno errno WinSock API WSAStartup() WSACleanup() closesocket() ioctlsocket() all BSD-style functions!
- - close() ioctl() socket(5) family Excep- tion Handling SetUnhandled- ExceptionFilter() GetException- Information() UnhandledExcep- tionFilter() sigaction() Miscella- neous GetSystemInfo() GetComputerName() QueryPerformance- Frequency() QueryPerformance- Counter() sysinfo() gethostname() - gettimeofday() as global barriers and semaphores.
For internode communication purposes the communicator is used.
The user will never directly use this module.
It is for internal purposes only.
The communicator provides a simple interface containing a barrier, a broadcast algorithm and the possibility to send messages to each other node.
This module has been designed to be active itself.
To take advantage of the SMP support of Windows NT the communicator uses threads to handle incoming messages.
The last main module is the interval manager that allows to implement weak consistency models like lazy release consistency or the currently used scope consistency.
The user will never have to access this module directly.
It is used as a bridge between the memory and the lock manager when weak consistency models are used.
This is needed because both locks and memory pages handle a part of the weak consistency model.
SVMlib provides several API personalities to the application programmer.
First of all, a native C and C++ API is provided.
For compatibility to other SVM systems and existing shared memory implementations, other interfaces to shared memory programming are supported.
Currently, these interfaces include the Shared Memory Interface (SMI) [4], the macro interface of Stanford Parallel Applications for Shared Memory (SPLASH) [18] and the Coherent Virtual Machine (CVM) [13].
Other interfaces are planned to be supported in the future.
Using nt2unix, we ported the source code of SVMlib to Sun Solaris 2.5.1 with absolutely no source code changes.
Though the development of nt2unix was in fact driven by our goal to port SVMlib to UNIX, this was very surprising, since, at first glance, a DSM implementation naturally is very system dependent.
To show the impact of the Win32 emulation, we give usual metrics characterizing the performance of the SVM library:• Page Fault Detection Time.
This value includes the mean time from the occurrence of a processor page fault on a protected page to the entrance of the handling routine.
That is, this time includes all operating system overhead to deliver a page fault exception to user code.
Note that there seems to be no difference between the Windows NT Server and NT Workstation (WS) version with respect to exception handling.
We compared these values with user level page fault detection under Solaris 2.5.1 for Intel and SPARC using nt2unix, respectively.
As mentioned, under UNIX, the memory exception handling mechanism of Windows NT is emulated by catching the SIGSEGV signal.
• It is clear that the above measurements are not sufficient to determine the overall performance of nt2unix, but they show reasonable results with respect of key functions used to implement SVMlib on Windows NT: multithreading, networking and exception handling.
In this paper, we introduced nt2unix, a library providing an important subset of the Win32 API on UNIX based systems.
The library makes it possible to port Win32 console applications to UNIX with much less effort.
The first version of nt2unix was developed and tested on Solaris 2.5 for SPARC and Intel Processors, respectively.
At the moment, we are extending the implementation to support more generic UNIX platforms and POSIX interfaces:• The current version supports the POSIX thread API additionally to the Solaris thread API.
This required slightly different implementation of ResumeThread() and SuspendThread(), because POSIX doesnot include functions equivalent to Solaris thr_resume() and thr_suspend().
