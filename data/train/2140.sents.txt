The Domain Name System (DNS) is fundamental to the operation of the Internet.
Failures within DNS can have a dramatic impact on the wider Internet, most notably preventing access to any services dependent on domain names (e.g. web, mobile apps).
Although there have been several studies into DNS utilization, we argue that greater focus should be placed on understanding how and why DNS queries fail in-the-wild.
In this paper, we perform the largest ever study into DNS activity , covering 3B queries.
We find that 13.5% of DNS queries fail, and this leads us to explore the root causes.
We observe significant differences between IPv4 and IPv6 lookups.
A handful of domains that have high failure rates attract a huge volume of queries, and thus dominate the failures.
This is particularly the case for domains that are classified as malicious.
The success rates also vary greatly across resolvers due to the differences in the domains that they serve and the infrastructure reliability.
The Domain Name System (DNS) is organized as a distributed system that provides mappings between humanreadable domain names (e.g. foo.com) and their associated DNS records [17][18][19][20].
These include A type records for IPv4 addresses, AAAA for IPv6 addresses, MX for SMTP mail exchanges, NS for name servers, PTR for pointers of reverse DNS lookups and CNAME for domain name aliases.
Nearly all Internet-connected applications depend on DNS.
As such, it is a critical dependency, whose failure has the potential to create global Internet outages.
For example, in 2016, Dyn (a DNS operator) suffered a major Denial of Service attack against its infrastructure.
This meant that DNS queries for popular domains such as Netflix and Visa began to fail, crippling access to these services (even though those services were still online).
Although there is a significant body of research into DNS behavior, we argue that DNS failures specifically require further investigation.
Root DNS server behavior was examined in [5,8], where negative DNS answers were analyzed including NXDOMAIN responses.
Callahan et al. [4] also examined the DNS behavior from the perspectives of performance and response message.
We differ in that our focus is on failures not caused by NXDOMAINs.
In addition, we note that DNS has evolved significantly since these studies, e.g. the rise of new gTLDs and IDNs.
Although there have been a number of studies of new gTLDs and IDNs [9,13,15], they mainly focus on domain registration behavior and cyber attacks, while we complement these studies with DNS query failure analysis.
Other work [12,22,25] has leveraged NXDOMAIN responses to detect botnets or DGAs.
Again, our work focuses on failures caused by DNS infrastructures instead of NXDOMAINs.With the above in-mind, we present a large-scale analysis of DNS query failures in-the-wild.
To achieve this, we gather a unique dataset containing 3B DNS queries (Section 2).
We find that failed queries are, indeed, common place with 13.5% of all queries not successfully resolved.
This motivates us to inspect which factors correlate most closely with failed queries (Section 3).
We observe a highly skewed distribution, whereby a small number of domains are responsible for the majority of failures.
AAAA queries (IPv6) are particularly unreliable, with only 1/3 of queries successfully resolved.
This is perhaps understandable given the use of protocols such as Happy Eyeballs [24], although we also find that many domains lack AAAA support.
We further inspect the relationship between failures and the DNS resolver used, to find a vast array of resolvers, with 13.5% of queries in our dataset being issued to public resolvers, e.g. OpenDNS.
We observe diverse failure rates across the resolvers, confirming that they do have an impact on failures.
We also note differences among the Top Level Domains (TLDs) with, for example, the new wave of generic-TLDs having higher failure rates than more traditional TLDs.
Finally, we propose system implications based on our findings.
To sum up, we make the following key findings:• In spite of the promotion of IPv6 over recent years [7,21,26], the majority (86.2%) of DNS queries are still for A records, while only 10.4% are for AAAA records (comparable to the proportion in 2012 [8]).
The failure rate for A lookups is 6.9%, yet, to our surprise, the failure rate for AAAA queries is as high as 64.2%, almost 3 times of that in 2012 [8].
We observe that approximately 60% of domains do not support AAAA queries.
• We explore a number of factors to explore the causes of failures.
We observe a heavy-tailed distribution of failures across domains, indicating that a handful of domains contribute to most of the failures.
20% of local resolvers in our dataset have never successfully resolved AAAA queries, implying they are not ready for IPv6.
The use of public resolvers may also impact query failures as they show diverse failure rates, in-part due to the distinct domain sets that each serves and the differences in infrastructure reliability.
Identification of Failed Queries.
We next extract the set of failed queries for the four most popular types of records (A, AAAA, PTR, MX), because they constitute 99.5% of all queries.
For each response, we extract the requested domain (the QNAME) from the Question portion, and check if the response contains a valid answer (e.g. for an A query, at least one RR in the response is an A record of the requested domain).1 IP addresses and BGP prefixes are anonymized with Crypto-PAn [2] In this paper, we are interested in failures caused by DNS infrastructures instead of NXDOMAINs (e.g. typos).
However, we do not have the response code (e.g. 'NOERROR', 'NXDOMAIN' or other status) in our dataset.
Therefore, we turn to a heuristic method to filter out logs that are attributed to NXDOMAINs.
Specifically, for each domain requested (i.e.,QNAME in the log), we check if it has succeeded at least once in our logs.
We then remove the logs containing domains that have never succeeded in the whole dataset, as they are likely NXDOMAINs.
The subsequent analyses are based on the remaining dataset, which contains 2,811,010,890 logs issued by 37,070,965 unique IP addresses to 246,991 resolvers.Caveats.
It is important to highlight potential limitations in our data.
The above heuristic method may leave some domains that were resolvable at a time but then became NXDOMAINs later.
Moreover, our dataset does not allow us to inspect failed queries that did not trigger a response (e.g. due to packet loss).
Naturally, the fact that a DNS response is returned does not necessarily mean that the web server is live and responsive.
Therefore, we only inspect if a valid DNS response is returned (not if the IP address is correct).
There are many possibilities that lead to incorrect mapping of domains to addresses, such as DNS manipulation [16] and on-path DNS interception [14].
Another related concern pertains to censored domains.
Thus, before continuing, we test if a censored domain will return a valid IPv4/IPv6 address for an A/AAAA query.
Our tests confirm that, indeed, valid addresses are returned, even when querying censored websites.
2 Another potential limitation is that our data is local to China.
Nevertheless, we believe the scale of the Chinese Internet means that these findings can still have a major impact.
As DNS is a globally distributed system where China and other countries are all involved, there is not much specific to China from the perspective of the DNS infrastructure.
We also note that (to the best of our knowledge) this is by far the largest DNS failure dataset ever studied.Ethical Issues.
The ISPs collect the DNS logs for the purpose of improving their service quality and security.
The end users' IP addresses were anonymized and we are unable nor allowed to link queries to users.
Users are notified when subscribing that the ISPs may collect this information, and may share it with academics for research.
Our study has not triggered the collection of any new data.
All data was processed in a secure silo by the first author.
We begin by simply computing the number and types of failed queries in our dataset.
Table 1 shows the percentage of query types, alongside the overall success rate, which is 1 minus the ratio of failed queries to all queries of each query type.
We present the four most popular query types.
The A type queries account for the majority (86.2%), and AAAA queries have a smaller query volume (10.4%).
3 We observe a variety of success rates across the query types.
Overall, the A queries are successfully resolved most frequently, while other query types manifest lower success rates.
This confirms that a sizeable fraction of queries are not successfully resolved; we spend the rest of the section exploring factors influencing this trend.
We first compute the distribution of failures across domains.
Due to their prominence, we focus on A and AAAA queries.
Figure 1 presents the CDFs of the success rates across domains encountered within our dataset.
Another explanation for failed queries is that the resolvers may not correctly handle queries.Testing Resolvers.
To explore this, we calculate the success rate of queries issued to each DNS resolver (identified by the resolver's IP address).
Figure 4 presents the CDF of the success rate for the domains per resolver.
5 The majority of [3,6,10].
Hence, we also inspect the reliability of these public infrastructures, which include 114 (Chinese) DNS resolvers provided by multiple telecom operators, DNS Pai which belongs to Qihoo 360, AliDNS which belongs to Alibaba, and DNSPOD which belongs to Tencent.
We also take into account GoogleDNS and OpenDNS which are widely used throughout the world.
We identify these public DNS resolvers by the IP addresses offered on their official websites.
Table 2 shows the number of A and AAAA queries handled by each public DNS resolver mentioned above along with their success rates.
GoogleDNS dominates the most used public DNS service (even though Google is less well known in China).
Others do not show much difference in terms of query volume.
We observe various success rates across public DNS resolvers though.
For example, DNSPOD succeeds in almost all its A queries, while OpenDNS achieves just 86.3%.
There is also notably lower success rate across all resolvers for AAAA queries.
The above confirms that resolvers do seem to have an impact on success rates.
A potential reason for this is that the resolvers may simply receive different queries.
To explore this, we compute a vector for each resolver, where each element represents a domain, which appears in A or AAAA queries using the resolver, and the query volume of that domain handled by the resolver.
Then we calculate the similarity of each pair of DNS resolver using the cosine similarity between their vectors.
Figure 5 illustrates the result.
The resolvers actually demonstrate a surprisingly low similarity with each other, signalling rather different request patterns.
Among these resolvers, 114DNS and AliDNS are the least like the others.
Indeed, 114DNS handles many requests for Akamai domains which appear less often in other resolvers, while AliDNS handles many requests of taobao.com and alipay.com which belongs to Alibaba services.
This could be the reason for the variance of success rates observed from different resolvers.Another possible explanation is the differences between resolvers' infrastructures.
To explore this, we compare the success rates of the same domains handled by different resolvers.
Specifically, for each resolver, we first find the domain intersection of it and each other resolver.
Then for each domain in each intersection, we calculate the difference in their success rates on the two resolvers.
Finally, for each type of resolver, we plot the CDF of the differences between this type to other types in Figure 6.
Note, a difference below 0 indicates a lower success rate of this type of resolver, and a positive value indicates a higher success rate.
We can see significant differences for some types of resolvers: domains resolved by 114DNS and ISP are more likely to fail, while DNSPOD and 360DNS have higher success rates.
This observation partially explains the results in Table 2.
We next inspect if certain TLDs have lower query success rates.
Specifically, we explore two camps of TLDs: the new generic Top Level Domains (gTLD), 6 and those that have Internationalized Domain Name (IDNs).
Our dataset contains 611,769 new gTLDs and 79,705 IDNs.
Table 3 summarizes our results.
We see rather different rates of success across the domain and query types.
The lower success rate for new gTLDs may be because such gTLDs attract certain types of domain registrant.
For example, the .
lol domain is well known to attract large volumes of malicious activites [11].
With this in-mind, we find a success rate of just 20.3% for .
lol, compared to 83.0% of .
com.
Another reason for failed queries is the presence of malicious domains which are unreliable.
To inspect this, we extract all A record queries that were successfully resolved and investigate the network segments hosting them.
Overall, we obtain 113,539 (11,729) IP addresses hosting new gTLDs (IDNs) mapping to 29,047 (5,635) /24 network segments, respectively.
Figure 7 presents the distribution of the number of new gTLD domains and IDNs per network segment (sorted by #IPs hosting new gTLD domains and IDNs, respectively).
Several surges in both lines further arouse our attention: they indicate the existence of some /24 network segments that serve a large number of new gTLD domains or IDNs.
This is naturally driven by the presence of large web hosting providers.Thus, we extract the top 5 surges for both new gTLD domains and IDNs to explore their details.
Due to space limitation, we only present the results of new gTLD domains in Table 4, where the last column presents the number of domains that are resolvable on 26 Sept. 2019.
Across all of these top ASes we witness an extremely low rate of successful resolutions.
In the most extreme case, we observe 201K queries for 195K domains being mapped to Enzu, none of which are resolvable today.
In addition, the number of queries is close to the number of FQDNs, suggesting that these domains are short-lived and change frequently.
The above trends lead us to hypothesize that some of these domains may be associated with malicious activities.
To explore this, we leverage two blacklists from VirusTotal and Qihoo 360 to check the domains.
We label a domain as malicious if any of these two blacklists classify it as so.
Due to the large volume of domains, we only check SLDs (as opposed to FQDNs).
The results are listed in parentheses in Table 4.
None of the IDNs are classified as malicious by the two blacklists, however, a significant fraction of the new gTLD domains fall into this category.
For example, 80% of the SLDs hosted in 23.245.136.0/24 prefix (first row) are classified as malicious.
This is common across all of the top new gTLD domains.
In total, 73.7% of the queries are for the malicious domains.
Figure 8 presents the distribution of the number of end users' BGP prefixes requesting each malicious SLD in Subnet 1, 2, 3, 5 (shown in Table 4).
Except the SLDs hosted in subnet 3, other malicious SLDs affect only 1 or 2 networks.
In contrast, malicious SLDs hosted in subnet 3 have a footprint in dozens of networks, implying a larger impact.
One possible explanation is that the subnets host different sites.
Hence, Figure 9 presents the make-up of the 5 subnets, confirming that they do map to different TLDs.
In this section, we discuss about the implications of our findings on system design, i.e.,what systems we could build based on our observations.
Active Measurement System.
Our results show that although IPv6 has been promoted in recent years, AAAA queries still fail frequently, and there exist resolvers that do not support AAAA queries.
In order to understand which resolvers support AAAA queries, we can build a system to actively measure the IPv6 support of the resolvers.
For instance, similar to [23], we can build a single-node measurement system for monitoring IPv6 support of DNS resolvers.
The system can distinguish between resolvers that support and do not support AAAA queries by sending DNS queries of popular domains that support AAAA queries.
We can also test whether a domain supports AAAA queries by sending requests of this domain to resolvers that are classified as supporting AAAA queries.
Considering the differences between resolvers, we could measure the success rates of domains by sending queries to different resolvers, and use the result to help choose the better resolvers.In addition, we could compare different resolvers from the perspective of localization, i.e.,whether the resolver directs users to remote servers.
This additional function is motivated by our observation presented in Table 5: We calculate for each resolver the fraction of queries that redirect clients to servers in the same AS (when possible).
For each domain i, we count all its response IP addresses in the entire dataset and these IP addresses form a set S i .
Then for each log whose QNAME equals i, if at least one IP address in S i is in the same AS as the end user, we label this query as "possible to be served locally"; if at least one IP address in the response IP addresses of this log is in the same AS as the end user, we label this query as "served locally".
These two labels are independent and a log can have both labels, one of the labels, or no label.
We aggregate the logs according to the resolvers, and calculate the ratio of the number of logs labeled as served locally to the number of logs labeled as possible to be served locally for each resolver.
We observe that the obtained ratio differs significantly across the resolvers, which indicates that users can choose appropriate resolvers for better network performance.
Therefore, it is useful to develop a system for end users to measure the localization performance of different resolvers.
Such an active measurement system is useful for content publishers, ISPs and end users.
Many CDNs are being upgraded for better IPv6 support, however, if AAAA queries frequently fail, then the content publisher should be careful to use such CDN IPv6 service.
Therefore, it is useful for publishers to locate their content if they can understand in advance which resolvers do not support AAAA queries.
In addition, ISPs could also benefit when considering IPv6 network expansion, because understanding which domains support AAAA queries is useful for estimating the IPv6 traffic.
For users, the measurement of different resolvers can help them to choose more suitable resolvers considering both IPv6 support and localization performance.Malicious New gTLD Domain Detection System.
We have found that malicious SLDs (of new gTLD domains) hosted by particular ASes contribute to higher failure rates.
Manual inspection further reveals that the length of the SLDs tend to be short.
Table 6 presents the fraction of malicious SLDs of different length.
In more traditional TLDs, malicious domains are usually long because registering a short domain name would cost too much for an attacker.
However, registering short new gTLD domains is much easier.
Therefore, extracting features from domain names may not work well for detecting malicious new gTLD domains.
We could use features like DNS query frequency, the number of FQDNs of an SLD, the resolved IP addresses and the corresponding ASes to build a system for detecting malicious SLDs of new gTLD domains.
% of SLDs 0.1% 93.0% 6.1% 0.8% The paper has presented a deep dive into DNS query failures using over 3B queries.
We have identified high failure rates: 6.9% of A and 64.2% of AAAA queries.
IPv6 is far from ready as over half of the domains and 20% of local resolvers do not support AAAA queries.
Upgrading these resolvers and popular domains for IPv6 is the first step towards the wider usage of IPv6.
Internet users, on the other hand, should be aware of the impact of using public resolvers, from both the perspectives of query failures and mapping inaccuracy [6].
We also found that the volatility of malicious domains (particularly new gTLD domains and IDNs) contributes to higher failure rates because they change frequently and accesses to them results in failures.
The corresponding SLDs of malicious new gTLD domains and IDNs, however, are limited, and they are likely hosted by particular ASes.
We finally proposed two potential systems that could build on our findings.
This work was supported in part by National Key RD Program of China: 2018YFB1800201, the NSF of China (NSFC): 61725206, the Youth Innovation Promotion Association CAS.
The corresponding author is Zhenyu Li.
