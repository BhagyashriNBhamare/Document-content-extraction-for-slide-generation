This paper considers peer-to-peer scheduling for a network with multiple wireless devices.
A subset of the devices are mobile users that desire specific files.
Each user may already have certain popular files in its cache.
The remaining devices are access points that typically have access to a larger set of files.
Users can download packets of their requested file from an access point or from a nearby user.
Our prior work optimizes peer scheduling in a general setting, but the resulting delay can be large when applied to mobile networks.
This paper focuses on the mobile case, and develops a new algorithm that reduces delay by opportunistically grabbing packets from current neighbors.
However, it treats a simpler model where each user desires a single file with infinite length.
An algorithm that provably optimizes throughput utility while incentivizing participation is developed for this case.
The algorithm extends as a simple heuristic in more general cases with finite file sizes and random active and idle periods.
Consider a network with N wireless devices.
Let K of these devices be identified as users, where K ≤ N .
The users can send packets to each other via direct peer-to-peer transmissions.
Each user has a certain collection of popular files in its cache.
The remaining N − K devices are access points.
The access points are connected to a larger network, such as the internet, and hence typically have access to a larger set of files.
While a general network may have users that desire to upload packets to the access points, this paper focuses only on the user downloads.
Thus, throughout this paper it is assumed that the access points only send packets to the users, but do not receive packets.
In contrast, the users can both send and receive.
The network is mobile, and so the transmission options between access points and users, and between user pairs, can change over time.Each user only wishes to download, and does not naturally want to send any data.
Users will only send data to each other if they agree to operate according to a control algorithm that schedules such transmissions.
This paper assumes the users have already agreed to abide by the control algorithm, and thus focuses attention on altruistic network design that optimizes a global network utility function.
Nevertheless, this paper includes a tit-for-tat constraint, similar to the work in [1], which is an effective mechanism for incentivizing participation.
Further, while this paper develops a single algorithm for optimizing the entire network, this does not automatically require the algorithm to be centralized.
Indeed, the resulting algorithm often has a distributed implementation.This material is supported in part by one or more of: the NSF Career grant CCF-0747525, the Network Science Collaborative Technology Alliance sponsored by the U.S. Army Research Laboratory W911NF-09-2-0053.
The model of this paper applies to a variety of practical network situations.
For example, the access points can be wireless base stations in a future cellular network that allows both base-station-to-user transmissions as well as direct userto-user transmissions.
Alternatively, some of the access points can be smaller femtocell nodes.
To increase the capacity of wireless systems, it is essential for future networks to enable such femtocell access and/or direct user-to-user transmission.
This paper considers only 1-hop communication, so that all downloads are received either directly from an access point or from another user.
The possibility of a user acting as a multi-hop relay is not considered here.Our prior work [1] treats a more complex model where each user can actively download multiple files at the same time, and where the arrival process of desired files at each user is random.
A key challenge in this case is the complexity explosion associated with labeling each file according to the subset of other devices that already have it.
This is solved in [1] by first observing the subset information of each newly arriving file, making an immediate decision about which device in this subset should transmit the desired packets, and then placing this request in a request queue at that selected device.
The devices are not required to transmit these packets immediately.
Rather, they can satisfy the requests over time.
This procedure does not sacrifice optimality, and yields an algorithm with polynomial complexity.
However, while this is effective for networks with static topology, it can result in significant delays in mobile networks.
That is because a device that is pre-selected for transmission may not currently be in close proximity to the intended user, and/or may move out of transmission range before transmission occurs.The current paper provides an alternative algorithm that reduces delay, particularly in the mobile case.
To do so, we use a simpler model that assumes each user desires only one file that has infinite size.
This enables us to focus on scheduling to achieve optimally fair download rates for each user.
Rather than pre-selecting devices for eventual transmission, our algorithm makes opportunistic packet transmission decisions from the set of current neighbors that have the desired file.
This also facilitates distributed implementation.
The infinite file size assumption is an approximation that is reasonable when file sizes are large, such as for video files.
A heuristic extension to the case of finite file sizes is treated in Section V.
This heuristic is based on the optimality insights obtained from the infinite size case.Prior work on fair scheduling in mobile ad-hoc networks has considered token-based and economics-based mechanisms to incentivize participation [2][3] [4].
Incentives are also well studied in the peer-to-peer literature.
For example, algorithms in [5][6] [7] [8] track the number of uploads and downloads for each user, and give preferential treatment to those who have helped others.
Algorithms based on tokens, markets, and peer reputations are considered in [9][10] [11].
Such algorithms are conceptually based on the simple "tit-for-tat" or "treat-fortreat" principle, where rewards are given in direct proportion to the amount of self-sacrificial behavior at each user.
Our current paper also considers a tit-for-tat mechanism.
However, a key difference is that it designs a tit-for-tat constraint directly into the optimization problem (similar to our prior work [1] that used a different network model).
Remarkably, the solution of the optimization naturally results in an intuitive token-like procedure, where the number of tokens in a virtual queue at each user determines the reputation of the user.
Peer-topeer transmissions between user pairs are given preferential treatment according to the differential reputation between the users.
This is similar to the backpressure principle for optimal network scheduling [12] [13].
However, the "backpressure" in the present paper is determined by token differentials in virtual reputation queues, rather than congestion differentials.
Let N represent the set of devices, and K represent the set of users, where K ⊆ N .
Let N and K be the sizes of these sets.
For simplicity in this basic model, assume that each user k ∈ K wants a single file that consists of an infinite number of fixed-length packets (this assumption is modified to treat finite file sizes in Section V).
For each k ∈ K, define F k as the subset of devices in N that have the file desired by user k.
The set F k can include both users and access points, and represents the set of devices that user k can potentially receive packets from as it moves throughout the network.
If each user k only accepts downloads from a certain subset of devices that it identifies as its social group, then F k can be viewed as the intersection of its social group and the set of devices that have its file.
We assume that k / ∈ F k , so that no user wants a file that it already has.
Further, we assume F k is non-empty, so that at least one device has the desired file.
This latter assumption is reasonable if the network has one or more access points with high speed internet connections.
Such access points can be modeled as having all desired files.The network operates in slotted time with time slots t ∈ {0, 1, 2, . . .}.
Every slot t, the network makes transmission actions.
Let (µ nk (t)) be the matrix of transmission actions chosen on slot t, where each entry µ nk (t) is the number of packets that device n ∈ N transmits to user k ∈ K.
The set of all possible matrix options to choose from is determined by the current topology state of the network, as in [13].
Specifically, let ω(t) represent the topology state on slot t, being a vector of parameters that affect transmission, such as current device locations and/or channel conditions.
Assume ω(t) takes values in an abstract set Ω, possibly being an infinite set.
The ω(t) process is assumed to be ergodic.
In the case when Ω is finite or countably infinite, the steady state probabilities are represented by π(ω) = P r[ω(t) = ω] for all ω ∈ Ω.
Else, the steady state probabilities are represented by an appropriate probability density function.These probabilities are not necessarily known by the network controller.
Extensions to the case when ω(t) is non-ergodic are explored in Sections V and VI.For each ω ∈ Ω, define R(ω) as the set of all transmission matrices (µ nk ) that are possible when ω(t) = ω.
The exact structure of R(ω) depends on the particular physical characteristics and interference properties of the network.
One may choose the R(ω) sets to constrain the transmission variables µ nk to take integer values, although this is not required in our analysis.
We assume only that each set R(ω) has the following basic properties:• Every matrix (µ nk ) ∈ R(ω) has non-negative entries.
• If (µ nk ) ∈ R(ω), then (˜ µ nk ) ∈ R(ω), where (˜ µ nk ) is any matrix formed by setting one or more entries of (µ nk ) to zero.
• Every matrix (µ nk ) ∈ R(ω) must satisfy the constraint 0 ≤ n∈N µ nk ≤ x max k for all k ∈ K, where x max kis a given bound on the number of packets that can be delivered to user k on one slot, regardless of ω.
This section presents an example network model that fits into the above framework.
The network region is divided into C non-overlapping subcells.
Let c n (t) be the current subcell of device n, so that c n (t) ∈ {1, . . . , C}.
Let c(t) = (c 1 (t), . . . , c N (t)) be the vector of device locations on slot t.
The access points have fixed locations, while the mobile users can change subcells from slot to slot.
Let S(t) = (S nk (t)) be a channel state matrix, where S nk (t) is the number of packets that device n can transmit to device k on slot t, provided that there are no competing transmissions (as defined below).
The value S nk (t) can depend on the c(t) location vector.
Let the topology state ω(t) be given by ω(t) = (c(t), S(t)).
Assume access point transmissions are orthogonal from all other access point transmissions and from all peer-to-peer user transmissions.
For each ω(t), define R(ω(t)) as the set of all (µ nk (t)) matrices with entries that satisfy:• µ nk (t) ∈ {0, S nk (t)} for all n ∈ N and k ∈ K.• Users can only transmit to other users currently in their same subcell, so that µ nk (t) = 0 whenever n ∈ K, k ∈ K, and c n (t) = c k (t).
• At most one user-to-user transmission can take place per subcell on a given slot.
• Each access point can send to at most one user per slot.
This particular structure is useful because it allows user transmissions to be separately scheduled in each subcell, and access point transmissions to be scheduled separately from all other decisions.
The sets R(ω(t)) can be defined differently for more sophisticated interference models.
For example, the transmission rate of an access point can depend on whether or not neighboring access points are scheduled for transmission.
For each a ∈ N and b ∈ K, define f ab (t) to be 1 if, on slot t, device a has the file requested by user b, and 0 otherwise:f ab (t) =Because each user desires a single infinite size file, the f ab (t) values do not change with time.
However, we use the "(t)" notation because it facilitates the extension to more general cases in Section V, where the sets F b in the right-hand-side of (1) are extended to F b (t).
Every slot t, the network controller observes ω(t) and chooses (µ nk (t)) ∈ R(ω(t)).
For each k ∈ K, define x k (t) as the total number of packets that user k receives from others on slot t, and define y k (t) as the total number of packets that user k delivers to others on slot t:x k (t) = a∈N µ ak (t)f ak (t)(2)y k (t) = b∈K µ kb (t)f kb (t)(3)The multiplication µ ab (t)f ab (t) in (2) and (3) formally ensures that user b can only receive a packet from another device that has the file it is requesting.
For a given control algorithm, let x k and y k represent the time averages of the x k (t) and y k (t) processes for all k ∈ K:x k = lim t→∞ 1 t t−1 τ =0 x k (τ ) , y k = lim t→∞ 1 t t−1 τ =0 y k (τ )These limits are temporarily assumed to exist.
1 The value x k is the time average download rate of user k, and y k is the time average upload rate.
The goal is to develop a control algorithm that solves the following: 2Maximize:k∈K φ k (x k )(4)Subject to:α k x k ≤ β k + y k ∀k ∈ K (5) (µ nk (t)) ∈ R(ω(t)) ∀t ∈ {0, 1, 2, . . .} (6)where for each k ∈ K, φ k (x) are given concave functions and α k , β k are given non-negative weights.
The value φ k (x k ) represents the utility associated with user k downloading at rate x k .
The constraints (5) are the tit-for-tat constraints from [1].
These constraints incentivize participation.
They allow a "free" download rate of β k /α k .
Users can only receive rates beyond this value in proportion to the rate at which they help others.
Choosing larger values of α k (typically in the range 0 ≤ α k ≤ 1) leads to more stringent requirements about helping others.
These tit-for-tat constraints restrict the system operation and thus can affect overall network utility.
Removing these constraints by setting α k = 0 for all k leads to the largest network utility, but does not embed any participation incentives into the optimization problem.The functions φ k (x) are assumed to be concave, continuous, and non-decreasing over the interval x ≥ 0.
They are not required to be differentiable.
For example, they can be piecewise linear, such as φ k (x) = min[x, θ k ], where θ k is a given constant rate desired by user k. Alternatively, one can choose φ k (x) = ln(x) for each k ∈ K, which leads to the well known proportional fairness utility [14].
One may want to modify the problem (4)-(6) by specifying separate utility functions for the user-to-user download rates and the access-point-to-user download rates.
This is possible by creating two "virtual users" m 1 (k) and m 2 (k) for each actual user k ∈ K. Channel conditions for the virtual users 1 This is only to simplify exposition of the optimization goal.
The analysis in later sections does not a-priori assume the limits exist.
2 Note that the trivial all-zero solution is always feasible.
m 1 (k), m 2 (k) are defined to be the same as for the actual user k, with the exception that virtual user m 1 (k) is restricted to receive only from other users, while virtual user m 2 (k) is restricted to receive only from the access points.
The problem (4)- (6) is solved via the stochastic network optimization theory of [13] [15].
First note that problem (4)-(6) is equivalent to the following problem that uses auxiliary variables γ k (t):Maximize: k∈K φ k (γ k )(7)Subject to:α k x k ≤ β k + y k ∀k ∈ K (8) γ k ≤ x k ∀k ∈ K (9) (µ nk (t)) ∈ R(ω(t)) ∀t ∈ {0, 1, 2, . . .} (10) 0 ≤ γ k (t) ≤ x max k ∀t ∈ {0, 1, 2, . . .} (11)where φ k (γ k ) is defined as the time average of the process φ k (γ k (t)).
The auxiliary variables γ k (t) act as proxies for the actual download variables x k (t).
This is useful for separating the nonlinear utility optimization from the network transmission decisions.It can be shown that the optimal utility value is the same for both problems (4)-(6) and (7)- (11) [15].
Let φ * denote this optimal utility.
Now consider an algorithm that solves the problem (7)-(11).
Let (µ nk (t)), (γ k (t)) be the decisions made over time, and let x k , y k , γ k , φ k (γ k ) be the corresponding time averages, all of which satisfy the constraints of the problem (7)-(11).
Note that these constraints include all of the desired constraints of the original problem (4)-(6).
Then:φ * = k∈K φ k (γ k ) ≤ k∈K φ k (γ k )(12)≤ k∈K φ k (x k ) (13) ≤ φ *(14)where (12) holds because this algorithm achieves the optimal utility φ * (together with Jensen's inequality for the concave function φ k (γ)), (13) holds because this algorithm must yield time averages that satisfy γ k ≤ x k for all k ∈ K, and (14) holds because the transmission decisions of the algorithm satisfy all desired constraints of the original problem, and thus produce x k values that give a utility that is less than or equal to the optimal utility of the original problem (which is also φ * ).
It follows that any algorithm that is optimal for (7)-(11) makes decisions that are also optimal for the original problem.
To facilitate satisfaction of the tit-for-tat constraints (8), for each k ∈ K define a virtual queue H k (t), with dynamics:H k (t + 1) = max [H k (t) + α k x k (t) − β k − y k (t), 0] (15)where x k (t), y k (t) are defined in (2)-(3).
The intuition is that α k x k (t) can be viewed as the "arrivals" on slot t, and β k + y k (t) can be viewed as the "offered service" on slot t. Stabilizing queue H k (t) ensures the time average of the "arrivals" is less than or equal to the time average of the "service," which ensures constraints (8).
Similarly, to satisfy the constraints (9), for each k ∈ K define another virtual queue Q k (t) with dynamics:Q k (t + 1) = max[Q k (t) + γ k (t) − x k (t), 0](16)The update (16) can be interpreted as a queueing equation where γ k (t) is the amount of data requested by user k on slot t, and x k (t) is the amount of service.
Stabilizing Q k (t) ensures γ k ≤ x k .
Define the following quadratic function L(t):L(t) = 1 2 k∈K [Q k (t) 2 + H k (t) 2 ]Intuitively, taking actions to push L(t) down tends to maintain stability of all queues.
Define ∆(t) as the drift on slot t:∆(t) = L(t + 1) − L(t)Let Θ(t) = (Q k (t), H k (t))| k∈K be the vector of all virtual queue values on slot t.
The algorithm is designed to observe the queues and the current ω(t) on each slot t, and to then choose (µ nk (t)) ∈ R(ω(t)) and γ k (t) subject to 0 ≤ γ k (t) ≤ x max k to minimize a bound on the following drift-plus-penalty expression [15]:∆(t) − V k∈K φ k (γ k (t))where V is a non-negative weight that affects a performance bound.
Intuitively, the value of V affects the extent to which our control action on slot t emphasizes utility optimization in comparison to drift minimization.Lemma 1: Under any control algorithm, we have:∆(t) − V k∈K φ k (γ k (t)) ≤ B(t) − V k∈K φ k (γ k (t)) + k∈K H k (t)[α k x k (t) − β k − y k (t)] + k∈K Q k (t)[γ k (t) − x k (t)](17) where B(t) is defined:B(t) = 1 2 k∈K (α k x k (t) − β k − y k (t)) 2 + 1 2 k∈K (γ k (t) − x k (t)) 2Proof: Squaring (15) and using max[y, 0] 2 ≤ y 2 for any real number y yields:H k (t + 1) 2 ≤ H k (t) 2 + (α k x k (t) − β k − y k (t)) 2 2H k (t)(α k x k (t) − β k − y k (t))Similarly, squaring (16) gives:Q k (t + 1) 2 ≤ Q k (t) 2 + (γ k (t) − x k (t)) 2 +2Q k (t)(γ k (t) − x k (t))Summing over k ∈ K and dividing by 2 yields the result.The value of B(t) can be upper bounded by a finite constant B every slot, where B depends on the maximum possible values that µ nk (t) and γ k (t) can take.
The algorithm below is defined by observing the queue states and ω(t) every slot t, and choosing actions to minimize the last three terms on the right-hand-side of (17) (not including the first term B(t)), given these observed quantities.
Using definitions of x k (t) and y k (t) in (2)- (3) leads to the following on each slot t:• (γ k (t) decisions) Each user k ∈ K observes Q k (t) and chooses γ k (t) to solve:Maximize: V φ k (γ k (t)) − Q k (t)γ k (t)Subject to:0 ≤ γ k (t) ≤ x max k • (µ nk (t) decisions)The network controller observes all queues (Q(t), H(t)) and the topology state ω(t) on slot t, and chooses matrix (µ nk (t)) ∈ R(ω(t)) to maximize the following expression:n∈N k∈K µ nk (t)f nk (t)W nk (t)(18)where weights W nk (t) are defined:W nk (t) = Q k (t) + 1 {n∈K} H n (t) − α k H k (t)where 1 {n∈K} is an indicator function that is 1 if device n is a user, and 0 if device n is an access point.
• (Queue updates) Update virtual queues H k (t) and Q k (t) for all k ∈ K via (15) and (16).
The γ k (t) decisions can be viewed as flow control actions that restrict the amount of data requested from user k on each slot.
They are made separately at each user k.
The (µ nk (t)) decisions are transmission actions made at the network layer.
Examples are given below.
Suppose we have the following strictly concave utility functions for all k ∈ K:φ k (x k ) = ln(1 + ν k x k )(19)Then the γ k (t) decisions are:γ k (t) = V Q k (t) − 1 ν k x max k 0(20)where the operation [y] b 0 is equal to y if 0 ≤ y ≤ b, 0 if y < 0, and b if y > b.
These utility functions can be viewed as an accurate approximation of the proportionally fair utility function if we use ν k = ν for all k, for a large value of ν.
Alternatively, using the proportionally fair utilitiesφ x (x k ) = ln(x k ) for all k ∈ K leads to γ k (t) = [V /Q k (t)] x max k 0, which is indeed the same as (20) in the limit as ν k → ∞.
Suppose the network has the special structure specified in Section II-A.
Let A be the set of access points.
Let K a (t) be the set of users within reach of access point a on slot t.
Then each access point a ∈ A observes channels S ak (t) and queues Q k (t), H k (t) for all users k ∈ K a (t) and chooses to serve the single user in K a (t) with the largest non-negative value of f ak (t)S ak (t)[Q k (t) − α k H k (t)] (breaking ties arbitrarily), and chooses no users if this value is negative for all k ∈ K a (t).
Further, the user pairs in each subcell c ∈ {1, . . . , C} are observed.
Amongst all users in a given subcell, the ordered user pair (a, k) with the largest non-negative value of f ak (t)S ak (t) [Q k (t) + H a (t) − α k H k (t)]is selected for peerto-peer transmission in that subcell (breaking ties arbitrarily).
No peer-to-peer transmission occurs in the subcell if this value is negative for all user pairs.
The algorithm fits into the stochastic network optimization framework of [15], and hence it satisfies all desired constraints of the original problem (4)-(6) (as well as the transformed problem (7)- (11)), with an overall utility value that differs from the optimal φ * by at most O(1/V ), which can be made arbitrarily small as the parameter V is increased.
However, the V parameter directly affects the size of the virtual queues, which affects convergence time of the algorithm to this utility.
Here we show that if the utility functions and network transmission sets have additional structure, the virtual queues Q k (t) and H k (t) can be deterministically bounded for all time by a constant that is proportional to V .
Proofs are omitted due to page length restrictions (see [16] for full proofs).
Suppose each utility function φ k (t) has right-derivatives that are bounded by a finite constant ν k > 0 over the interval 0 ≤ x k ≤ x max k .
For example, this holds for the utility functions (19), with the ν k parameters specified there indeed being the maximum right derivatives.
Alternatively, ifφ k (x) = min[x, θ k ], then ν k = 1.
Lemma 2: If utility function φ k (x) has maximum right derivative ν k > 0, then:0 ≤ Q k (t) ≤ V ν k + x max k ∀t ∈ {0, 1, 2, . . .}provided that this inequality holds for Q k (0).
H k (t)The H k (t) processes act as reputation queues for each user k ∈ K, being low if user k has a good reputation for helping others, and high otherwise (see queue dynamics in (15)).
These reputations directly affect the transmission decisions via the weights W nk (t) in (18).
To see this, define A as the set of access points.
First consider the weight seen by an access point a ∈ A for user k on slot t:Q k (t) − α k H k (t)This weight is large if H k (t) is small.Lemma 3: If φ k (t) has maximum right-derivative ν k > 0, and if initial queue backlog satisfies 0≤ Q k (0) ≤ V ν k + x max k, then no access point will send to user k on a given slott if H k (t) > 1 α k [V ν k + x max k].
Now suppose user u ∈ K considers transmitting to another user k ∈ K. User u sees the weight:Q k (t) + H u (t) − α k H k (t)The value H u (t) − α k H k (t) can be viewed as a differential reputation.
We again see that a relatively low value of H k (t) improves the weights for user k.
The next lemma shows that all queues H k (t) are deterministically bounded.
For simplicity, we state the lemma under the assumption that all initial queue backlogs are zero.Lemma 4: If all utility functions have right-derivatives bounded by finite constants ν k > 0, if β k > 0 for all k ∈ K, and if initial backlog satisfies Q k (0) = H k (0) = 0 for all k ∈ K, then there are finite constants C 1 and C 2 , both independent of V , such that:||Θ(t)|| ≤ C 1 + C 2 V ∀t ∈ {0, 1, 2, . . .}where ||Θ(t)|| is defined:||Θ(t)|| ≤ k∈K H k (t) 2 + k∈K Q k (t)2 These deterministic queue bounds ensure that the time average tit-for-tat constraints (8), as well as the auxiliary variable constraints (9), are satisfied on every sample path, regardless of whether or not the topology state process ω(t) is ergodic (see [16]).
Now suppose the files requested by users have finite sizes.
Suppose each user requests at most one file at a time.
We say a user is in the active state if it is requesting a file, and is in the idle state if it does not have any file requests.
For each k ∈ K, define A k (t) to be 1 if user k is active on slot t, and 0 else.
If A k (t) = 1, define F k (t) as the set of devices in N that have the currently requested file of user k. Define F k (t) to be the empty set {} if the user is not active on slot t. Define D k (t) as the number of additional required packets for user k to complete its file request (where D k (t) > 0 if and only if A k (t) = 1).
When an active user finishes downloading all packets of its requested file on some slot t, it goes to the idle state, so that A k (t + 1) = D k (t + 1) = 0, and F k (t + 1) = {}.
We can naturally extend the algorithm developed in the previous section to this case (although in this more general case the algorithm is a heuristic).
The only change is that F b in (1) is changed to F b (t).
The algorithm proceeds exactly as before, still updating queues and making all γ k (t) and µ ab (t) decisions the same way for all users on every slot, regardless of whether users are active or idle.
Of course, the f ab (t) parameters in (18) and in the receive and send equations (2), (3) will remove any transmission link (a, b) from consideration if user b is idle.
However, idle users can still participate in data delivery to other users.
Intuitively, the algorithm will behave well, with performance close to that suggested by the infinite file size assumption, when file sizes are large.
We simulate the algorithm on the cell-partitioned network structure of Section II-A, with K = 50 users and a single base station as access point.
The users move according to a Markov random walk on a 4 × 4 grid with 16 subcells.
We use utility functions φ k (x) given by (19) with ν k = 1.
Each cell can support at most one user-to-user packet transmission per slot.
The base station can transmit to at most one user k per slot, with transmission rate S k (t) that is independent over slots and across users with P r[S k (t) = 0] = P r[S k (t) = 1] = P r[S k (t) = 2] = 1/3.
We simulate over 10 6 slots.
On slot t = 0, we assign each user k a desired file that is independently in the other users with probability p = 0.05, which establishes the F k sets.
These sets are held fixed for the first third of the simulation, and then independently drawn again with a larger probability p = 0.1 and held fixed for the second third.
New files are again drawn at the beginning of the final third of the simulation, with p = 0.07.
Fig. 1 plots the resulting throughput components from the base station traffic and peer-to-peer traffic separately, using V = 10, α k = α = 0.5, β k = 0.05, x max k = 3.
Even though there are only an average of 50/16 = 3.125 users per cell, and in the first third of the simulation there is only a 5% chance that a given user has the file desired by another user, the peerto-peer traffic is still more than twice that of the base station alone.
This further increases in the middle of the simulation when the file availability probability jumps to 10%.
Fig. 2 shows that the value of Q k (t) never exceeds 10 packets for any user k (recall that the worst-case guarantee from Lemma 2 is Q k (t) ≤ V + 3 = 13 packets).
All tit-for-tat constraints were satisfied, with H k (t) ≤ 24.6 for all k ∈ K and all t.Figs.
3 and 4 explore the throughput-backlog tradeoff with V (one can also plot the throughput-utility with V to see a similar convergence as in Fig. 3).
Fig. 3 also treats the case when the tit-for-tat constraint is made more stringent (α = 0.75), in which case throughput is reduced.
