HyFS is designed to employ erasure codes to build a highly available distributed file system.
It implements a general framework to use any erasure code.
Thus, by applying different erasure codes, HyFS offers high flexibility for customizations to meet various application requirements.
Building highly available distributed file systems is crucial to any commercial or scientific application.
Most current fault tolerance file systems use replication as their redundancy scheme.
Hence, they suffer from the high cost of the hardware and manpower needed for it's maintenance.
Therefore, we propose a new file system HyFS, which is a part of our Hydra platform [1].
HyFS employs erasure codes to achieve high availability for the underlying unreliable storage systems.
When failures occur in the storage nodes, HyFS is capable of maintaining the file system usability.
HyFS implements a general framework so that any erasure code can be used.
Thus, users can plug in any interesting erasure code into HyFS for a particular environment.
In our current implementation, the following erasure codes are included for testing: replication code, distribution code, parity code, X code, B code, EVEN-ODD code and GRS code.
HyFS is divided into four components: file system interface, file operation lib, erasure codes lib and network file system, which are described by Figure 1.
To implement distributed storage, HyFS utilizes existing network file systems, like N F S. Because accessing network storage nodes may fail for many reasons, HyFS employs erasure codes to build cost-efficient redundancy solution.
Files will be encoded before they are written and decoded before they are read.
These operations are cooperated by two components: erasure codes lib and file operation lib.
Erasure codes lib provides encoding and decoding function for erasure codes.
File operation lib uses the erasure codes lib when accessing files, and it provides POSIX file API, such as f read, f write, and f seek, which enables HyFS to be portable to any Linux system.
Lastly, the file system interface component implements a Linux file system.
The basic functionality of HyFS has been implemented and the future works are: 1) measure the performance of HyFS by using real applications; 2) consider its scalability when deployed in a large network.
The final goal of HyFS is to be a highly flexible and available distributed file system with high performance.
