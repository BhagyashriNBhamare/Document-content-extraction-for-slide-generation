Managing the security of complex cloud and networked computing environments requires craft-ing security policy-ranging from natural-language text to highly-structured configuration rules, sometimes multi-layered-specifying correct system behavior in an adversarial environment.
Since environments change and evolve, managing security requires managing evolution of policies, which adds another layer, the change log.
However, evolution increases complexity, and the more complex a policy, the harder it is to manage and update, and the more prone it is to be incorrect.
This paper proposes hierarchical change mining, drawing upon the tools of software engineering and data mining, to help practitioners introduce fewer errors when they update policy.
We discuss our approach and initial findings based on two longitudinal real-world datasets: low-level router configurations from Dart-mouth College and high-level Public Key Infrastructure (PKI) certificate policies from the International Grid Trust Federation (IGTF).
The paper considers the security-policy evolution problem.
Security policies must evolve to be useful: if practitioners don't update their policy, their networks are vulnerable to new threats.
However, updating policy creates management challenges: due to complexity, practitioners may introduce error or make insufficient changes, Additional dependencies due to the multilayered nature of policy make maintenance even more complex.
The more complex a policy, the harder it is to manage and the more prone it is to be incorrect.
Indeed, recent research provides quantitative evidence that evolution actually increases the complexity of Layer 3 network configuration [1].
However, security policies, even low-level, are forms of text, and the fields of software engineering and data mining give us building blocks for automated tools to deal with multiple levels of evolving text.We believe that change detection will help practitioners to update policy in a way that reduces errors.
We propose hierarchical change mining to detect changes and patterns of change across multiple layers of policieswhether low-level router configurations or high-level natural-language policies, perhaps with change logs.Our problem is important to both real-world practitioners and security researchers.
In our fieldwork, we have seen firsthand that practitioners struggle to understand how changes that must be made to policy will affect the enterprise mission.
Often improper or incomplete changes increase as a result of policy complexity.
Both low-level and high-level policy changes have major consequences if they are done properly or improperly.Security policies are axiomatic to the discipline of security.
In the literature, the phrase "security policy" may include mechanisms to ensure quality-of-service, to configure a network, or to authenticate and authorize users to a system.
Traditional Orange-Book security methods formalize Discretionary Access Control (DAC) and Mandatory Access Control (MAC) policies with access-control matrices and lattices respectively [17].
However, these Orange Book policy formalizations often play less of a role in security in actual practice: according to a leading European industrial security consultant, well-structured security policies are becoming less important and 'risk assessments' are becoming more important [13]; according to a study in our lab, when users think deeply about a Facebook-like privacy policy, they actually leak more personal information than when they don't think so carefully [33]; according to Benson et al [1], configuration errors cause a large number of network outages and the misconfiguration risk is a function of complexity.
Managing real-world security policy for large real-world systems is a pressing problem.Furthermore, real-world security policies must be defined iteratively since policy correctness evolves over time.
Software engineering denotes such systems as E-type: systems embedded in the real-world and whose correctness depends upon the "usability and relevance of its output in a changing world" [18].
Consequentially, network security policies must be continually re-defined and re-evaluated to accommodate their changing environment.
This sentiment is echoed by other network security researchers who have noted that "top down security policy models are too rigid to cope with changes in dynamic operational environments" [20].
This Paper Section 2 discusses two real-world instances of the security policy evolution problem and how practitioners currently address it.
Section 3 proposes hierarchical change mining and Section 4 evaluates our results against our use cases.
Section 5 orients our research within the fields of software engineering, data mining, and network management.
Section 6 concludes.
The security-policy evolution problem emerged from our collaborations with practitioners in network adminis-tration and identity management and recent findings in software engineering.
Properly done, changing a router configuration allows emergency operators to resolve calls from VOIP phones at Dartmouth to a physical location.
Improperly done, changing the policy can crash the router that provides phone service when that router reboots.
If the change is not made, emergency workers may not know how to get to the scene of an incident.
Properly done, changing a security policy allows a university to access massive datasets and computational power via the grid.
Improperly done, the university increases the vulnerability of the entire grid.
If not done, the university is denied research opportunities.We now discuss some observed limitations of the currently-practiced state-of-the-art.
Collaborating with real-world practitioners from Dartmouth Computing Service, we analyzed four years (2005)(2006)(2007)(2008)(2009) of Cisco router configuration files, which specify access lists and VLANs may be used to group users into a single logical subnet with uniform routing rules.One example of requirements evolution these practitioners faced during this period was the change of college telephony to Voice Over IP (VOIP), and the resulting directive that every VOIP phone be resolvable to a physical location for 911 emergencies.
Network administrators had no choice but to evolve policy; specifically, they had to set the MAC address of every VOIP phone on the network with a switchport command.
However, if they didn't also update the router's flash, then the router would be in a bad state upon reboot.
Therefore, we see that due to dependency rules, a change to a configuration file may be necessary but not sufficient to keep the router in a good state; the literature attests to the relation between router misconfiguration and network service failures [23].
To aid with this evolution, the current practice is to use the Really Awesome New Cisco configuration Differ (RANCID) tool [27].
However, practitioners told us of several limitations.
First, RANCID does not report changes with respect to dependencies; practitioners must manually check to make sure that if a MAC address is changed then the flash on that router is updated.Second, RANCID may report meaningless changes that add noise to the change results.
For example, if one permutes five lines in a block of the configuration file, then RANCID will report it as 5 deletions and 5 insertions even though the behavior of the configuration is unchanged.Identity Management in Federations Collaborating with real-world practitioners from the International Grid Trust Federation (IGTF) [14], we analyzed their member organization's certificate policies and certification practices statements (CP/CPSs).
In this context, a grid is a distributed computing system that provides researchers access to massive amounts of computing power, storage, and data.
The IGTF accredits organizations against a common set of standards for grid authentication.
An organization that is IGTF-accredited can authenticate to several large-scale computational grids via a PKI certificate.
Anyone not accredited cannot authenticate.
Natural-language texts, these CP/CPSs ensure that "certificate generation, publication, renewal, re-key, usage, and revocation is done in a secure manner" [10].
The IGTF base policy determines accreditation guidelines.As an example of policy evolution, when the IGTF changes their base accreditation guidlines, member organizations have 6 months to comply.
If members don't comply, they lose accreditation.
If member organizations comply poorly and still get accredited, then they expose themselves to legal risk.
Moreover, they risk losing institutional access to grid services.
Either way, changes to policy may result in increased exposure to risk.Current practice for the IGTF to manage compliance relies on manual inspection of CP/CPSs combined with changelogs, where member organizations have recorded changes that affect their level of assurance [28].
Analysts will look at the previous and current versions of the CP/CPS to try to detect changes; analysts may also use change detection software such as Adobe redlining tools or Microsoft Word's Track Changes.However, real-world data from the current, manual practice of documenting and reviewing changes revealed limitations.
For example, when we compared the number of changes reported in the changelogs to the number of actual changes, we found changes reported between two versions of policy whose corresponding passages were identical-and other places where the polices had far more changes made than reported.
Current practice does not suffice for effective management.Software Engineering Recent findings from software engineering validate our concerns about this insufficiency.
In 2010, Israeli and Feitelson [15] looked at the evolution of the Linux kernel and argued for code-based measurements for software versus surveys and logs.
They cite a study by Chen et al. that compares change logs for three software products and their corresponding changed source code; this study showed that 80% of the changes were not logged [8].
Another example comes from a 2007 study by Fluri et al. which looked at three open-source systems and described how comments and code co-evolved.
They found that newly-added code barely gets considered despite its considerable growth rate.Our proposed approach models security policies as hierarchically-structured texts and mines changes within these structures over time.
We use the Cisco router and IGTF polices discussed above as longitudinal 1 datasets.
When practitioners modify a security policy, they create a new version of that policy.
This sequence of policies, ordered by time, is a rich stream of historical data.Policy as Hierarchically-Structured Text Security policy languages are typically hierarchically structured, and practitioners often group these policies hierarchically.
Our approach accommodates both these senses.
Commands within Cisco IOS are hierarchically structured and the show command for a router's start configuration or running configuration serializes this hierarchy.
Furthermore, network-administrators group router configurations hierarchically; admins may decompose a network into edge and core routers.
IGTF security policies are written as hierarchicallystructured documents with sections, subsections, and subsubsections.
IGTF policy analysts group member organization's policies into sub-federations such as The Americas Grid Policy Managment Policy Authority (TAGPMA), The European Union Grid Policy Management Authority (EuGridPMA), and the The Asia-Pacific Policy Management Authority (APGRID).
We model the hierarchical structure of a policy as a tree.
Vertices within a policy tree represent syntactic blocks of text; children correspond to blocks nested within that block.
Each vertex has a unique reference string, persisting across policy versions, that allows us to compare change based upon policy structure rather than line numbers (which vary).
Tables 1 and 2 We now discuss how hierarchical change mining improves on existing research and addresses the problems we introduced in Section 2.
Our methods to quantify policy evolution build upon and improve state-of-the-art in studies of router configurations using longitudinal data [9,25,29,30].
Previous studies have not considered hierarchical change, nor have they looked at considered commonly-used variable names as opposed to commonly-used tokens.
Sung et al. [30] define blocks and superblocks to study correlated changes across router configurations.
While superblocks allow one to see commonly occurring tokens, they do not allow one to see how these tokens change with respect to the hierarchical structure of the configuration.
Plonka et al studied the evolution of router configurations using the stanza [25].
Their approach, like Sung's, does not allow one to count how often a particular interface such as FastEthernet0/8 is used, only the total number of times the command interface occurs.
In addition, our hierarchical model of Cisco IOS is more general than stanza-type analysis, which only counts revisions for level-0 syntactic blocks such as global and level-1 syntactic blocks such as interface, vlan, logging, ip, and bridge [25].
In contrast, our approach considers paths to syntactic blocks at any level in the Cisco IOS command hierarchy.
This rich syntactic structure allows practitioners to drill-down within change reports for more detail than previously provided.In Table 2, we count level-1 change hits and level-2 change hits separately to avoid double counting a single change.
For example, if we add 5 switchport commands to an interface, then the level-2 change count would be 5, but the level-1 change count would be 1.
If we summed change counts across levels of the tree, then we would double-count one of the level-2 changes.
Also, the total tree edit-distance for the /root/interface* category at level-1 (1542) is greater than the total tree edit-distance for the same category at level-2 (628).
A possible explanation that contributes to this is the set of edits required to insert and delete changed, level-2 Table 2: Our change table for all VOIP routers in the Nugget Theater allows for an analysis of level-1 commands that resembles Plonka and Tack's stanza-type analysis.
We differ, however, in that our change feature is tree edit-distance, and our global category refers to all unindented lines that are not any of the others in the list.
More importantly, our hierarchical model allows us to navigate the Cisco IOS command hierarchy and get increasingly more specific change information.
Where appropriate, total tree edit-distances and total hits are reported in terms of level-1 and level-2 structures using the format (level-1 score/level-2 score).
components as children of level-1 vertices.In ongoing work, we are mining associations between categories of syntactic blocks as well as between particular instances of syntactic blocks.
Generalization replaces arguments to commands with a token for their production rule.
For example, MAC addresses are replaced with the token "MACADDRESS" [1].
An example of a generalized association rule comes from Sung's approach [30].
Using Sung's approach, practitioners can detect associations between the access-list, interface, and policy-map categories.
However, using our approach, practitioners can also drill-down to see the particular access-lists and policy-maps with which interface FastEthernet 0/8 is associated.Identity Management in Federations Our initial and ongoing work in hierarchical change mining also improves upon research in identity management in federations and addresses real-world problems that policy analysts face during accreditation.Our hierarchical model of policy is based on over 20 years of experience to model, reference, and retrieve Classical texts [11,12,36,37].
Others have done work in high-level policy formalization.
Authorization and authentication policies have been formalized using various XML vocabularies including SAML [4] and XACML [22].
Previous work in certificate policy formalization focuses less on human-readable, machine-actionable representation than our prior research [35,38] and our current work.
Several have explored using ASN.1 to model properties based on a CP's source text [2,26].
Others like Casola [5,6] have experimented with data-centric XML representations of policy.
and Jensen have experimented with data-centric XML representations of policy.
Contemporary to our previous work, Jensen [16] encoded policies using DocBook [34].
Real-World Impact Administrators recognize that tools like RANCID are unaware of policy dependencies and that change reports may contain false changes because RANCID is not aware of the syntactic structure of Cisco IOS.
Even our initial work improves upon this state-of-the-art; a practitioner has lauded how the hierarchical structure of policies gives an intuitive framework against which to organize and interpret change.Rather than reporting line numbers and forcing administrators to peruse the entire configuration file, we express change in terms of structural features-and can generate queries to see the evolution of a particular interface or access-list over a range of time across an entire network or within a single router.
In ongoing work, we plan to try to correlate syntactic changes within a single router configuration file and between multiple layers of network administration.
For example, one practitioner thought it might be interesting to look at correlations between ip helper-addresses, servers that state which DHCP addresses to use, and snapshots of active DHCP leases.
One could also look at correlations between router configuration files and network snapshots of active MAC addresses.
At a higher level, it would also be interesting to try to correlate changes to router configurations with bug reports [24].
Administrators also must manually sift through meaningless changes that have no effect on the behavior of routers.
Our change tables are syntax-aware, and so can enable filtering out meaningless changes according to Cisco IOS semantics.
We are the first, to the best of our knowledge, to identify and address this problem.Our initial work also improves the state of practice in our other application domain.
The IGTF's current accreditation process uses change logs as well as manual review; the initial change tables we generated, however, revealed problems.
Our initial study of 13 IGTF member organizations revealed 5 organizations with at least one reported change for which there was no actual change in the policy.
Out of a total of 178 reported changes, 9 of those changes corresponded to no actual change.
Of the 94 of 178 that claimed major change, we found 5 that were logged but never performed.To detect the the second type of discrepancy, we are building a change feature classifier that decides whether or not to add a section to a changelog.
This problem is more challenging since not all policy changes affect level-of assurance.
To the best of our knowledge, we are the first to observe that practitioners express security policy in multiple layers ranging from high-level natural-language texts to low-level configuration files and that these policies must be changed and synchronized in order to maintain security.
We are also the first to propose a unified methodology to understand change in many of these policies through the lens of hierarchically-structured text.
Our work improves upon and leverages the stateof-the-art in security, network service management, data-mining, and software-engineering.
A few other security researchers have introduced the term security policy evolution in the context of autonomous security.
A 2004 proposal [21] proposed a mechanism for systems to dynamically change access rights in authorization policies, collecting data, using machine-learning to find patterns, and then using planning and optimization to construct a new policy on the fly.
Unfortunately, this proposal did not appear to generate any follow-on work.
The proposal was cited in later papers [20,31] discussing how to use genetic programming to automatically generate new policies.
Our approach differs from this group in that our goal is to produce tools that produce useful information for practitioners.
Our approach ensures that humans remain accountable for security decisions.Our work is also unique in that it considers the necessity, implications, and properties of security-policy evolution through the lens of structured text, whether a high-level or low-level policy, in contrast to some prior work studying the evolution of network policies through data mining and software engineering.Hierarchical Change Mining The various components of our hierarchical change mining leverage and improve upon the state-of-the-art in data mining and software engineering.
Computing a change table between two consecutive versions of a policy is an instance of Chawathe's [7] hierarchical change detection problem.
Our approach is unique, however, in that we extract multiple features from policy node content; most others focus on changes to the tree structure but not the lower level features discussed above.
Furthermore, a comprehensive 2009 review of XML similarity notes that a future research direction in the field would be to explore similarity methods that compare "not only the skeletons of XML documents...but also their information content" [32].
Our work improves upon the state-of-the-art in change detection.Our work also applies the Zhao et al.'s 2005 best student paper XML Structural Delta Mining, which proposed a vision for mining change patterns in XML documents [39]-although our approach works with any tree (not just an XML DOM).
More recently, Leskovec et al. studied how phrases evolve in the blogosphere [19]; Bottcher et al. introduce the new paradigm of Change Mining as "data mining over a volatile, evolving world with the objective of understanding change" [3].
Our work also improves upon the state of the art in data mining.
We have introduced and motivated the security-policy evolution problem with anecdotal evidence from realworld practitioners in router configuration and PKI policy accreditation.
We have argued the importance and necessity of studying policy evolution and its relation to policy complexity in network services.
To our knowledge, we are the first to consider a unified approach to manage change in multiple layers of network-security policies ranging from high-level natural-language policies to low-level router configurations.
We accomplish this by modeling policy as a hierarchically-structured text and have proposed general methods to manage change that build upon state-of-the-art research in network management, datamining, and software-engineering.
We have several ideas for future work.
We noted before that Benson et al. observe that evolution increases the complexity of network configuration and that quantifying complexity can help one to evaluate network design decisions [1].
Just as this paper describes work in progress on general methods to quantify changes to policy, we would like to investigate how well Benson's referential complexity metrics generalize to other security policies.
Our current work looks at two longitudinal datasets that correspond to two different layers of two distinct network security policies.
We would like to study multiple layers of the same network security policy in the future.
Furthermore, we would like to also apply hierarchical change mining to detect changes to other policies such as SELinux.
