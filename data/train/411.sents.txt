Peer-to-peer (p2p) systems have the potential to harness huge amounts of resources.
Unfortunately, however, it has been shown that most of today's p2p networks suffer from a large fraction of free-riders, who consume resources without contributing much to the system themselves.
This results in an overall performance degradation, and hence proper incentives are needed to encourage contributions.
One interesting resource is bandwidth.
Thereby, a service differentiation approach seems appropriate, where peers contributing higher upload bandwidths are rewarded with higher download bandwidths in return.
Keeping track of the contribution of each peer in an open, decentralized environment, however, is a difficult task; many proposed systems are susceptible to false reports.
Besides being prone to attacks, some solutions have a large communication and computation overhead, which can even be linear in the number of transactions-an unacceptable burden in practical and active systems.
In this paper, we propose a reputation system which is robust to false reports and overcomes this scaling problem.
Our results are promising, indicating that the mechanism is accurate and efficient especially when applied in systems where there are lots of transactions.
For a more detailed technical report, we refer the reader to the TIK Report 246 (available at http://www.tik.ee.ethz.ch/).
The power of peer-to-peer (p2p) computing is based on the resource contribution of the network's constituent parts, the peers.
Therefore, the success of a system in practice crucially depends on its ability to cope with selfish peers which aim at consuming more than they contribute.When faced with the task of implementing a fairness scheme for upload bandwidth for our distributed p2p storage system Kangoo 1 , we could not find a solution which entirely fits our needs.
In Kangoo, erasure codes are employed to achieve high data availability with moderate redundancy.
Files are divided into blocks, which are encoded into many small fragments.
All these fragments are then stored on a different peer.
Consequently, in Kangoo, there is a large number of transactions.
Our goal was to develop a scheme for this environment, where peers contributing higher upload bandwidths for longer time periods are rewarded with a higher download bandwidth in return.This paper presents the reputation system Havelaar which we have implemented for Kangoo.
Unlike many existing solutions, Havelaar does not rely on transitivity of trust, and achieves a high robustness to attacks by design.
This is accomplished by a novel aggregation technique in which a peer u always reports directly observed or aggregated contributions to the same set of peers.
These successor peers are determined by a hash function h(u) on the identifier (e.g., the IP-address) of u.
This scheme 1 To be released (http://www.caleido.com/kangoo).
allows a successor to detect and defend against egoistic cheating (e.g., reporting too large values, or reporting too often).
Hence, our solution is different from distributed hash table (DHT)-based approaches where a peer u benefitting from a peer v reports v's contribution value to peers determined by a hash function h(v) (i.e., depending on v rather than u).
Our results are promising: Havelaar is not only robust to attacks, but also efficient and-unlike many other solutionsscales well in the number of transactions.
Therefore, we believe that Havelaar is well-suited for other active p2p systems with many transactions.The rest of this paper is organized as follows.
In Section II, related work is reviewed.
Section III gives background information on Kangoo and on the intended environment for Havelaar.
Section IV quickly outlines how peers could be rewarded given their contribution values.
The Havelaar reputation system is then presented in detail in Section V.
In Section VI, the accuracy of Havelaar's approximation of the real contributions is analyzed.
We report on our results concerning communication costs in Section VII.
Section VIII shows how Havelaar copes with various attacks.
Finally, Section IX presents some simulation results, before Section X concludes the paper.
It is not hard to find evidence of selfish behavior in existing p2p systems [2], [14], and the field has already spurred a large body of research [8], [12], [18], [20], [28].
Perhaps the simplest fairness mechanism is to directly incorporate contribution monitoring into the client software.
For instance, in the popular file-sharing system Kazaa, the client records the contribution of its user.
However, such a solution can simply be bypassed by implementing a different client which hard-wires the contribution level of the user to the maximum, as it was the case with Kazaa Lite.In systems such as BitTorrent [6], where peers upload to the same set of peers from which they also download, a simple titfor-tat mechanism [3] may be fine.
When interactions between the same pairs of peers are less frequent, however, such barter systems [32] fail.Inspired by real economies, some researchers have also proposed the introduction of some form of virtual money which is used for the transactions.
However, these monetary or credit based approaches have a substantial overhead in terms of communication costs and infrastructure, and are inefficient [11], [33].
Often these systems also require market regulating mechanisms [31] to cope with inflation or deflation-a complex issue.Additionally, monetary based systems may deter users from participating [21].
If a peer makes too few direct observations to judge a peer's contribution, it has to take into account indirect observations from other peers [17].
Such systems are generally called reputation (or reciprocity based) systems, and are well-known from auctioning applications such as eBay.
However, second-hand observations introduce the problem of false reports [4], [17].
Many proposals seek to mitigate these effects [1], [5], [9], [15], most of them relying on transitivity of trust, where observations are weighted by the reputation of the reporter.
Additionally to the problem of false reports, an infrastructure to exchange the second-hand observations is needed [17].
In most reputationbased systems, second-hand observations are either requested before a transaction from other peers [1], [4], or they are simply flooded throughout the system.
Alternatively, the contribution values can be stored in a distributed hash table (DHT) [25], [27], [30] ("DHT-based approach").
For systems with lots of transactions where contribution values are updated constantly, however, this results in an unacceptable communication overhead: updating and checking a peer's reputation entails costly (wide-area) DHT lookups [22], [23].
In contrast, in the Havelaar reputation system, a peer is able to compute the reputation of a requesting peer locally.
By aggregating the contribution values of a large number of peers, our system tackles also the problem of transitivity of trust.
Finally, a peer is able to defend against cheating by checking the credibility of reports, thus preventing many reputation attacks by design.
Havelaar was designed with a special application in mind: Kangoo, a large-scale distributed storage system for the Internet.
Kangoo divides files into blocks, which are encrypted and then encoded into redundant fragments using erasure codes.
These encrypted fragments are stored on different peers in a DHT.
However, in Kangoo, peers fall into different categories, and fragments are only stored on so-called storage peers which fulfill some minimal requirements such as having long uptimes (e.g., more than 6 hours a day).
How storage peers are selected among the set of all available peers, and why rational peers also have incentives to become storage peers is beyond the scope of this paper.
However, in the following, we will assume that all peers store data, and that these peers generally have long uptimes.Because of the used encoding scheme, storing and retrieving files in Kangoo results in lots of transactions with many different peers in the system (e.g., 500 transactions with different peers to store and retrieve one file).
While this is necessary for high availability and for fast parallel downloads, it is crucial that the fairness mechanism scales well in the number of transactionsan important objective of Havelaar.There are a number of other properties of Kangoo which influence Havelaar.
Since fragments are stored in the Kangoo DHT depending on hash functions on the fragment itself, an attacker cannot determine the destination of a transaction.
Furthermore, peer identifiers are securely assigned by Kangoo-i.e., externally to Havelaar-, and therefore Havelaar can rely on randomly assigned node identifiers and does not tackle Sybil attacks [7] or white-washing [9], [10] itself.
However, Havelaar also minimizes incentives to create new identifiers by assigning new peers a low initial reputation.Finally, in Kangoo, churn [16] is not a major concern, as (storage) peers are required to stay online on almost a daily basis and for several hours, and are also expected to remain in the system for longer time periods (months or years).
2 Havelaar is mainly a reputation system (cf Section V) and therefore independent of a concrete rewarding mechanism; that is, given the contribution values of Havelaar, many strategies can be applied to allocate bandwidth to the peers.However, to complete the picture, we briefly sketch the approach we have chosen for our system.
We make use of a mechanism similar to the one described in [19].
But as performance is crucial in Kangoo, we only apply fairness mechanisms in situations of contention, i.e., when several peers want to download from the same node concurrently.
Assuming that bandwidth is free-and lost when not used-, the maximum possible bandwidth will always be allocated to a requesting peer; no artificial limits are used.
For our system, this is the desired behavior because-unlike monetary-based systems-we do not want to provide any disincentives to participate and download in the network.
We only limit the resource allocation for excessive downloaders, as will be described in Section V.
In this section, we describe the main ideas behind Havelaar.
The goal of Havelaar is to track the contribution of each peer in the system.
Since it would be very expensive to inform each peer about all transactions happening in the system, we seek to provide the peers with a good approximation of the real contribution values.
Thereby, our solution must be efficient and also resilient to cheating.
Basically, Havelaar has three goals: (1) accurate estimation of the real (global) contribution values of other peers, (2) robustness against selfish peers, and (3) efficiency, i.e., scalability in the number of transactions.In our system, the reputation of a peer u should be reflected by the peer's contribution value C u , which in turn depends on the bandwidth b u the peer provides, and the size s of the corresponding fragments.
Hence, the total contribution value of peer u is given by C u = transactions t (b u,t · s u,t ).
Note that the contribution value will only be increased after a complete upload in order to reward proper transactions only.So how does Havelaar track these contributions?
Each peer u maintains a vector o (observations) of size n (number of peers in the network) to store the contributions of other peers which u has directly experienced itself.
That is, after each download, u updates its vector o accordingly.Even in active systems with lots of transactions, a peer only gets in touch with a subset of all peers.
Therefore, peers need to share their private observations by sending them to other peers once in a while.
To achieve this, Havelaar employs a roundbased aggregation technique.
Thereby, once in a round, each peer u sends its observation vector o to a small number k (e.g., 7) of other peers in the system, called u's successors (similarly, we will refer to u as a predecessor of such a successor peer).
The successor peers are determined by a set of k hash functions {h 1 (u), ..., h k (u)} on u's identifier.
3 Moreover, we will assume that a round is roughly one week.
Note that it does not matter when exactly in this time interval a peer sends its report to the successors, i.e., when a peer u cannot contact a peer v (e.g., because v is offline), it can try again later.A peer u always informs the same set of peers, independently of which peers contributed resources to u. Upon receiving a vector, a peer can check whether it has been sent by a correct predecessor by verifying the hash function 4 -otherwise, it can simply drop the vector.
The "observed" contribution value of the predecessor itself is not taken into account, in order to render the most attractive attack impossible by design.
What is more, each peer can also ignore the vector of a peer that sends too frequently (more than once per round).
Therefore, a peer can only attack the system with a false praise or accusation of another node.
However, such an attack can either be detected or it will be averaged out, as we will see in Section VIII.Unfortunately, sending direct observations to the k successors is still not sufficient in order to accurately estimate the contributions of all peers in large networks.
Therefore, we extend the mechanism as follows: Upon receiving the observation vectors from its k predecessors, each peer aggregates them with its own observations, and sends the new vector to its k successors.
Thus, one vector can summarize a large number of observations.
However, we have to make sure that the values in the vectors do not contain too many observations from the past which do not reflect the current behavior of each peer.
What is needed is a scheme where old observations can be truncated in the observation vector, but where there are still enough observations to update the contribution vector after each round.
This is accomplished as follows.
In every round, a peer puts its own observations into a vector o 0 (so far denoted by o).
After each round, it sends a message to its k successors containing its own (direct) observations from this round ( o 0 ), the aggregated observations of its k predecessors from the last round ( o 1 ), the aggregated observations of the k predecessors of its own k predecessors from the round before the last round [1, k] (note that when sending, the index runs from 0 . . . r−1, and when receiving, it is renamed to 1 . . . r), a peer aggregates all observations and updates its contribution vector c accordingly.
Thus, the vectors from previous rounds aggregate an exponentially growing number of observations.
The oldest observations lie r rounds in the past.A simplified description of the Havelaar reputation system is given in Algorithm 1.
Here, the algorithm is generalized by an aging factor γ ≤ 1.
However, since the aggregation vectors already include many observations from the past, using γ = 0 is fine for our purpose, but can be increased in order to account for longer absences from the system.
In Havelaar, a peer u increases the contribution values only after downloading fragments from other peers, but it never decreases any contribution values if it has to provide upload bandwidth to some peer.
This has the drawback that if two peers have contributed to the system equally, they will be assigned the same amount of download bandwidth, independently of their downloading behavior-it is questionable whether this is fair.
However, as mentioned, we do not want to provide any disincentives for downloading in our network.But the behavior of excessive downloads should be discouraged.
Such downloads could trigger a vicious circle: because of excessive downloads, the network is congested, which in turn encourages other users to download in advance, resulting in an even more congested network.
Therefore, in Havelaar, each peer u additionally maintains a second vector d (downloads).
After another peer downloads from u, u will increase the download value of that peer.
As opposed to the observation vector, the download vector will not be sent to other peers.
Before allocating resources among competing peers, the download values will be subtracted from the respective contribution values of c, and only then used to allocate the bandwidth.
Since excessive downloaders are more likely to be involved in repeated interactions, they are eventually slowed down.Finally, note that downloads could of course also be treated differently.
For instance, downloads could be punished with a mechanism similar to the one used to reward uploads.
Assume that two peers u and v compete for the same upload bandwidth of a given peer w.
In order to achieve the desired fairness, peer w should allocate the bandwidth to u and v according to their real, i.e., global, contribution values C g u and C g v , i.e., with respect to all transactions to which they have contributed.
However, in Havelaar, peer w does not have precise information about C g u and C g v , but only knows the local approximations C l u and C l v (values from its contribution vector c).
Hence, we want to achieve a good approximation C g u /C g v ≈ C l u /C l v such that the peers indeed receive the corresponding share of the bandwidth.In this section, we will analyze how many observations x are needed such that the ratios of the values in the local vectors c are an acceptable approximation of the ratios of the real contributions.
Consequently, we can compute the number of rounds r that are necessary in Havelaar to get the required number of (aggregated) observations.
Henceforth, let C u and C v denote C l u and C l v , respectively.Our network consists of n peers, not all of which are always online.
We simplify the analysis by assuming that at any time exactly m < n peers are online.
Furthermore, we assume that each peer downloads t fragments from other peers; the transactions are assumed to be distributed uniformly at random among the peers and over time.
Hence, the probability of downloading a fragment from a given peer is p = 1/m.
Whenever a peer downloads from peer u, it increases the contribution value C u of peer u. Let us first assume that bandwidth and fragment sizes are equal to 1, that is, C u is increased by 1 after each download from u.
As explained before, peer u is chosen with probability p for every download.
Therefore, C u is a random variable.
What is the probability distribution of C u after x downloads?This situation corresponds to a balls-into-bins problem [24], where x balls are tossed into m bins, and where p = 1/m is the probability that a tossed ball lands in any given bin.
For a given bin u, the ball tossing process is a sequence of x random, independent Bernoulli trials, each with a probability p of success.
Therefore, the random variable C u follows a binomial distribution C u ∼ Bin(x, p), where µ Cu = E(C u ) = x · p andσ 2 Cu = V ar(C u ) = x · p · (1 − p).
This assumes that peers u and v are online all the time and can thus be chosen for all x transactions.
In reality, however, some peer u might be online much longer than some other peer v. Therefore, u is likely to be involved in more transactions and will hence also contribute more to the network.
This should be reflected in the local approximations C u and C v .
Let us assume that peer u is online with a fixed probability p u , and peer v with probability p v .
Based on the assumption that the transactions are distributed uniformly over time, peer u can only be chosen for x u = p u x transactions on average, and peer v for x v = p v x transactions.Furthermore, since the ultimate goal of Havelaar is to encourage high upload bandwidth, we need to include the provided upload bandwidth into the model.
Let us assume that peer u uploads fragments at a fixed bandwidth of b u , and peer v at a bandwidth of b v .
Instead of adding 1 to the contribution value of each peer, the corresponding bandwidth is added.Putting everything together, the mean of C u is given byµ Cu = E(C u ) = b u · p u · x · p, and the variance is σ 2 Cu = V ar(C u ) = b 2 u · p u · x · p · (1 − p).
Note that the bandwidth b u is multiplied twice in the variance (b 2 u ): The variance in the contribution C u does not increase linearly in the bandwidth, but quadratically.Of course, our model can be extended in several ways, for example by incorporating variable fragment sizes or issues of contention.
However, this would be overly exact (cf technical report [13]); in order to keep things simple, we restrict ourselves to the main factors, omitting this generalization in our analysis.For small x, the coefficient of variation σ Cu /µ Cu (or, similarly, also the variance-to-mean ratio σ 2 Cu /µ Cu ) is large.
However, for x → ∞, it converges to 0.
This indicates that with lots of observations, relative estimates become accurate enough.
We are interested in the ratio of the contribution values of two peers competing for resources at the same time.
Therefore, let us introduce a random variable Z reflecting this ratio:Z := C u /C v .
What is the mean and the variance of Z?
Since C u and C v are independent, the following approximations are reasonable [26]:µ Z = E(Z) ≈ µ Cu µ Cv + σ 2 Cv µ Cu µ 3 Cv ,andσ 2 Z = V ar(Z) ≈ σ 2 Cv µ 2 Cu µ 4 Cv + σ 2 Cu µ 2 Cv .
As can be seen from these formulas, for x → ∞, the variance decreases quickly, and hence, for lots of observations x, Z is a good approximation of the ratio of the real contributions of peers u and v.
In the following subsection, we will make use of another helpful approximation of the coefficient of variation [29]:σ Z µ Z 2 ≈ σ Cu µ Cu 2 + σ Cv µ Cv 2(1).
We can now estimate the number of observations necessary for a good approximation, that is, for small coefficients of variation of Z. Plugging µ Cu , σ Cu , µ Cv , and σ Cv into (1) yieldsσ Z µ Z 2 = b 2 u p u x(p − p 2 ) b u p u xp 2 + b 2 v p v x(p − p 2 ) b v p v xp 2 = 1 − p p u xp + 1 − p p v xp .
Solving this for x gives the following fact.
Fact 6.1: The number of observations needed in order to achieve a desired approximation (as expressed by the coefficient of variation) of the real contribution values isx ≈ − p v (p − 1) + p u (p − 1) σ Z µ Z 2 p u p v p .
As an example, for a network with n = 100, 000 peers, where at any time m = 1 4 n = 25, 000 peers are online, and if we assume that p u = p v = 1 4 (in Kangoo, storage peers are online for more than six hours per day), x ≈ 10 7 observations are required for an acceptable coefficient of variation of 0.15.
Having computed the number of observations x which are approximately needed for an acceptable accuracy, we can now determine the number of aggregation rounds.
Assuming that every peer makes t transactions (= observations), the number of rounds r is r = log k x t .
For the above example of x = 10 7 observations, assuming that each peer makes t = 5, 000 transactions and sends its observations to k = 7 peers, r ≈ 4 rounds are already enough!
The Achilles' heel of Havelaar are the communication costs: Every peer has to send-for example, once a week-the aggregated observations to its successors.
However, we believe that in many practical systems, the burden is tolerable.
Moreover, as described in the technical report [13], various compression techniques-e.g., due to sparseness-can be employed to reduce the size of the messages further.Concretely, we have computed Havelaar's estimated message size [13] depending on the number of rounds r and the number of transactions t in the system, and assuming that the contribution values can be encoded with 8 bits each (in a simulation, the entropy was only ≈ 7 bits).
We have then compared Havelaar to solutions where the contribution value is recorded in a DHT.
In this approach, the contribution value of peer u is stored at a peer which is chosen based on a hash function h(u).
Since the contribution values in Havelaar are only approximations and since the local vector is only updated once per round, we have compared the communication costs to a DHT-based approach with the same level of approximation and the same amount of updates.
That is, instead of updating the contribution value after each download and retrieving the contribution value before each upload, peers only update the contribution value in the DHT probabilistically (with a probability resulting in the same level of approximation as Havelaar), and they only update their local vector by a look-up operation once per round.As an example, in a network with n = 100, 000, t = 5, 000, k = 7, and r = 4, the communication costs are ≈ 2.2 MB per peer and week.
In comparison, an approximate DHT-based approach would require ≈ 3.7 MB.
Thereby, the costs for the DHT-based approach are only a lower bound: More communication would be necessary in order to store the contribution values persistently.
Havelaar scales much better in the number of transactions.
For the same example, but with t = 20, 000 transactions, the communication costs of Havelaar are ≈ 2.5 MB, compared to ≈ 13.8 MB of the DHT-based approach.
Finally, for a network with n = 1, 000, 000 and t = 40, 000, the communication costs in Havelaar are ≈ 23.3 MB and the DHT-based approach ≈ 87.7 MB.
We refer the reader to the technical report [13] for a more detailed comparison.In conclusion, although the costs of Havelaar can be relatively high for a small number of transactions (e.g., up to ≈ 1.73 MB for t < 2000 in a network of n = 100, 000, compared to ≈ 1.51 MB for the DHT-based approach), our system scales much better than various forms of DHT-based solutions.
Moreover, we believe that the communication costs are acceptable in many practical environments.
Havelaar is designed to cope with peers aiming at selfishly consuming larger shares of resources than other peers.
The fact that every peer can send its observations only to its k successors facilitates local defenses.A peer uses several defense mechanisms.
A receiver checks whether a sender is one of its predecessors, and otherwise ignores the report.
Moreover, it can make sure that a peer does not report contributions too often.A peer does not take into account observations about the reporting predecessor itself.
Thus, the most attractive attack is made hard by design: It is only possible to falsely "praise" or "accuse" another peer.In addition to limiting the range of possible values, other measures are taken in our system to detect and ignore false reports.
Before updating the local contribution vector c on the basis of the observation matrices, for each value the average and variance is calculated.
If one value is extremely large, it is considered an outlier with respect to the other k − 1 values, and is dropped.
Then, the average of the other k − 1 values is taken as the input to the update function.Clearly, one can think of several further local defense mechanisms.
For instance, statistical measures could be included to detect a possible false report by studying the distribution (histogram) of the observation vector, e.g., by checking whether the histogram is spiked.
In any of the above cases where the successor is suspicious of an attack, it could reduce the trust value associated with each predecessor.
The trust value can be used to either drop observations by misbehaving peers, or to weigh their observation values accordingly.
However, it has not been necessary to make use of these techniques so far.Besides the advantages of local defense, the robustness of Havelaar comes from the extensive aggregation: A single wrong value hardly influences the overall outcome.
In this sense, also the damage which can be done by a small fraction of colluding peers is limited.
In particular, collusion is also made difficult by the fact that successor peers are determined by hash functions, and hence becoming a predecessor of a specific peer is hard.In summary, Havelaar's design is based on local defense and extensive accumulation, and unlike many other approaches does not rely on transitivity of trust.
This renders attacking the system a difficult endeavour.
Finally, recall that several other attacks such as Sybil attacks and whitewashing are tackled by mechanisms which are part of Kangoo and hence are external to Havelaar.
We have performed several simulations of Havelaar which fortify our results.
In this section, we present the most interesting findings.In Figure 1, the real ratio of the contribution values of two peers is compared to the ratio from the local approximation in a network of size n = 100, 000, with k = 7 successors and r = 4 rounds.
In each round, the peers change their upload bandwidth.
In the first round, for instance, peer u contributed exactly three times more than peer v. Note that the approximation is shifted to the right; this is due to the fact that contribution values are only updated once a round, based on observations from the past.
Note also that the standard deviation of the approximation is generally low-being higher when peers change their behavior abruptly.
Global normalized contribution value plotted against the locally approximated one.The figure reveals that the bootstrapping process is quite fast, which implies that newly joining peers-or peers which return after a long period of absence-are up-to-date soon.
Of course, this delay may still be unacceptably large for many systems where appropriate solutions which further speed up the process would be needed.
However, this is not the case in Kangoo, as peers are expected to remain in the system for months or even years.
Figure 2 plots the local contribution vector for the same network against the global (real) contribution vector.
Both vectors are normalized by dividing each entry by the sum of the whole vector.
That is, each contribution value reflects the proportional contribution of the entire network.
Again, the local approximation reflects the real contribution accurately (almost a straight line).
For peers with higher contribution, however, the variance becomes larger.
This is due to the fact that the variance is multiplied by the square of the bandwidth, as described in Section VI.
5 X. CONCLUSIONSThe main goals of the Havelaar reputation system are (1) accurate estimation of the real contribution values of other peers, (2) robustness to selfish peers, and (3) efficiency, i.e., scalability in the number of transactions.
This is achieved by a novel aggregation technique where peers always report the observed contributions values to the same set of peers.
This allows for a local control of a peer's behavior.
Encouraged by our results, we have integrated Havelaar in our distributed storage system Kangoo.
We believe that Havelaar is a good choice for many active p2p systems requiring a fairness mechanism.
