Boolean relations are an important tool in system synthesis and verification to characterize solutions to a set of Boolean constraints.
For physical realization as hardware, a deter-ministic function often has to be extracted from a relation.
Prior methods however are unlikely to handle large problem instances.
From the scalability standpoint this paper demonstrates how interpolation can be exploited to extend deter-minization capacity.
A comparative study is performed on several proposed computation techniques.
Experimental results show that Boolean relations with thousands of variables can be effectively determinized and the extracted functional implementations are of reasonable quality.
Relations are a powerful tool to represent mappings.
Admitting one-to-many mappings, they are strictly more generic than functions.
Taking the Boolean mappings {(x1, x2) ∈ B 2 } → {(y1, y2) ∈ B 2 } of Figure 1 as an example, we can express the (one-to-one) mapping of (a) using Boolean functions f1 = x1x2 and f2 = ¬x1¬x2 for outputs y1 and y2, respectively.
On the other hand, there is no similar functional representation for the mapping of (b) due to the oneto-many mapping under (x1, x2) = (0, 1).
However, this mapping can be specified by the relation (with characteristic function) R = ¬x1¬x2¬y1y2 ∨ ¬x1x2¬y1¬y2 ∨ ¬x1x2y1y2 ∨ x1¬x2¬y1¬y2 ∨ x1x2y1¬y2.Owing to their generality, relations can be exploited to specify the permissible behavior of a design.
For instance, the behavior of a system can be specified using relations as constraints over its input stimuli, state transitions, and output responses.
Moreover, the flexibility of a circuit can be naturally characterized by a relation.
In fact, relations subsume the conventional notion of don't-cares.
To see it, assume Figure 1 (b) to be a relaxed permissible mapping of (a).
That is, under input (x1, x2) = (0, 1) the output (y1, y2) can be (1, 1) in addition to (0,0).
This flexibility is not expressible using the conventional don't-care representation, and it can be useful in circuit optimization.
By trimming off the output choice (0, 0) under input (0, 1), the resulting mapping in (c) has new output functions f1 = x2 and f2 = ¬x1, simpler than those of (a).
Compared with relations, functions, though more restrictive, are often closer to physical realization due to their deterministic nature.
Therefore conversions between relations and functions are usually indispensable.
To name two examples, in reachability analysis, the transition functions of a state transition system are often converted to a transition relation to abstract away input variables; in circuit synthesis, optimal functions can be extracted from a relation representing some specification or permissible behavior.Whereas converting functions to relations is straightforward, converting relations to functions involves much compli- cation.
Among many possibilities, relation-to-function conversion in its two extremes can be range-preserving, where all possible output responses under every input stimulus 1 are produced (with the help of parametric variables), and can be deterministically reducing, where only one output response under every input stimulus is produced (without the need of parametric variables).
Both extremes have important applications in system synthesis and verification.
The former is particularly useful in verification.
As the constraints specified by a relation are preserved, the conversion helps create a testbench to generate simulation stimuli [10,22,21] mimicking the constrained system environment.
The later on the other hand is particularly useful in synthesis [4].
As the synthesized components are typically much compact than those with range preserved [2], it is attractive for generating the final implementation.
This paper is concerned with the latter, in particular, determinizing a relation and extracting functional implementation in the Boolean domain.Brayton and Somenzi [4] were among the first to observe the utility of Boolean relations in logic minimization.
Boolean relations are useful not only in characterizing circuit flexibilities [20,15], but also in characterizing solutions to design specifications/constraints [2].
There were intensive efforts focusing on the exact or heuristic optimization of functions implementing a given relation.
Such optimization objectives, for instance, can be in terms of two-level logic minimization under the SOP representation [5,7,14,9,19], or in term of some polynomial functions over BDD sizes [1].
State-ofthe-art methods, such as [19,1], are based on decision diagrams.
As BDDs are not memory efficient in representing large Boolean functions, these methods have intrinsic limitations and are not scalable to large problem instances.
There has been growing need for scalable determinization of large Boolean relations.
Synthesis from specifications shows one such example [2].
The quest for scalable determinization methods remains.From the scalability standpoint, we seek reasonable representation of large Boolean functions and, in particular, use and-inverter graphs (AIGs) (see, e.g., [17]) as the underlying data structure.
Due to their simple and multi-level nature, AIGs are often much compact and are closer to final logic implementation than the two-level SOP form.
Moreover they provide a convenient interface with SAT solvers in terms of conversion to CNFs and representation of interpolants [18].
Therefore, unlike previous efforts on relation solving, our objective is to convert a large relation to a set of functions with reasonable quality.
Similar attempts were pursued recently in other efforts of scalable logic synthesis, e.g., [11,12,13,16].
Our main exploration includes 1) exploiting interpolation [6] for Boolean relation determinization and function extraction, 2) studying expansion-and substitution-based quantifications with reuse, and 3) showing support minimization in the interpolation framework.
A comparative empirical study is performed on various computation schemes.
Experimental results suggest that interpolation is essential to scalable relation determinization and function extraction.
Boolean relations with thousands of variables can be determinized effectively and the extracted functions are typically of reasonable quality compared with their respective reference models.This paper is organized as follows.
Essential backgrounds are given in Section 2.
Section 3 presents the main results on relation determinization and function extraction; Section 4 discusses function simplification.
Experimental results and discussions are given in Section 5.
Finally, Section 6 concludes the paper and outlines some future work.
As a notational convention, substituting function g for variable v in function f is denoted as f [v/g].
A relation R ⊆ X × Y can be equivalently represented as a characteristic function R : X × Y → B such that (a, b) ∈ R for a ∈ X, b ∈ Y if and only if R(a, b) = 1.
Definition 1.
A relation R : X × Y → B is total (in X) if ∀a ∈ X, ∃b ∈ Y.R(a, b) = 1.
Otherwise, R is partial.Unless otherwise said we shall assume that a relation R ⊆ X × Y is total in X.Definition 2.
Given a partial relation R : X × Y → B, an (input) assignment a ∈ X is undefined if no (output) assignment b ∈ Y makes R(a, b) = 1.
This paper assumes that X is the input space B n spanned by input variables x = (x1, . . . , xn) and Y is the output space B m spanned by output variables y = (y1, . . . , ym).
Given a Boolean relation R : B n ×B m → B with input variables x = (x1, . . . , xn) and output variables y = (y1, . . . , ym), we seek a functional implementation f = (f1, . . . , fm) withfi : B n → B such that D = m i=1 (yi ≡ fi( x))is contained by R, i.e., the implication D ⇒ R holds.
Equivalently, the relation after substituting fi for yi R[y1/f1, . . . , ym/fm] equals constant 1.
Note that the above relation D is a deterministic relation, i.e.,∀a ∈ X, ∀b, b ∈ Y.((D(a, b) ∧ D(a, b )) ⇒ (b = b )).
Therefore seeking a functional implementation of a total relation can be considered as determinizing the relation.
On the other hand, any deterministic total relation has a unique functional implementation.
The reader is referred to prior work [11] for a brief introduction to SAT solving and circuit-to-CNF conversion, which are essential to our development.
To introduce terminology and convention for later use, we restate the following theorem.Theorem 1 (Craig Interpolation Theorem).
[6] Given two Boolean formulas φA and φB, with φA ∧ φB unsatisfiable, then there exists a Boolean formula ψA referring only to the common variables of φA and φB such that φA ⇒ ψA and ψA ∧ φB is unsatisfiable.The Boolean formula ψA is referred to as the interpolant of φA with respect to φB.
Modern SAT solvers can be extended to construct interpolants from resolution refutations [18].
In the sequel, we shall assume that Boolean relations, functions, and interpolants are represented using AIGs.
We consider first the functional implementation of a singleoutput relation R( x, y) with y the only output variable.
Proposition 1.
A relation R( x, y) is total if and only if the conjunction of ¬R( x, 0) and ¬R( x, 1) is unsatisfiable.Theorem 2.
Given a single-output total relation R( x, y), the interpolant ψA of the refutation of¬R( x, 0) ∧ ¬R( x, 1) (1)with φA = ¬R( x, 0) and φB = ¬R( x, 1) corresponds to a functional implementation of R.Proof.
Since R is total, Formula (1) is unsatisfiable by Proposition 1.
That is, the set {a ∈ X | R(a, 0) = 0 and R(a, 1) = 0} is empty.
Hence φA (respectively φB) characterizes the set SA = {a ∈ X | R(a, 1) = 1 and R(a, 0) = 0} (respectively SB = {a ∈ X | R(a, 0) = 1 and R(a, 1) = 0}).
As φA ⇒ ψA and ψA ⇒ ¬φB, the interpolant ψA maps every element of SA to 1, every element of SB to 0, and every other element to either 0 or 1.
Let D be (y ≡ ψA).
Then D ⇒ R.Therefore interpolation can be seen as a way to exploit flexibility for function derivation without explicitly computing don't cares.Corollary 1.
Given a single-output total relation R, both R( x, 1) and ¬R( x, 0) are legitimate functional implementation of R.Proof.
Let φA = ¬R( x, 0) and φB = ¬R( x, 1).
Because φA ⇒ R( x, 1) and R( x, 1) ⇒ ¬φB, R( x, 1) is a legitimate interpolant.
Similarly, ¬R( x, 0) is a legitimate interpolant, too.In fact, the cofactored relations R( x, 1) and ¬R( x, 0) are the largest (weakest) and smallest (strongest) interpolants, respectively, in terms of solution spaces.
Therefore to derive a functional implementation of a single-output total relation, interpolation is unnecessary.
However practical experience suggests that functional implementations obtained through interpolation are often much simpler in AIG representation.
Note that Theorem 2 works only for total relations because partial relations make Formula (1) satisfiable.
To handle partial relations, we treat undefined input assignments as don't-care conditions (this treatment is legitimate provided that the undefined input assignments can never be activated) and define complete totalization as follows.Definition 3.
Given a single-output partial relation R, its complete totalization is the new relationT ( x, y) = R( x, y) ∨ ∀y.¬R( x, y).
(2)Note that T = R if and only if R is total.
Accordingly Theorem 2 is applicable to a totalized relation T with φA = ¬T ( x, 0) and(3) φB = ¬T ( x, 1),(4)which can be further simplified toφA = ¬R( x, 0) ∧ R( x, 1) and (5) φB = ¬R( x, 1) ∧ R( x, 0).
(6)Observe that the conjunction of Formulas (5) and (6) is trivially unsatisfiable.
Further, either of ¬R( x, 0) and R( x, 1) is a legitimate interpolant.
Therefore, as long as the undefined input assignments of R are never activated, the interpolant is a legitimate functional implementation of R. (This fact will play a role in the development of Section 3.2.2.)
Given a (partial or total) relation R with y being the only output variable, in the sequel we let F I(y, R) denote a functional implementation of y with respect to R. Among many possibilities, F I(y, R) can be derived through the interpolation of Formulas (5) and (6).
We now turn attention to the functional implementation of a multiple-output relation R( x, y1, . . . , ym) with m > 1.
In essence, we intend to reduce the problem so as to apply the previous determinization of single-output relations.A determinization procedure contains two phases: The first phase reduces the number of output variables; the second phase extracts functional implementation.
We study two determinization procedures with different ways of reducing the number of output variables.
One is through existential quantification; the other is through substitution.
As a notational convention, we let R (i) denote ∃ym, . . . , yi.R for 1 ≤ i ≤ m. Through standard existential quantification by formula expansion, i.e., ∃x.ϕ = ϕ[x/0] ∨ ϕ[x/1] for some formula ϕ and variable x, one can reduce a multiple-output relation R to a single-output relation R (2) .
In the first phase, R (i) can be computed iteratively as follows.R (m) = ∃ym.R .
.
.
R (i) = ∃yi.R (i+1). . .R (2) = ∃y2.R (3) for i = m − 1, . . . , 2.
In the second phase, functional implementations of all output variables can be obtained through the following iterative calculation.f1 = F I(y1, R (2) ). . .fi = F I(yi, R (i+1) [y1/f1, . . . , yi−1/fi−1]). . . for i = 2, . . . , m − 1.
The above procedure is similar to prior work (see, e.g., [19]) with some subtle differences: First, the quantification results of the first phase are reused in the second-phase computation.
It reduces the number of quantifications from O(m 2 ) to O(m).
Second, interpolation is the key element in the computation and AIGs are the underlying data structure.
Alternatively the solution to the determinization of a singleoutput relation can be generalized as follows.
Each time we treat all except one of the output variables as the input variables.
Thereby we see a single-output relation rather than a multiple-output relation.
For example, let ym be the only output variable and treat y1, . . . , ym−1 be additional input variables.
In the enlarged input space (spanned by y1, . . . , ym−1 as well as x), however, R may not be total even though it is total in the original input space X. Let f m = F I(ym, R), obtained through interpolation mentioned in Section 3.1.2.
Note that since f m depends not only on x, but also on y1, . . . , ym−1, it is not readily a functional implementation of ym.In the first phase, the number of output variables can be iteratively reduced through the following procedure.
R i = R i+1 [yi/f i ] . . . f 2 = F I(y2, R 3 ) R 2 = R 3 [y2/f 2 ] for i = m − 1, . . . , 2.
In the second phase, the functional implementations can be obtained through the following iterative calculation.f1 = F I(y1, R 2 ). . . .
This fact is true however and a detailed exposition can be found in the work [8].
By induction on i = m, . . . , 2 using Lemma 1, one can further claim that R i = R (i) .
Note that the above computation implicitly relies on the don't-care assumption of partial relations.
This assumption is indeed legitimate because the don't cares for deriving f i can never be activated when substituting f i for yi in R i+1 .
Comparing R (i) of Section 3.2.1 and R i of Section 3.2.2, one may notice that the AIG of R (i) is in general wider in width but shallower in depth, and, in contrast, that of R i narrower but deeper.As an implementation technicality, relations R (i) (similarly R i ) can be stored in the same AIG manger.
So structurally equivalent nodes are hashed together, and logic sharing is possible among relations R (i) (similarly R i ).
We consider the special case of extracting functions from a deterministic relation.Lemma 2.
Given a deterministic relation D( x, y) total in the input space X withD = m i=1 (yi ≡ fi),(7)let φA = D( x, y1, . . . , yi−1, 1, yi+1, . . . , ym) and(8) φB = D( x, y 1 , . . . , y i−1 , 0, y i+1 , . . . , y m ),(9)where y and y are independent variables.
Then the interpolant of φA with respect to φB is functionally equivalent to fi.Proof.
Since D is deterministic and total in X, for every a ∈ X there exists a unique b ∈ Y such that D(a, b) = 1.
It follows that the formulas must induce a partition on the input space X, and thus the interpolant of φA with respect to φB must logically equivalent to Formula (11), which is unique.Back to the computation of Section 3.2.2, letD = R ∧ i (yi ≡ f i ).
(12)Since the relation D is deterministic, the computation of Lemma 2 can be applied to compute fi.
The strengths of this new second-phase computation are twofold: First, no substitution is needed, in contrast to the second-phase computation of Section 3.2.2.
Hence the formula sizes of φA and φB in interpolant computation do not grow, unlike the previous second-phase computation.
As interpolant sizes are more or less proportional to the formula sizes of φA and φB, this approach is particularly desirable.
Second, only functions f i , but not relations R i , are needed in the computation.
Since the formula sizes of R i are typically much larger than those of f i , this approach saves memory by discharging R i .
The following lemma can be exploited in reducing the support variables of a functional implementation.
Lemma 3.
For two Boolean formulas φA and φB with an unsatisfiable conjunction, there exists an interpolant without referring to variable xi if and only if the conjunction of ∃xi.φA and φB (equivalently the conjunction of φA and ∃xi.φB) is unsatisfiable.Proof.
(⇐=) Assume the conjunction of ∃xi.φA and φB (similarly φA and ∃xi.φB) is unsatisfiable.
Since φA ⇒ ∃xi.φA (similarly φB ⇒ ∃xi.φB), the conjunction of φA and φB is unsatisfiable as well.
Also by the common-variable property of Theorem 1, the existence condition holds.
(=⇒) Observe that ∃xi.φA (respectively ∃xi.φB) is the tightest xi-independent formula that is implied by φA (respectively φB).
The existence of an interpolant of φA with respect to φB without referring to xi infers the unsatisfiability of the conjunction of ∃xi.φA and φB as well as that of φA and ∃xi.φB.By the lemma, we can possibly knock out some variables from an interpolant.Note that, in Lemma 3, it suffices to quantify xi over φA or φB even though it is okay to quantify on both.
In practice, quantification on just one formula results in smaller interpolants because the unsatisfiability is easier to be shown in SAT solving.
The proposed methods were implemented in the ABC package [3]; the experiments were conducted on a Linux machine with Xeon 3.4GHz CPU and 6Gb RAM.To prepare Boolean relations, we constructed the transition relations of circuits taken from ISCAS and ITC benchmark suites.
Different amounts of don't cares were inserted to the transition relations to introduce nondeterminism.
We intended to retrieve a circuit's transition functions in the following experiments.The original circuits 2 were minimized with the ABC command dc2, and so were the AIGs produced during determinization and function extraction.
The profile of the original circuits (after the removal of primary-output functions and after dc2 synthesis) is shown in Table 1, where "(n, m)" denotes the pair of input-and output-variable sizes of the transition relation, "#n" denotes the number of AIG nodes, "#l" AIG logic levels, and "#v" the summation of support variables of all transition functions.We first study the usefulness of interpolation in contrast to cofactoring, which can be considered as a way of deriving special interpolants as mentioned in Section 3.1.1.
In the experiment, a circuit was determinized via expansion reduction, where the functional implementations extracted in the second phase were derived differently using interpolation and cofactoring to compare.
Taking circuit b11 as a typical example, Figure 2 contrasts the difference between the two techniques.
As can be seen, by cofactoring, the function sizes grow almost exponentially during the iterative computation; by interpolation, the function sizes remain under control.
In fact, derived by cofactoring, say, R (i+1) with yi = 1, function fi has almost the same size as R (i+1) unless command dc2 can effectively minimize fi.
However, dc2 is unlikely to be helpful for large fi as justified by experiments.
Below we compare different determinization methods, including BDD-based computation, that via expansion reduction (Section 3.2.1), denoted Xp, that via substitution reduction (Section 3.2.2), denoted St, and that via constructing deterministic relation (Section 3.3), denoted SD.
Dynamic variable reordering and BDD minimization are applied in BDD-based computation.
Table 2 shows the results of function extraction from relations without don't care insertion.
BDD-based computation is not scalable as expected.
There are five circuits whose transition relations cannot be built compactly using BDDs under 500K nodes and the computation cannot finish either within 30 hours CPU time or within the memory limitation.
Ratio 1 and Ratio 2 are normalized with respect to the data of the original circuits of Table 1, whereas Ratio 3 is normalized with respect to the BDD-based derivation.
Ratio 1 covers all the ten circuits, whereas Ratio 2 and Ratio 3 cover only the five circuits that BDD-based derivation can finish.By Ratio 1, we observe that the derived functions (without further postprocessing to minimize) are about 3-times larger in nodes, 4-times larger in logic levels, and 9% smaller in support sizes.
To be shown in Table 4, with postprocessing, the derived functions can be substantially simplified and are comparable to the original sizes.
By Ratio 2, we see that even BDD-based derivation may increase circuit sizes by 70% while logic levels are reduced by 11%.
By Ratio 3, we see that the results of the SAT-based methods are about 40% larger in nodes and 2-times larger in logic levels.
Table 3 shows the results of function extraction from relations with don't cares inserted.
For a circuit with r registers, r · 10% random cubes (conjunction of literals of input and state variables) are created.
Each cube represents some don't cares for a randomly selected set of functions.
Presumably the more the don't cares are inserted, the simpler the transition functions are extracted.
In practice, however, such simplification 3 is not guaranteed (even in BDD-based computation).
The reasons can be twofold: Firstly, the simplifi- cation achieves only local optimums.
Secondly, relations with don't cares inserted become more sophisticated and affect interpolant derivation.
Nevertheless the results of Table 2 and Table 3 are comparable.The above experiments of Xp, St, and SD used only light synthesis operations in minimizing the extracted functions.
Nonetheless, it is possible to greatly simplify these functions with heavier synthesis operations.
To justify such possibilities, we applied ABC command collapse once followed by dc2 twice as postprocessing.
Table 4 shows the statistics of extracted functions by Xp for relations without don't care insertion.
(Similar results were observed for St and SD, and for cases with don't care insertion.)
The postprocessing results of the original functions and extracted functions are shown.
This postprocessing time is listed in the last column.
Operation collapse failed on circuit s15850, and the two ratios shown excludes the data of s15850.
As can be seen, the postprocessing makes the extracted functions comparable to the original ones.
Since the postprocessing time is short, our method combined with some powerful synthesis operations can effectively extract simple functions from large relations, where pure BDD-based computation fails.
Our method can be used as a way of bypassing the BDD memory explosion problem.
We have shown that Boolean relations with thousands of variables can be determinized inexpensively using interpolation.
The extracted functions from a relation are of reasonable sizes.
With such extended capacity, we would anticipate real-world applications, which might in turn enable constraint-based synthesis and verification, synthesis from specifications, and other areas that require solving large Boolean relations.As we just presented a first step, there remain some obstacles to overcome.
In particular, the unpredictability of interpolation prevents relation determinization from being robustly scalable.
Moreover, we may need good determinization scheduling and powerful interpolant/AIG minimization techniques, especially under the presence of flexibility.
The authors are grateful to Robert Brayton and Alan Mishchenko for valuable discussions.
This work was supported in part by NSC grants 95-2218-E-002-064-MY3 and 96-2221-E-002-278-MY3.
