In this paper, we study wireless network routing algorithms that use only short paths, for minimizing latency, and achieve good load balance, for balancing the energy use.
We consider the special case when all the nodes are located in a narrow strip with width at most √ 3/2 ≈ 0.86 times the communication radius.
We present algorithms that achieve good performance in terms of both measures simultaneously.
In addition, our algorithms only use local information and can deal with dynamic change and mobility efficiently.
In a mobile ad-hoc network or a sensor network, devices communicate to their nearby nodes and form an adhoc multi-hop communication network.
Routing in such a network is challenging due to the lack of central control and the high dynamicity of the network.
The previous works have focused on discovering and maintaining routes that enable the connectivity between the nodes and, if possible, that minimize the number of hops on a path.One important restriction of a wireless network is that the nodes are energy constrained as they are normally powered by batteries.
Besides minimizing latency, the shortest path routing is good for overall energy efficiency because energy needed to transmit a packet is correlated to the path length.
However, the algorithms that aim to minimize the path length may ignore "fairness" in the routing -for example, the shortest path routing is likely to use the same set of hops to relay packets for the same source and destination pair.
This will heavily load those nodes on the path even when there exist other feasible paths.
Such an uneven use of the nodes may cause some nodes die much earlier, thus creating holes in the network, or worse, leaving the network disconnected.
This problem is critical in emergency networks, for example, to locate survivors after structure collapse, where depleting the battery of a node may have tragic results.
In addition, unbalanced use of the nodes may discourage the nodes to participate in the routing.Since the biggest energy drain comes from the transmission of packets, we measure the energy consumption of a node by the total size of packets relayed by the node.
Then the load-balanced routing can be thought as to minimize the maximum load on the nodes in the network.
The ideal algorithm would be to minimize both the latency and the maximum load simultaneously.
However, these two goals are conflicting to some extent: the shortest path routing restricts the resources that can be used, while loadbalanced routing aims to use all the available resources to even the load.
One can easily construct an example to show that these two goals are indeed conflicting, i.e. the shortest path routing algorithm necessarily creates heavily loaded nodes, and the optimum load-balancing algorithm necessarily uses long paths.
In practice, the nodes often distribute in special ways such that we may be able to achieve good, though not necessarily the best, performance in terms of both measures simultaneously.
In this paper, we consider a special case arising from practice and present algorithms with performance within a small constant factor of the optimum solution in terms of both measures.The case we consider is when the nodes are located in a "narrow" strip with width at most √ 3/2 ≈ 0.86 times the communication radius of each node.
This model captures the situation when the nodes are on highways or along streets, for examples, when the wireless network is built for inter-vehicle communication [1] or for people walking on streets.
In such cases, routing can be done in two phases.In the first phase, the nodes figure out the "meta-path" needed to route a packet with the aid of the position information and the underlying transportation network map, which is normally static and easily available.
In the second phase, the routing is done for the nodes on the meta-path.
The problem then reduces to the routing for nodes located in a narrow strip.
Compared to the extensive use of the shortest path routing in wireless networks, load-balanced routing has received less attention.
This probably should not be too surprising as load-balancing is a much more difficult problem.
For example, it is NP-hard to compute the most balanced routes, even in a very simple network.
There have been approximate algorithms developed for the problem.
But none of the previous algorithms is local, i.e. they require global coordination, and the approximation ratio often has only theoretical interests.
We show that when the nodes are located in a narrow strip, there exists an efficient algorithm that approximates the optimum solution within a small constant factor.What makes routing on a narrow strip easier is that the greedy forwarding guarantees to find a path, if such a path exists.
This is obvious when the nodes are aligned on a line.
We show that it is also true for a strip with width at most √ 3/2 times the node communication range.
However, even when the forwarding direction of a packet is obvious, there is still freedom to choose to which node, among all the nodes in the neighborhood, to relay the packet.
If we wish to achieve the shortest path routing, it is appropriate to use the greedy method of sending the packet to the furthest reachable node in the right direction.
However, this may create heavily loaded nodes.
On the other hand, if we adopt the greedy strategy of forwarding a packet to the node with the lightest load, it may result in extremely long path.
In this paper, we combine the greedy strategies for minimizing the path length and for minimizing the load to achieve constant competitive ratio of both measures.
The basic idea of our methods is that we maintain, for each node, a set of edges, called bridges, that are guaranteed to make substantial progress.
Then every time the node chooses the "lightest" bridge to relay a packet.
This way, we show that our algorithm has good performance in terms of both path length and maximum load.
In addition, we show that the bridges can be dynamically maintained by using only local information.
Specifically, we can guarantee the following properties of our algorithm.1) It uses only short paths: the number of hops of the path used is at most four times as many as the number of hops of the shortest path algorithm; 2) It balances the load: the maximum total size of packets passed on any node is at most three times as much as the optimum.
3) It is localized and scales well to large networks: each node only needs information in its local neighborhood to make routing decision; and as a consequence, our algorithm handles dynamic change and mobility efficiently as only a node's neighborhood is affected.
4) It is online: the routing decision of a packet depends only on the previously routed packets, i.e., the current state of the network.
It doesn't need to know the packets in the future.
We also consider an important subcase when all the nodes are aligned on a line.
In this case, we can achieve an even better approximation factor for path length.
In addition, we show that by distributing a collection of binary search trees on the nodes, we can reduce both memory needed on each node and the routing/update cost even when a node has many nodes in its neighborhood.While we show rigorously that we can achieve constant bounds in terms of both latency and load in the case when the nodes are located in a narrow strip, we should note that this is not generally true when nodes are in the plane by a simple example as in Figure 1.
In addition to providing rigorous analysis, we have also implemented the algorithm and studied the performance by simulation.
The good performance of our algorithm is supported by the simulation results as well.
For example, even for random traffic pattern, under which we would expect the shortest path routing works well, the maximum load created by our algorithm is only about 20% of the shortest path routing.
We also compare the number of hops in the path produced by our algorithm to that in the shortest path and show that the path length is only increased by a small fraction.
Our work for the nodes in a narrow strip is closely related to the on-line load-balancing problems on related machine model.
Azar's paper [2] and Borodin and ElYaniv's book [3] contain excellent survey of this subject.
Load-balancing routing in general can be formulated as the unsplittable flow problem where we aim to minimize the maximum node congestion.
This is a well-known NPhard problem that can be approximated to a factor of O(log n/ loglog n) [4], [5].
In all the previous work, one either ignores the length of the path or uses only shortest paths for regular networks such as meshes.
Another related problem is the on-line virtual circuit routing problem, which has also been studied extensively [6], [2], [3].
There have been extensive study on routing in wireless networks in recent years.
Among various metrics used for evaluating the routing quality, the most common one is probably the number of hops on the routing path.
The protocols that use shortest path routing include Dynamic Source Routing (DSR) [7], Ad-hoc On-demand Distance Vector routing (AODV) [8] and many others.
Please refer to the surveys [9] and the references therein.On the other hand, energy-aware routing algorithms, which try to maximize the network survivability, have attracted a lot of interest [10][11][12][13][14][15][16][17][18][19][20][21][22][23][24].
The energy aware metrics, such as "maximize time to partition" and "minimize maximum node cost", were first proposed by Singh et al. [15].
Chang et al. [16], [17] used a flow augmentation algorithm and a flow redirection algorithm to balance the energy consumption on different nodes.
Their method, however, requires a full knowledge of traffic demands and does not handle node insertion and deletion.
Extensions along this approach were addressed in [22], [23].
Li et al. [11] studied the online power-aware routing which minimizes the earliest time when a packet can not be sent.
They proved that any online algorithm has unbounded competitive ratio and provided algorithms with zone-based heuristics.
Yu et al. [19] proposed a method that uses the geographical locations of wireless nodes for energy aware routing.
Xu et al. [24] proposed an algorithm GAF which is designed to reduce the energy consumption by turning off unnecessary nodes.
In [25], [26], the traditional energy-unaware routing protocols such as DSR [7] or AODV [8] were re-visited to take into account the energy-aware metric.
All of the energy-aware protocols mentioned above are heuristics and do not provide any guarantee on the performance.The paper is organized as follows.
In Section II, we introduce some definitions and notations.
In Section III and IV, we describe the algorithm for the nodes that are aligned on a line and its efficient implementation.
Then, we show that the similar technique can be extended for nodes that are inside a narrow strip in Section V.
In Section VI, we show the simulation results of our algorithm.
Wireless nodes can be modeled as a set of points S in the plane.
Let n denote the size of S.
We assume the communication range of each node is 1.
The communication graph of S is an unweighted unit-disk graph U (S) = (S, E), where (p, q) ∈ E if the Euclidean distance between p, q ∈ S is at most 1.
When (p, q) ∈ E, they are also said visible to each other.
The length of a path P , denoted by |P |, is the number of nodes on the path.
For p, q ∈ S, denote by d(p, q) the length of the shortest path between p and q. For any path P between p, q, the stretch factor s(P ) is defined to be |P |/d(p, q).
If s(P ) ≤ α, P is called α-short.
A routing request has the form r = (s, t, ) where s, t, represent the source, destination, and packet size, respectively.
To satisfy a request r, a path P r between s and t is allocated to relay the packet.
For a set of requests R, a path set P satisfies R, denote by P |= R, if P = {P r | r ∈ R} where P r satisfies r. Similarly, the stretch factor of P is defined to be the maximum stretch factor of the paths in P. P is called α-short if every path in P is α-short.
For example, the shortest path routing algorithm always produces 1-short paths.For a set of requests R satisfied by P, the load (v) incurred to v ∈ S is the total size of the packets that pass v, i.e.(v) = v∈P r r .
The maximum load (P) of P is then defined to be max v∈S (v).
Denote by * (R) the load of the most balanced routing, i.e. * (R) = min P|=R (P).
The loadbalancing ratio of P is then defined to be (P)// * (R).
An algorithm is said β-balanced if for any set of requests R, the load-balancing ratio is at most β.
In this paper, our goal is to design wireless routing algorithms with both small stretch factor and small load-balancing ratio.
In this section, we focus on the special case when all the nodes are aligned on a line.
Later on, we show how the similar technique can be extended to the case when the nodes are in a narrow strip.
We first describe an algorithm that achieves both constant stretch factor and constant load-balancing ratio without worrying about the algorithmic issue.
We then present an efficient distributed implementation of the algorithm in the next section.We start with the case when all the requests have unit packet size.
In this case, we show a 2-short and 2-balanced routing algorithm.
The method for unit packet size fails for variable packet size.
By using a different technique, we can achieve the same stretch factor but a slightly worse load-balancing ratio.
Before presenting the algorithms, we first show that the optimum load balancing is difficult even for a simple network, as shown in Figure 2(i).
Suppose that each node x i wishes to send a packet with size i to the node y i .
They have to choose, from z 1 , z 2 , a node to relay the packet.
The optimum solution is then the most even distribution of the packets on z 1 , z 2 .
This is exactly the knapsack problem, a well-known NP-hard problem.In fact, if there are m nodes z 1 , · · · , z m , inside the intersection of the communication ranges of x i 's and y i 's, then minimizing the maximum load on the m nodes becomes the on-line load balancing problem on m identical machines.
Even obtaining an approximation within a ratio of 1.852 has been proven NP-hard [27].
Fig. 2.
Load-balanced routing is hard.
The problem in (i) is equivalent to the knapsack problem.
In (ii), the shortest path from x i to y i all pass through z, but one can evenly distribute the load by using the path as shown in the figure.1 y 1 . . . 1 x 1 . . . z 1 z 2 (i) y 1 . . . 1 1 1 x 1 . . . z (ii)Next, we show that it is impossible to optimize both the stretch factor and the load-balancing ratio.
In Figure 2(ii), when x i sends a packet to y i , if we insist to use the shortest path, then all the packets have to pass the node z while we may evenly distributed the packets as shown in the figure.
Suppose that all the nodes lie on the real line.
For each node p ∈ S, denote by x p the coordinate of p.
Then the communication range of p is the intervalI(p) = [x p − 1, x p + 1].
Define the left (right) communication range of p as I l (p) = [x p − 1, x p ) (I r (p) = (x p , x p + 1])The algorithm GREEDY1 works as follows: Each node p i keeps track of (p i ), the load it has relayed so far, and also the maximum load in its left and right communication range (p i exclusive), denoted by * l (p i ) and * r (p i ), respectively.
Whenever a node p i receives a new request with destination t, it checks if t is within its communication range.
If it is, then p i simply sends the request to t. Otherwise, assume t is to the right of p i , it then sends the request to the furthest node among all the nodes in its right communication range whose load is strictly smaller than * r (p i ).
If all the nodes in I r (p i ) have the same load, then p i simply sends the request to the furthest node in I r (p i ).
In this case, * r (p i ) is increased by 1.
GREEDY2 is obtained by adding one look-ahead to GREEDY1: Whenever a receives a request, it finds b = a * according to GREEDY1 and then asks b to find c = b * .
If c is in a's communication range, then a shortcuts b and sends the packet to c. Otherwise, a sends the request to b.Theorem 3.1.
GREEDY2 is 2-short and 2-balanced.
Proof: Suppose that P r is a left to right path produced by GREEDY1.
Take any four adjacent nodes, say a, b, c, d from left to right, along P r .
We claim that a and d are not visible to each other.Suppose otherwise, then a, b, c, d are all mutually visible to each other.
Since c, d are both in I r (b) and b chooses c instead of d to be the next node along the path, we must have that (c) < (d) by the greedy forwarding strategy.Therefore (c) < (d) ≤ * r (a).
That is, a should have chosen c or a node to the right of c to be the next node, contradicting with that b is the next neighbor of a in the path.A direct consequence of the above fact is that for any two non-adjacent nodes a, b on a path produced by GREEDY2, they are not visible to each other.
This also explains why in GREEDY2, one shortcut is sufficient.
Therefore, the stretch factor of GREEDY2 is 2 because any unit interval can only cover at most two nodes in a path produced by GREEDY2 while for the shortest path, there must be at least one node in each unit interval.As for the load-balancing ratio, we consider the first time when the maximum load is created.
Suppose that it is on the node i and caused by the request r.
That is, right before i relays the request, no node had more than (P)−1 load on it, and (i) = (P) − 1.
Assume the forwarding direction of r is from left to right.If there is no node to the right of i, then i must be the destination of all the requests and therefore the loadbalancing ratio is 1.
Otherwise, suppose that j is the node to the immediate right of i in S, and k the node to the left of i on the path P r (Figure 3 (i)).
Denote by I = I l (i) \ I l (j).
Then k must be inside I because k and j cannot be visible to each other -otherwise k would have chosen j, instead of i to relay the packet.i j u k I l (j) I (i) b d c a I(d) (ii)Assume there are m ≥ 1 nodes inside j's left communication range I l (j).
Then every node u ∈ I l (j), except for i, must have load exactly (i) − 1, because otherwise k would have chosen u instead of i as the next neighbor on P r (there is no node between i, j as j is to the right of i in S.).
The total load summed over all the nodes in I l (j) is therefore (m − 1)((i) − 1) + (i).
Since a path generated by GREEDY2 has at most two nodes inside any unit interval, the number of requests that pass the interval I l (j) is at least (mm(i) − m + 1)/2.
Therefore the optimum value, * (R), is at least (mm(i) − m + 1)/(2m).
This proves that (P) ≤ 2 * (R) + 1.
The above analysis on the load-balancing ratio is tight as we can construct examples to achieve the bound.
The above greedy algorithm fails for requests with variable size.
For example, with variable sized packets, we can force GREEDY2 to alternate between two nodes while it is possible to evenly distribute the loads among nearby nodes.
Here, we show a different greedy strategy with stretch factor of 2 and the load-balancing ratio of 3.
The idea is to define bridges which can be used to guarantee progress and then choose from the "lightest" bridge.
This idea will also be used for dealing with strips.For each node d ∈ S, a pair of nodes b and c form a bridge over d if b ∈ I l (d), c ∈ I r (d), and b, c are visible to each other (Figure 3 (ii)).
The load of a bridge (bc) is defined as max((b), (c)).
Then lightest bridge B(d) is defined to be the lightest bridge among all the bridges over d. Now, the algorithm GREEDY3 works as follows.
Whenever a node a receives a request from left, we again check if the destination is within a's communication range.
If not, a asks the furthest node d in its right communication range and use B(d) = bc to route the request.
The same process is repeated at the node c.Similarly, we can show that GREEDY3 has the property that for any four adjacent nodes a, b, c, d on the path produced by GREEDY3, a, d are not visible to each other since they are separated by a bridge.
Using the same technique as in the previous section, we can add one lookahead to GREEDY3 to shortcut the path if two nonadjacent node can see each other in the path.
Therefore, the stretch factor of GREEDY3 is 2.
We now argue thatTheorem 3.2.
GREEDY3 is 3-balanced, i.e. (P) ≤ 3 * (R).
Proof: The proof is by induction.
Denote by R t the set of the first t requests.
The claim is clearly true when t = 1.
Suppose that after the t-th request is processed, we have that (R t ) ≤ 3 * (R t ).
We now argue that it is still true for t+1.
We prove this by contradiction.
Suppose that it were not true.
Consider the first time when the condition is violated when routing the t+ 1-th request r t+1 .
Suppose that it is when a receives r t+1 and routes it through bc, the lightest bridge over d.Let t+1 denote the size of r t+1 .
Then, t (bc) + t+1 > 3 * (R t+1 ).
For every bridge B over d, t (B) ≥ t (bc) since bc is the lightest bridge over d.
A node u is heavy if there exists a bridge B = uv or B = vu over d such that t (B) = t (u).
Denote by D the set of heavy nodes in I(d).
Since each bridge has to pass at least one heavy node and can pass at most two heavy nodes, the average load on all the nodes in D is at least t (bc)/2.
Any algorithm has to use one node in D to route those requests.Therefore * (R t ) ≥ t (bc)/2 > (3 * (R t+1 ) − t+1 )/2.
Since t+1 ≤ * (R t+1 ), the above formula implies that * (R t ) > * (R t+1 ), a contradiction.
Thus the result holds for t + 1.
In this section, we present an efficient implementation of the above algorithms.
We assume each node knows its location by either GPS or some localization methods [28], [29], [30], [31].
We also assume that the rough location of the destination is known such that the source node knows whether it should send the packet to its left or right.
Denote by h 1 (p) the number of nodes inside the communication range of p and by h 2 (p) the number of nodes that is at most distance two from p.
Our implementation has the following properties:• A wireless node makes the routing decision by using only local information.
• Each node only stores O(log h 1 (p)) bytes.
• A node p makes the routing decision in O(log h 1 (p)) (O(log 2 h 2 (p))) time, for the case of unit (variable) packet size.
• Any dynamic update, including changing load on p, adding or deleting a node p, takes O(log h 1 (p)) time.
When all the requests have unit packet size, each node p needs to compute p * , the furthest node in p's right (or left) communication range whose load is not maximum over all the nodes in I r (p).
In the following part of this subsection, we focus on how to find p * by a memory-efficient mechanism.
Once p * is found, the packet is delivered to p * .
This process is repeated until the destination is reached.First, if we build a balanced binary search tree on all the nodes in I r (p), we can clearly compute p * in time O(log |I r (p)|).
By this simple implementation the memory of a node p is O(|I r (p)|).
Here we propose a more efficient implementation which actually distributes the storage and computation to each node instead of using a central node.
Then each node only needs poly-logarithmic storage.
To achieve this, we pay some price for extra communication.
A node p finds out the next hop p * by asking its neighbors to do some computation.
We assume that in the procedure of finding the next hop p * , the size of the control information transferred is very small and thus can be omitted.
If this is not the case, i.e., the control information is also taken into account in loading the wireless nodes, we should use the first scheme where a node keeps the locations of all its 1-hop neighbors.We construct a virtual forest F in which every I r (p) is a union of a constant number of subtrees of F. To build F, we imagine a binary grouping process where every two mutually visible nodes are grouped.
Pick one of two nodes as a (first-level) leader.
We then group first-level leaders to create second-level leaders and so on.
If a node cannot find a same level leader within its communication range to group, the process simply stops for that node (Figure 4).
At the end of the process, each node has a rank which is the highest level it is on.
The construction of F can be done by using leader election algorithms such as the randomized algorithm used in [32].
The virtual forest F is stored distributedly on the nodes in S.
If a node u is grouped with a node v on level i−1 and u is selected as the level i leader, we call the node v the child of u.
The virtual forest F is stored implicitly such that each node stores the ID's of its parent and children.
Now, we consider the communication range I(p) of a node p. By the process F is created.
There are at most three trees in F that contain nodes in I(p), which are denoted by a set T (p).
We store at p the set V (p) that contains the highest rank node inside I(p), for each tree T ∈ T (p).
On each tree T ∈ F , we also construct a binary search tree structure on the loads on each node distributedly.
The storage at each node is O(log h 1 ) in total.To compute p * for p, p asks the nodes in V (p) which node should be p * .
Each of the node in V (p) does a binary search top-down and recursively asks its children to compute p * .
The p * , once found, is returned to the node p and the packet is delivered from p to p * .
Since each tree in F is balanced, the computation and any dynamic change of load can be done in time O(log h 1 ) as well.
The algorithm for requests with variable packet size is more complicated.
The major task is to find the lightest bridge over a node p. For each node p, define a function f p (x) = min x p ≤x u ≤x p +x (u) and g p (x) = min x p +x−1≤x u ≤x p (u).
Clearly, both f p (x), g p (x) are staircase functions, where f is decreasing, and g is increasing.Since f p (0) = g p (1) = (p), there must exist an x * so that f p (x) and g p (x) intersect.
We take b * and c * to be the nodes such that f p (x * ) = (c * ) and g p (x * ) = (b * ), see Figure 5.
Then we claim that,x * x f p (x) g p (x) 1 0 (p) (c * ) (b * ) (i) (c * ) x f p (x) g p (x) 1 0 x * (p) (b * ) (ii) Fig. 5.
(i) gp(x * ) = (b * ) ≤ fp(x * ) = (c * ); (ii) gp(x * ) = (b * ) > fp(x * ) = (c * ).
Lemma 4.1.
b * c * is the lightest bridge over p. Proof: First since g p (x * ) = (b * ), f p (x * ) = (c * ), then b * ∈ [x p + x * − 1, x p ], c * ∈ [x p , x p + x * ].
So b * c * is a valid bridge.Now we assume that there is another bridge bc with weight smaller than b * c * .
If (b * ) ≤ (c * ), as shown in Figure 5 (i), then we know that (c) < (c * ).
For the location of c we must have x c is greater thanx p + x * .
Then b's location x b is inside interval [x c − 1, x p ].
So b ≥ x c − 1 > x p + x * − 1.
The stair-case property of f p (x) and g p (x) implies that for all x > x * , g p (x) > f p (x * ) = (c * ).
So (b) > (c * ).
Then the weight of bc is greater than the weight of b * c * .
This causes contradiction.
The case when (b * ) > (c * ) can be proved in a similar way.Computing x * can be done by using binary search.
Again, we can use the method for unit packet size to solve the problem but with one more log factor due to the binary search in the computation and update time.
There are two types of events that may cause the dynamic change.
One is when two nodes start or stop to become visible to each other due to either insertion/deletion of nodes or mobility.
The other is when the load on a node changes.
In both cases, such an event only affects a constant number of trees in the forest.
If we use a dynamic balanced binary tree, then each dynamic change can be done in O(log h 1 (p)) time.In the previous section, we describe our algorithms in a per-packet basis.
Its main purpose is to provide a rigorous analysis.
In practice, the control overhead can be high if we try balance load on a per-packet basis.
Instead, we maintain for each node the level of its energy use and ran our algorithm on the levels.
This way, a route can be cached, and a load update is only needed when the energy level of a node changes.
The load-balanced routing algorithm can be extended to a strip with width w ≤ √ 3/2 ≈ 0.86(recall that the communication radius of each node is 1).
In what follows, we assume that a strip is bounded by two horizontal parallel lines where the width is the vertical distance between the two lines.
The restriction on the width will become clear later.We say a node b is to the left (right) of a, if the xcoordinate of b is smaller (larger) than that of a. Then, for each vertex p, bc is a right (left) bridge if b is inside the communication range of p, c is outside and to the right (left) of p, and b, c are visible to each other( Figure 6(i)).
The load of a bridge is then defined as max((b), (c)), and the right (left) lightest bridge is the bridge with the smallest load among all the right (left) bridges.
The algorithm GREEDY4 works in a way similar to GREEDY3: when p receives a packet, it first checks if the destination of the packet inside its communication range.
If it is, then the packet is forwarded to the destination.
Otherwise, according to which side the destination lies, p chooses the right or left lightest bridge, say bc, sends the packet on the path pb and bc.
When the packet arrives on b, it again checks if the destination is in b's communication range, and if it is, forwards the packet to the destination.
Then, repeat the above process at the node c until the destination is reached.To show that the above algorithm works correctly, we make the following observation, which also explains the restriction on the strip width.Lemma 5.1.
Suppose that u, v, w, from left to right, are three nodes in a strip with width at most √ 3/2 and u, w are mutually visible.
Then either u or w is visible to v. Proof: If neither u nor w is visible to v, then both nodes are outside the communication range of v.
In addition, u is to the left of v, and w to the right.
It is easy to see that if the width is at most √ 3/2, then u and w cannot be visible to each other ( Figure 6(ii)).
We now claim that Theorem 5.2.
The stretch factor of GREEDY4 is 4, and the load-balancing ratio is 3.c w ≤ √ 3/2 p b (i) √ 3/2 w v u 1 (ii)Proof: We first show that the algorithm always succeeds.
Suppose that there is a path from a node s to t where t is to the right of s.
We argue that GREEDY4 cannot stop at a node that is to the left of t. Otherwise, assume that the algorithm is stuck at a node p, i.e. p does not have a right bridge and does not see t.
Since s is to the left of t, any path from s to t has to cross the right boundary of p's communication range.
The edge that crosses the boundary then must be a right bridge of p, contradicting the assumption (Figure 7).
Now, suppose that p is to the right of t. Consider the pair of adjacent nodes, say a, b, on the path from s to p that sandwich t. By Lemma 5.1, t is visible to either a or b. Thus, the packet must have been delivered to t by either a or b. Therefore, the algorithm always delivers a packet if there is a path.
Now, we bound the stretch factor of the algorithm.
For a right bridge bc of p, since c is outside the communication range of p, we have that x c ≥ x p +1/2.
Clearly, for a packet from s to t, it has to take at least x t − x s hops, while GREEDY4 takes at most 2(x t − x s )/(1/2) = 4(x t − x s ) hops.
Thus, the stretch factor is at most 4.
To bound the load-balancing ratio we use the same techniques as in Theorem 3.2.
For a node p that GREEDY4 picked, every path from the source to the destination has to use one right bridge of p, and therefore at least one and at most two heavy nodes.
So by the same argument the load-balancing ratio for GREEDY4 is at most 3.
Furthermore we show that the upper bound √ 3/2 on the width of the strip is indeed necessary.
If otherwise, then there could be two paths P 1 , P 2 from the source s such that they are not visible to each other except at the source or destination, see Figure 8.
So any algorithm based on local information will not be able to find out at the source node whether P 1 or P 2 is more heavily loaded.
Clearly, the above algorithm can be implemented such that the cost for both routing decision and update is linear to the number of nodes in the 2-hop neighborhood.
The reason that it does not admit an efficient algorithm like in the line case is that the two dimensional dynamic disk range search is much more difficult than the one dimensional case, which can be done by binary search.
There are techniques in Computational Geometry which yield better theoretical bounds.
But the number of nodes in a neighborhood is typically small, it is unnecessary to use those heavy machinery.
We evaluate the load-balanced routing algorithm under various wireless nodes distributions and traffic patterns.
The shortest path routing algorithm minimizes the total energy the network consumed but does not balance the loads on different nodes.
So a node could easily be overloaded under the shortest path routing.
We compare GREEDY3 with the shortest path routing algorithm.In our experiments, the wireless nodes are distributed randomly along a line.
Specifically, we distribute 1000 nodes randomly in the interval [0,100].
We vary the radius of the communication range of the wireless nodes from 1 to 10.
In one set of experiments, we assume that the nodes can handle as many traffic as possible, and we evaluate the maximum packets that one node relays.
In the other set, we put a limit on the number of packets a node is able to relay and evaluate the number of packets the network delivers before any node dies.For the traffic patterns, we consider two cases: random traffic pattern and aligned traffic pattern.
In the random traffic pattern, a packet is generated by choosing the source and destination of a packet uniformly randomly among all the nodes.
In the aligned traffic pattern, a packet is originated from the left end and destined to the right end, i.e. each packet has to be relayed from the left to the right.
In both cases, our experimental results suggest that the load-balanced routing works much better than the shortest path routing in terms of balancing the load.
In addition, we measure the length of the paths produced by our algorithm and compare it with the shortest path routing.
From time to time, our algorithm produces path noticeably longer than the shortest path.
However, on average, the path length is only slightly longer.
This indicates that the load-balancing is achieved at the price of increasing the path length but only by a small fraction.a) Unlimited energy and random traffic: We generate 1000 random packets, each with size randomly chosen between 1 and 10.
In Figure 9, we plot, for both the load balancing routing and the shortest path routing, the maximum load in terms of the number of packets delivered by the network, if the communication range has radius 5.
According to the data, the ratio of the maximum load of the shortest path routing to that of the load-balanced routing is about 5.
We also compare the length (the number of hops) of the paths produced by our algorithm to the shortest path length, both in the worst case and on average.
Figure 10 shows the worst case and average ratio of the length of the paths produced by our algorithm to the shortest path length, as well as the ratio of the maximum load under shortest path routing and load-balanced routing under different communication ranges.
The observation from Figure 10 is that we achieve substantially in terms of the maximum load ratio by paying a little higher price on the maximum and average delay.b) Unlimited energy and aligned traffic: Under the aligned traffic pattern, a packet is originated from a random node in the interval [0,10] and destined to a random node in [90,100].
Figure 11 shows the experimental result.
The data shows that the ratio of the maximum load of the shortest path routing to that of the load-balanced routing is about 10.3, much higher than the random traffic pattern, if the communication range has radius 5.c) Limited energy and random traffic: In this case we assume the nodes have a maximum energy, measured by the maximum number of packets it is able to relay.
A node dies if the packets it relays exceed the given limit.
We vary the maximum energy from 0 to 90.
Correspondingly we show the number of packets delivered before any node dies in Figure 13.
Compared to the shortest path routing, the load-balanced routing algorithm delivers about twice as many packets before any node dies for all the energy levels.d) Limited energy and aligned traffic: We also try aligned traffic under the constrained energy model.
We vary the maximum energy from 0 to 150.
As shown in Figure 14, the result for load-balanced routing is better than the case for random traffic.
In summary, we find through simulation that our loadbalanced routing algorithms perform consistently better than the shortest path routing in terms of the maximum node load and only slightly worse in terms of the path length.
Furthermore, the implementation of the loadbalanced routing is fairly simple.
We would expect the algorithm to find practical use in real applications.
In this paper, we initiate the study of wireless network routing with the aim of achieving good performance in terms of both stretch factor and load-balancing ratio.
We present algorithms which can achieve constant competitive factors for both measures when all the nodes are located in a narrow strip.
In addition, our algorithm is local and deals with dynamic change efficiently.
One interesting problem is to extend the study to the other node distribution.
For such an extension, we may have to make assumption on the traffic patterns too as the load-balanced routing is difficult even for nodes that form a regular grid.
