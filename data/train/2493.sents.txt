Mobile devices have evolved to become computing platforms more similar to desktops and workstations than the cell phones and handsets of yesteryear.
Unfortunately, today's mobile infrastructures are mirrors of the wired past.
Devices, apps, and networks impact one another, but a systematic approach for allowing them to cooperate is currently missing.
We propose an approach that seeks to open key interfaces and to apply feedback and autonomic computing to improve both user experience and mobile system dynamics.
1 Background Mobile computing today represents a discontinuous transformation of the marketplace from an embedded computing perspective to a true platform computing perspective.
This single fact, which was in many ways predictable , has reshaped the mobile industry and has led to a shift in fortunes among mobile equipment makers.
Those who entered the game early focused on delivering voice services.
Mobile computing per se was the stepchild of voice, the presumed "killer app."
A second wave of mobile computing pioneers took the discon-tinuously different platform approach, thinking of computing as primary and communications as a peripheral service-consistent with the way networking interfaces and "modems" were viewed in the desktop world.
The result of this second wave was hundreds of thousands of developers flocking to these new, more platform-like mobile devices.
We argue that this platform thinking compelled the mobile systems landscape to change, invalidating longstanding design assumptions and bringing new challenges.
We observe that the current mobile systems architectural approach-inherited from the past-emphasizes strict layering and separation of function that hides key state information.
It is our contention that the overall system and individual users' experiences can be improved by opening new application programming interfaces (APIs) within the mobile system and utilizing feedback techniques to optimize system performance.
A pragmatic approach, which we follow and refine, is to measure and adapt [11].
We imagine creating tools to (i) measure power consumption for computation and communication on-the-fly and (ii) enable migration of pieces of apps to or from the cloud, informed by the measurements, using novel feedback and autonomic computing techniques.
Our proposed approach, outlined in Section 3, offers a capability to learn the power implications of an app's structure-across many instances concurrently-and to dynamically adapt it at run time.
Our approach builds on previous research including the following.
Related to (i), power consumption and battery lifetime for the Openmoko Neo Freerunner smartphone, under different usage scenarios, has been investigated [3].
The power consumption of a G1 An-droid phone has been recorded and analyzed for a broad range of users and user activities [22].
It has been established that it is sufficient to use the smartphone's battery voltage sensors and knowledge about the battery discharge behavior to accurately estimate power consumption [26].
Related to (ii), the potential for speed-up and energy saving enabled by offloading computation from a smartphone to the cloud, using aspect-oriented programming , is clear [4].
Similar results have been achieved for the mobile Web, based on measured energy usage across different Web sites and different Web page elements [24].
A distinguishing factor of our proposed approach is the use of feedback control theory, which has been applied to computing and computer networks, including control of HTTP servers [1, 6, 7], email servers [15], quality of service assurance [25], internet traffic control [9, 12], and load balancing [10].
In this paper, we attempt to characterize how platform thinking has changed mobile systems, introducing new challenges (Section 2).
We select a subset of the chal Mobile computing today represents a discontinuous transformation of the marketplace from an embedded computing perspective to a true platform computing perspective.
This single fact, which was in many ways predictable, has re-shaped the mobile industry and has led to a shift in fortunes among mobile equipment makers.Those who entered the game early focused on delivering voice services.
Mobile computing per se was the stepchild of voice, the presumed "killer app."
A second wave of mobile computing pioneers took the discontinuously different platform approach, thinking of computing as primary and communications as a peripheral service-consistent with the way networking interfaces and "modems" were viewed in the desktop world.The result of this second wave was hundreds of thousands of developers flocking to these new, more platform-like mobile devices.
We argue that this platform thinking compelled the mobile systems landscape to change, invalidating longstanding design assumptions and bringing new challenges.
We observe that the current mobile systems architectural approach -inherited from the past -emphasizes strict layering and separation of function that hides key state information.It is our contention that the overall system and individual users' experiences can be improved by opening new application programming interfaces (APIs) within the mobile system and utilizing feedback techniques to optimize system performance.
A pragmatic approach, which we follow and refine, is to measure and adapt [11].
We imagine creating tools to (i) measure power consumption for computation and communication on-the-fly and (ii) enable migration of pieces of apps to or from the cloud, informed by the measurements, using novel feedback and autonomic computing techniques.
Our proposed approach, outlined in Section 3, offers a capability to learn the power implications of an app's structureacross many instances concurrently-and to dynamically adapt it at run time.Our approach builds on previous research including the following.
Related to (i), power consumption and battery lifetime for the Openmoko Neo Freerunner smartphone, under different usage scenarios, has been investigated [3].
The power consumption of a G1 Android phone has been recorded and analyzed for a broad range of users and user activities [22].
It has been established that it is sufficient to use the smartphone's battery voltage sensors and knowledge about the battery discharge behavior to accurately estimate power consumption [26].
Related to (ii), the potential for speed-up and energy saving enabled by offloading computation from a smartphone to the cloud, using aspect-oriented programming, is clear [4].
Similar results have been achieved for the mobile Web, based on measured energy usage across different Web sites and different Web page elements [24].
A distinguishing factor of our proposed approach is the use of feedback control theory, which has been applied to computing and computer networks, including control of HTTP servers [1,6,7], email servers [15], quality of service assurance [25], internet traffic control [9,12], and load balancing [10].
In this paper, we attempt to characterize how platform thinking has changed mobile systems, introducing new challenges (Section 2).
We select a subset of the chal- Table 1: Some of the challenges inherent in mobile computing systems.lenges for which a systems-level approach is particularly applicable and sketch a research plan (Section 3).
Early mobile systems simply made voice calls.
The systems were a co-design of mobile phones, radio access networks (RANs), mobile switching equipment, and associated billing and management subsystems.
But with the evolution to platform thinking, new challenges emerged.
Powerful computing resources in the phones gave birth to mobile apps, and IP-to-the-phone opened the world of connected mobile computing, with classic mobile networks in the middle.
We turn our attention to the key challenges of mobile systems (see Table 1); the state of mobile infrastructure; 1 and the evolution of mobile devices and applications.
In traditional wired networks, the physical medium is generally assumed reliable and the devices to which it connects are assumed essentially fixed.
But in wireless networks, the physical medium is generally dynamic, variable in reliability, and the devices can and do move, giving rise to the fundamental robustness challenge.With the growth in mobile consumption of streaming media, network responsiveness (a function of capacity, load, and engineered-in latencies) has remained a challenge.
Just as in wired networks, balancing the competing needs of different traffic flows against fixed resources has revived interest in mechanisms to externally control an otherwise static network (e.g., SDN) as well as policies that can be employed to enforce some notion of rational resource allocation.
Real-time resource allocation is a necessity, but current operator practice (e.g., pricing plans for data) treats it as a static problem.
Today, mobile apps rival their desktop counterparts in complexity, visual richness, and real-time interactivity.
The competitive nature of mobile app marketplaces is increasingly taxing the computing power of mobile phones, leading to rapid evolution of on-phone computing performance.
But this has its physical limits.
It is a fact that mobile phone, as we know them, must operate at or below the so-called "three watt limit" [14] -the power challenge.
Pushing more than three watts through the surface area of a typical phone will make it, quite simply, too hot to handle.Addressing this issue and others, many mobile apps today are made up of developer's code that provides some unique functionality built on top of one or a number of third-party libraries, each of which is tied to a cloud service (e.g., Dropbox, AdMob, game engines).
Mobile apps will, increasingly, be divided between on-device parts and cloud-supplied parts.
However, IP packets that travel mobile-to-cloud or mobile-to-mobile have to transit extensive wireless edge and core networks to reach their destinations.
Latency is often a problem.It is the rare app developer who has intuition about how to statically divide an app for power optimization.
Depending on how the app is partitioned (between ondevice and in-cloud) and the way it is used, the powercost of computing and the power-cost of communication will change, possibly drastically.
While an analytic approach to partitioning and power optimization would be ideal, the inherently unknown nature of the program's input-dependent behavior makes this unrealistic.
These facts, coupled with well-known issues of distributed programming make up the app development challenge.
We propose a new model for mobile systems that takes two steps beyond current systems.
First, we propose that app, network and cloud elements expose key bits of state and intent with one another.
Second, we propose the creation of a set of feedback and autonomic processes that seek to optimize network behavior and user experience given the information exposed.
Space prevents a full exploration of these ideas against the listed challenges, so we explore these two in some depth:• Apps expose their desire for network resource allocation (e.g., bandwidth, maximum latency).
The network gathers these and periodically conducts auctions to set prices and priorities.
The feedback loop is closed when the apps receive the results of the auction and modify their requests accordingly.
Consequently, the network operator maximizes revenue based on the competing requests.
• Apps and networks together participate in power management.
With instances of the same app running on millions of devices, coupled with explicitly-exposed meta-data related to the state of the wireless connections, an opportunity to learn networkdependent power behavior emerges.
Correlating power usage with, say, signal strength across many app instances provides the means to adapt program behavior.
In a video streaming application, a weak signal could trigger the choice of a codec that would minimize retransmissions, minimizing wasted power.
To ensure the health of large-scale mobile systems, it is essential to detect, diagnose, and mitigate performance issues (e.g., an app quickly draining a battery) and faults (e.g., an over-heating battery) as quickly as possible when they occur, and even prognose their likely future occurrence.
This is also known as the system health management (SHM) challenge [23].
SHM involves both hardware (sensors, actuators, power supply, electronics, ...) and software (apps, diagnostic and prognostic algorithms, ...).
One way to design and implement SHM is by means of probabilistic graphical models, including Bayesian networks (BNs) [16], fed with real-time, precise information about the mobile platform, including the network and the apps.
SHM capabilities will need to reside in devices and networks, especially as we move into the age of tens and hundreds of billions of networked devices (i.e., the Internet of Things).
System health management algorithms using BNs [19,21,18,20,5] have recently been integrated with techniques from control theory [13,17].
This hybrid feedback control approach promises to improve the selfmonitoring and self-adaptive capabilities of mobile systems.
To ensure responsive SHM, the controller compares the observed completion time y(k) and desired completion time r(k), and commands the actuator (its output).
Specifically, the output of the control algorithm, u(k), determines the maximum number of low-criticality processes running on the computer.
Low-criticality processes are suspended or migrated if v(k) > u(k), where v(k) is the current number of low criticality processes.
If this happens, the number of active processes on the mobile device is reduced, which again lowers (improves) the output y(k), the responsiveness of the SHM process.We have applied this approach to state estimation for vehicular electrical power systems, which are more complicated than a smarthpone power supply, but with similar state estimation needs [22,3,26].
Our results to date demonstrate how control theory can improve, for a standalone computer, responsiveness under varying computational demands and resources.
Improved autonomic and feedback techniques for mobile computing is a natural next step.
Power management is perhaps the most pressing issue in mobile app creation and mobility computing.
Power usage can be measured across different, concurrent instances of an app, and these measurements can then be correlated with network measurements and models [22,3,26].
Machine learning and system identification can be then be done and the resulting combined model used for feedback control for that app.
In this case, the setpoint r(k) would be power consumption and the control actions would be to dynamically migrate parts of an app between the device and the cloud in order to meet power consumption requirements.
Compared to previous research on offloading [4,24], we propose to automatically partition a broad class of apps, using feedback control, which is an open research question.We now discuss in more detail what it means to dynamically partition an app using feedback in order to optimize power consumption for a device.
Consider an image processing or augmented reality app.
Partitioning of such an app could be done dynamically by selecting between these two options: (i) send image from smartphone to a cloud server and perform feature extraction there or (ii) perform feature extraction on the smartphone, and send features to the server.
In short, the dynamic partitioning decision is whether feature extraction is done on the server or on the mobile device.
The decision has impact on power consumption, completion time, and data transfer (and thus potentially cost).
The app can be associated with an objective (minimize power consumption), real-time sensor data (actual power consumption), and actuation (pick between options (i) and (ii) 2 ) and is therefore suitable for feedback computing.
In particular, one can do feedback control similar to reactive Bayesian network computation [13,17] as discussed above.
However, the controller is now triggered by power consumption rather than, or in addition to, completion time.
The challenges of mobile systems present many new opportunities for autonomic and feedback computing.
We have only scratched the surface here, and hope that others will join in developing novel ways of closely integrating control theory with traditional mobile computing, distributed programming, and artificial intelligence techniques.
This potentially broader role of control theory in intelligent mobile computing systems parallels other areas of computing in which control theory has already had an impact [8,2].
