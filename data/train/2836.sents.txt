Soware Deened Networks, which provide a pro-grammable, logically centralized abstraction of network control, oer an escape from the current state of enterprise and datacenter network connguration, plagued by brittle, static solutions involving manual setting of myr-iad devices.
But if SDNs provide an operating system for the network, we are missing the analog to system calls-an API for end-users and their applications to take part in network connguration.
In response, we propose partic-ipatory networking, a new paradigm for network conngu-ration in which users submit requests or hints for current and future network properties such as quality of service, access control, and path selection.
We describe the initial design and implementation of a participatory networking system, PANE, and its solutions to the challenges of resource arbitration and privilege delegation.
e connguration of today's datacenter and enterprise networks is not for the faint of heart.
Network administrators develop brittle, static solutions to implement desired policies, which exist as an interwoven mix of VLANs, rewalls, router conngurations, MPLS tunnels, and more.
is complicates delegation of control, sacriices exibility, and increases the time to x errors and vulnerabilities to human scale.
e recent development of Soware Deened Networks (SDNs) oers a platform for simpliication [, ].
SDNs separate the logic that controls the network from its physical devices, allowing connguration programs to operate on a high-level, global, and consistent view of the network.
is change has brought signiicant advances to datacenter and enterprise networks, such as high-level speciication of access control [] and QoS [] While SDNs bring power and exibility to connguring networks, we argue that the current stack is incomplete.
If SDNs provide an operating system for the network [], we are missing a mechanism analogous to system calls, with which less privileged users can request services from the network and innuence its operation.We propose a new paradigm for network connguration, which we term participatory networking.
In this paper we present the initial design and implementation of a participatory networking system, PANE, which forms the "user-level" interface for the network control-plane, and serves as the next layer for the current SDN stack.
Here, "user" encompasses both operators and end-users, including applications and devices acting on their behalf.
Our vision is that operators set baseline policies that guarantee fairness and security, while devices, applications, and end-users request current and future service qualities, gain visibility into network properties, and provide hints about future demands to the network.
One of the key characteristics of PANE is that it considers the temporal dimension of requests, and can reason beyond current conditions for resource allocation and connguration.For example, a conferencing application may request bandwidth for a video call, but learn via the network that while only a guaranteed audio call is available now, it can reserve a video call in one hour.
An intrusion detection script on a user machine may request that the network lter trac from a speciic source.
An RPC service may inform the network that its ows will be short, but with a deadline, which could enable shortest-deadlinerst scheduling at the switches [].
Or, a MapReducestyle application may request maximally disjoint paths to improve performance of its shuue phase.
While not all of these are new, PANE provides a unied framework for dynamic user involvement in network-wide connguration.PANE assumes, and is made deployable by, a logically centralized control-plane, which SDNs provide.
Our initial focus is on networks in a single administrative domain, such as an enterprise, campus, or datacenter.
PANE does not provide any functionality not already present in the underlying network: it exposes it to a (much) broader set of users, deening the necessary policies for sharing and arbitration.
For example, PANE does not invent QoS mechanisms, but can use QoS extensions to OpenFlow [], to implement bandwidth and latency guarantees for ows.
Unlike in distributed reservation protocols such as RSVP [], the PANE controller has a global view of the network, and does not rely on independent decisions by network elements.
PANE's main contribution is to use this global view of the network and requests to arbitrate among users, much like a traditional OS.
Of course, for this arbitration to work, we need well-deened semantics for the delegation of privileges in the network.Our approach to network connguration is backwardscompatible with existing networked applications -users submit requests only to receive predictable behavior from the network.
Unmodiied applications continue to receive the best-eeort performance of existing packet networks.PANE has three main components: rst, the semantics of privilege delegation required to reconcile requests and the network's constraints ( § and §.
.)
; second, a protocol and API for operators and users (or their applications) to interact with the network ( §.
.)
; and third, a network controller that implements the protocol according to the semantics and installs policies in the network ( §).
We have implemented a prototype controller that runs using Nettle [] and OpenFlow[], and allows immediate and future bandwidth reservations and installation of trac permission rules, which we evaluate through example applications in §.
PANE is a work in progress, and builds upon previous work on resource sharing, network QoS, and soware-deened networking, which we discuss in §.
and devices running on their behalf.
Speakers interact with the network using three types of messages: requests, hints, and queries.
e PANE controller checks the validity of messages, as described below, and may apply changes to the network and return a response.
Requests are for resources (e.g., bandwidth or access control), an action to be taken by the controller, and an immediate response.
Queries imply no action, but receive a response.
Hints inform the network about current or future trafc characteristics and never have a response; PANE may choose to use the hint to improve service to users.
Messages always refer to a owgroup, a subset of all possible ows on the network.
Finally, the deenition and delegation of privileges -which speakers can issue which messages on which owgroups -forms the essence of PANE.
PANE models the delegation of privileges using a hierarchy of shares.
A share is a combination of a owgroup, a set of speakers, and a set of privileges ( Figure (a)); the share's speakers can issue messages allowed by the privileges on subsets of the owgroup.
An implicit privilege of all shares is delegation: speakers can always create subshares ( Figure (b)) or add new speakers.
Sub-shares may have an arbitrary set of speakers, must refer to a subset of the parent share's owgroup, and may not have more permissive privileges than their parent.
is codiies the intuition that "you can't give more privileges than you have, but you can give them to anyone. "
For example, if a share's ows may have a maximum guaranteed bandwidth of B, a sub-share cannot provide guaranteed bandwidth of B ′ > B.
We describe the analogous relation for additional privileges in §... e share hierarchy does not itself change the state of the network; the network is changed by speakers' requests and, optionally, hints, which are issued on a speciied owgroup and share.
PANE accepts a message if it passes a privilege check, if the referenced owgroup is a subset of the share's owgroup, and, for requests, if the request can coexist with previously accepted requests.
By default, requests take eeect immediately and do not expire, but can optionally specify start and end times.
PANE veriies the request's feasibility into the future, between the provided or implicit start and end times.
Verifying if Users in PANE are authenticated using mechanisms such as .
.
x. a request can be granted may require walking the share hierarchy, depending on the resource.
e design of subshares allows resources to be oversubscribed; overallocation is prevented when requests are granted, and not when shares are created.Figure shows a simple example in which a speaker has requested an immediate bandwidth reservation.
PANE determines that granting the request will exceed the share's available bandwidth, and informs the user that the request cannot be granted until time t.
In response, the speaker sends a new request for a reservation which starts at t; PANE accepts the request and later implements it.With these deenitions in place (summarized in Table ), we now consider several example scenarios in which PANE beneets a network's users.
We defer the discussion of further design details, including the mechanism for resolving connicting requests, until §... We illustrate potential beneets of PANE with four motivating scenarios in which there are signiicant gains when users or applications interact directly with the network.
Signal Bars for Video Conferencing Consider a user trying to establish a video conference when the network is operating near capacity.
Today, the user will place the call blindly, and become frustrated by its poor quality.
Alternatively, in a network managed by PANE, the conferencing application can issue a request for the required bandwidth.
e network, knowing that a large le transfer will end in minutes, responds to the application request with the schedule of bandwidth guarantees.
With this information, the application can reserve enough bandwidth now for a good quality audio call, or, in minutes, a good quality video call.
By setting expectations and offering alternatives, the conferencing application provides a less frustrating experience for the user.
Network-assisted Firewall When a host is attacked with undesired trac, automated scripts can install local rewall rules to drop such packets.
e user can also contact the network administrator to request malicious trafc be ltered earlier in the network.
While the latter option has technical advantages, it is oen too inconvenient in practice.
With PANE and appropriate shares, the same script can programmatically prevent the attacking host from reaching its target.
is approach shares many of the advantages of ident++'s delegated rewall rules [], to which we compare in §.
Hints for Trac Prioritization e third scenario concerns the prioritization or scheduling of ows with help roughout the paper, when we say interact with the network, we mean with the logically centralized network control plane.For example, SSHGuard: http://www.sshguard.net from users or applications.
For example, by augmenting the Linux packet scheduler to support priorities provided by Apache, the mean response time of short ows can be provably reduced without adversely aecting longer ows [].
With PANE, Apache could push these priorities beyond the local node to all programmable network elements by specifying the relevant owgroups and either requesting guaranteed treatment to them, or providing PANE with priority hints.
Similarly, for deadline-driven workloads such as those considered by D [], PANE provides the right platform for applications to pass this information to the network, which can use it to install QoS rules along the ow's path.
In this case, the hints about the relevant owgroups could contain the deadline and size of each ow.
We expand upon this example in §.
Finally, the direct use of application information obviates the need for heuristics to identify trac which may look similar from the perspective of the network, such as long-lived HTTP ows for either streaming video or networked backup.
Using PANE, a user can request that the rst have less jitter and lower latency than the second.
Network Path Connguration Hybrid optical-electrical networks in datacenters have shown performance benets for applications requiring large transfers, such as virtual machine migration, MapReduce-style computation, and HPC workloads.
However, proposers of two such designs acknowledge that their eecient use "relies on precise and detailed trac analysis" [].
Hedera [], a scheme for dynamic ow allocation in datacenter topologies with multi-rooted trees, also requires estimates of the trac demand between pairs of hosts.
PANE oers an appealing alternative to reactive trac estimation: applicationprovided hints about future trac patterns would allow the network controller to allocate optical links or bandwidth to ows without resorting to heuristics.While these examples highlight potential beneets of our system, they also raise many design and implementation challenges.
We currently address some of these in PANE, but leave others, such as the hints of the last two scenarios, as future work.
PANE's design has two main parts: the semantics of the share hierarchy, privileges, and messages, and the PANE protocol.
We deepen the discussion from §, and provide a sketch of the PANE protocol by way of examples.
Table .
A speaker can use allow and deny to specify access control rules, reserve to obtain a minimum bandwidth guarantee, and limit to rate-limit a owgroup's bandwidth.
We specify bandwidth reservation privileges as a modiied token bucket: it has the usual attributes of ll rate F, capacity C, and maximum drain rate M, and an additional minimum drain rate m. is lower bound prevents reservations with very low drain rates that could last indeenitely.
A simple reservation with maximum bandwidth B is a special case with F = M = B; C = m = .
e privileges of a sub-share cannot be less restrictive than those of its parent share (cf. Table , 'Sub-shares' column).
For both allow and deny, the sub-share can maintain the parent share's privilege, if present, or revoke it.
e token bucket of a sub-share has to "t inside" the parent's token bucket.
For limit, sub-shares can only specify limits that are smaller than or equal to the parent's.
PANE maintains the known state of the network -the set of active and future granted requests -and evaluates whether new requests can co-exist with them, and if so, their eeect.
e last column of Table describes the composition of privileges along the share hierarchy.For each request, the speaker can specify an evaluation mode, either strict or partial, which are provided for atomicity and convenience.
In strict mode, PANE rejects a request if it connicts in any way with the network state.
For example, if a user wants to allow connections to TCP ports --, but there exists a request in a sub-share that denies port , PANE rejects the request, explaining why.
In partial mode, PANE relaxes the request so that it does not connict, and informs the user of the change.
In the same example, PANE would inform the user that it has allowed ports --, and --.
We believe that requests for other types of resources, such as latency guarantees or path properties such as waypoint and avoid, will t in the same framework, provided we can deene what "less restrictive" means for each one.
We leave this investigation, however, to future work.
Speakers talk to the PANE controller using a simple protocol sketched here, beginning with the requests necessary for an end-user, Alice, to reserve guaranteed bandwidth for her ows.
First, the network administrator must create a share for her ows which carries such a privilege:NewShare aliceBW for (user=Alice)[reserve <= 10Mb] on rootShare.is share's owgroup contains all ows for which Alice is the sender (user=Alice) and allows the share's speakers to reserve up to Mbps of guaranteed bandwidth, but does not authorize allow or deny requests.
Next, the administrator makes Alice a speaker of this share:Grant aliceBW to Alice.Finally, Alice can request that her web trac receive guaranteed bandwidth of Mbps for ten minutes, starting twenty minutes in the future:reserve(user=Alice,dstPort=80) = 5Mb on aliceBW from +20min to +30min.While aliceBW permits Alice to reserve bandwidth indeenitely, a token bucket can be applied to limit Alice's reservations; for brevity, we omit syntax for this example.
e network administrator can also create shares to delegate access control.
e following PANE request creates a share for Alice, who is using the IP address ......, which allows her to deny trac to her computer, but which cannot be used for other requests: her request will be rejected because its owgroup is not a subset of the owgroup in aliceAC.
If Alice attempts to block all trac from Eve by not including the dstHost restriction, her request will also be rejected.
We have also implemented, but omit for space reasons, commands to query a share's schedule of reserved bandwidth, determine which shares and requests aect which ows, and manage users and their privileges.
We have developed an initial Haskell implementation of PANE for OpenFlow networks using Nettle [].
It has been tested using the Mininet platform for emulating SDNs and the Open vSwitch implementation of an OpenFlow switch.
Although we chose OpenFlow as our substrate for implementing PANE, its design does not depend on OpenFlow.
PANE could be implemented using other mechanisms to control the network, such as D [], MPLS, or a collection of middleboxes.
With our prototype we have implemented these preliminary case studies: Network-assisted rewall SSHGuard is a popular tool to detect brute-force attacks via log monitoring and install local rewall rules (e.g., via iptables) in response.
We modiied SSHGuard to use PANE as a rewall backend to block nefarious trac entering the network.
In particular, this means such trac no longer traverses the targeted host's access link.For example, if Alice is running SSHGuard on her host and it detects a Linux syslog entry such as: SSHGuard will block Eve's trac for the next ve minutes using the deny command presented in §... In our prototype, this PANE request is then installed as a packet forwarding rule on the OpenFlow switches, which drop packets to Alice's host coming from Eve's.
Ekiga Ekiga is an open source video conferencing application.
We modiied Ekiga to ask the user for the anticipated duration of video calls, and use a reserve command to request guaranteed bandwidth from the network for the appropriate time.
If such a reservation is not available, Ekiga retrieves the schedule of available bandwidth from PANE and calculates the earliest time at which a video call or, alternatively, an audio call, can be made with guaranteed quality.
In our prototype, a successful request is installed as an OpenFlow rule which sends Ekiga's packets through a preconngured queue on the switch.
Quality of Service and Resource Management Providing a predictable network experience is not a new goal, and there is a vast body of literature on this topic.
PANE relies heavily on existing mechanisms, such as reservations and prioritized queue management [, ], while adding user-level management and resource arbitration.
PANE also goes beyond QoS, integrating hints and guarantees about access control and path selection.
By focusing on a single administrative domain, PANE sidesteps the deployment diiculties of Internet-wide QoS proposals such as IntServ [] and DiiServ [].
Cinder [] uses a hierarchy of taps to provide isolation, delegation, and division of the right to consume a mobile device's energy, similar to PANE's hierarchy of token buckets for managing bandwidth reservations.
Soware Dened Networking Recent developments in making SDN practical (e.g., [, , ]) greatly improve the deployability of PANE.
e actions in PANE are inspired by FML [], which it extends by involving endusers, adding queries and hints, and introducing a time dimension to action requests.
Resonance [] delegates access control to an automated monitoring system, using OpenFlow to enforce policy decisions.
Resonance could be adapted to use PANE as the mechanism for taking action on the network, or could be composed with PANE using a library such as Frenetic [].
Using Application-level Information Many previous works describe speciic cases in which information from end-users or applications beneets network connguration, exibility, or performance; PANE can be a unifying framework for these.
For example, UPnP [] allows applications to control a network gateway, such as to add a port-forwarding entry to a NAT table.
ident++ [] proposes an architecture in which an OpenFlow controller reactively queries the endpoints of a new ow to determine whether it should be admitted.
In contrast, PANE allows administrators to delegate the privilege to install restricted network-wide rewall rules, and users can do so either proactively or reactively (cf. §).
D [] is a transport protocol for datacenter networks that replaces TCP's congestion control with explicit rate control to meet transmission deadlines.
End-hosts in D request sending rates based on a ow's size and deadline, and receive explicit rate signals from the routers along the ow's path.
We plan to test similar mechanisms in PANE using hints about owgroup properties.
Checker [] and the Margrave tool for rewall analysis [] which previously applied declarative languages to network connguration.
Both tools use a high-level language to detect connguration mistakes in network policies by checking against predeened constraints.
PANE, however, directly integrates such logic into the network controller.
NDlog [] adapted the declarative Datalog language to ease the programming of distributed applications and protocols; PANE receives requests from distributed clients, but their evaluation is centralized.
Participatory networking makes the programability of SDNs accessible to end-users and their applications.
PANE is an initial design, and its deployability depends on mechanisms which provide the desired guarantees.
e controls currently provided by OpenFlow are a strong start, and PANE will beneet from new developments, such as the path selection possible in novel datacenter networks, or better QoS mechanisms.
PANE's deployment also depends on application adoption, which is largely a question of perceived costs and beneets.
A PANE network should not provide worse service than existing networks, and should provide tangible beneets for the right uses.
We are encouraged by examples of improved performance and functionality due to application information (e.g. [, , ]).
PANE's protocol is designed for simplicity; an undergraduate required less than two days to gain an understanding and add support to Ekiga.Each of PANE's three components -privilege delegation, interaction protocol, and network controller -is currently under active development.
We are investigating requests for resources such as latency, jitter, and path selection, as well as query and hint messages.
ese pose many exciting challenges, such as request composition, and handling misleading hints.
We also intend to evaluate the scalability of the controller.
Finally, the participatory nature of PANE is suggestive of a market for network resources, which we intend to develop and which will likely require the design of transactional PANE requests.
