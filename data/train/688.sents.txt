This paper poses the following basic question: Given a quan-tied Boolean formula ∃x.ϕ, what should a function/formula f be such that substituting f for x in ϕ yields a logically equivalent quantier-free formula?
Its answer leads to a solution to quantier elimination in the Boolean domain, alternative to the conventional approach based on formula expansion.
Such a composite function can be eectively derived using symbolic techniques and further simplied for practical applications.
In particular, we explore Craig interpolation for scalable computation.
This compositional approach to quantier elimination is analyzably superior to the conventional one under certain practical assumptions.
Experiments demonstrate the scalability of the approach.
Several large problem instances unsolvable before can now be resolved eectively.
A generalization to rst-order logic characterizes a composite function's complete exibility, which awaits further exploitation to simplify quan-tier elimination beyond the propositional case.
Quantier elimination is a way of transforming a formula with quantiers to an equivalent one without quantiers.
Eliminating quantied variables often yields desirable reduction of some sort, and applies to constraint solving, e.g., Gauss elimination for solving systems of linear equations, Fourier-Motzkin elimination for systems of linear inequalities, cylindrical algebraic decomposition [4,2] for systems of polynomial inequalities, and so on.
It plays important roles in computation theory, mathematical logic, mathematical programming, scientic computing, and other elds.
Its applications are pervasive and profound.
This paper is concerned about quantier elimination in propositional logic as well as rst-order logic.Quantier elimination in propositional logic augmented with quantiers over propositional variables is a well-studied subject.
There are several approaches to this problem: Formula expansion.
A conventional approach to quantier elimination is based on formula expansion, ∃x.ϕ = ϕ[x/0] ∨ ϕ [x/1], where formula ϕ is expanded under all truth assignments on x by substituting 0 and 1 for x in ϕ.
Binary decision diagrams (BDDs), and-inverter graphs (AIGs), and other data structures for Boolean function representation and manipulation can be adopted for the computation.
BDDs tended to be a popular approach to such computation, the so-called image computation [3].
BDD-based computation however has its intrinsic memory-explosion limitation.
On the other hand, recent progress in AIG packages [14,13] has made AIG-based quantication a viable alternative to BDD-based one.
For example, AIGs have been directly used in unbounded model checking [17].
Our approach to quantier elimination also uses AIGs extensively.Normal-form conversion.
Eliminating the existential (respectively universal) quantier of formula ∃x.ϕ (respectively ∀x.ϕ) is easy 1 when ϕ is in disjunctive normal form (DNF) (respectively conjunctive normal form (CNF)).
Thereby the normal-form conversion between CNF and DNF can be exploited for quantier elimination, as was suggested in [15] in application to unbounded model checking.Satisability solving.
Using a decision procedure, the quantier-free equivalent of ∃x.ϕ can be generated by searching through all satisfying assignments to the non-quantied variables.
By collecting these satisfying assignments, one can construct an equivalent quantier-free formula.
A detailed exposition of this method can be found, e.g., in [7] and the references therein.Despite these existing approaches, there is not a single best one to quantier elimination for all problem instances.
Dierent approaches may have their own strengths and weaknesses.
This paper adds to the above list a new item, a compositional approach to quantier elimination, which is by nature closer to the formula-expansion approach.
We ask, given a quantied Boolean formula ∃x.ϕ, what should a function/formula f be such that substituting f for x in ϕ, denoted as ϕ[x/f ], yields a logically equivalent quantier-free formula.
This paper characterizes the complete exibility of such a composite function f .
Furthermore, an eective and scalable derivation of f with reasonable quality is proposed using Craig interpolation.
An analysis shows that, under the sparsity assumption of ϕ (which is common in certain practical applications), the new compositional approach is superior to the conventional one based on formula expansion.
Practical experience suggests that the new approach often yields much more compact AIGs than the conventional one when the sparsity condition holds.
Several problem instances that suer from exponential blow-up by formula expansion are eectively resolvable by functional composition.Quantier elimination in rst-order logic is much more complicated and relatively less explored.
In fact, exhaustive formula expansion does not work in rst-order logic as variables can take on innite values.
Moreover, not every 1 When ϕ is in DNF and CNF, respectively, removing every appearance of literals x, ¬x and the so-induced illegal logic connectives from ϕ yields a quantier-free equivalent of ∃x.ϕ and ∀x.ϕ, respectively.
So the computation is achievable in linear time and the size of the resultant quantier-free formula is non-increasing compared to that of ϕ.
rst-order theory allows quantier elimination.
One of the earliest attempts at quantier elimination in rst-order logic is Tarski's work [21], where the rst quantier-elimination procedure of real closed elds was demonstrated.
Since then, algorithmic improvements have been achieved, see, e.g., [4,2].
Also quantier elimination has been shown possible in other rst-order theories, such as term algebras, Presburger arithmetic, and other theories [20].
Extending the results of propositional logic, this paper characterizes the complete exibility of composite functions for quantier elimination in rst-order logic.
Unlike most prior eorts, which gave concrete quantier-elimination procedures for some specic theories, we rather present a generic viewpoint and show the potential usefulness of the complete exibility in simplifying quantier elimination.One of the common practices to quantier elimination of rst-order theories is based on the principle of virtual substitution with elimination sets [23].
To eliminate a quantier, a nite set of solution terms with their validity conditions is identied for substitution.
Our characterized complete exibility may be exploited to reduce elimination sets.This paper is organized as follows.
After preliminaries are given in Section 2, Section 3 presents the main results on quantier elimination in propositional logic.
Section 4 extends the results to rst-order logic.
Experimental results and discussions are given in Section 5.
Section 6 compares our results with some related work.
Finally, Section 7 concludes this paper and outlines future work.
Predicate logic.
We closely follow the denitions and notation of [6] about rst-order logic.
A rst-order language may consist of logical symbols (including parentheses, sentential connectives, variables, and the (optional) equality symbol) and parameters (including quantier symbols, constant symbols, predicate symbols, and function symbols).
Given a language, terms are nite expressions representing names of objects, whereas (well-formed) formulas are nite expressions representing assertions about objects.
Given a formula, variables not in the scope of any quantier are called free variables, otherwise bound variables.
Formulas without free variables are called sentences.As a notational convention, substituting a term t for some variable x in a formula ϕ is denoted as ϕ [x/t].
We say that t is substitutable for x in ϕ if every variable y in t is not captured by some quantier ∀y or ∃y in ϕ.
Substitutability can be achieved through proper renaming of bound variables.
By writing ϕ[x/t], this paper assumes that t is substitutable for x in ϕ.A structure (or called an interpretation) A of some rst-order language L is a tuple specifying the domain (or universe), denoted |A|, of the variables, and associating the constant, predicate, and function symbols with meanings.
A sentence σ of L is true in structure A is denoted as |= A σ.Propositional logic can be seen as a special case of rst-order logic, where functions and predicates are interchangeable, so are terms and formulas.
Also there is a unique structure B with |B| = {0, 1}.
In propositional logic, the positive and negative cofactors of formula ϕ with respect to variable x are ϕ [x/1] and ϕ[x/0], respectively.Propositional satisability and Craig interpolation.
A brief introduction to SAT solving and circuit-to-CNF conversion, essential to our development, can be found in [16].
To introduce terminology and convention for later use, we restate the following theorem.Theorem 1 (Craig Interpolation Theorem).
[ The Boolean formula ψ A is referred to as the interpolant of φ A with respect to φ B .
Modern SAT solvers can be extended to construct interpolants from resolution refutations [16].
In the sequel, we shall assume that Boolean functions, circuits, and interpolants are represented using AIGs, which can be converted to CNF formulas in polynomial time.
In this section we consider quantier elimination of propositional logic augmented with quantiers over propositional variables.
Putting propositional logic in the context of rst-order logic, we note that it has a unique structure/interpretation.
Under this unique structure, terms, functions, predicates, and formulas all coincide.
This simplicity is crucial to the following development for propositional logic, and will become apparent when we encounter rst-order logic.Theorem 2.
A quantied Boolean formula ∃y.ϕ(x, y) is logically equivalent to the quantier-free formula ϕ(x, f (x)) for some function f : B n → B if and only if every pair a ∈ B n , b ∈ B with f (a) = b satises ϕ(a, b) ∨ ∀y.¬ϕ(a, y).
Proof.
(=⇒) For f (a) = b, then ϕ(a, f (a)) = ϕ(a, b).
If ϕ(a, b) is true, then ∃y.ϕ(a, y) is true.On the other hand, if ¬ϕ(a, b) is true, then ¬∃y.ϕ(a, y) is true due to the logical equivalence between ϕ(x, f (x)) and ∃y.ϕ(x, y).
Hence every pair a ∈ B n , b ∈ B with f (a) = b satises ϕ(a, b) ∨ ∀y.¬ϕ(a, y).
(⇐=) For the sake of contradiction, assume ∃y.ϕ(x, y) and ϕ(x, f (x)) are not logically equivalent.
Then there exists some a ∈ B n such that ¬∃y.ϕ(a, y) ∧ ϕ(a, f (a)) or ∃y.ϕ(a, y) ∧ ¬ϕ(a, f (a)).
The former is trivially unsatisable; the latter contradicts with the premise, ϕ(a, f (a)) ∨ ∀y.¬ϕ(a, y).
In essence the above theorem answers the following question: Given a quantied Boolean formula ∃y.ϕ (x, y), what should a function f be such that the composition ϕ(x, f (x)) equals ∃y.ϕ?
It also implies the existence of such a function.
exists a function f (x) such that ∃y.ϕ(x, y) = ϕ(x, f (x)).
Proof.
The proposition follows from the fact that, for every a ∈ B n , there always exists some b ∈ B such that ϕ(a, b) = 1 if ∃y.ϕ(a, y) is true.The following proposition characterizes the complete exibility of a composite function for quantier elimination.
Proof.
There are four possible valuations of ϕ(a, 0) and ϕ(a, 1) for every a ∈ B n .
For (ϕ(a, 0), ϕ(a, 1)) = (0, 0), a is a don't-care minterm of f because ϕ(a, f (a)) = 0 independent of the value of f (a).
For (ϕ(a, 0), ϕ(a, 1)) = (0, 1), a is an onset minterm of f because ∃y.ϕ(a, y) is true and f (a) = 1 is the only way to make ϕ(a, f (a)) true.
For (ϕ(a, 0), ϕ(a, 1)) = (1, 0), a is an oset minterm of f for reason similar to that of case (0, 1).
For (ϕ(a, 0), ϕ(a, 1)) = (1, 1), a is a don't-care minterm of f for reason similar to that of case (0, 0).
Therefore the composite function f can be minimized using the don't-care con-dition (ϕ[y/1] ∧ ϕ[y/0]) ∨ (¬ϕ[y/1] ∧ ¬ϕ[y/0]).
Since universal quantication can be converted to existential quantication by the equality ∀x.ϕ = ¬∃x.¬ϕ, the compositional approach can be used in general quantier elimination of quantied Boolean formulas (QBFs).
The quantiers of a QBF can be removed from inside out.
By Proposition 2, the composite function f can be obtained using symbolic methods.
Finding a simple implementation of f under the don't-care exibility hopefully makes ϕ(x, f (x)) simple and facilitates quantier elimination.
We exploit Craig interpolation for scalable computation.
It relies on the following proposition, whose correctness is immediate by Theorem 1.
φ A = ¬ϕ[y/0] ∧ ϕ[y/1] and (1) φ B = ¬ϕ[y/1] ∧ ϕ[y/0](2)is a valid implementation of a composite function f satisfying ∃y.ϕ = ϕ[y/f ].
Interpolation can be seen as a way to derive simple functions as long as the don't-care set is reasonably large.
When the don't-care set is large, proving the unsatisability of φ A ∧ φ B is easy and the corresponding refutation proof is simple.
So the interpolant size (in term of AIG nodes) is likely to be small.
We compare expansion-and composition-based quantier-elimination procedures assuming that AIGs are the underlying data structure.
φ B = ¬ϕ[y/1] ∧ ¬ϕ[y/0](4)being the tightest onset and oset, respectively.
Notice that interpolation or other symbolic techniques can be applied here to extract a function, say f ,hopefully simpler than ϕ[y/1].
So ϕ[y/0] ∨ f can be simpler than ϕ[y/0] ∨ ϕ[y/1]for quantier elimination.
(With interpolation, such simplication however was not empirically observed in our experiments.
It may be due to the small size of the don't-care set, which results in ineective interpolation.)
2 Observe that Equations (1) and (3) are identical, whereas Equations (2) and (4) dier only in the second term.
This slight dierence in fact makes substantial impact on interpolation.
When ϕ is a sparse function (with relatively few onset minterms), ϕ[y/0] is very likely a sparse function as well.
In this case, the oset corresponding to φ B of Equation (2) is much smaller than that of Equation (4).
Accordingly, proving the unsatisability of φ A ∧ φ B of Equations (1) and (2) is easier to establish than that of Equations (3) and (4).
The derived interpolant with respect to Equations (1) and (2) can be much smaller.
On the contrary, for dense function ϕ the derived interpolant with respect to Equations (3) and (4) can be smaller.The above sparsity condition commonly holds in practical applications.
For instance, the transition relation built up from a set of transition functions of a sequential system appears to be sparse.
In fact, the more the transition functions are, the sparser the transition relation is.
Under this sparsity assumption, quantier elimination using functional composition is superior to that using formula expansion.By a qualitative comparison, expansion-and composition-based quantierelimination methods show dierent characteristics:Manipulation complexity.
The former requires cofactoring and disjunction operations; the latter requires interpolation (which invokes SAT solving) and composition operations.
In addition to the above operations, for both methods AIG minimization also plays an important role in the entire quantication eort.Circuit level.
The circuit depth of a resultant AIG is shallower for the former and deeper for the latter.
On the other hand, the circuit width of a resultant AIG is thicker for the former and thinner for the latter.Circuit size.
The AIG resulted from the former is often larger than that of the latter in certain applications.
This phenomenon can be related to the sparsity assumption and due to the amount of achieved logic sharing.
In addition to quantier elimination, a potential application of (the if-part of) Theorem 2 is to reduce circuit levels.
Consider a circuit C implementing some function f (X).
We study quantier elimination in predicate logic with the following principle.Proposition 4.
Given a language L in predicate logic and a structure A, then|= A ∀x.(∃y.ϕ(x, y) = ∃F.ϕ(x, F (x))),where ϕ is a formula, F is an n-place function symbol, and x = (x 1 , . . . , x n ) and y are variable symbols of L.Proof.
By the axiom of choice, such a function can be obtained by letting f (a) = b for every a with some b satisfying ϕ(a, b) or some arbitrary b if ∀y.¬ϕ(a, y).
Note that the above proof characterizes the complete exibility of the composite function in predicate logic.The equality of Proposition 4 suggests an equivalence-preserving transformation (with respect to some structure), and should be distinguished from the satisability-preserving Skolemization [18] of∀x, ∃y.ϕ(x, y) |= =| ∃F, ∀x.ϕ(x, F x).
Unlike propositional logic, the nice coincidence of terms, functions, predicates, and formulas no longer holds in predicate logic.
In fact all of them are distinct.
Terms are built up from constant symbols, variables, and function symbols.
They represent names of objects and should be distinguished from functions.
Substituting terms for variables is legitimate, but substituting functions or formulas for variables is not.
Quantier elimination through substitution is achievable only when a function can be conditionally expressed by a nite set of terms.
Therefore quantier elimination by exhaustive formula expansion does not work in predicate logic.
Dierent from propositional logic, a function in predicate logic may not be always expressible with a single term, and sometimes not even nitely expressible.
With these dierences in mind, we generalize Theorem 2 in the context of predicate logic as Theorems 3 and 4.
i γ i ∧ ϕ(x, t fi ).
The above theorems can be applied for universal quantier elimination by ∀x.ϕ = ¬∃x.¬ϕ, and thus work for nested quantier elimination.With the following examples, we illustrate the usefulness of the complete exibility of a composite function to simplify quantier elimination.
Example 1.
Consider the rst-order language L G with equality, 1-place function symbol S, 2-place predicate symbol R. Let structure A = ({0, . . . , 4}; S (successor The graph induced by the structure A is shown in Figure 1, where every element of the universe {0, . . . , 4} is represented as a vertex, and every (u, v) ∈ R is represented as a directed edge from u to v. Let ϕ be∃y.((y = x) ∧ R(x, y) ∧ R(y, y)).
Then the (x, y)-values satisfying ((y = x) ∧ R(x, y) ∧ R(y, y)) have the property that vertex x connects to a dierent vertex y that has a self-loop.
So (x, y)-values are as follows.
By Theorem 4, a solution function f can be as follows.x f (x) 0 2 1 3 2 4 3 0 4 1In this case, f can be expressed in terms of S as f (x) = S(S(x)).
So ϕ can be transformed into the equivalent quantier-free formula(S(S(x)) = x) ∧ R(x, S(S(x))) ∧ R(S(S(x)), S(S(x))).
Example 2.
Consider the following formula ϕ in the language of number theory under structure N = (N; 0, S, S −1 , <, +, ·, E), where S −1 is the inverse of the successor function S with S −1 (0) = 0.
(S(0) < x) ∧ (x < y) ∧ (∀a, ∀b.(y = a · b → (a = S(0) ∨ b = S(0))) → ∀a, ∀b.(x = a · b → (a = S(0) ∨ b = S(0))))ϕ asserts that x is greater than 1, y is greater than x, and, if y is prime, then x is prime.
By the property of Mersenne numbers, the quantication of ∃y.ϕ can be eliminated by substituting 2 x − 1, shorthand for S −1 (S(S(0))Ex), for y in ϕ as(S(0) < x) ∧ (x < (2 x − 1)) ∧ (∀a, ∀b.((2 x − 1) = a · b → (a = S(0) ∨ b = S(0))) → ∀a, ∀b.(x = a · b → (a = S(0) ∨ b = S(0)))),which can be further simplied to(S(0) < x) ∧ (∀a, ∀b.((2 x − 1) = a · b → (a = S(0) ∨ b = S(0))) → ∀a, ∀b.(x = a · b → (a = S(0) ∨ b = S(0)))).
Example 3.
Consider the following rst-order formula over real closed elds.
(The notation and symbols are used in the conventional arithmetic sense.)
∃x.(a · x 2 + c = 0) (5) Let f (a, c) = −c/a if c/a < 0 or c/a = 0 0 if 0 < c/a .
(For 0 < c/a, the value of f (a, c) can be arbitrary and is set to 0.)
Quantier elimination by substituting f (a, c) for x in Equation (5) yields((c/a < 0 ∨ c/a = 0) ∧ a · ( −c/a) 2 + c = 0) ∨ (0 < c/a ∧ a · 0 2 + c = 0),which can be simplied to c/a < 0 ∨ c/a = 0.
Alternatively, letf (a, c) = (−c/a) 2 .
The corresponding quantier-free formula becomesa · (−c/a) 2 2 + c = 0.
As this paper focuses on the characterization of the complete exibility of a composite function, how to eectively exploit such exibility in simplifying quantier elimination in predicate logic remains an open problem.
In fact interpolation is not directly extensible to generate composite functions due to the dierence between formulas and functions in predicate logic.
The proposed compositional approach to quantier elimination was implemented in the ABC package [1]; the experiments were conducted on a Linux machine with Xeon 3.4GHz CPU and 6Gb RAM.We showed the eectiveness of quantier elimination by constructing the transition relations of circuits taken from ISCAS and ITC benchmark suites.
In the transition relation of a circuit, its primary-input variables were existentially quantied.Despite recent advances in AIG packages, it was observed that AIG minimization may not be eective when AIG sizes reach tens of thousands of nodes.
Hence it is benecial to perform AIG minimization whenever possible before the sizes get too large to be reduced.
So in the experiments AIGs were constantly minimized throughout the computation.
Specically, for expansion-based quantication, minimization was applied after the disjunction of two cofactored circuits; for composition-based quantication, minimization was applied before circuit-to-CNF conversion for SAT solving, at interpolant simplication, and after functional composition.
3 As quantication scheduling is crucial to the scalability of quantier elimination, we adopted a simple strategy: By imposing a postponement threshold (the percentage of AIG-size increase due to quantication), variables whose corresponding quantications result in substantial increase in AIG sizes (exceeding the postponement threshold) are deferred.
This threshold is lifted gradually in the iterative computation until all quantiers are eliminated.
In the following experiments, the threshold starts at and increases by 10%.
The same scheduling strategy is applied for both expansion-and composition-based quantications.
Table 1 compares the two quantication methods based on formula expansion (denoted QE-Exp) and functional composition (denoted QE-Cmp), where an entry with indicates data unavailable due to time-out at the limit of 90000 seconds.
The smaller number of every corresponding pair of AIG sizes (circuit depths) between QE-Exp and QE-Cmp is highlighted in bold.
The ratio shown in the table is calculated under the exclusion of the 5 unsolvable circuits of QE-Exp.
As can be seen from Columns 5 and 9 of Table 1, QE-Cmp is much more scalable than QE-Exp.
The AIG sizes of QE-Cmp after quantication are typically much smaller than or comparable to those of QE-Exp.
Apart from the 5 unsolvable circuits of QE-Exp, s991 is an extreme, where the nal AIG size of QE-Cmp is 3 orders of magnitude smaller than that of QE-Exp.
On the other hand, circuit s1196 is an exception, where the result of QE-Cmp is 6 times larger than that of QE-Exp due to the failure to derive reasonable-sized interpolants.
Despite the eectiveness of QE-Cmp, there are still cases b14, ..., b22 of the ITC benchmark circuits (not shown in Table 1) unsolvable by either of QE-Exp and QE-Cmp.
In these cases, the unsatisability of φ A ∧ φ B is hard to establish.
Even if an interpolation succeeds, the corresponding interpolant is too large to be useful.
Further breakthroughs are needed to overcome these limitations.In addition to circuit sizes, we examine the eects of QE-Exp and QECmp on circuit depths.
Columns 6 and 10 of Table 1 show the characteristics of both methods.
Compared to Column 4, the transition relations before quantier elimination, QE-Exp yielded circuits with comparable logic levels as shown in Column 6, whereas QE-Cmp produced circuits with many more logic levels as shown in Column 10.
QE-Exp (respectively QE-Cmp) can be seen in a sense as quantication with restricted (respectively unrestricted) increase in logic levels.
QE-Exp and QE-Cmp are analogous to two-level and multi-level logic minimization, respectively.
QE-Cmp therefore can potentially achieve more logic sharing and generate smaller circuits.
Since logic-level increase is not immaterial in every application, in this case heavy logic synthesis, e.g., with collapse operation, can be adopted to reduce logic levels.
On the other hand, these extreme characteristics about logic levels might hint at the potential reduction power of the proposed optimization method discussed in Section 3.4.
The proposed method can be easily integrated into the framework of unbounded model checking as suggested in [17].
Our preliminary experiments on reachability analysis suggested that sparsity is an important factor for QE-Cmp to be eective.
Without taking advantage of sparsity in reachability analysis, QE-Cmp may not be as good as QE-Exp.
How to enforce sparsity in reachability analysis using QE-Cmp remains to be done.
Propositional logic.
There have been intensive eorts on BDD-based image computation based on the principle of formula expansion, e.g., [22], and eorts on SAT-based computation with solution enumeration, e.g., [7].
The closest to ours, however, is AIG-based formula expansion [17].
This paper proposes a compositional approach to quantier elimination.
The complete exibility of the composite function is characterized.
Although symbolic techniques, such as BDDs, can be applied, we use SAT solving and Craig interpolation for scalable derivation of the composite function.Craig interpolation was adopted in [16] to approximate image computation and in [8] to approximate transition relation.
This paper uses interpolation to compute exact image and exact transition relation.Under the virtual substitution principle of [23], quantier elimination by formula expansion can be considered as virtual substitution with two terms [19]; quantier elimination by functional composition can be considered as virtual substitution with a single term.Predicate logic.
When generalized to predicate logic, our composite function is similar to the Skolem function [18] with the following dierences: Firstly, the former is used for quantier elimination with term substitution, whereas the latter is used to rewrite formulas in Skolem normal form using Skolem function symbols.
Secondly, quantier elimination with composite functions is structurespecic (i.e., with respect to some structure/interpretation), whereas normal form conversion with Skolem functions is structure-independent (i.e., universal to all structures/interpretations).
Thirdly, quantier elimination with composite functions is equivalence preserving, whereas normal form conversion with Skolem functions is only satisability preserving.Under predicate logic, our quantier elimination is similar to virtual substitution [23] with the following dierences: In virtual substitution, a nite elimination set of terms is identied for quantier elimination.
The notion of composite functions is not explicit in [23].
Our emphasis, on the other hand, is on the characterization of the complete exibility of composite functions.
In eliminating a quantied variable, a single composite function is characterized, rather than a set of terms of the underlying language.
We do not address how to represent a composite function by terms, but suggest the usefulness of exibility in reducing elimination sets.
We have presented a compositional approach to quantier elimination.
The complete exibility of composite functions was characterized; Craig interpolation was exploited for eective computation.
Experiments showed promising results on extending the capacity of quantier elimination when the sparsity assumption holds.
For rst-order logic, our results may shed light on elimination-set minimization as motivated by the examples of Section 4.
As this paper just showed the rst step, much work remains to be done.
The eectiveness of our method on unbounded model checking and on circuit optimization suggested in Section 3.4 needs further investigation.
Quantication scheduling under the new compositional approach awaits improvement.
Moreover, a hybrid approach to quantier elimination by combining the expansionand composition-based methods may be pursued to keep both AIG sizes and depths small.
We anticipate applications of the new quantication method in scalable logic synthesis, where Craig interpolation is evidently gaining importance [10,9,11,12].
This work was supported in part by NSC grants 95-2218-E-002-064-MY3 and 96-2221-E-002-278-MY3.
