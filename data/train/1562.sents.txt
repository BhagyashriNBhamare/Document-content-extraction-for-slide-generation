Authentication is of paramount importance for all modern networked applications.
The username/password paradigm is ubiquitous.
This paradigm suffices for many applications that require a relatively low level of assurance about the identity of the end user, but it quickly breaks down when a stronger assertion of the user's identity is required.
Traditionally, this is where two-­-or multi-­-factor authentication comes in, providing a higher level of assurance.
There is a multitude of two-­-factor authentication solutions available, but we feel that many solutions do not meet the needs of our community.
They are invariably expensive, difficult to roll out in heterogeneous user groups (like student populations), often closed source and closed technology and have usability problems that make them hard to use.
In this paper we will give an overview of the two-­-factor au-­-thentication landscape and address the issues of closed versus open solutions.
We will introduce a novel open standards-­-based authentication technology that we have developed and released in open source.
We will then provide a classification of two-­-factor authentication technologies, and we will finish with an overview of future work.
Authentication is something we all do every day.
And whether it is to log in to our e-­-mail ac-­-count, to access our Facebook page or to tweet about that cool new album we've just bought, the use of username/password is by far the dominant paradigm.There are -of course -applications that re-­-quire a higher level of assurance such as electronic banking.The traditional approach for achieving this higher level of assurance is to use multi-­-factor au-­-thentication (also referred to as strong authentica-­-tion).
There is a multitude of multi-­-factor authenti-­-cation solutions on the market.
Traditionally, this market has a strong tendency towards closed solu-­-tions with strong vendor lock-­-in.
This invariably leads to a high cost per user, hampering the wide-­-scale rollout of multi-­-factor authentication technol-­-ogies.
Another common limitation of current multi-­-factor authentication technologies is the fact that they are often single-­-purpose solutions (e.g. they can only be used for one bank).
Furthermore, there are serious usability issues with many multi-­-factor solutions that make it difficult to enforce their use in most communities.Exactly what an acceptable level of assurance is should not only be decided by a service provider; users may also have an opinion on this.
Almost all solutions currently on the market give very little control to the end user.
[1]) was formed.
The intention of this initiative is to create an industry-­-wide reference architecture for strong authentication.
The OATH initiative has been very successful in creating industry standards for two-­-factor authentication that have been embraced by the Internet community in the form of IETF stand-­-ards ( [2], [3], [4]).
A number of companies and open source initiatives have adopted these standards in products and services (see also section 3).
developments have underlined the need to adopt open standards in the security and authen-­-tication/identity management industry.
Time and again closed solutions and algorithms have been shown to be vulnerable to attack because of the lack of peer review (poignant examples include the MIFARE system and the GSM A5/1 cryptographic algorithm [5]).
Finally, large players on the Internet have re-­-cently introduced two-­-factor authentication for some of their services ( [6], [7]).
This is the first time two-­-factor authentication is deployed on a (poten-­-tially) large scale for applications outside the finan-­-cial industry or enterprise domain.
In this paper we aim to give an overview of the current two-­-factor authentication landscape in sec-­-tion 2.
In section 3, we will further clarify some of the issues we believe exist in current two-­-factor authentication market offerings.
Section 4 proposes a way to classify authentication solutions and con-­-tains a classification of the solutions discussed in section 2.
In section 5, we will introduce the innova-­-tive two-­-factor authentication solution we have developed which is based on open standards and open technology.
Section 6 revisits the classification proposed in section 4 and adds a classification for the solution we introduced in section 5.
Finally, in section 7 we will draw conclusions and provide suggestions for future work.
In this section we aim to give an overview of the two-­-factor landscape.
Before we do that, we will first give a definition of what we think constitutes two-­-factor authentication.We then describe the solutions currently on offer, which we divide into two categories: Traditional solutions -these rely on single purpose (i.e. only used for identification) hardware devices or on a unique quality of the user (i.e. a biometric) Hybrid solutions -these rely on non-­-single purpose devices owned by the user, possibly in combination with software running on the-­-se devices In this paper, we define two-­-factor authentica-­-tion as a means of authentication relying on the user demonstrating at least 2 separate factors from the following list: Something the user knows (e.g. a PIN code or a password) Something the user has (e.g. a hardware to-­-ken)񮽙 Something the user is (e.g. a biometric, such as a fingerprint)Solutions that we place in the "hybrid" category rely on something the user has but where there is a chance of this factor being duplicated as could - for instance -be the case with a soft token running as an application on a smartphone.
Some people in the blogosphere have coined the term "1.5 factor au-­-thentication" for this category (e.g. [40])In this paper we will refer to a solution as two-­-factor authentication whenever the device on which the user is authenticating is physically separate from whatever constitutes the second factor (e.g. a soft token on a phone is only a second factor if it is used for authenticating a session on a separate de-­-vice such as the user's computer).
One-­-Time Password or OTP tokens are devices that generate single-­-use passwords (often com-­-posed of strings of up to 10 digits).
There are two variants:time-­-based tokens - these generate a new password at regular intervals (e.g. every 30 se-­-conds) and event-­-based tokens -these generate a new password after a user intervention (e.g. push-­-ing a button on the device).
Challenge/response tokens are similar to OTP tokens in that they also rely on symmetric cryptog-­-raphy for their operation.
Some OTP tokens also have challenge/response capabilities.
OTP often suffices for simple authen-­-tication, challenge/response tokens are mainly used for transaction authentication such as, for instance, approving a money transfer.
This is achieved by having the user enter one or more sequences of digits on the token (the challenge) and using these as input for a cryptographic algorithm to produce another sequence of digits (the response) that the user then returns to the party requesting authenti-­-cation.
In contrast to the previous two solutions, PKI tokens rely on public key cryptography.Under the hood, almost all PKI tokens rely on smart card ICs with a cryptographic co-­-processor capable of performing public key operations andin most cases -key generation.
Contrary to the previous two solutions, PKI tokens usually interface with the end user system.
They rely on software running on that system to integrate with, for example, the browser and mail client.There is an exception to this rule: Mobile PKI (see [8]).
In Mobile PKI, the user's SIM card is used as a PKI token; interfacing with the token takes place using special SMS text messages.PKI tokens have a broader applicability than just authentication.
They can also be used to create advanced -and in some jurisdictions legally binding -digital signatures (for more information, see [5] section 4.9).
There is some discussion about whether SMS OTP constitutes real two-­-factor authentication ( [15], [16]).
Especially the fact that it is hard to pro-­-tect the user against (temporary) stealing of their phone is a concern (putting a PIN lock almost never provides protection since SMS's are displayed even if the handset is locked).
There are many vendors of SMS OTP services; a Google search for "SMS OTP" will produce a long list.
Another more recent development is the ap-­-pearance of One-­-Time Password Apps.
These run on modern handsets (smart phones) and usually mimic the behaviour of OTP tokens (see section 2.3.1).
The difference between these Apps and 'real' OTP tokens is that the secret is stored and processed in software on the handset.
This makes them somewhat more vulnerable to attacks.
We feel that there are several issues surround-­-ing two-­-factor authentication that are hampering rollout on a larger scale; most solutions are closed, they often use single-­-purpose tokens, are not easy to use, may have prohibitive costs associated with them and almost always lack user control.
We will address these issues in more detail in the remainder of this section.
The most important issue with most current solutions is that they are closed ecosystems.
For example, the majority of OTP tokens is based on proprietary algorithms and can only be integrated into applications by using servers or server-­-side components supplied by the token vendors.Ironically, for PKI toke ns it is e ve n worse .
They always require integration software on the client system in the form of cryptographic middle-­-ware (although they normally do not require server-­-side integration, since they are based on built-­-in X.509 client authentication [23], [24], [25], [26].
The downside is that a special application needs to be installed on the user's SIM card.
The mobile operator owns the SIM card and access to it is strictly guarded.
This means that in order to be able to deploy Mobile PKI co-­-operation of the mobile operator is required, which has been proven to be difficult on many occa-­-sions.
Almost all OTP tokens are single-­-purpose to-­-kens by nature because they rely on a shared secret.
hav-­-ing more than one token because they are custom-­-ers at more than one bank.In principle, PKI tokens should be more flexi-­-ble because they often support storage of more than one X.509 certificate together with the associated key-­-pair.
Unfortunately, the issuance process of PKI tokens is usually such that users have no control over the content of their token and can very rarely add credentials for additional identities.
Thus, PKI tokens can only be used for multiple purposes if they contain an identity issued by a Certificate Au-­-thority that is supported by the party to which the user is authenticating.In theory, mobile App-­-based solutions can more easily support multi-­-purpose deployments, in practice this does not happen very often yet.
Many users will have experienced how diffi-­-cult it can be to use OTP tokens.
Most of them re-­-quire typing in complicated codes.
The chal-­-lenge/response variety is even more complicated where users regularly have to type multiple codes on the token and then they have to copy the result from the token by typing it on the site they are au-­-thenticating to.SMS OTP is no better.
In fact, it is even more complicated in our opinion as the one-­-time pass-­-words used often consist of both capitals and lower case letters as well as digits and punctuation marks.PKI tokens fare a little better.
As long as the software integration with the user's browser is properly installed, the user experience is usually quite smooth.A common issue shared by all tokens except mobile phone-­-based ones is that they are all too easy to forget or lose.
Both OTP and PKI tokens can be quite costly, both in initial investment as well as yearly licence fees.
It is not uncommon to pay tens of US dollars per user per year.
SMS OTP becomes gradually more costly the more it is used.The only exception to this rule is a new class of OTP tokens that are emerging, based on open stand-­-ards developed by the OATH initiative.
Because they work with open source software, the only substan-­-tial cost is the initial investment.
Yubikey tokens [27], for example, can be purchased for less than USD $30 and the price goes down for larger volume purchases.
Users seldom initiate deployment of two-­-factor authentication solutions.
They are usually deployed by corporate IT departments or banks.
The organisations deploying these tokens strictly control what they can or cannot be used for, severe-­-ly limiting users.It is very hard for users to acquire personal two-­-factor tokens and deploy them in a useful way because very few services provide the means to self-­-enrol identities.
A notable exception to this is Google Authenticator [28].
In this section we will introduce six different ways to classify authentication solutions in order to judge their suitability.
We will use this classification at the end of this section to classify the two-­-factor authentication solutions discussed earlier.
The first way to classify authentication solu-­-tions is by their dependence (or lack thereof) on specific or specialised hardware for their operation.We feel that hardware independence enhances the usability of a solution, because the more inde-­-pendent a solution is from specific hardware, the fewer devices a user has to carry around.From a security perspective, however, using special purpose-­-made hardware has distinct ad-­-vantages.
Devices can be tailored for one goal, which is to protect the secrets associated with a user's credentials.In this paper, we will focus mainly on the en-­-hanced usability that comes with hardware inde-­-pendence;we will factor in the security advantages that special hardware can offer when we judge the security of a solution.
We rank solutions that offer stronger hardware independence more favourably than solutions that require specific hardware to operate.
Just like hardware independence, software in-­-dependence is mainly a usability enhancing aspect.
In some cases, dependence on specific hardware goes hand in hand with dependence on specific software.
For example, smart cards cannot operate without the accompanying security middleware that users will have to install on their computer.Some solutions only depend on specific soft-­-ware on the server side and do not require the user to install software (for example OTP tokens).
We will judge solutions on the amount of effort required to install software by both end users as well as by the system administrators of the server side.
We will also factor in the availability of integra-­-tion in off-­-the-­-shelf products as this can significantly reduce the effort required to install the required software.
Security is -of course -one of the most im-­-portant factors when judging authentication solu-­-tions.
There are several aspects that influence the security of a solution: Is the solution a multi-­-factor solution?
If so, is it a true multi-­-factor solution (see §2.3) or a hybrid solution (see §2.4)?
Does the solution rely on purpose-­-built hard-­-ware that has provisions for e.g. tamper re-­-sistance?񮽙
Are there well-­-known attacks that (severely) impact the security?
If the solution relies on cryptography, does it rely on sufficiently strong as well as open cryptography?񮽙
Has the security of the solution been verified by reputable independent security auditors?
Cost is an important factor, especially for large-­-scale deployments.
It can be considered from a number of different angles: The one-­-time setup cost (e.g. in software and hardware purchases) and recurring cost of the actual solution (e.g. yearly licence fees).
The cost for troubleshooting for users who have misplaced their credentials or forgotten their password or PIN.
The cost of integrating the solution into exist-­-ing IT infrastructure (what skill level is re-­-quired and how much time do system adminis-­-trators or system integrators spend setting up the solution).
Open standards form the backbone of the In-­-ternet.
Vendors A final factor that can go a long way in deter-­-mining the success of a solution is ease-­-of-­-use.
At first glance, solutions that are already familiar to a user -such as username/password -may seem easy-­-to-­-use.
But when all the kludges that have been added to enhance the security such as complex password policies and requirements to change passwords on a regular basis are considered, it is easy to see that such solutions may not be as easy-­-to-­-use as initially assumed.
Does the user have to re-­-type complicated codes (such as may be the case for OTP to-­-kens)?񮽙
Has care been taken to design the user experi-­-ence such that the solution can be used intui-­-tively by the user rather than requiring them to learn how to operate the solution from e.g. a manual?
++ ++ -­--­- ++ = +/-­- OTP token -­- -­- ++ -­--­- -­-/= + C/R token -­- -­- ++ -­--­- -­-/= + PKI token -­--­- -­--­- ++ -­--­- = + Mobile PKI + + ++ ?
+ ++ SMS OTP + = -­- -­- -­--­- -­- OTP Apps + +/= + +/= +/= = We would like to highlight certain points of the classification we made in the previous section.
Giv-­-en the endless stream of news articles about username/password getting compromised we feel that - even though it is tried and tested - this para-­-digm is really lacking in security.
And even if organi-­-sations enforce secure password policies and users adhere to them, they may still be at risk.
Recent developments in password cracking such as using GPU-­-based cracking systems make the security of any password under a certain length questionable [45].
With the increasing value that online identities have (how would you feel if your GMail, your Face-­-Book or your Twitter account got compromised and someone reads your private data or tries to imper-­-sonate you?)
we, as authors, are of the opinion that two-­-factor authentication should become much more common than it is now.As the classification shows, to get rock solid security using two-­-factor authentication we feel that a real purpose-­-built hardware token should be used.
Nevertheless, emerging solutions that rely on mo-­-bile phones as personal devices, such as OTP Apps, show great promise.
If implemented properly, these solutions can add significant value security-­-wise.
are three key problems currently inhib-­-iting wide-­-scale deployment of two-­-factor authenti-­-cation outside of the corporate and banking envi-­-ronment.
The first is cost; OTP and PKI tokens are expensive (there are exceptions: interestingly, one of the largest deployments of OTP tokens is for online World-­-of-­-Warcraft [41]).
The second is de-­-pendence on bespoke hard-­-and software.
Especially PKI tokens suffer from the problem that they re-­-quire the end-­-user to install driver software and security middleware that is not always available for all end-­-user platforms.Finally, the last problem is the lack of adher-­-ence to open standards.
This not only stops people integrating support for two-­-factor authentication into their online services, it also means that many two-­-factor products are single purpose only (e.g. a token issued by a bank cannot be used to authenti-­-cate for other services).
We have tried to let these three problems be reflected in the classification given in Table 1.
In 2009 we experimented with Mobile PKI (see also §2.3.3) as a means of authentication.
As the report [8] of our experiment shows, we were very happy with the results.
The technology is user-­-friendly, very secure and -because of the open standards it is based on -easy to integrate.The only major hurdle we encountered is the dependence on mobile operators.
These operators are very hesitant about deploying the technology because it requires a SIM swap (most SIMs deployed in The Netherlands are not PKI capable), and be-­-cause they do not feel that there is a strong business case to deploy the technology in terms of potential revenue from it.As operator of the National Research and Edu-­-cation Network (NREN) in The Netherlands, SURFnet operatesa so-­-called identity federation (see [29])called SURFfederatie.
This federation ena-­-bles users to log in at a multitude of online service providers using a single identity hosted by their home institution.
Furthermore, this federation of-­-fers users single sign-­-on.
As is the case on most of the Internet, almost all authentications in the SURFfederatie rely on the tried and tested username/password mechanism.
We would like to improve on this situation by intro-­-ducing alternative means of authentication based on two-­-factor authentication technology.
There are two reasons for this: first, we feel that some services require a stronger form of authentication than username/password.
Secondly, we would like to offer users a safe alternative that they can use on untrusted systems such as, for instance, computers in Internet cafés.SURFfederatie has a sizable and very hetero-­-geneous user population consisting of approximate-­-ly one million students, researchers and other staff from over a 160 different institutions.
It would be impossible to deploy a token-­-based two-­-factor au-­-thentication solution because of the logistics in-­-volved.
It would, however, be ideal if we could de For reasons mentioned before, we could not rely on Mobile PKI so we started searching for an alternative.
The criteria for this alternative were that it should be secure, user-­-friendly, easy to de- ­- ploy, open and suitable for managing multiple iden-­-tities.
We believe that we have developed a novel solution that meets all of these criteria.
The innovation we have come up with is to use QR codes in a dynamic rather than a static fashion.
By encoding a challenge in a dynamically generated QR code that is displayed to the user when he/she wants to log in, we use QR codes to take away the burden on users of typing challenge/response codes.
QR codes are also used during enrolment to tie the user's phone to an identity.
Although this solution is not unique -the Google Authenticator App [28] can use a QR code to convey the user se-­-cret during enrolment -we have taken this technol-­-ogy further by creating a seamless user experience.
The flow starts by a user surfing to a website that requires them to log in.
Where most sites would display a username/password dialog (or an entry field to enter a one-­-time password), with tiqr users will see a QR tag as shown in Figure 4.
Apart from a random challenge, the QR code also contains information on the relying party re-­-questing authentication.
The App can manage mul-­-tiple identities and will select an appropriate identi-­-ty that can be used to log in to this particular site (if multiple identities are present, the user will see a list and can choose the appropriate one).
The tiqr App now asks the user to confirm that he/she wants to log in, also displaying the domain name of the site they are logging in to in order to reduce the risk of phishing.
Once the user has confirmed their identity, they will be asked to enter their PIN code (the se-­-cond factor).
If the user's phone is online, the Internet connection of the phone will be used to submit the response to the authenticating server thus obviating the need to type one-­-time passwords in to a website.
When au-­-thentication is successful, the user is notified both on the phone as well as by the website proceeding with login by redirecting the user to the protected content as shown in the screenshot (Figure 8).
In case no Internet connection is available on the phone a fall-­-back scenario is used where a one-­-time password is displayed on the phone for the user to type into the website (more on this in sec-­-tion 5.8).
We first came up with the concept that led to the development of tiqr in September 2010.
In order to prove that the concept would work, we designed the initial protocol and developed a proof-­-of-­-concept implementation, both of the server side as well as of the phone side.
For the proof-­-of-­-concept an implementation was created for Apple's iOS plat-­-form.
The proof-­-of-­-concept quickly showed that the technology worked very well.
We first demonstrat-­-ed the working proof-­-of-­-concept at an event held every two years to showcase SURFnet innovations to our connected institutions in December 2010 and received helpful and positive feedback from the people attending.
This led us to decide that we should continue development.In April 2011 we released the first Apple iOS production version in the Apple App Store and we presented on the project at the Internet2 Spring Member Meeting in Arlington, VA.
The Android ver-­-sion was released in May 2011 just before we pre-­-sented on further improvements to tiqr at the TERENA Networking Conference 2011 in Prague, Czech Republic.The remainder of this section will go into more detail about the tiqr technology.
We wanted to make tiqr available on the two most common smart phone platforms.
According to a Q1 2011 market survey, those platforms are Ap-­-ple's iOS and Google's Android platform: We have developed Apps for both these plat-­-forms.
The Apps rely on the excellent ZXing QR code library developed by Google (see [18]) for QR code detection and decoding.
The Apps implement the tiqr challenge/response protocol, which is based on OCRA/HOTP [19], [2]; more information on the pro-­-tocol can be found in section 5.5.
The tiqr protocol relies on shared secrets for the challenge/response implementation.
The secret is stored both on the phone as well as on the server.We can only reasonably assume that the phone with the App and the secret on it is a secure authen-­-tication factor if it is hard for an attacker to gain access to the actual secret.
We therefore protect the secrets belonging to user identities by encrypting the secrets using PKCS #5 password-­-based encryp-­-tion [20].
The basis for encryption is the 4-­-digit PIN code the user chooses for the identity.Of course there are only 10000 possible PIN codes with a 4-­-digit PIN.
We assume that it is easy for a motivated attacker to gain access to the en-­-crypted secret so we need to protect it against brute-­-force attacks.
We achieve this by applying two principles.
Firstly, the encrypted secret contains no internal structure (i.e. only the secret key -which is assumed to be truly random - is encrypted, there is no formatting around the key data before it is en-­-crypted).
This automatically leads to a second level of protection: because the encrypted key has no structure around it, it is impossible to check if the To prevent online attacks, we recommend that the server block an account after a pre-­-set number of failed authentication attempts (in fact our demo implementation blocks an account after 3 failed attempts).
Depending on the desired security level, the server administrator may also decide to imple-­-ment some form of exponential back off mechanism to mitigate brute-­-force attacks.
In this scenario, ac-­-counts are temporarily blocked after a failed login attempt.This thwarts brute-­-force attacks but is also more user friendly for legitimate users since enter-­-ing the wrong PIN more than a certain number of times will not immediately lead to a blocked ac-­-count.
One of our main goals was to create an easy-­-to-­-use system.
We have taken special care to ensure that the user experience of the App is as straight-­-forward, self-­-explanatory and smooth as possible.
The prototype developed for the proof-­-of-­-concept was handed over to user-­-interface designers.
They studied the concept and the prototype implementa-­-tion.
Using storyboards, they designed an optimised user workflow.
The main focus of the workflow is to make it self-­-evident to the user what the next logical step is going to be.
Another change they introduced was to do away with a separate enrolment workflow (in the prototype, we had two completely separate workflows for enrolment and authentication).
In stead, the user just scans the QR code that is shown and information in the code determines whether an authentication or an enrolment workflow is going to be followed.Another design decision that was made was to try to steer users toward using the same PIN code for all the identities managed by the tiqr App.
The reasoning behind this is that the user-­-interface de-­-signers feel that it is counter-­-intuitive for most us-­-ers to have multiple PIN codes in a single applica-­-tion.
This concept is on the one hand very subtly integrated in the user experience by using sugges-­-tive wording If the user enters the correct PIN, the same four animal icons should show up in the PIN entry field.
Users can either remember the whole se-­-quence or elect to remember just the last icon.
To ensure that the sequence changes when common PIN entry mistakes are made (such as swapping two digits) we use the Verhoeff checksum algorithm [32] for error detection.
As was already mentioned in the previous sec-­-tion, the basis for tiqr is challenge/response authen-­-tication using shared secrets (more information on the protocol can be found in section 5.5).
This means that the secret key information that is pre-­-sent on the phone also needs to be stored on the server.
This, of course, puts certain requirements on the server implementation.
User secrets should be stored encrypted, either on disk in a database or in a Hardware Security Module (HSM).
Another thing that is required on the server side is a library that generates the QR codes used to convey the challenge to the user.
There are good open source implementations available for most common web application platforms.
For our refer-­-ence implementation we use PHP QR Code [33].
The most important thing to pay attention to on the server side is that the protocol is implement-­-ed correctly.
We provide a reference implementa-­-tion to show how the protocol works (which is dis-­-cussed in the next section).
To give developers a head start at integrating tiqr into their application, we have developed a ref-­-erence implementation in PHP.
This reference im-­-plementation shows how the tiqr protocol works (see section 5.5).
We did not put any security provisions in the reference implementation so it should not be used in production.
We are considering creating a more secure implementation that people can deploy straightaway.
As outlined in section 5.
We rely solely on open standards and open specifications as a basis for the tiqr protocol.
The following standards are used: The tiqr App will contact this URL to retrieve a JSON object with enrolment details.
This object has the following syntax:񮽙 OCRA [19] -{ "service": { "identifier": <id>, "displayName": <name>, "logoUrl": <logo-url>, "infoUrl": <info-url>, "authenticationUrl": <auth-url>, "ocraSuite": <OCRA-suite>, "enrollmentUrl": <enroll-url>, }, "identity": { "identifier": <uid>, "displayName": <fullName> } }The service section of the object identifies the service to which the user is enrolling.
The identity section provides details about the identity that is being enrolled.
The fields in both sections of this object have the following semantics: Service section 񮽙 identifier -should contain a reversed do-­- main Identity section 񮽙 identifier -should contain a unique user identifier used to identify the account 񮽙 displayName -should contain the full name of the user *An example OCRA suite as specified by the server could for instance be:OCRA-1:HOTP-SHA1-6:QH10-S This OCRA suite specification breaks down as follows: OCRA-­-1 -the OCRA algorithm version (in this case version 1, the current version)񮽙 HOTP-­-SHA1-­-6 -the cryptographic function to use (in this case HMAC OTP [2], with SHA-­-1 as hash algorithm using dynamic truncation to a 6-­-digit value); the tiqr App supports all algo-­-rithms specified in the OCRA standard For more examples see [19].񮽙
QH10-­-S -theWhen the user confirms enrolment, a new HTTPS connection is made to the enrolment server URL specified in the JSON object enrollmentUrl property.
A POST request is sent across this link.
This POST contains the following parameters:񮽙 secret -this is the shared secret; the secret is generated by the App on the phone; we cur-­-rently use 256-­-bit AES keys as secrets 񮽙 notificationTypeoptional; this is the notifica-­-tion type used to send push messages to the App and can be set to either APNS (for Apple Push Notification Service) or C2DM (for An-­-droid push notifications) notificationAddress -optional; notification-­-protocol specific address to which push notifi-­-cations can be sent language -contains the user interface lan-­-guage of the user; this information may be used to display appropriate error messages in the user's preferred language If enrolment is successful, the server will re-­-turn the string OK (with no white space before or after the string).
When an error occurs, the normal HTTP error procedure is followed to return the er-­-ror to the App.
Authentication starts by displaying a QR code to the user.
This QR code contains a URL encoded according to the following URL schema:tiqrauth://[<identityIdentifier>@] <serviceIdentifier>/ <sessionKey>/ <challenge>[?
<return Url>]The fields in this URL have the following se-­-mantics: 񮽙 identityIdentifier -optional INVALID_REQUEST -the POST request con-­-tained incorrect parameter data and was not accepted by the server 񮽙 ERROR -an unspecified error occurred As we already mentioned in section 5.4.2 and 5.4.3, we already provide several options for inte-­-grating tiqr into existing applications.
The reference implementations we provide can serve as a basis for integration into web applications, but tiqr can also be used in other contexts.Shortly after the first release of tiqr an inde-­-pendent software vendor, RCDevs from France, in-­-tegrated support for tiqr into their OpenOTP Au-­-thentication Server [36].
Based on their existing integration with several products they were able to show that tiqr can -for instance -be used as an authentication method to log users in to a secure shell (SSH) session (see Figure 11 for an example).
We hired an independent security auditorEindhoven-­-based Madison Gurkha, see http://www.madisongurkha.nl/ -to assess the se-­-curity of tiqr.
The goals we set them were to: Assess the architecture and design of tiqr from a security perspective 񮽙 Perform a code audit of both the App for iOS as well as for Android Perform a code audit of the reference server-­-side implementation 񮽙 Perform security tests on the live solution (both server as well as client side)The security audit was performed on version 1.0 of the App (as released in April 2011 for iOS and May 2011 for Android) and was finished in June.
[44]).
We think that this is much less likely to be the case for e.g. OTP tokens, since the single-­-purpose nature of these devices means they are used much less frequently.We have taken care to include several security measures to deal with the inherent untrustworthy nature of smart phone platforms (see 5 We agree that this is a risk and as mitigation the tiqr App always displays the fully qualified domain name of the site that the user is being authenticated to.
Users are expected to validate the authenticity of the site they are logging into in the same way they do for e.g. their banking site, i.e. by checking the site's URL and server certificate.
Note that this prob-­-lem is not unique to tiqr; all OTP solutions are equally vulnerable to phishing.The issues in the code and design identified by the auditors were resolved in version 1.1 of the App and in the reference server-­-side implementation that is available from the tiqr website.
We also con-­-tributed fixes for the vulnerabilities in the OCRA reference implementation back to the authors of the RFC.
All source code and documentation as well as a demo server can be found on our website, https://tiqr.org/ Now that a production-­-ready version is availa-­-ble our next step will be to deploy tiqr within our own organisation.
SURFnet currently uses X.509 software certificates for authentication to certain services.
We plan to replace these by tiqr.
All SURFnet employees have either an iOS-­- or Android-­-based smart phone making it an ideal user popula-­-tion in which to use tiqr.When we have gained real-­-world experience we will evaluate this deployment.
Then, we plan to gradually introduce tiqr as an alternative means of authentication (alternative to username/password and/or SMS authentication) in some of the services we offer to our constituency.We are also talking to our connected institu-­-tions to set up a pilot with a larger population.
Our goal is to provide tiqr as an alternative means of authentication on an identity provider in our federa-­-tion who currently only offer username/password.
One of the things we will be evaluating in the-­-se pilot deployments is whether or not the paradigm of encouraging users to use the same PIN for all their tiqr accounts works and whether or not it makes sense to block all accounts if one account needs to be blocked because of too many failed at-­-tempts at entering the correct PIN.From a technological perspective, we are con-­-sidering pursuing several areas of research: Turning tiqr into a true hardware token by leveraging the possibilities offered by SD cards with an embedded smart card controller (smartSD cards, see [39]) Incorporating attribute release into tiqr (where tiqr releases attributes about a user asserted by a trusted third party), similar to the InfoCards paradigm (see [38]) Using advances in cryptography such as zero-­-knowledge proof to further enhance the priva-­-cy aspects of tiqr.
Using tiqr for transaction signing (as is e.g. done by banks with OTP tokens to approve fi-­-nancial transactions).
Some of these we will probably do ourselves, others we hope to pursue together with the academ-­-ic community in the areas of cryptography and digi-­-tal security.
we started the tiqr project we set out to create a two-­-factor authentication solution that would leverage the benefits of using a device that (almost) everybody has: a mobile phone.
We were also mindful that the solution should be an im-­-provement over username/password given the cri-­-teria introduced in section 4 and if possible it should also offer advantages over more traditional solu-­-tions.
We feel that with tiqr we have achieved most of these goals.
We believe tiqr to be ve ry use r-­-friendly (much more so than some other two factor authentication solutions) and also believe that tiqr is an improvement in terms of security over username/password and on a par in that respect with many other two-­-factor authentication solu-­-tions.
Furthermore, we believe that tiqr can be a viable replacement for more traditional OTP solu-­-tions, especially the OTP Apps and SMS authentica-­-tion.
hard-­-ware to store the secret data associated with a us-­-er's identity its security is not as strong as tradition-­-al tokens.Nevertheless, we feel that tiqr is a useful addi-­-tion to the two-­-factor authentication landscape.
Its user-­-friendliness and the control over deployment it gives to organisations are also strong points.
In section 4 we introduced a classification for authentication solutions, judging solutions on hardware (in)-­-dependence, software (in)-­-dependence, security, cost, open standards compli-­-ance and ease-­-of-­-use.
Now that we have introduced tiqr, we will revisit this classification.
Table 1 showed a classification of authentica-­-tion solutions according to the criteria introduced in section 4.
In Table 2 we have reprinted this classifi-­-cation and added tiqr at the bottom of the table (marked in grey).
Again, one could argue that any classification is subjective, especially since we are judging our own solution.
Therefore, we have tried to justify the classification we have assigned to tiqr below: Hardware (in-­-)dependence -tiqr requires ad-­-vanced features only available on smart phones; it is therefore not as hardware inde-­-pendent as some of the other solutions that re-­-ly on mobile phones Open standards -tiqr was built from the ground up to include open standards and the tiqr protocol itself has also been published Ease-­-of-­-use -tiqr was designed to be user friendly from the ground up by skilled inter-­-face designers Our lives are increasingly being lived in the digital world.
Social networks have become the sta-­-ple of a new generation and many professionals cannot live without e-­-mail, VoIP, and services like LinkedIn.
Governments and the public sector are also increasingly making vast amounts of often per-­-sonal data (like medical records) available online.
means that the value of the digital identi-­-ties we use to access these services are becoming ever more valuable.
It is no longer just your credit card that is at risk of being stolen, whole identities get hijacked.We feel that it is inevitable that two-­-factor au-­-thentication becomes more widespread and actively try to stimulate its adoption, both within our own community as well as on a wider scale.
The best way forward to bring two-­-factor au-­-thentication to a wider audience is the adoption of open standards by vendors.
This applies foremost to vendors of hardware OTP and PKI tokens.
It is also of paramount importance that integration of two-­-factor authentication in online services becomes easier.
One way of achieving this is by releasing open source solutions with flexible licenses.
These can serve as useful examples and facilitate rapid integration.
parts of the tiqr project have now been spun off as separate open source projects because of their gen-­- eral applicability.
These include TokenExchange (an abstraction for push notifications supporting sever-­-al device platforms), see [42], and a set of OCRA reference implementations in several programming languages, see [43].
The authors of this paper would like to thank: Ivo Jansch, Peter Verhage, Felix de Vliegher and
