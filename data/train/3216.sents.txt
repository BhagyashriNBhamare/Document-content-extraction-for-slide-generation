Work on the End-to-End Provenance System (EEPS) began in the late summer of 2009.
The EEPS effort seeks to explore the three central questions in provenance systems: (1) "Where and how do I design secure host-level provenance collecting instruments (called prove-nance monitors)?"
; (2) "How do I extend completeness and accuracy guarantees to distributed systems and com-putations?"
; and (3) "What are the costs associated with provenance collection?"
This position paper discusses our initial exploration into these issues and posits several challenges to the realization of the EEPS vision.
Data provenance [11,12,26] traces the genesis and subsequent modification of data as it is processed within and across systems.
Such information indicates the pedigree of data [1,7,15,19,34] and enhances, among other functions, system calibration [13], experimental replay [5], auditing [2], fraud and malicious behavior detection [16], and quota and billing management [37].
Because of the immaturity of the underlying technologies, provenance systems are at present largely experimental.Practical provenance systems use a specialized recording instrument to collect information about data processing at runtime.
The instrument annotates data with information on the relevant operations performed on it.
The ordered collection of provenance annotations becomes an unalterable record of data evolution called a provenance chain [17,24].
The scope of provenance is determined by the needs of its users.
For example, it is sufficient in some database applications to record only the queries [9-12, ?
-12, 33].
Thereafter, anyone viewing the data and annotations has a complete record of how the table contents came into being and how they evolved over time.
This forensic information is invaluable in repairing failures, understanding application usage, and identifying and undoing malicious behavior.There have been long-standing calls for provenance in large-scale systems.
A recent report prepared for the chairman and ranking member of the US Senate Committee on Homeland Security and Governmental Affairs [36] highlighted provenance as one of three key future technologies for securing our national critical infrastructure.
The report cited a need to ascertain the provenance of sensor data as it is recorded and aggregated in cyber-physical systems such as the smart-grid and SCADA environments.
In a different domain, the scientific computing community has long urged the development of provenance systems.
Experimenters desire to use provenance to track dependencies between data sources, experiments, and results.
Whether tracing sensor data from a pipeline or tracing dependencies between clinical data in a drug trial, it is essential that the provenance be secure against manipulation.
Failure to provide such protection leaves the supported system open to misuse.
For example, readings could be manipulated to induce or ignore catastrophic failures or mislead clinicians and regulators (e.g., the FDA).
Although a number of systems have been developed to record provenance meta-data [2,5,8,14,23,24,28,29] (some securely), existing systems largely assume that the recording instrument is inherently trustworthy.
That is, they assume that the systems being monitored are (a) trustworthy enough to assert their own provenance data, and (b) not compromised.
However, the long history of security has shown that these assumptions are only reasonable in the most restricted of environments, and even there, only for a short period of time.
Thus, a stronger set of security requirements are needed for provenance to be tamper-proof and non-repudiable [3].
The definition and enforcement of these requirements constitute the first major challenge of the work proposed here.In this recently begun work, we envision an end-to-end provenance system (EEPS).
EEPS collects provenance evidence at the host level by trusted monitors.
Provenance authorities accept host-level provenance data from validated monitors to assemble a trustworthy provenance record.
Subsequent users of the data obtain a provenance record that identifies not only the inputs, systems, and applications leading to a data item, but also evidence of the identity and validity of the recording instruments that observed its evolution.
Here, EEPS addresses the critical open problem of showing that provenance information was recorded accurately within and across systems.To address the need for stronger provenance security guarantees, EEPS introduces the notion of a host-level provenance monitor.
A provenance monitor acts as the recording instrument that observes the operation of a system and securely records each data manipulation.
Like the well-known reference monitor concept for the enforcement of security policies [3], a provenance monitor must preserve several basic properties to ensure accurate recording.
Described below, these include tamper-proofness, complete mediation, and simple verification.
Note that because the provenance monitor is a host system artifact, further services are needed to coordinate the provenance gathering across systems.The key depature of this work from past efforts in provenance is in its focus; we are exploring the trust, security, and performance constraints of practical provenance applications and environments.
In this, we are studying how policy compliance under regulatory constraints may be implemented in EEPS.
We propose interfaces to these devices that maintain regulatory conditions in the face of potentially adversarial operating systems.
This work faces three key challenges:1.
Provenance collection at the host level must meet the security guarantees of a reference monitor.
We propose the host level provenance monitor as a method for achieving these guarantees.
2.
The aggregation of provenance records must be kept secure and verifiable across domains with different security policies.
We use the notion of a plausible history as a method for tracking a data item's history of domain traversals.
3.
As the resources spent on provenance are pure overhead, it must be collected, stored, and audited in the most efficient means possible.
For this challenge, we leverage our previous work with optimized cryptographic constructions for provenance data [18].
This short position paper reviews several of the challenges and designs of EEPS, and highlights some of our early progress.
We begin in the next section by describing the three main thrusts of the work.
We are in the initial stages of developing the EEPS system, and are exploring the technical and logistical issues surrounding design alternatives.
This current investigation can be divided into three interconnected explorations loosely parallel to the challenges outlined above:(1) Host level provenance monitor architecture.
The creation of a host level provenance monitor presents several interesting design challenges.
A first question is where to place the monitor.
We consider two alternatives: an in-kernel provenance monitor and an offprocessor monitor.
Adopting a trust model similar to systems like PASS [24], the former requires hooks into the system call interfaces that serve as an application to maintain provenance data, whereas the latter uses secure co-processors or intelligent storage (advanced disk-controllers) as provenance-aware trusted computing bases (TCBs).
Figure 1 shows how each of these types of provenance monitors may be deployed within an organization.The host level provenance monitor should enforce the classic reference monitor guarantees of complete mediation of relevant operations, tamper-proofness of the monitor itself, and basic verification of correct operation.
For the purpose of the provenance monitor, we define these as follows.
First, a provenance monitor should mediate all provenance-relevant operations, whatever these may be for a given application.
Second, the provenance monitor must be isolated from the subjects operating on provenance-enhanced data, e.g. the OS kernel or storage device.
Finally, the provenance monitor should be designed to allow for simple verification of its behavior.The second major design question involves the substance and location of the provenance chain information associated with application data.
Developing techniques to store system-level provenance data in ways that will not be resource intensive yet semantically rich enough to support diverse applications, is a core requirement.
In particular, we are exploring solutions that avoid costly cryptographic operations on application critical paths and prevent provenance state explosion.Lastly, any provenance system must be built upon a policy facility that flexibly specifies, for a given host/application/data context, what provenance information to record, at what granularity, and with what security guarantees.
The provenance enforcement policy must be driven by (often distributed) authorities.
Identifying those authorities and providing the credentials by which they are validated is essential.
Equally important is the investigation of techniques to securely identify and store, among other attributes, process data (unique program and library identity), system integrity state (OS attestations), timestamps, and host and user identity information within the provenance history.
(2) Distributed provenance systems.
The next challenge is to extend the reach of the provenance monitor to a system of monitors.
Here we seek to extend EEPS to support distributed environments.
Operation in these environments is complicated by the existence of multiple administrative authorities, coupled with the heterogeneity of platforms and policy.
Existing tools do not address these challenges.
We thus explore new architectures and techniques, such as the use of provenance authorities shown in Figure 1, which communicate and disseminate policy across organizational boundaries.The move from individual hosts to distributed systems spanning administrative domains presents new challenges.
The existence of multiple administrative authorities coupled with heterogeneous platforms and policies mandates the exploration of new architectures and techniques building upon the host-level infrastructure.Consider the version history in a distributed environment that would result if a document were created and subsequently edited and transferred across differ- ent autonomous systems' boundaries, with provenance information correctly and indelibly recorded all along the way.
We call this a plausible history for the resulting document and its chain.
We target applications whose provenance integrity needs are met by the following guarantee: if a document and its associated provenance chain has no plausible version history, it will be detected.
Such applications are common; for example, a retail pharmacy will not accept a shipment of drugs unless it can be shown that the drugs have passed through the hands of certain middlemen.
If a criminal wants to sell drugs manufactured by an unlicensed company, he will want to forge a provenance chain that gives the drugs a more respectable history, so that he can move them into the supply chain.
This forgery is a condition that a secure distributed provenance system must be able to detect.As a first design requirement for a distributed provenance monitor, we are extending host-level provenance monitors with channels for transmitting and receiving distributed provenance information in a manner that is transparent to applications.
A second, related goal is to define how distributed protocols and associated policy will be coupled with distributed access control mechanisms.
This includes protocols for setting up and maintaining cross-domain communications, as well as communications between provenance monitors and their corresponding domain authorities.
We also leverage work on distributed reference monitors to provide baselines for negotiating trust between provenance authorities and provide for distributed RBAC capable of expressing complex policy.Distributed systems necessarily require increased provenance expressiveness.
In addressing this need, we consider not just provenance chains, but also the directed acyclic graphs (DAGs) that result from multi-party processing.
We are designing cryptographic constructions that mitigate costs of these operations, looking initially at "co-provenance" through entangled provenance chains and then designing and implementing DAG constructions.
Applying concepts from distributed systems will be essential to making these processes efficient (e.g., virtual synchrony [6]).
(3) Performance/cost modeling and profiling.
Collecting and processing provenance can be very costly.
However, richer provenance can lead to better security.
The choice of how much provenance to collect not just has security implications, but it also affects usability.
Moreover, these factors have real dollar costs that can be associated with them, from the cost of storage to hold large provenance data, to total costs of ownership [27], to the opportunity cost of lost computing cycles and potentially reduced user productivity.In response to this reality, the third thrust of the EEPS work is to create an extensive framework to measure performance and other costs.
Here we wish to answer, for a given environment and set of request, "how much does provenance cost?"
EEPS is instrumented with sensors profiling of every possible provenance collection decision we build in this project; this would be helpful in performance optimizations and cost modeling.
Using collected data, we intend to build cost models to help users decide how much real money they want to spend to collect a certain amount of provenance.
This effort can further be divided into four sub-tasks.
We are profiling the CPU overheads, memory space, network bandwidth, and storage space required for every possible provenance item collected by EEPS [4,20,21,25,30,31,35].
We are enhancing our profiling apparatus to integrate with the provenance collection LSM methods and report associated space and time costs at a fine granularity.
These tools allow us to pinpoint specific code paths and functions which are responsible for overheads.Second, we use the profiling information we collect in two ways: (a) to find out where EEPS adds the most overhead, and focus on optimizing those code paths, and (b) to allow users to make meaningful decisions.
We are collecting and analyzing profiling information on a large set of micro-and macro-benchmarks belonging to different scientific domains: bio-informatics, cosmology, data mining, atmospheric modeling, quantum chemistry, fluid dynamics, molecular dynamics, etc.-as well as traditional file system/storage benchmarking-and finally on POSIX compliance test suites.Third, we are building several cost models that associate real dollar costs with provenance collection and processing.To empower users to make the best provenance-collection decisions, we will associate as many real dollar costs as possible to individual provenance-collection and processing tasks.
We will allow users to input and update these costs, and also provide our own cost tables, based on trends and industry best practices.
With this cost model, and our exhaustive performance profiles, users could pose "what if" questions to EEPS-reviewing the potential impact on real costs before choosing any provenance-security policy.Fourth, we are enhancing our tools to capture profiles in a distributed fashion.
These profiles will be securely transmitted because they are provenance in themselves.
Once profiles are collected from multiple locations, they can be merged to provide a distributed provenance view.
Finally, we are developing and evaluating distributed cost models that incorporate network wide parameters.
There are many possible use models of a provenance system, each of which dictates different system designs.
For illustrative purpose, we highlight our current preliminary system design.
Here we assume the existence of a trustworthy and tamper-proof smart-storage device.
This device coordinates the collection of provenance information with other storage devices in the same system.Consider an example file transfer between two hosts in this hypothetical system illustrated in Figure 2 even greater transparency; for example, a small modification to the host's USB stack can allow for the issuance of trusted commands directly to the disk, which can validate the integrity state of the host prior to allowing provenance operations to occur.
The disk can then uniquely identify the host performing read or write operations even if the host is offline; an administrator can later retrieve the versioned history from the disk.
The challenges preventing widespread deployment of provenance systems include a lack of services for a) securely and accurately generating provenance information within a computing system, b) securely coordinating that collection within distributed systems, and c) understanding and controlling the storage and computational overheads of managing the provenance information.
In this work we propose addressing these challenges through the creation, deployment, and measurement of an endto-end provenance system (EEPS).
Note that we have yet to explore the security and costs associated with the consumption of provenance data.
Issues such as privacy and confidentiality and the inherent information leakage associated with its collection are daunting.
Applications of provenance such as regulatory compliance carry with it provisions not only for monitoring, but also for the correct handling of the provenance data itself.
The exposure of relationships between organizations and data is often as damaging as its corruption.
This is an open area of research we will embrace as application requirements arise from the use of EEPS.Ultimately, societal trust in increasingly distributed information systems such as e-business and e-government requires better tools for accountability.
As we move move toward becoming an electronic society, as more data will be produced, processed and stored digitally, secure and pervasive provenance assurances will be vital in ensuring public trust and ferreting out corruption and data abuse.
We hope this work to constitute a first step in that direction.
This material is based upon work supported by the National Science Foundation under grant numbers CCF-0937944, CNS-0643907, CCF-0937833, CNS-0845192, CNS-0708025, IIS-0803197, CNS-0716608, CNS-0614784, CCF-0621463, and CCF-0937854, as well as an IBM Faculty award, and support from Xerox and Network Appliance.
