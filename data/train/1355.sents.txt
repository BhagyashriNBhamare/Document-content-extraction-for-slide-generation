We show that the default-all propagation scheme for database annotations is dangerous.
Dangerous here means that it can propagate annotations to the query output which are semantically irrelevant to the query the user asked.
This is the result of considering all relation-ally equivalent queries and returning the union of their where-provenance in an attempt to define a propagation scheme that is insensitive to query rewriting.
We propose an alternative query-rewrite-insensitive (QRI) where-provenance called minimal propagation.
It is analogous to the minimal witness basis for why-provenance, straightforward to evaluate, and returns all relevant and only relevant annotations.
Where-provenance Naive witness [2] "SQL interpretation" Standard witness basis (α w ) [2] propagation (α p ) [3] QRI minimal witness basis (α m w ) [2] default-all propagation (α d p ) [1] Figure 1: Particular definitions (naive, standard, QRI) for why-and where-provenance considered in this paper.Due to space constraints and in order to keep this paper to the point, we will assume basic familiarity of the reader with the provenance concepts given in Fig. 1 and not repeat their formal definitions.
Instead, we refer to the detailed survey of Cheney et al. [4] from which we also borrow the running example of Fig. 2 and Fig. 4 (and the milk example after giving a real-world interpretation to the annotations).
Appendix A summarizes the notation used throughout this paper.
as QRI why-provenanceWhy-Provenance identifies witness tuples: "What input tuples contribute to the presence of each output tuple?"
A witness is subset of the input tuples that is sufficient to ensure that a given output tuple t appears in the result of a query.
This definition implies that the whole database is a witness as it is sufficient for t to appear.
The witness basis or why-provenance α w (t, Q) is a subset of only relevant witnesses where the definition by Buneman et al. [2] makes precise what "relevant" means.
Intuitively, those tuples that have been involved in some operation during query evaluation are part of the witness basis.
It turns out that why-provenance is not QRI, and relationally equivalent queries may have different witness bases.
Buneman et al. [2] showed that a subset of the witness basis, called the minimal witness basis and written here as α m w (t, Q), is invariant under rewriting.
It con- sists of all the minimal witnesses in the witness basis, where a witness is minimal if none of its proper subsets is also a witness.
For example, the why-provenance of t 4 in Fig. 2d since {t 1 } ⊂ {t 1 ,t 2 }, and thus, {t 1 ,t 2 } is not minimal.
(a) R A B t 1 1 2 t 2 1 3 t 3 2 2 (b) Q 1 , α w (Q 1 ) A B t 4 1 2 {{t 1 }} t 5 1 3 {{t 2 }} t 6 2 2 {{t 3 }} (c) Q 2 , α w (Q 2 ) A B t 4 1 2 {{t 1 }, {t 1 ,t 2 }} t 5 1 3 {{t 2 }, {t 1 ,t 2 }} t 6 2 2 {{t 3 }} (d) α m w (Q 2 ) {{t 1 }} {{t 2 }} {{t 3 }} (e) α l (Q 2 ) {t 1 ,t 2 } {t 1 ,t 2 } {t 3 }Q 2 in Fig. 2c is α w (t 4 , Q 2 ) = {{t 1 }, {t 1 ,t 2 }}, however α m w (t 4 , Q 4 ) = {{t 1 }} inLineage α l (t, Q) for an output tuple t is a subset of the input tuples which are relevant to the output tuple, where the definition by Cui and Widom [5] makes precise what "relevant" means.
Intuitively, we can get the lineage by taking the union over all witnesses in the whyprovenance.
We write this asα l (t, Q) = α w (t, Q).
For example, α l (t 4 , Q 2 ) = α w (t 4 , Q 2 ) = {{t 1 }, {t 1 ,t 2 }} = {t 1 ,t 2 } in Fig. 2e.
as QRI where-provenanceWhere-provenance focuses on cells (t, A), i.e. tuples t together with an attribute A, and identifies witness cells: "Where (from what cell) does an output tuple value come from?"
Hence, where-provenance of a cell (t, A) consists of locations or values that can be found in tuples of the why-provenance of t.
Since where-provenance was investigated in the context of propagating annotations from input to output cells [3], we write α p (t, A, Q) for whereprovenance (cp.
Fig. 1).
Where-provenance is also not the same for equivalent queries, and there are two distinct issues to consider: (1) The first has to do with the way we write a conjunctive query in SQL (thus called "SQL interpretation" in Fig. 1), and is illustrated with Fig. 3 * p (t 8 , Q 3 ) = {a, c} versus α * p (t 8 , Q 3 ) = {g}.
This problem disappears once we consider Datalog notation, and got taken care of by the definition of propagation rules in [3] which propagate annotations from attributes of both joined tables.
(2) Secondly, certain relational rewrites do not preserve annotation propagation.
Figure 4 gives a detailed example taken from [4] that shows that relationally equivalent queries Q 1 and Q 2 result in different annota- tions of their output (cp.
Fig. 4b vs. Fig. 4c).
(a) R a A B t 1 1 a 2 b t 2 1 c 3 d t 3 2 e 2 f (b) S a A C t 7 1 g 2 h (c) Q 3 , α P (Q 3 ) A B t 8 1 a,c,g 2 h (d) Q 3 SELECT distinct R.A, S.C FROM R,S WHERE S.C = 2 (e) Q 3 SELECT distinct S.A, S.C FROM R,S WHERE S.C = 2In an attempt to define a QRI propagation scheme for where-provenance, Bhagwat et al. [1] define the default-all propagation scheme, written here as α d p (t, A, Q).
Their system DBNotes achieves QRI for where-provenance by including the provenance of all relationally equivalent rewrites Q for a query Q:α d p (t, A, Q) := Q ≡Q α p (t, A, Q )For example, Fig. 4d shows the result annotations for both equivalent queries Q 1 and Q 2 over the input table Fig. 4a in the default-all propagation scheme.
Intuitively, for both Q 1 and Q 2 , default-all propagation returns the where-provenance of the relationally equivalent query Q(x, y) :− R a (x, y), R a ( , y), R a (x, ).
lactose-free milk, but has just heard that traces of radioactive Cesium-137 were found in LF Milk of the local store.
She is worried, and not so without reason.
She queries a community database (Fig. 5a) for the content of LF Milk.
The database includes data and usergenerated annotations.
She wants to make sure that she gets all relevant information and therefore opts for the default-all propagation scheme of user-generated community annotations (she is not familiar with databases and provenance, but "default-all" just sounds like the right thing to do).
The database returns Fig. 5b with two annotations: b and f shown in Fig. 5c and Fig. 5d.
Based on the annotations the database returns, she decides to buy and drink the milk.
Fuyumi is a very reputable friend of hers, and Fuyumi claims in the most recent annotation f that her measurements shows only low levels of radiation.
However, what Hanako does not realize (and what the database does not expose to her) is that Fuyumi's comment has nothing to do with LF Milk.
The comment propagated to the output because the database included annotations from all relationally equivalent queries.
One such query is Q 4 (y) :− R a ( LF Milk , y), R a ( , y), which is responsible for propagating to the output an annotation about Cesium-137 in SC Water, a completely different product.Basically, the default-all propagation scheme has given Hanako semantically irrelevant annotations, based on which she then made the wrong decision.
Why is default-all propagation dangerous?
The reason is a mismatch in the semantics.
Just because two different tuples have the same value in an attribute does not imply that the annotations of those attribute values are related in any way.
And, whereas rewriting the query Q 1 into query Q 2 with an additional (and unnecessary) self-join on table R does not change the output tuples, we now have a join with semantically irrelevant tuples that propagates irrelevant information.
And since the first step of making the scheme QRI (that of avoiding the issue in Fig. 3) propagates annotations from all cells that join, defaultall propagation will make sure that completely irrelevant annotations propagate to the query output.We propose instead the minimal propagation scheme.
Intuitively, for a given output cell (t, A), we intersect the where-provenance α p (t, A, Q) with the annotations in the minimal witness basis α m w (t, Q) on all attributes A contributing to α p .
Written differently:α m p (t, A, Q) := t ∈α m w (t,Q) A ∈attributes of t propagating to cell(t,A) α p t , A , R (t )Here, the expression α m w (t, Q) transforms the minimal witness basis as sets of sets of tuples into a set of tuples (hence, it can be interpreted as a form of QRI lineage).
The overall expression unions from all tuples t in the minimal witness basis, the annotations α p from all attributes A of input table R (t ) from which tuple t propagated values to the cell (t, A).
Since those attributesα m w (t 4 , Q 1 ) = α m w (t 4 , Q 2 ) α w (t 4 , Q 2 ) α w (t 4 , Q 1 ) {t 1 ,t 2 } {t 1 }(a) QRI why-provenance for tuple t 4 in Fig. 2: minimal witness basis α m w in green.
are never changed by rewriting a query into an equivalent query, the output is well-defined and QRI.
The minimal propagation scheme has the following desirable properties:α m p (t 4 , A, Q 1 ) = α m p (t 4 , A, Q 2 ) α d p (t 4 , A, Q 1 ) = α d p (t 4 , A, Q 2 ) α p (Q 2 ) α p (Q 1 ) c a (b) QRI(i) Just like default-all propagation, it is also QRI.
(ii) There is no need to evaluate any rewrite of a given query.
1 (iii) Just as the minimal witness basis for whyprovenance, it considers a minimal and QRI set of values (see Fig. 6).
The intuition is that, among all relationally equivalent queries, those that have no irrelevant self-join (cp.
Q 1 vs. Q 2 in Fig. 4) are the ones that most closely capture the user's actually intended semantics of the query.
For our running example, Fig. 4d and Fig. 4e compare the output of default-all with that of minimal propagation.
For example, both where-provenance and defaultall propagation return {a, c} for output cell (t 4 , A) in query Q 2 .
In contrast, minimal propagation is {a}, because t 1 from R a is the only tuple in the minimal witness basis (α m w (t 4 , Q 2 ) = {t 1 }) with one contributing attribute A. Hence, α m p (t 4 , A, Q 2 ) = α p (t 1 , A, R a ) = {a}.
In our milk example (Example 1), minimal propagation gives the only relevant annotation b.Arguably, the QRI (query-rewrite-insensitive) property of annotation propagation is desirable.
We do not discuss here whether this is indeed the case, but merely point out that, if aiming for QRI, care has to be taken not to trade a meaningful semantics in exchange for this property.We illustrated that the default-all propagation scheme achieves QRI by including annotations from relationally equivalent but somehow irrelevant rewrites.
This can lead to spurious annotations in the output which are semantically irrelevant, and thus can give the user a wrong impression of relevance.
Hence, default-all is dangerous.We proposed minimal propagation which is QRI, has a clean and simple semantics, and propagates all relevant and only relevant annotations to the output.
ninput or output tuple R, S input tables | sets of tuples A, B,C attributes of a table Q i queries or output tables α w (t, Q) why-provenance (witness basis) for tuple t of table Q | if context is known, also used as α w (Q) or α w (t) | set of sets of tuples α m w () minimal witness basis α l (t, Q) lineage of tuple t in table Q | set of tuples R a , S a annotated input tables α p (t, A, Q) where-provenance (propagation) for the value of cell (t, A) of table Q | if context is known, also used as input or output tuple R, S input tables | sets of tuples A, B,C attributes of a table Q i queries or output tables α w (t, Q) why-provenance (witness basis) for tuple t of table Q | if context is known, also used as α w (Q) or α w (t) | set of sets of tuples α m w () minimal witness basis α l (t, Q) lineage of tuple t in table Q | set of tuples R a , S a annotated input tables α p (t, A, Q) where-provenance (propagation) for the value of cell (t, A) of table Q | if context is known, also used as
