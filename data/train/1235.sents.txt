In this paper we propose a fine-grained workflow model, based on context-free graph grammars, in which the dependency relation between the inputs and outputs of a module is explicitly specified as a bipartite graph.
Using this model, we develop an access control mechanism that supports provenance-aware security views.
Our security model not only protects sensitive data and modules from unauthorized access, but also provides the flexibility to expose correct or partially correct data dependency relationships within the provenance information.
Scientific workflows can be complex, and building them from scratch may take a large amount of human effort.
It is therefore common to re-use workflows, or portions of workflows, by creating composite modules that encapsulate shareable sub-workflows.
As observed in [3,4], composite modules can also be used to create views of the provenance information associated with a workflow, showing users the subset of provenance information that is relevant to them and hiding the rest within unexpanded composite module executions.Views can also be used to hide private information, which may include the intermediate data and modules within a composite module as well as the dependencies between the inputs and outputs of the composite module [4].
In this paper, we focus on the use of views to hide this type of information, and call them security views.As an example, consider the workflow shown in Fig- ure 1(a), where {A, B, . . . , H} denote atomic modules, and {y 1 , y 2 , . . . , y 7 } denote the data flowing between the modules.
A security view is constructed by contracting {C, D, E, F } into a composite module M (see Fig- ure 1(b)).
By doing so, {y 3 , y 4 , y 5 } and {C, D, E, F } are hidden from unauthorized users.
Additionally, the exact dependencies between inputs and output of M are hidden, since without additional information the only assumption that one can make is that every output depends on every input.
Thus, unauthorized users will assume that y 7 depends on y 1 which is false.
In previous work [6], composite modules that introduce false dependencies between inputs and outputs were considered bad (unsound), and were corrected by splitting them into smaller sound ones, so that the dependencies between accessible data (i.e., provenance information) were preserved.
In contrast, we argue in this paper that unsound composite modules may be useful for security, so that sensitive data and provenance information are protected from unauthorized access.
On the other hand, users who are authorized to access an unsound composite module should be told correct provenance information, e.g., a user who is authorized to access M should be told that y 7 does not depend on y 1 .
If a user is shown the full provenance information that they are allowed to access (e.g., an authorized user is shown Figure 1(a)), then clearly they will be able to analyze the data and module dependencies (as given by their allowed view).
However, since provenance is large we wish to support efficient techniques for determining such dependencies.
(e.g., using labeling schemes [1,2]).
In particular such techniques should support the following features: 1) multiple input and output data for modules; 2) hiding exact dependencies between inputs and outputs of composite modules; and 3) multiple security views over the same workflow.
The problem of efficient access control with security views has been studied in the context of XML [7,5].
However, our problem is more challenging since workflows have general DAG structure.The rest of this paper is organized as follows.
We present a fine-grained workflow model based on contextfree graph grammars in Section 2.
The graph grammar replaces a bipartite graph representing the dependency relation between inputs and outputs of a module with a graph with the same number of inputs and outputs, but a possibly different dependency relation.
1 On top of this model, we develop in Section 3 an access control mechanism that supports provenance-aware security views.
Section 4 presents some initial thoughts on the problem of efficiently querying data provenance on security views.
We conclude with Section 5.
In this section, we present the fine-grained workflow model.
The main idea is to define a workflow as a context-free graph grammar G using graph-based production rules, in such a way that the graph language L(G) corresponds exactly to the set of all possible executions of this workflow (a.k.a. workflow runs).
We start by describing basic workflow components and then introduce our context-free graph grammar.
The basic building blocks of a workflow are modules.
Each module has a fixed set of input ports and a fixed set of output ports, and performs some data transformation from the inputs to the outputs.
The dependency relation between them is specified by a set of dependency edges.
Definition 1.
A module is a directed bipartite graph M = (I ∪O, E), where I and O are disjoint sets of input ports and output ports, respectively, and E ⊆ I × O is a set of dependency edges.
Figure 2(a) has two input ports and two output ports, which are denoted by solid and hollow circles, respectively.
S takes as input two data items, d 1 and d 2 (one per input port), and produces two data items, d 3 and d 4 (one per output port).
Dependency edges are denoted by dashed edges.In principle, a module can be defined as an arbitrary bipartite graph from the set of input ports to the set of output ports.
However, certain constraints are natural in practice.
For example, every input should be used (i.e. each input port has at least one outgoing dependency edge), and no output should be constant (i.e. every output port must have at least one incoming dependency edge).
A simple workflow is a set of modules which are connected by data edges.
Each data edge connects an output port of one module to an input port of another module, and carries a unique data item that is produced by the former and then consumed by the latter.
Note that two restrictions are imposed on the set of data edges in a simple workflow: (1) they are pairwise non-adjacent, that is, every input or output port is incident to at most one data edge; and (2) they do not introduce cycles among the modules.
The restrictions are not necessary, but simplify the discussion, as shown in Appendix A.
In the rest of this paper, we use the following notation.
Given a finite set Σ of modules, Σ * denotes the set of all simple workflows consisting only of modules chosen from Σ.
Given a simple workflow W , I W and O W denote the set of input ports and output ports, respectively, of W which are not connected by any data edge.
Since each data edge carries a unique data item, we will use the data item name to refer to both the input port and the output port for the data edge, e.g., I B = {d 6 , d 7 }.
In addition, we may write a simple workflow as a function over its component modules, e.g., W 1 (A, B, C, D).
A simple workflow can be abstracted as a composite module that is used to form other (more complex) simple workflows.
It is captured by a graph-based production.
Note that M and W must have the same interface (i.e., the same number of input ports and output ports), however, they may or may not have the same dependency relation between the input ports and output ports.Definition 4.
A graph-based production M f − → W is said to be consistent if for any input port i ∈ I M and any output port o ∈ O M , o is reachable from i in M if and only if f (o) ∈ O W is reachable from f (i) ∈ I W in W ; otherwise, it is said to be inconsistent.
Example 3.
Consider a graph-based productionS f1 − → W 1 (A, B, C, D)where S and W 1 are shown in Figure 2, andf 1 = {(d 1 , d 6 ), (d 2 , d 5 ), (d 3 , d 13 ), (d 4 , d 12 )}It is easy to check that this production is consistent.A complex workflow may, in general, involve a nested hierarchy of simple workflows.
We therefore model a workflow specification as a context-free graph grammar which contains a finite set of graph-based productions.Definition 5.
A workflow specification is defined as a context-free graph grammar G = (Σ, ∆, P, S), where Σ is a finite set of modules, ∆ ⊆ Σ is a set of compositemodules, P = {M f − → W | M ∈ ∆, W ∈ Σ * }is a finite set of productions, and S ∈ Σ is a start module.Example 4.
Using Figures 2 and 3, we can build the workflow specification G = (Σ, ∆, P, S), where Σ = {S, A, B, C, C , D, E, F }, ∆ = {S, B, C} and P = {r 1 , r 2 , r 3 , r 4 } is defined as follows.S f1 − → W 1 (A, B, C, D) (r 1 ) f 1 = {(d 1 , d 6 ), (d 2 , d 5 ), (d 3 , d 13 ), (d 4 , d 12 )} B f2 − → W 2 (E, F ) (r 2 ) f 2 = {(d 6 , d 17 ), (d 7 , d 14 ), (d 10 , d 18 ), (d 9 , d 15 )} C f3 − → W 1 (A, B, C, D) (r 3 ) f 3 = {(d 9 , d 6 ), (d 8 , d 5 ), (d 11 , d 13 ), (d 12 , d 12 )} C f4 − → W 3 (C ) (r 4 ) f 4 = {(d 9 , d 19 ), (d 8 , d 20 ), (d 11 , d 21 ), (d 12 , d 22 )}An execution of a workflow is generated from the specification G = (Σ, ∆, P, S) as follows.
It begins with the start module S, and applies a sequence of productions in P to replace all composite modules with the corresponding simple workflows.
For recursive productions, multiple instances of one module may be created.To formally define the execution, we first explain the graph derivation.
Consider a context-free graph grammar G = (Σ, ∆, P, S).
Given two simple workflows W 1 , W 2 ∈ Σ * , W 2 is said to be directly derived from W 1 with respect to G, denoted by W 1 ⇒ G W 2 , if there is a production M f − → W in P such that W 2 can be obtained from W 1 by replacing one composite module M with a simple workflow W .
Note that the replacement is unambiguous given the one-to-one mapping f .
Let ⇒ * G be the reflexive and transitive closure of ⇒ G , then W 2 is said to be derived from W 1 with respect to G if W 1 ⇒ * G W 2 .
The set of (all possible) workflow runs with respect to a specification is modeled as the graph language of the corresponding context-free graph grammar.
More precisely, it consists of all simple workflows that can be derived from the start module and contain only atomic (non-composite) modules.Definition 6.
The set of workflow runs with respect to a workflow specification G = (Σ, ∆, P, S) is defined as Figure 4.
It can be derived from the start graph S by the sequence of productions r 1 , r 2 , r 3 , r 2 , r 4 .
Since r 3 is recursive, it may be applied any times in a run.L(G) = {W ∈ (Σ \ ∆) * | S ⇒ * G W } A D x11 This section presents the access control mechanism which can be used with our workflow model to support provenance-aware security views.
First, we introduce the notions of access control policies and security views.An access control policy specifies the level of granularity at which a group of users is authorized to see a workflow.
In terms of the context-free graph grammar, it is defined as a subset of composite modules that the group of users is allowed to open.Definition 7.
An access control policy for a workflow specification G = (Σ, ∆, P, S) is a subset U ⊆ ∆ of composite modules.An access control policy enforces a security view over the workflow specification (abbr.
secure specification) by restricting the context-free graph grammar to a subset of composite modules so that only the productions for replacing these modules are included.Definition 8.
A security view, enforced by an access control policy U , over a workflow specification G = (Σ, ∆, P, S) is defined as a context-free graph grammarG U = (Σ, U, P U = {M f − → W ∈ P | M ∈ U }, S)Example 6.
Consider an access control policy U 1 = {S, C} for the workflow specification G given in Example 4.
The secure specification is denoted byG U1 = (Σ, {S, C}, {r 1 , r 3 , r 4 }, S)Similarly, an access control policy enforces a security view over the workflow run (abbr.
secure run) by restricting the graph derivation to a subset of productions.
Definition 9.
Let G U = (Σ, U, P U , S) be a security view, enforced by an access control policy U , over a workflow specification G = (Σ, ∆, P, S).
Let W ∈ L(G) be a workflow run which is derived from the start module S by a sequence ξ of productions.
Then a security view, enforced by U , over W is defined as a workflow run W U ∈ L(G U ) which is derived from S by a subsequence of ξ restricted to P U 2 .
Example 7.
The security view W U1 , enforced by the access control policy U 1 (Example 6), over the workflow run W ∈ L(G) (Example 5), is shown in Figure 5.
It is derived from S by a sequence of productions r 1 , r 3 , r 4 .
The overall security model is as follows.
Given a workflow run W ∈ L(G) and an access control policy U , only the module instances and data items which are 2 More precisely, the subsequence of ξ contains only productions which are in P and depend only on productions in P. visible in the secure run W U are exposed to the users authorized by U .
For example, in Figure 5, the instances of modules E and F and the data items x 4 and x 9 are hidden from the users authorized by U 1 .
Furthermore, the secure specification may also be provided to authorized users to describe the inherent structure of a workflow.
In future work, we will address the question of how to efficiently query data provenance using security views.
The type of queries we consider are those which ask if one data item depends on another.
The query must be answered using only the information (i.e., the security view) that is exposed to the user.
As a result, users authorized by different policies may get different answers for the same query.
It captures the information hiding that one intended when defining the security view.Example 8.
Returning to our example, consider two access control policies U 1 = {S, C} and U 2 = {S, B, C}.
The secure runs W U1 and W U2 are shown in Figures 5 and 4, respectively.
The answer to whether x 11 depends on x 8 is "yes" for U 1 because there is a sequence of data items x 8 , x 5 , x 10 , x 11 that are connected by dependency (dashed) edges in Figure 5, but the answer is "no" for U 2 .
The fact that the answer to a query depends on the access control policy is caused by inconsistent productions (Def.
4).
Given that the composite modules in an access control policy are transparent to authorized users, we can rewrite the dependency relations of these modules without changing the answers to any data dependency queries for this group of users.
For some access control policies, it is possible (and beneficial) to do so to make all productions in the secure specification consistent.
We believe that rewriting is key to optimize the dependency queries.Definition 10.
An access control policy U is said to be safe, if one can rewrite the dependency relations of composite modules in U so that all productions in P U (defined in G U ) are consistent; otherwise, U is unsafe.Example 9.
In the running example, U 1 = {S, C} is safe (no rewriting is needed), but U 2 = {S, B, C} is unsafe.
Clearly, an access control policy that enforces a non-recursive secure specification is always safe.
As an example, U 3 = {S, B} is safe (by rewriting B and S).
Our initial investigation shows that safety is a crucial property that enables efficient query processing.
This paper presents a fine-grained workflow model that supports provenance-aware security views.
Using this model, a workflow can be exposed at different granularity levels to groups of users, depending on their authorized access control policies.
More importantly, our provenance-aware security model not only protects sensitive data from unauthorized access, but also provides the flexibility to expose correct or partially correct data provenance.
Our future work is to develop techniques for efficiently querying data dependency on security views.
To show that both adjacent data edges and cycles (loops) can be effectively captured by our workflow model (as claimed in Section 2.1), we describe how to encode by graph-based productions two simple forms of linear selfrecursion, called loop and fork.
They are typical executions in scientific workflows, creating multiple instances of a module in series and in parallel, respectively.Generally, a linear self-recursion can be expressed by the following two productionsM f1 − → W 1 (M ) and M f2 − → W 2where W 1 (M ) denotes a simple workflow in which the module M appears exactly once, and W 2 denotes a simple workflow that does not contain M .
where W 1 and W 2 are shown in Figure 6.
In general, L = L is a loop module with m input ports and n output ports.
Then C is a connection module with n input ports and m output ports, which ensures that two consecutive iterations are well-connected.
Note that although a simple workflow defined in a specification is required to be acyclic (Definition 2), using the above rules, the loops can be effectively captured by our workflow model.
Similarly, a fork is expressed byF f1 − → W 1 (I, F , F, O) and F f2 − → W 2 (F )where W 1 and W 2 are shown in Figure 7.
In general, F = F is a fork module with m input ports and n output ports.
I and O are two auxiliary modules that distribute and collect the input and output data set.
They also ensure that W 1 provides the same interface as F (rather than having 2m input ports and 2n input ports).
Also note that such auxiliary modules can be used to capture adjacent data edges (Definition 2).
For example, if k data edges are connected to the same input port, we can simply insert an auxiliary module with k input ports and one output port to perform certain aggregation on the k data items before sending them to the next module.
