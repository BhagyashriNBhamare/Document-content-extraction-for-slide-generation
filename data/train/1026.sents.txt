This paper studies throughput maximization in networks with dynamically changing congestion.
First, we give a new and simple analysis of an existing model where the bandwidth available to a flow varies multiplicatively over time.
The main contribution however is the introduction of a novel model for dynamics based on concepts of network calculus.
This model features a limited form of amortization: After quiet times where the available bandwidth was roughly constant, the congestion may change more abruptly.
We present a competitive algorithm for this model and also derive a lower bound.
The problem of avoiding congestion in the Internet has been studied with zeal for many years.
The TCP congestion control mechanism of todays Internet successfully employs a window-based scheme to prevent the Internet from being overloaded.
Thereby, the size of the so-called TCP congestion window is an approximation of the available network capacity.
When TCP suffers a packet loss, it assumes that the network is congested and reduces the window's size.
Consequently, the sending rate is cut down, and the Internet hosts collaboratively alleviate the load.In the past, the transport layer and in particular the congestion problem was first studied empirically, and later embraced by the queuing theory and control theory communities.
In order to analyze and compare protocols theoretically, a traffic model is needed.
Queuing and control theory researchers have refined their early Poisson traffic models to an astonishing level of detail.
However, probabilistic models are intricate to analyze.
Probabilistic models that are simple enough to be analytically tractable might never model traffic accurately enough, as the nature of network traffic is self-similar and bursty [18].
In their seminal paper Karp, Koutsoupias, Papadimitriou, and Shenker [10] have proposed to study congestion control from a worst-case perspective instead.
Karp et al. model congestion control as an online game between a flow and an adversarial network.
In particular, the available bandwidth of the network changes over time and the 񮽙 Research supported by the Swiss National Science Foundation.flow gets only a limited feedback-namely, whether packets have been lost or notabout the currently available bandwidth.In this paper, we follow the algorithmic online approach proposed by Karp et al. [10] to broaden our understanding of congestion control.
We build upon [10] by focusing on the dynamics of congestion.
In particular, we integrate a notion of bursts happening in a worst-case manner.
Although we do not claim that our models accurately represent what happens in the Internet, we believe that they are interesting and may ignite a further discussion on future variants of congestion control.Concretely, after a new analysis of a model by Karp et al., we introduce the burst model: Instead of considering an adversary which always changes the bandwidth similarly each round, our adversary may accumulate some power in quiet rounds and then change the congestion more abruptly in later rounds.
For this adversary, a lower as well as an upper bound are derived for the competitive ratio.The paper is organized as follows.
Section 2 reviews related work and also gives a short overview of the relevant network calculus concepts.
After setting the stage in the model section (Section 3), we study the case of multiplicatively changing congestion in Section 4.
In Section 5 our new model is presented in detail and analyzed.
We state open problems in Section 6 and conclude the paper in Section 7.
TCP lies at the heart of today's Internet, and many aspects of TCP are still subject to active research.
For a reference on TCP, we refer the reader to [17].
TCP congestion control has been studied intensively, both from an empirical and from a theoretical perspective.
Due to space constraints, we are bound to concentrate on the closest related work only.In our work, we analyze congestion control from a worst-case perspective using competitive analysis.
Generally, we think that a better algorithmic (worst-case) understanding of the transport layer is necessary.
Whereas all other layers have received quite a lot of attention in the past (e.g., cf. [2] for the link layer, and [15] for the network layer), there has been comparatively little algorithmic networking research about the transport layer.
Some notable exceptions are for instance adversarial queuing theory [6], the study of the TCP ACK problem [9], or mechanism design [7].
Our model is due to Karp et al. [10] who define several optimization problems related to congestion control.
The authors investigate the issue of regulating the rate of a single unicast flow when the bandwidth available to it is unknown and changes over time.
In our paper, we extend [10] in two respects: First, we provide a new analysis of a model where the bandwidth changes multiplicatively; our analysis is simpler and gives strict competitive bounds.
Second, we enhance their model with bursts: Thereby, the congestion may change more after a time of quiescence.The work by Karp et al. has already had an interesting follow-up by Arora and Brinkman [4] who study randomized algorithms for a dynamically changing congestion.
In particular, they propose an asymptotically optimal randomized online algorithm against an adversary which may change the congestion by a constant factor in every round.
Unfortunately, they assume a fairly weak oblivious adversary (see also the discussion in Section 6): Their algorithm uses randomization only in the first round, while the sending rate of all other rounds is computed deterministically.
The adversary however is not allowed to be adaptive in these deterministic rounds.The idea that an adversary may accumulate power over time has already appeared in the area of packet routing and is related to the adversarial queuing theory by Borodin et al. [6].
The problem considered there is as follows: Given a packet switched network and an adversary which continuously injects packets that have to be routed from a source to a destination node, how much buffer space is needed at the nodes, and what is the delivery time?
In the paper by Aiello et al. [1], the adversary is allowed to inject any sequence of packets into the network, as long as in any w consecutive rounds, the total load created by the paths associated with the packets inserted in this time period is at most wr on any edge, for some w ≥ 1, r ≤ 1.
The adversary studied by Andrews et al. [3] is similar to our adversary.
Given two parameters b ≥ 1, r ≤ 1, for any T ≥ 1 consecutive time steps, the adversary may inject as many packets as it wants, as long as the total load created by the paths associated with these packets is at most T r + b on any edge.
These two adversary models have been compared by Rosén in [16].
A contribution of our paper is to introduce a modified version of the adversary in [3] on the transport layer.Short Overview of Network Calculus.
We now give a short introduction to those concepts of network calculus which are relevant to our work.
Network calculus is a relatively new technique to analyze deterministic queuing systems found in communication networks.
For a detailed introduction to network calculus, see [14].
In network calculus, there exists the notion of arrival curves which provide deterministic limitations to the network traffic sent by sources.
Given that the data flows indeed correspond to these limitations, it is possible to make statements about the deterministic behavior of the network (maximal delays, maximal queue lengths, etc.).
Arrival curves are defined as follows.
Let R be a data flow, and let R(t) be the total number of bits R has sent until time t. Let α be an increasing function defined for all times t ≥ 0.
We say that R has an arrival curve α if and only if for all s ≤ t:R(t) − R(s) ≤ α(t − s)In other words, the total number of bits sent until time t by flow R may never exceed the bits sent by R until some time s plus α(t − s).
In this paper, we look at a so-called leaky bucket arrival curve defined as α(t) = c 1 t + c 2 for some non-negative constants c 1 , c 2 .
Figure 1 visualizes the constraints imposed upon a flow R by such an arrival curve: The total number of bits sent may increase by c 2 at once and with a rate c 1 over time, unless there is a conflict with a constraint from a previous round.
Informally, the total number of bits must always be less or equal the minimum constraint that arises if the curve α is attached to all points of R(t).
Note that such an arrival curve incorporates a limited form of amortization: If flow R only sends a few bits for several rounds, the constraints of earlier rounds get weaker and allow R to send up to c 2 bits at once in some later round.
In the Internet, there is no central authority allocating bandwidth to hosts.
On the contrary, individual hosts are responsible for setting their sending rate.
1 In this paper, we consider the problem of regulating the rate of a unicast flow from one host to another such that the throughput is maximized.
The bandwidth available to the flow thereby fluctuates according to the varying requirements for bandwidth of other competing flows.
A host is not provided direct information about the competing demands for bandwidth or the Internet topology, but does receive some limited information as to whether the flow is experiencing packet drops, and must determine its transmission rate solely on the basis of this information.We assume that time is divided into infinitely many successive rounds and consider a worst-case model where in every round t, an adversary ADV selects the available bandwidth u t .
Thereby, u t represents the maximum rate at which a host can transmit without experiencing packet drops.
The host on the other hand runs an algorithm ALG which decides the sending rate x t of round t, and receives immediate feedback as to whether packet drops have occurred, i.e., whether x t > u t .
ALG can then choose the rate x t+1 .
We assume a severe cost model [10] where a host cannot transmit anything in round t if x t > u t , but can transmit at a rate x t if x t ≤ u t .
Formally, the gain of ALG in round t is defined as follows:gain ALG (x t , u t ) := 񮽙 x t , if x t ≤ u t 0 , otherwise 1Usually, this is done automatically by TCP.
However, by using the User Datagram Protocol (UDP), selfish programs can try to maximize their own throughput and may have no incentive to reduce congestion collaboratively.
Although it is generally believed that routers are configured to give priority to TCP packets [8]-with the consequence that UDP packets are dropped first if the Internet gets congested-at least in theory it is possible to design networking software from scratch that circumvents this restriction by sending UDP packets which look like TCP packets.An optimal offline algorithm OP T knows the sequence {u t } in advance and achieves a gain of gain OP T (x t , u t ) = u t in round t.
These gains reflect two major issues: The online algorithm experiences an opportunity cost if its sending rate is smaller than the available bandwidth (case x t < u t ), and a retransmission overhead if its packets are dropped due to congestion (casex t > u t ).
We are in the realm of competitive analysis [5] and define the (strict) competitive ratio ρ achieved by ALG as the total amount of data (over all rounds) sent by OP T divided by the total amount of data sent by ALG (cf. Definition 3.1).
[ρ-competitive] We say that an algorithm ALG is (strictly) ρ-competitive compared to an optimal offline algorithm OP T if for all input sequences I, it holds thatgain OP T (I) ≤ ρ · gain ALG (I).
The goal of the online algorithm designer is to minimize ρ.
Henceforth, we will assume that ALG knows the initial bandwidth, i.e., x 0 = u 0 .
Observe that an unrestricted adversary could frustrate every online algorithm by always selecting u t := x t − ε for some arbitrary small ε > 0.
The natural way out proposed by Karp et al. [10] is to assume that the available bandwidth does not change too drastically over time.
In this paper, we study different ways to restrict the adversary.
In Section 4, we consider the multiplicative model proposed by Karp et al.
In Section 5, we extend this model to allow for changes with bursts.We will call rounds t where the online algorithm successfully transmits its packets without loss good rounds, and rounds t where x t > u t bad rounds, cf. Definition 3.2.
Rounds).
A round t where x t ≤ u t is called good, a round t where x t > u t is called bad.
We defer the description of the different adversaries to the corresponding sections.
However, we now define the following class of online algorithms.
x t+1 := 񮽙 G · x t , if x t ≤ u t B · x t , otherwisefor some G ≥ 1 and B ≤ 1.
That is, the algorithm ALG(G, B) increases the rate by a factor G after a good round, and decreases it by a factor B after a bad round.The sending rate x t+1 of an algorithm ALG(G, B) depends solely on the binary feedback whether its probing rate x t was larger than the available bandwidth u t in the previous round or not.
In this section, we look at multiplicative changes of the available bandwidth.
We first consider a model where the adversary can increase the bandwidth at most by a factor μ ≥ 1 per round and can decrease it arbitrarily (cf. Definition 4.1).
Later, we will study a model where also the reduction is constrained multiplicatively (cf. Definition 4.2).
So let's look at the adversary ADV mult (cf. Definition 4.1) proposed by Karp et al. u t+1 in the in- terval [0, u t · μ], i.e., ADV mult : u t+1 ∈ [0, u t · μ],for some given μ ≥ 1.
First, we restate the lower bound given in [10].
Theorem 4.1.
[10] Against ADV mult , no online algorithm can achieve a competitive ratio smaller than μ.Proof.
Consider the following adversary ADV : In every round t, it choosesu t := 񮽙 μ , if x t ≤ 1 1 , otherwiseThus, whenever an online algorithm ALG sends at a rate larger than one, all its packets are dropped because of congestion.
On the other hand, if ALG transmits at a rate of 1 or less, the rate of OP T is at least a factor μ larger.
Moreover, since ADV changes the available bandwidth at most by a factor of μ per round, it is indeed of type ADV mult .
In [10], it is shown that the algorithm ALG(μ,√ μ √ μ+ √ μ−1) yields a competitive ratio ofρ = ( √ μ + 񮽙 μ − 1) 2against ADV mult .
However, [10] uses a different definition for the competitive ratio which allows for (possibly large) additive constants.
By our strict definition (cf. Definition 3.1), the ratio can be much larger.
To see this, assume an adversary which reduces the available bandwidth in every round by a factor slightly larger than√ μ+ √ μ−1 √ μ .
In this case, ALG(μ, √ μ √ μ+ √ μ−1) is only successful in the first round, and hence gain ALG = u 0 , whilegain OP T ≈ u 0 · ∞ 񮽙 i=0 ( √ μ √ μ + √ μ − 1 ) i .
Therefore, the (strict) competitive ratio isρ = gain OP T gain ALG ≈ √ μ + √ μ − 1 √ μ − 1 .
For small μ, ρ can get very large (for instance ρ > 100 if μ = 1.0001).
In the following, we give a simple proof that the algorithm ALG(μ, 1/2) has a strict competitive ratio 4μ.
According to Theorem 4.1, this is asymptotically optimal.
Proof.
First, we show by induction that in every good round t, u t ≤ 2μx t .
For t = 0, u 0 = x 0 and the claim holds.
For the induction step, consider the round t − 1 before the good round t.
There are two possibilities: either round t−1 has been bad (x t−1 > u t−1 ) or good (x t−1 ≤ u t−1 ).
If round t − 1 has been bad, we have x t = x t−1 /2 and u t ≤ u t−1 μ < x t−1 μ = 2μx t , hence u t /x t < 2μ, and the claim holds.
If on the other hand round t − 1 was good, the algorithm increases the bandwidth at least as much as the adversary.
Together with the induction hypothesis, the claim also follows in this case.Having studied the gain in good rounds, we now consider bad rounds.
We show that in the bad rounds following a good round t, the adversary can increase its gain at most by 2μx t .
So let t be the good round preceding a sequence of bad rounds, i.e., x t ≤ u t , x t+1 > u t+1 , x t+2 > u t+2 , etc.
We know that x t+1 = μx t , so-because it is a bad round-u t+1 must be smaller than μx t .
Furthermore, we have x t+2 = x t+1 /2 = μx t /2 and hence u t+2 < μx t /2, x t+3 = μx t /4 and hence u t+3 < μx t /8, and so on.
By a geometric series argument, the gain of the adversary in the bad rounds is upper bounded by 2μx t .
Therefore,ρ = gain OP T (good) + gain OP T (bad) gain ALG (good) < 2μ · gain ALG (good) + 2μ · gain ALG (good) gain ALG (good) < 4μ.
To conclude this section, we give another kind of proof to show that the algorithm ALG(μ, 1/μ 3 ) has a good competitive ratio for small μ.
For our analysis, we assume a slightly more restricted adversary ADV * mult (cf. Definiton 4.2).
Definition 4.2 (ADV * mult ).
ADV * mult chooses the new bandwidth u t+1 from the inter-val [u t /μ, u t · μ], i.e., ADV * mult : u t+1 ∈ [u t /μ, u t · μ].
Theorem 4.3.
ALG(μ, 1/μ 3 ) is (μ 4 + μ)-competitive against ADV * mult .
Proof.
The fact that ALG reduces its rate by a factor μ 3 after a bad round implies that the next round is always good: Assume, for the sake of contradiction, that round t + 1 is the first bad round following another bad round t, which-by the induction hypothesis-follows a good round t − 1.
Hence,x t−1 ≤ u t−1 .
Moreover, observe that u t+1 ≥ u t /μ ≥ u t−1 /μ 2 , but on the other hand, x t+1 = x t /μ 3 = μx t−1 /μ 3 = x t−1 /μ 2 .
Therefore, x t+1 ≤ u t+1 .
Contradiction!We now first analyze the gain of a good round t and show that u t < μ 4 x t .
There are two cases: Either round t − 1 has also been good, or not.
If it has been a good round, then round t is at least as competitive as round t − 1 because x t = μx t−1 .
If on the other hand round t − 1 has not been good, we have u t−1 < x t−1 , x t = x t−1 /μ 3 and u t ≤ μu t−1 .
Therefore, x t = x t−1 /μ 3 > u t−1 /μ 3 ≥ u t /μ 4 , and the claim follows.Next, we study the gains in a bad round t.
In this case, it holds that u t < μx t−1 : Since x t−1 ≤ u t−1 , x t = μx t−1 and u t < x t , and hence u t < μx t−1 .
Therefore,ρ = gain OP T (good) + gain OP T (bad) gain ALG (good) < μ 4 · gain ALG (good) + μ · gain ALG (good) gain ALG (good) = μ 4 + μ.Since ADV * mult is a special case of ADV mult , Theorem 4.2 also applies for ADV * mult .
Hence, it is possible to run ALG(μ, 1/μ 3 ) against ADV * mult if μ is small, and ALG(μ, 1/2) otherwise, which yields the following corollary.Corollary 4.4.
There is a deterministic online algorithm which is min {μ 4 + μ, 4μ}-competitive against ADV * mult .
In this section, we introduce the adversary ADV nc which is based on network calculus [14] concepts.
We will extend the model introduced in Section 4 by a form of limited amortization which allows for more drastic bandwidth changes after times of quiescence.
ADV nc has two parameters: A rate μ ≥ 1 and maximum burst factor B ≥ 1.
In every round, the available bandwidth u t varies according to these parameters in a multiplicative manner.
More precisely, ADV nc can select the new bandwidth u t+1 from the intervalADV nc : u t+1 ∈ [ u t β t μ , u t · β t · μ],that is, the available bandwidth can change by a factor of at most β t μ.
Thereby, β t is the burst factor at time t.
This burst factor is explained next.
On average, the available bandwidth can change by a factor μ per round.
However, there can be times of only small changes, but then the bandwidth changes by factors larger than μ in later rounds.
This is modeled with the burst factor β t : At the beginning, β t equals B, i.e., β 0 = B. For t > 0, the burst factor β t is computed depending on β t−1 and the actual bandwidth change c t−1 that has happened in round t − 1.
More precisely,β t = min{B, β t−1 μ c t−1 } where c t := 񮽙 ut+1 ut , if u t+1 > u t ut ut+1, otherwise This means that if the available bandwidth has changed by a factor less than μ in round t, i.e., c t < μ, the burst factor increases by a factor μ/c t , and hence the bandwidth can change more in the next round-and vice versa if c t > μ.In other words, the adversary can save adversarial power for forthcoming rounds.
However, this amortization is limited as β t never becomes larger than B for all rounds t. Also note that ∀t : β t ≥ 1, as c t ≤ μβ t by the definition of ADV nc .
At first sight, it seems that ADV nc has roughly the same power as ADV * mult : In order to change the bandwidth with a factor larger than μ, ADV nc must have changed the bandwidth by a factor less than μ in previous rounds.
2 However, as we will see in the following, an online algorithm cannot exploit these quiet rounds sufficiently, and the competitive ratio does depend on B. Ω 񮽙 μ √ B/ log B 񮽙 against ADV nc .
Proof.
Consider the following adversary ADV .
ADV will select u t = 1 whenever the burst factor β t is not maximal in a round t, i.e., if β t < B.
If β t = B, ADV continues choosing u t = 1 until x t ≤ 1 for the first time.
Then, if x t ≤ 1 and β t = B, it selects u t = μ √ B but immediately sets the available bandwidth back to u t+1 = 1 in the next round.
Therefore, no online algorithm can ever transmit at a rate larger than 1.
Since ADV must be of type ADV nc , it can do this trick at most every 񮽙log B/ log μ񮽙 rounds: After these two bursts (from 1 to μ √ B and from μ √ B back to 1), the burst factor becomes 1, and it takes 񮽙log B/ log μ񮽙 rounds to increase it again to B: μ i ≥ B ⇔ i ≥ log B/ log μ.Let us call the time period between two rounds where ADV raises the bandwidth from 1 to μ √ B a phase.
In every phase, ALG has a gain of at most gain ALG ≤ 2 + 񮽙log B/ log μ񮽙 .
On the other hand, the optimal algorithm's gain is at leastgain OP T ≥ 1 + 񮽙log B/ log μ񮽙 + μ √ B.Hence,ρ = gain OP T gain ALG ≥ 1 + 񮽙log B/ log μ񮽙 + μ √ B 2 + 񮽙log B/ log μ񮽙 ∈ Ω 񮽙 μ √ B log B 񮽙 .
Note that the lower bound given in Theorem 5.1 even holds for online algorithms which get perfect (instead of only binary) feedback about the bandwidth of the previous round.Although we were not able to find an algorithm which yields a tight upper bound, it can be shown that ALG(μ 3 √ B, 1/2) comes close to the bound of Theorem 5.1.
gain OP T (bad) ≤ ∞ 񮽙 i=0 񮽙 1 2 񮽙 i · μ 3 √ B · gain ALG (good) ≤ 2μ 3 √ B · gain ALG (good) ∈ O 񮽙 μ 3 √ B 񮽙 · gain ALG (good)Next, the good rounds are tackled.
Let t be the last bad round before a good round t + 1.
Hence, x t > u t , x t+1 = x t /2 ≤ u t+1 , and x t+2 = μ 3 √ Bx t /2.
There are two cases: Either round t + 2 is also good, or not.
If round t + 2 is good,u t+2 ≤ μ 2 Bx t .
We have ρ ≤ u t+1 + u t+2 x t+1 + x t+2 ≤ μB + μ 2 B 1/2 + μ 3 √ B/2 ∈ O 񮽙 μB 2/3 More good rounds would reduce this ratio, because ALG grows faster than ADV .
If round t + 2 is not good, it holds that x t > u t and x t+2 = μ 3 √ Bx t /2 > u t+2 .
Now observe that u t+1 < μ 3/2 B 2/3 x t .
Assume, for the sake of contradiction, that u t+1 ≥ μ 3/2 B 2/3 x t .
Then the burst factor in round t + 1 is at most β t+1 ≤ 3 √ B/ √ μ, and thusu t+2 ≥ u t+1 μβ t+1 ≥ μ 3/2 B 2/3 · √ μ 3 √ B · μ x t = μ 3 √ Bx t > x t+2 .
Contradiction.
Hence,ρ ≤ u t+1 x t+1 ≤ μ 3/2 B 2/3 x t x t /2 ∈ O 񮽙 μ 3/2 B 2/3 񮽙 Thus, in conclusion, ρ = gain OP T (good) + gain OP T (bad) gain ALG (good) ≤ O 񮽙 μ 3/2 B 2/3 񮽙 · gain ALG (good) + O 񮽙 μ 3 √ B 񮽙 · gain ALG (good) gain ALG (good) ∈ O 񮽙 μ 3/2 B 2/3 Karp et al. have already pointed out several future research directions, for instance the study of different cost models.
In this paper, we have extended their work by a novel model for the dynamics of the available bandwidth.We believe that our network calculus model opens up many exciting questions.
For example, the lower bound and the upper bound we presented are not tight.
It would be interesting to know if there are asymptotically better online algorithms, or whether our lower bound is too pessimistic.
Another challenge is the design of randomized online algorithms.
In fact, Arora and Brinkman [4] have addressed this problem for the multiplicative adversary ADV mult and presented an algorithm with competitive ratio O(log μ).
By using Yao's minimax principle [5], it can be shown that this is asymptotically optimal.
However, the authors assume a weak oblivious adversary: Their scheme uses randomization only in the first round, while all later rounds are deterministic.
But the adversary is not allowed to be adaptive even in these deterministic rounds!
The case of a stronger adversary is still an open problem.
It is straight-forward to extend the algorithm by Arora and Brinkman for ADV nc : Over-pessimistically, we can assume that ADV nc changes the bandwidth by a factor B · μ in every round, which yields a competitive ratio of O(log(Bμ)).
However, also here, it would be interesting to study a more powerful adversary which can be adaptive in deterministic rounds.Finally, we believe that our network calculus adversary is an interesting model for dynamics in completely different fields of research.
This paper has studied online algorithms which aim at maximizing throughput in the presence of dynamic bandwidth changes.
We have derived an asymptotically optimal algorithm for a multiplicative model.
Moreover, a novel model for the congestion dynamics has been presented together with a lower and an upper bound for the competitive ratio.
We hope that our models will give an impetus for future research.
Generally, we believe that a better algorithmic (worst-case) understanding of the transport layer is necessary.
Whereas all other layers have received quite a lot of attention in the past, the transport layer has always been a step-child of algorithmic networking research.
