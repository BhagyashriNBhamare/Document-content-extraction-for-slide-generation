To implement high-performance global interconnect without impacting the placement and performance of existing blocks, the use of buffer blocks is becoming increasingly popular in structured-custom and block-based ASIC methodologies.
Recent works by Cong, Kong and Pan [5] and Tang and Wong [18] give algorithms to solve the buffer block planning problem.
In this paper, we address the problem of how to perform buffering of global multiterminal nets given an existing buffer block plan.
We give a provably good algorithm based on a recent approach of Garg and Könemann [8] and Fleischer [7] (see also Albrecht [1] and Dragan et al. [6]).
Our method routes connections using available buffer blocks, such that required upper and lower bounds on buffer intervals-as well as wirelength upper bounds per connection-are satisfied.
In addition, our algorithm allows more than one buffer to be inserted into any given connection and observes buffer parity constraints.
Most importantly , and unlike previous works on the problem [5, 18, 6], we take into account multiterminal nets.
Our algorithm outperforms existing algorithms for the problem [5, 6], which are based on 2-pin decompositions of the nets.
The algorithm has been validated on top-level layouts extracted from a recent high-end microprocessor design.
Process scaling leads to an increasingly dominant effect of interconnect on high-end chip performance.
Each top-level global net must undergo repeater insertion (among other optimizations; see [4,11,14]) to maintain signal integrity and reasonable signal delay.
1 Estimates of the need for repeater insertion range up to O10 6 repeaters for top-level on-chip interconnect when we reach the 50nm technology node.
These repeaters are large (anywhere from 40 to 200 minimum inverter size), affect global routing congestion, can entail non-standard cell height and special power routing requirements, and can act as noise sources.
In a block-or reuse-based methodology, designers seek to isolate repeaters for global interconnect from individual block implementations.For these reasons, a buffer block methodology has become increasingly popular in structured-custom and block-based ASIC methodologies.
Two recent works by Cong, Kong and Pan [5] and Tang and Wong [18] give algorithms to solve the buffer block planning problem.
Their buffer block planning formulation is roughly stated as follows: Given a placement of circuit blocks, and a set of two-pin connections with feasible regions 2 for buffer insertion, plan the location of buffer blocks within the available free space so as to route a maximum number of connections.
In another recent development, Dragan et al. [6] give an algorithm for performing global buffered routing of two-pin nets under an existing buffer block plan.In this paper, we address the problem of how to perform buffering of global multiterminal nets given an existing buffer block plan.
(Hence, our work is compatible with and complements the methods in [5,18,6].)
We give a provably good algorithm based on a recent approach of Garg and Könemann [8] and Fleischer [7].
Our method routes the nets using available buffer blocks, such that required upper and lower bounds on repeater intervals-as well as length upper bounds per connection-are satisfied.
3 In addition, our algorithm observes repeater parity constraints, i.e., it will choose to use an inverter or a buffer (= co-located pair of inverters) according to source and destination signal parity.
The authors of [5,18,6] assumed that global nets have been already decomposed into two-pin connections; unlike these works our model takes into account multiterminal nets.Informally, our problem is defined as follows.
Given:񮽙 a planar region with rectangular obstacles; 񮽙 a set of nets in the region, each net has: -a single source and multiple sinks; -a non-negative importance (criticality) coefficient; 񮽙 each sink has:-a parity requirement, which specifies the required parity of the number of buffers (inverters) on the path connecting it to the source; -a timing-driven requirement, which specifies the maximum number of buffers on the path to the source; 񮽙 a set of buffer blocks, each with given capacity; and 񮽙 an interval 񮽙L;U 񮽙 specifying lower and upper bounds on the distance between buffers.Global Routing via Buffer Blocks (GRBB) Problem: route a subset of the given nets, with maximum total importance, such that: 񮽙 the distance between the source of a route and its first repeater, between any two consecutive repeaters, respectively between the last repeater on a route and the route's sink, are all between L and U; 񮽙 the number of trees passing through any given buffer block does not exceed the block's capacity; 񮽙 the number of buffers on each source-sink path does not exceed the given upper bound and has the required parity; to meet the parity constraint two buffers of the same block can be used.If possible, the optimum solution to the GRBB problem simultaneously routes all the nets.
Otherwise, it maximizes the sum of the importance coefficients over routed nets.
The importance coefficients can be used to model various practical objectives.
For example, importance coefficients of 1 for each net correspond to maximizing the number of routed nets, and importance coefficients equal the number of sinks in the net correspond to maximizing the number of connected sinks.The GRBB problem can be formulated as a generalized version of (vertex-capacitated) integer multiterminal multicommodity flow (MTMCF).
The main contribution of this paper is an MTMCF based algorithm for the GRBB problem.
Prior to our work, multicommodity flow (MCF) based heuristics have been applied to VLSI global routing [13,17,2,9,1].
As noted in [12], the applicability of these algorithms has often been limited to problem instances of relatively small size by the prohibitive cost of solving exactly the fractional relaxation.
Following [1,6], we avoid this limitation by using an approximate MTMCF algorithm based on results in [8,7].
An important feature of our algorithm is that it allows for a smooth trade-off between running time and solution accuracy.
Our experiments indicate that even MTMCF solutions with very low accuracy give good final solutions for the GRBB problem.The most interesting feature of our algorithm is its ability to work with multiterminal nets.
Previous work on the GRBB problem [5,18,6] has considered only the case of 2-pin nets.
Experiments on top-level layouts extracted from a recent high-end microprocessor design validate our MTMCF algorithm, and indicate that it significantly outperforms existing algorithms for the problem [5,6].
The rest of the paper is organized as follows.
In Section 2, we reduce the Global Buffering Problem to a generalized version of integer multiterminal multicommodity flow.
The fractional relaxation of this problem is a special case of packing LP, and can thus be approximated within any desired accuracy using the algorithm of Garg and Könemann [8].
In Section 3 we present a faster approximation algorithm, obtained by extending the ideas of Fleischer [7] to this special type of packing LPs.
In Section 4 we describe the randomized rounding algorithm used to convert near-optimal fractional MTMCF solutions to near-optimal integral solutions.
In Section 5 we describe several global buffering heuristics, some based on the MTMCF approach, and some based on less sophisticated greedy ideas.
In Section 6 we give the results of an experimental comparison of these heuristics on test cases extracted from the top-level layout of a recent high-end microprocessor.
Finally, we conclude in Section 7 with a list of open research directions.
Given T = S K k=1 T k .
For each T 2 T k , k = 1; : : : ; K, define gT := g k , where g k is the importance of N k .
The GRBB problem is then equivalent to the following integer linear program:maximize ∑ T 2T gT f T subject to ∑ T 2T π T v f T cv 8v 2 V f T 2 f 0; 1g 8T 2 T .
where f T = 1 if the tree T is used in the solution and f T = 0 otherwise, and π T v is the number of occurrences of v in T , i.e.,π T v := 8 񮽙 :0; if v = 2 T 1; if v 2 T and loop vv is not in T 2; if v 2 T and loop vv is in T Our approach will be to solve the relaxation of the above integer program obtained by replacing the integrality constraint with f T 0 8T 2 T ; we will then use randomized rounding to obtain an integer solution.
We will refer to this relaxation as the Multiterminal Multicommodity Flow Linear Program (MTMCF LP).
Although the MTMCF LP is solvable in polynomial time (using, e.g., the ellipsoid algorithm), exact algorithms are highly impractical.
On the other hand, the MTMCF LP is a special case of packing LP, and can thus be efficiently approximated within any desired accuracy using the recent combinatorial algorithm of Garg and Könemann [8].
In this paper we give a significantly faster approximation algorithm based on a speed-up idea due to Fleischer [7].
Fleischer's idea, originally proposed for approximating the maximum edge-capacitated MCF, has been recently extended [1,6] to edge-capacitated multiterminal MCF and vertex-capacitated MCF, respectively.
Here we take this approach further and show how to use it for efficient approximation of vertex-capacitated multiterminal multicommodity flow.
Our MTMCF approximation algorithm simultaneously solves the MTMCF LP and its dual LP; the dual solution is used in proving the approximation guarantee of the algorithm.
The dual of the MTMCF LP is:minimize ∑ v2V wvcv subject to1 gT ∑ v2T wv 1 8T 2 T wv 0 8v 2 V .
The dual LP can be viewed as an assignment of non-negative weights, w, to the vertices of G such that the weight of any tree T 2 T is at least 1; the objective is to minimize the sum ∑ v2V wvcv.
Here, the weight, weightT , of the tree T is the sum of the weights of vertices forming this tree (if the tree uses a loop vv then vertex v contributes twice to this sum) divided by the importance gT of this tree.
Denote Dw = ∑ v2V wvcv and let αw be the weight of a minimum weight tree from T (with respect to w).
The dual problem is equivalent to finding a weight function w : V !
R + such that β = Dw αw is minimized.
In the following we will assume that minfg k : k = 1; : : : ; Kg = 1-this can be easily achieved by scalingand will denote by Γ the maximum g k .
Our algorithm for MTMCF approximation is given in Fig. 1.
In the algorithm, f k v denotes how many times vertex v is visited by feasible Steiner trees used to connect net N k , and f denotes the total number of feasible Steiner trees used by the algorithm.
The algorithm associates a weight with each vertex, and in each iteration it uses a minimum weight tree T 2 T k to connect the pins of some net N k .
When tree T is selected, the algorithm multiplies the weight of every vertex in T by 1 + ε cv for a fixed ε (if this tree uses a loop vv, then the weight of v is multiplied by 1 + 2ε cv ).
Initially, every vertex v has weight δ for some constant δ.
Thus, the more often is a vertex used, the larger its weight, which implies that often used vertices are less likely to be part of future minimum weight trees.
According to Garg and Könemann's approximation algorithm [8], each iteration must use a lightest (with respect to current weight function w) tree from T if the weight of this tree is less than 1=Γ.
The algorithm then stops after t iterations where t is the smallest number such that αw, computed with respect to vertex weights w of this iteration, is at least 1=Γ.
We extend an idea due to Fleischer [7] to our vertex-capacitated MTMCF problem to reduce the number of minimum weight tree computations during the algorithm.
Instead of finding the lightest tree in T in each iteration (which essentially involves K shortest-path computations) we settle for some tree within a factor of (1 + 2ε) of the lightest, and show that this still leads to a similar approximation guarantee.Let w i,1 be the weight function at the beginning of the ith iteration.
We have w 0 v = δ for each v 2 V .
For brevity denote αw i and Dw i by αi and Di, respectively.
Following Fleischer, we cycle through the nets, sticking with a net until the lightest feasible Steiner tree for that net is above a 1 + 2ε factor times a lower bound estimate of the overall lightest tree.
Let ¯ αi be a lower bound on αi.
minimum weight feasible Steiner tree computations are used to update α over the course of the algorithm.
Fig. 1 is a 1 + ω-approximation algorithm for the MTMCF LP by choosing δ = 1 + 2ε1 + 2εLΓ , 1 2ε and ε Our proof is an adaptation of the proof of Garg and Könemann [8] (see also Fleischer [7] cv M 2 = δ1 + 2ε cv cv M 2cv δ1 + 2ε M 2cv :The last time we increased the weight of v, it was on a feasible Steiner tree of weight less than 1=Γ.
Hence, the weight of v was less than 1.
Since in each iteration we increase the vertex weight by factor of at most 1 + 2ε, the final weight of v is at most 1 + 2ε.
Consequently,δ1 + 2ε M 2cv w t v 1 + 2ε; i.e., M cv2log 1+2ε 1 + 2ε δ :Now we show that the ratio of the values of the dual and the primal solutions,γ = β f 2log 1+2ε 1+2εδ , is at most 1 + ω.For each iteration i 1 we have For the last inequality the fact 1 + x e x for x 0 is used.Since we stop at iteration t with αt 1=Γ, and t = f , we get Since 1 + 2ε1 , 2ε ,2 is at most 1 + 8ε, for ε 񮽙 : 07, and 1 + 8εΓ should be no more than our approximation ratio 1 + ω, we are done.In the algorithm in Fig. 1 In the previous section we presented an algorithm for approximating the optimum multiterminal multicommodity flow (MTMCF) within any desired accuracy.
The optimum MTMCF gives an upperbound on the maximum number of routable nets (connections).
In this section we show how to use the approximate MTMCF to route an almost optimal number of nets (resp.
connections).
Our construction is based on the randomized rounding technique of Raghavan and Thomson [16], in particular, on the random-walk based algorithm for rounding multicommodity flow [15] (see also [12]).
The MCF rounding algorithm in [15] chooses a set of source-sink pairs by including each pair s; t with a probability equal to the flow from s to t. Then, for each chosen pair, s; t, the algorithm performs a random-walk from s to t, based on probabilities given by edge-flows.
In our MTMCF rounding algorithm (see Figure 2), a net N k = s k ;t 1 k ; : : : ; t q k k is also routed with probability equal to the net's total flow, f k = ∑ T 2T k f T .
Since we need to construct a tree connecting all sinks t i k to the source s k , we route the net by performing backward random walks from each sink until reaching either s k or a vertex on a path already included in the tree.
Thus, if the net has only one sink, our rounding algorithm becomes identical to the algorithm in [15], except for the direction of the random walk.Ensuring that no vertex capacities are exceeded can be accomplished in two ways.
Following [12], one way is to solve the MTMCF LP with capacities scaled down by a small factor that guarantees that the rounded solution will meet the original capacities with very high probability.
A simpler approach, the so-called greedy-deletion algorithm [6], is to repeatedly drop routed nets that visit over-used vertices until feasibility is achieved.
We implement a modification of the second approach: instead of dropping an entire tree, we drop only the sinks which use paths through over-used vertices.Input: Graph G with K nets N 1 ; : : : ; N K , vertex capacities cv For each k = 1; : : : ; K, do For each sink t i k in N k do Using a backward BFS search, find a shortest path P from t i k to T k in G using only vertices v with cv 񮽙 0; if no such path exists let P = / 0T k T k 񮽙P For each vertex v in P, cv cv ,1End for End for We have implemented 3 greedy algorithms for the GRBB problem.
The first algorithm [5,6] starts by decomposing each multiterminal net into 2-terminal nets.
Then, the algorithm attempts to route the 2-terminal nets one by one, using for routing a shortest available path from the net's source to its sink, if such a path exists.
We will refer to this algorithm as the forward 2-terminal greedy (F-2TG) algorithm.The second greedy algorithm, referred to as the multiterminal Greedy (MTG) algorithm, routes multiterminal nets without splitting (Fig. 3).
In this algorithm we also attempt to route the sinks of a net one by one.
For a given net, the algorithm starts with a tree containing only the net's source, then iteratively adds shortest paths from each sink to the already constructed tree.The third algorithm, the backward 2-terminal greedy (B-2TG), works as F-2TG, except for the fact that shortest paths are computed backward, from sinks toward sources and not from sources toward sinks.
Notice that B-2TG becomes identical to MTG when applied to 2-terminal nets.
We have implemented two flow rounding algorithms.
The first is the MCF rounding algorithm of Dragan et al. [6] , which we will refer to as 2TMCF.
It starts by decomposing each multiterminal net into 2-terminal nets, and then casts the GRBB problem as an integer MCF problem.The second algorithm is based on MTMCF rounding (Fig. 4).
Our current implementation decomposes larger nets into 3-terminal nets before applying the MTMCF routing algorithm, we will refer to this implementation as 3TMCF.
For 3-terminal nets we can find the optimum directed routed Steiner tree efficiently, and we do not need to resort to the approximations suggested at the end of Section III.
All experiments were conducted on a SGI Origin 2000 with 16 195MHz MIPS R10000 processors-only one of which is actually used by the sequential implementations included in our comparisonand 4 G-Bytes of internal memory, running under IRIX 6.4 IP27.
Timing was performed using low-level Unix interval timers, under similar load conditions for all experiments.
All algorithms were coded in C and compiled using gcc version egcs-2.91.66 with -O4 optimization.Input: Graph G with K nets N 1 ; : : : ; N K , vertex capacities cv Find an approximate MTMCF using the algorithm in Fig. 1 Round the approximate MTMCF using the algorithm in Fig. 2 Use greedy deletion to find a feasible integer solution Use the MTG algorithm in Fig. 3 on the unrouted nets to find a maximal routing The three test cases used in our experiments were extracted from the next-generation microprocessor chip at SGI.
We used an optimized floorplan of the circuit blocks and also optimized the location of the source/sink pin locations based on coarse timing budgets.
We used U = 4000µm, and varied L between 500µm and 2000µm.
Path-length upper-bounds were computed with the formula l k = dist(s k ; t k )/1000.
In all test cases considered the number of nets was large (close to 5000), and the number of buffer blocks small (50), with relatively large capacity (400 buffers per block); such values are typical for this application [6].
Table I gives the number of routed sinks and the running time on the three instances by each of the algorithms included in our comparison.
Figure VII plots the solution quality versus the CPU time (in seconds, excluding I/O and memory allocation) for each algorithm.The first surprising thing to notice is that B-2TG gives noticeably better results than F-2TG, despite the fact that the two algorithms are nearly identical (they both add paths of the same length until some of the vertices use up the full capacity).
4 Perhaps not so surprising is the fact that the multiterminal greedy algorithm is better than both F-2TG and B-2TG.
Notice that the running time of all three greedy algorithms is virtually the same, so MTG is the clear choice among them.Our experiments clearly demonstrate the high quality of the solutions obtained by flow rounding methods.
Significant improvement over the best of the greedy methods is possible even with a very small increase in running time, proof that even very coarse MCF/MTMCF approximations give helpful hints to the randomized rounding procedure.
Since randomized rounding is very fast, faster in fact than any of the greedy algorithms, the MCF/MTMCF algorithms can be further improved by running randomized rounding with the same fractional flow a large number of times and taking the best of the rounded solutions; our current implementation does not exploit this idea.Finally, our experiments show that even a limited use of multiterminal nets (decomposition into nets of size 3) gives improvements over the already very high-quality MCF algorithm of Dragan et al. [6].
In fact, the 3TMCF algorithm outperforms the MCF algorithm in [6] even when the same time budget is given to both algorithms.
In this paper, we addressed the problem of how to perform buffering of global multiterminal nets given an existing buffer block plan.
We gave a provably good algorithm based on a novel approach to MTMCF approximation inspired by recent results of Garg and Könemann [8] and Fleischer [7] on edge-capacitated MCF.
Our MTMCF algorithm outperforms existing algorithms for the problem [5,6], and has been validated on top-level layouts extracted from a recent high-end microprocessor design.Ongoing work is aimed at increasing the space of methodologies to which our new techniques apply.
As presented here, our work is clearly targeted to very early global wireplanning activity.
In other words, the application domain is pre-synthesis chip planning: prescribed repeater intervals are driven only by coarse estimates of Miller coupling factors, repeater sizing, and source impedance or sink capacitance.
The presented formulation also does not address timing criticalities or budgets except via net weighting (prioritization); this is fortunately fairly common for initial wireplanning that breaks the "chicken-egg" problem of budgeting between-block and within-block paths in pre-synthesis RTL planning with aggressive global wire optimization.
5 We are presently extending our approach in the following ways.
(1) Handling routing congestion, e.g., by introducing capacitated "virtual" nodes in the flow graph.
(2) Handling timing criticality and budgets is another goal; our ideas include better use of net ordering and weighting, and post-processing of the solution to eliminate unneeded repeaters.
(It is also possible to attempt to introduce layer awareness, source and sink parasitic awareness, etc., but this risks losing the flavor of early feasibility checking with available buffer block plans.)
Here, maintaining provable solution quality is a key issue.
(3) Finally, since accurate treatment of multiterminal nets is the key motivation for our present work, we are implementing better heuristics for net decomposition into 2-and/or 3-terminal groups; we are also implementing optimal graph Steiner solutions for up to 4-terminal nets, to assess the associated quality-runtime tradeoffs.
5 In other words, maximal repeater insertion allows maximum timing budgets for within-block timing paths, and this permits blocks to go through synthesis, place and route with more aggressive area targets.
A strategy of uniform buffering of as many global nets as possible also helps control signal integrity and delay uncertainty problems.
