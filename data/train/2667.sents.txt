Most data centers deploy fixed network topologies.
This brings difficulties to traffic optimization and network management , because bandwidth locked up in fixed links is not adjustable to traffic needs, and changes of network equipments require cumbersome rewiring of existing links.
We believe the solution is to introduce topological flexibility that allows dynamic cable rewiring in the network.
We design the Om-niSwitch prototype architecture to realize this idea.
It uses inexpensive small optical circuit switches to configure cable connections , and integrates them closely with Ethernet switches to provide large-scale connectivity.
We design an example control algorithm for a traffic optimization use case, and demonstrate the power of topological flexibility using simulations.
Our solution is effective in provisioning bandwidth for cloud tenants and reducing transmission hop count at low computation cost.
In traditional data centers, thousands of servers are connected through a multi-rooted tree structure of Ethernet switches.
Figure 1 depicts an example data center network.
At each layer of switches, the upstream bandwidth is only a fraction of the downstream bandwidth, creating a bottleneck in the network core.
Nowadays, novel network architectures with high bisection bandwidth have been studied to overcome this limitation [1,17,15].
Yet measurement studies show that the utilization of core links is highly imbalanced [18,4], indicating making good use of the existing bandwidth is more critical than adding bandwidth to the network.
A recent trend is to optimize the bandwidth utilization leveraging the diverse routing paths in data centers.
This set of works include multi-path routing and transport protocols for load balancing [19,25,2,29,5,31], flow scheduling mechanisms for transmission acceleration [10,9,11,8], and virtual tenant allocation heuristics for cloud service performance guarantees [16,24,3,27,21].
Besides routing flexibility, there is another level of flexibility that was rarely explored for bandwidth optimization: topological flexibility.
Static network topologies lock up bandwidth in fixed links, so congested links cannot get more bandwidth even if it exists in the network.
With a configurable network topology, bandwidth can be moved to transmission hot spots as needed.
In the Figure 1 example, virtual machine (VM) 1 and 2 are placed in different edge subnetworks and must communicate through the network core no matter how the traffic is routed.
If we move the bold link to the dashed position, we construct a shorter path between the VMs and reduce the bandwidth consumption in the network core.
Although migrating VM 1 to location 3 achieves the same effect, it is undesirable because VM migration is expensive [32] and a tenant may request for storage (SAN) and connectivity (WAN) that are not movable.Topological flexibility is achievable using circuit switches.
By changing the circuit switch configurations, cables can be rewired to different outgoing connections as if they are plugged/unplugged manually.
Modern data centers have optical fibers and optical transceivers in place for high-bit-rate transmission [22].
Optical circuit switches align well with the existing data center infrastructure, and thus become a sensible choice of implementation.
The link change in Figure 1 can be realized by inserting an optical circuit switch between the relevant aggregation and ToR switches.Topological flexibility provided by optical circuit switches also simplifies deployment, upgrade, and management for complex data center networks.
Constructing data centers requires complex wiring, and cable rewiring for later changes is especially challenging.
If cables are interconnected through circuit switches, detailed rewiring after the initial deployment can be maintained automatically by cable management software.
This introduces opportunities for dynamic topology optimization in case of switch or server failures, adding new equipments for incremental expansion, firmware upgrade for offline switches, and switch power-down during off-hour operation.
Most data centers deploy one-on-one backup for each Ethernet switch for fault tolerance.
1 out of N sparing can be achieved with configurable topology.
A single spare switch connected to multiple switches through optical circuit switches can be brought online as needed to replace any switch that fails.
This enables more efficient backup and reduces the cost In this paper, we present OmniSwitch, a configurable data center network architecture, and leverage its topological flexibility to utilize and manage the data center efficiently.
OmniSwitch exploits cheap small port-count optical switches, such as 2D MEMS, Mach-Zehnder switches, and switches using tunable lasers with array waveguide gratings, to minimize deployment costs.
These switches are fabricated on a planar substrate using lithography.
Losses from photonic signal crossings or other effects limit the port count to modest scale.
The mass production cost is dominated by packaging.
With significant advances in photonic packaging, the per-port cost of these switches will be far cheaper than their counterparts that scale to thousands of ports.
Because small optical switches cannot provide general connectivity, building large-scale data centers requires intimate combination with the existing switching power in the network.
OmniSwitch employs interleaving optical switches and Ethernet switches to provide topological flexibility for the full scope of a data center.
Evaluations in Section 3.3 demonstrate small optical switches integrated in the OmniSwitch architecture are effective enough to give considerable topology flexibility.In the rest of the paper, we describe the OmniSwitch architecture and the control plane design.
We use VM clustering as a case study and propose a control algorithm that enhances locality of traffic in the same tenant.
We evaluate our solution using simulations in the tenant provisioning scenario.
Compared to intelligent VM placement on a fixed network topology, running our VM clustering algorithm given dumb VM placement on the OmniSwitch configurable topology can reduce the rejected bandwidth by 60%.
Our approach also reduces the provisioning time for large tenants from 17min to 1s.
OmniSwitch deploys identical hardware building blocks to provision port count, bandwidth, and reliability.
Fig- ure 2 illustrates an OmniSwitch module that combines electrical packet switches and optical circuit switches into a single cabinet.
The Ethernet stack can be populated with up to 5 cards each having a 128-port Ethernet switch ASIC.
The 5th card is a spare switch to provide fault tolerance and always-on maintenance.
The Ethernet switches are connected through electrical-to-optical converters, and then a stack of 4Ã—5 photonic circuit switches, to optical front panel connectors.
16 25Gbps bidirectional fibers are bundled into one multilink to reduce the number of manually installed cables.
After plugged into a multilink connector, these individual fibers are connected vertically across 16 adjacent optical circuit switches.
Each circuit switch allows arbitrary optical connections between a row of individual links inside the front panel and a corresponding row of Ethernet ports that span the Ethernet stack.
Multilink connectors provide connectivity to both end devices (servers or ToR switches) as edge bandwidth and to other multilink connectors in the same or different OmniSwitch cabinets as core bandwidth.
The proportion of core over edge bandwidth determines the oversubscription ratio.Mesh networks can be realized using single or multiple OmniSwitch cabinets.
In Figure 3 (a), the 4 active Ethernet switches are each connected to other Ethernet switches through 2 multilinks.
The remaining 384 individual fiber ports can be used for end devices.
Specific connections among the Ethernet switches are decided by the circuit switch permutations.
We present two possible topologies, where the total bandwidth between switch pairs are adjustable depending on traffic demand.
Figure 3 (b) shows a larger network that gives 768 end-device ports.
Ethernet switches in the same cabinet connect to each other using 1 multilink each.
They each also connect to switches in the other cabinet using 1 multilink.
A possible topology is shown.OmniSwitch cabinets can also be structured as tree networks.
Spine cabinets are interior nodes in the tree and only provide connectivity for the children cabinets.
Leaf cabinets connect to both end devices and the parent spine cabinets.
For each leaf cabinet, the two lines refer to the dark and light multilink connections in Figure 4 (a) respectively.
Easy wiring: OmniSwitch reduces wiring complexity using multilink cables.
Detailed interleaving for individual links are handled by circuit switch configuration software.
This enables automatic cable rewiring after a hardware failure, during a switch firmware upgrade, or after partial power-down during off-hour operation.Incremental expansion: OmniSwitch cabinets can be partially populated with Ethernet switches and servers.
As new equipments are added to the cabinet, circuit switch settings are configured to adapt to the change, avoiding manual rewiring of existing links.
As shown in Figure 3 and Figure 4, it is also simple to purchase additional OmniSwitch cabinets to form larger networks.Efficient backup: As Figure 2 shows, by configuration the circuit switches, the 5th spare switch can be brought online to replace any Ethernet switch that fails.
Compared to most data centers where each switch has a stand-by backup, OmniSwitch reduces the sparing hardware and achieves more efficient backup.Traffic optimization: Topological flexibility can enhance traffic locality and reduce transmission hop count.
Links that exchange the most traffic can be optically configured to a common Ethernet switch to minimize the traffic sent to higher layers in a network hierarchy.
Opposite to traffic locality, load balancing and failure resilience can be achieved by optically directing traffic relevant to the same tenant to different Ethernet switches.Cost effectiveness: Small optical switches are potentially far cheaper than the large counterpart, despite less flexibility.
Circuit switches require one-to-one mapping between the input and output ports.
As Figure 2 depicts, the cables connected to the same optical switch cannot reach the same Ethernet switch.
Evaluation result in Section 3.3 shows small optical switches can provide considerable topological flexibility, thus OmniSwitch makes a good tradeoff between configurability and cost.
The OmniSwitch architecture requires a control plane (1) to program optical switch connectivities for topology optimization and (2) to enforce routing for quick adaptation to topology changes.
Because a data center is administered by a single entity, an emerging trend is to leverage centralized network control to achieve global resource management [2,26,10].
We follow this trend to deploy a centralized network controller for OmniSwitch, which is a user process running on a dedicated machine in a separately connected control network.Most optical switches can be configured via a software interface, and existing works provide basic routing mechanisms we can borrow.
For example, after the topology is determined, our network controller can precompute the paths and program the routing decisions on switches using software-defined networking (SDN) protocols [2,5,31] or VLANs [25,30,33], or on end hosts by source routing [16].
The control logic should be customized to different use cases, such as localizing traffic to save core network bandwidth, balancing workload to improve service availability, powering down some Ethernet switches to save energy, activating the spare Ethernet switch to recover from failure, etc.
We design a control algorithm that configures topology and routing simultaneously for the VM clustering use case.
In cloud computing terminology, tenant refers to a cluster of reserved VMs.
A VM communicates with a subset of other VMs in the same tenant; there is almost no communication between VMs in different tenants [6].
VM clustering is to localize traffic within the same tenant by optically configuring end-device links that exchange the most traffic to a common Ethernet switch.
The algorithm requires no control of VM placement and seeks opportunities for optimization in the network.
VM clustering can be realized at the flow level or the tenant level, reconfiguring the network either to address instant traffic changes at real-time or to address tenant bandwidth requirements that last for substantial time.
We perform tenant management in this case study, because frequent topology changes cause disruptions in the network and degrade transport performance.
Tenant bandwidth requirements can be expressed by different network abstraction models [16,12,3,21].
Here we use the simple pipe model that specifies bandwidth requirement between each VM pair as a Virtual Link (VL) [16,24].
Other models apply to OmniSwitch as well.
The pipe model can be constructed either by user specification or by bandwidth prediction tools [20].
Our problem is to place the VLs in the OmniSwitch network, so that maximum amount of bandwidth that tenants require can be hosted.
Placing VLs on a fixed network topology can be formulated as a multicommodity flow problem.
Because splitting VLs across several physical links can cause packet reordering, we seek integer assignments to the problem, which is NPcomplete [13].
In a configurable network like OmniSwitch, there are numerous possible topologies, making the search space even larger.
We design a heuristic algorithm to approximate the global optima.
For each tenant, the algorithm takes in the physical locations of VMs and the bandwidth requirements of VLs.
It accepts the tenant if it accommodates all the VLs with bandwidth guarantees, otherwise it rejects the tenant and recycles the allocated resources.
We assume a tree structure of OmniSwitch cabinets, as shown in Figure 4.
The OmniSwitch cabinets run the same sub-procedure, layer by layer from the edge to the root of the tree.
The output of children cabinets is the input of parent cabinets.In each cabinet, the algorithm handles VLs in the order of decreasing bandwidth requirement.
Because configuring the optical switches can rewire cables to different Ethernet switches, we search through the egress and ingress uplinks with sufficient bandwidth on the source and destination VMs respectively to check what Ethernet switches can service the VL.
If the egress and ingress uplink can reach up to the same Ethernet switch, the VL can be provisioned within this cabinet, demanding no extra bandwidth from the upstream cabinets.
Optical circuit switch allows an input port to be connected to only one output port, thus locating VLs from the same tenant onto the same physical link saves optical ports for other tenants.
We use a scoring function for the VL uplink assignment, which favors links heavily utilized by the tenant.
If the VL must traverse different Ethernet switches, e.g. optical ports connected to the same Ethernet switch occupied already, we place the VL on egress and ingress uplinks with high scores and let the upstream cabinet deal with the connection between the Ethernet switches.
To demonstrate the power of topological flexibility, we compare two solutions in a tenant provisioning scenario: dumb VM placement on the configurable topology vs. judicious VM placement on a static topology.
For the first solution, we simulate the example OmniSwitch architecture in Figure 4 (a).
When a tenant is subscribed, we provision VMs by contiguous placement and run the VM clustering algorithm to accommodate bandwidth for VLs.
For the second solution, we simulate a Clos network with the same number of Ethernet switches and servers, and run the SecondNet tenant provisioning algorithm [16].
We simulate dumb VM placement on the fixed network as the baseline of comparison.
To analyze the effectiveness of small optical switches, we also compare the original OmniSwitch with an alternative implementation using one big optical switch for each cabinet.
The simulated networks have 6144 servers.
SecondNet places VMs within tenant onto different servers.
For fair comparison, we give each server the capacity to host a single VM in these experiments.
Each simulation run consists of 1000 Poisson tenant arrivals and departures.
The tenant size and bandwidth requirements are sampled from the Bing data center workload [6].
The mean tenant size (S) is 79 and the largest tenant has 1487 VMs.
We keep the tenant duration time (T ) fixed and vary the mean arrival rate (Î») to control the load on the data center, which is defined as SÃ—Î»Ã—T 6144 , or the proportion of requested over the total VM slots.
The simulated networks have 12:1 oversubscription ratio, so tenants may be rejected due to lack of network capacity.
In this casee, all bandwidth required by the VLs are considered rejected.
We define bandwidth rejection rate as the amount of rejected bandwidth relative to the total requested bandwidth.
We use this metric to evaluate each solution's efficacy to accommodate tenants.
Figure 5 shows OmniSwitch rejects very little bandwidth even when the load is high, which demonstrates its effectiveness in localizing traffic given the simple VM placement.
The OmniSwitch implementation using big optical circuit switches only reduces the rejection rate slightly, indicating small optical switches can provide considerable topological flexibility.
SecondNet is much better than the dumb solution, because it pre-configures the servers into clusters by hop count and prioritizes small-hop-count clusters for VM placement.
However, it On the fixed topology, if a cluster cannot host the entire tenant, SecondNet must move to large hop-count clusters for resources.
OmniSwitch utilizes bandwidth more efficiently by constructing connections dynamically according to bandwidth requirement of individual VLs.We measure the average hop count of the provisioned VLs to help interpret the above results.
As shown in Table 1, the average hop count on the OmniSwitch network is significantly shorter than that of the SecondNet solution, which explains why OmniSwitch can host a lot more requested bandwidth.
Big optical switches further reduce the hop count, but the bandwidth rejection rate in Figure 5 makes little difference.
This is because OmniSwitch successfully reduces path length for most VLs, leaving sufficient core bandwidth for the rest VLs.In Figure 6, we compare the computation time of the SecondNet algorithm and the OmniSwitch VM clustering algorithm.
OmniSwitch can finish provisioning a large tenant with over 1000 VMs in around 1s, and the computation time is not sensitive to variation of load; while SecondNet takes up to 17min and the computation time grows significantly as the load increases.
Although SecondNet pre-clusters the data center to reduce the problem size, it still needs to do exhaustive search in each cluster.
This is quite expensive, especially when the servers are heavily occupied.
The search space for the OmniSwitch VM clustering algorithm is very small.
Since it seeks optimization for pre-allocated VMs, it only needs to search through a few uplinks and possible optical switch connections.
Table 1 shows the algorithm keeps most traffic within edge cabinets even at high load, so the search space does not enlarge with load increase.
OmniSwitch is related to other configurable data center architectures using optical interconnects.
Helios and c-Through construct a separate optical network with an expensive high port-count 3D MEMS side by side with the existing data center to add core bandwidth on the fly [14,33].
This idea is extended to different traffic patterns other than point-to-point communication [34,35].
OSA introduces WDM and WSS tech- nologies to provide multi-hop forwarding and tunable link capacity [7].
Mordia and Quartz use fast optical circuit switches (WSS or WDM rings) to build a fullmesh aggregation layer that has high bandwidth capacity and low switching latency [28,23].
Because WSS and WDM rings scale poorly, these designs work best for small networks with tens of aggregation ports.OmniSwitch's design goals are fundamentally different.
First, OmniSwitch aims to utilize existing bandwidth resources efficiently, as opposed to adding bandwidth to the network.
Second, we are the first to use small optical switches and integrate them with Ethernet switches to build modular building blocks that easily scale to the full scope of a large data center.
Third, unlike prior work that configure optical switches to route traffic flows, OmniSwitch uses optical switches to optimize topology and leaves routing to Ethernet switches.
It does not require real-time circuit construction for traffic forwarding, so the topology can be changed at coarser time scale to address tenant and network management needs.
This paper presents OmniSwitch, a modular data center network architecture that integrates small optical circuit switches with Ethernet switches to provide both topological flexibility and large-scale connectivity.
Mesh and tree networks can be easily constructed with identical OmniSwitch building blocks.
Topological flexibility can improve traffic optimization and simplify network management.
We demonstrate its potential with the VM clustering case study, where we give a control algorithm that optimizes both topology and routing to enhance locality of traffic within tenant.
Our approach is evaluated using simulations driven by a real data center workload.
Compared to the state-of-the-art solution, it reduces the average path length significantly and services more bandwidth using minimal computation time.
Small optical switches are proven to provide similar topological flexibility to a high port-count counterpart.
We are looking for feedback in a number of areas.
We want outside evaluation of our progress including criticism or support that weakens or strengthens the excitement and importance of this work.
We are looking for ideas that might broaden our future investigation or ideas for new applications for architectures with topological flexibility.
We welcome suggestions about alternatives to our OmniSwitch design.We make a controversial assumption that ease and flexibility of network management have been traditionally underemphasized.
Management includes physical management such as network deployment, network upgrade, and cable management as well as logical management including performance optimization, management for low power, fault tolerance, and on-line firmware upgrade.
We introduce topological flexibility and OmniSwitch as architectural tools to address these issues.
Flexibility comes with its costs and we defend a controversial position that large rewards from management flexibility can justify costs for providing that flexibility.An interesting discussion debates relative merits of side-by-side versus integrated architectures for deploying circuit switches with packet-switches.
Side-by-side architectures may require highly dynamic elephant flow recognition.
Elephant flows are not the only source for non-uniform traffic, and integrated architectures with topological flexibility may exploit new sources of nonuniform traffic.
Integrated approaches may be successful even when elephant flows are not present.A number of open issues remain.
This work needs commercially successful small port count photonic circuit switches.
While a number of candidate photonic architectures exist, no products are available today.
We are interested in research to enhance control-plane architectures for the needs of topological flexibility.
These control-plane architectures react quickly to changes in the underlying topology without disruption to running workloads.
This research was sponsored by the NSF under CNS-1422925, CNS-1305379 and CNS-1162270.
