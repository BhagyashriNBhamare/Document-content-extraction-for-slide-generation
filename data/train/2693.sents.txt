Emerging Cyber-Physical Systems (CPS) such as connected vehicles and smart cities span large geographical areas.
These systems are increasingly distributed and interconnected.
Hence, a hierarchy of cloudlet and cloud deployments will be key to enable scaling, while simultaneously hosting the intelligence behind these systems.
Given that CPS applications are often safety-critical, existing techniques focus on reducing latency to provide real-time performance.
While low latency is useful, a shared and precise notion of time is key to enabling coordinated action in distributed CPS.
In this position paper, we argue for a global Quality of Time (QoT)-based architecture , centered around a shared virtualized notion of time, based on the timeline abstraction [1].
Our architecture allows applications to specify their QoT requirements , while exposing timing uncertainty to the application.
The timeline abstraction with the associated knowledge of QoT enables scalable geo-distributed coordination in CPS, while providing avenues for fault tolerance and graceful degradation in the face of adversity.
Cyber-Physical Systems (CPS) [2] involve the cyber components of computing and communication interacting with and controlling elements in the physical world.
Emerging CPS are connected to the Internet, and consist of multiple networked sensing, actuation and computational components spanning large geographical areas.
These systems range from small-scale multi-robot systems [3] [4][5] to city-scale connected vehicles and planetary-scale collaborative augmented reality [6].
The scale of these systems makes the cloud well-suited for enabling coordination among multiple smaller entities [8].
The future holds promise for CPS with possibly even inter-planetary-scale coordination.
Consider the recently launched Breakthrough Starshot Initiative [9].
The initiative proposes to send laser-propelled nano-spacecraft to Alpha Centauri.
While there are a number of engineering challenges still to be solved, one can envision a global network of laser arrays being used to send such nano-spacecraft into deep space.
To propel fleets of nanospacecrafts, it will be essential to precisely coordinate the direction and intensity of these geographically-distributed laser arrays, while taking into account the effects of the earth's rotation and atmospheric interference.
Reliable planetary-scale coordination requires a shared and precise notion of time [1].
However, existing cloudenabled CPS design methodologies [10] focus on reducing the latency of computation, and overlook the importance of shared time.
While technologies likes GPS and the Precision Time Protocol [11] have enabled networked devices to share a precise notion of time, trends like networking delays [12], multi-core processors [13] and virtualization [14] introduce greater timing uncertainty.
This uncertainty is rarely visible to applications, and most systems rely on best-effort time synchronization.In [1], we introduced the concept of Quality of Time (QoT) as the end-to-end uncertainty in the notion of time delivered to an application by the system.
Building on the notion of QoT, the QoT Architecture [1], centered around a shared virtualized notion of time, allows applications to specify their timing requirements, while delivering the required QoT and exposing timing uncertainty to applications.
We argue that the knowledge of QoT enables applications to adapt and be fault-tolerant, while allowing the system to manage resources efficiently.
Figure 1 shows CPS applications with diverse QoT requirements, spanning different geographical scales.
Hence, we posit that there is a strong need for a QoT-based CPS framework for distributed coordination at scale, with APIs based on a shared notion of time.The contributions of this paper are as follows:1.
We argue for a global shared-time architecture to enable local to planetary-scale coordination in CPS.
2.
We illustrate the utility of Quality of Time in providing fault tolerance and reliable performance in geo-distributed and coordinated CPS.
3.
We discuss the challenges in extending our timelinebased QoT Architecture in the context of enabling reliable cloud-based coordination at scale in CPS.
We build on prior work [1], and focus on the requirements and architectural choices which would enable cloudbased scalable coordination in geo-distributed CPS, using a shared notion of time along with the associated QoT.
In this section, we review the trends in cloud-enabled CPS, and describe the QoT Architecture proposed in [1].
Embedded platforms enable the deployment of computation and data-intensive CPS applications in resourceconstrained environments.
These platforms range from low-power micro-controllers [15] [16] and sensor nodes [17][18] to powerful multi-core platforms [19][20] [21].
While these platforms in conjunction with available software enable rapid prototyping and deployment, they are not sufficient to enable the deployment of complex applications at large geographical scale.
This is especially true when coordinated action must be performed by multiple distributed nodes [3].
To achieve coordination at scale, it is essential that an intelligent controller, which may be centralized or distributed, dictate coordination policies and perform the required orchestration.The emergence of the public cloud has made possible the deployment of elastically-scalable software services.
Public cloud [22][23] providers such as Amazon, Microsoft and Google offer a range of virtualized computing services, thus lowering the entry bar for innovation in the software services domain.
A similar trend is emerging for the Internet of Things (IoT) [24], with major cloud service providers offering specialized services for IoT [25] [26].
Most commercially available frameworks focus on directly connecting sensing/actuation endpoints to the Internet [25] [26].
Given that the number of such endpoints is poised to grow faster than network bandwidth, this approach is inherently not scalable [27].
Rather, application functionality needs to be partitioned among different components.
Additionally, most CPS are safety-critical, and require low-latency computation [2].
In the mobile computing domain, cloudlets [7] have been proposed to provide high-performance low-latency computation.
Cloudlets are trusted, resource-rich computational clusters that are in close physical proximity to the mobile user [7].
The low-latency requirements of CPS make the use of a hierarchy of cloudlets and the cloud useful [10].
Additionally, deploying cloudlets at the edge reduces the upstream bandwidth demand at the cloud [28].
While low latency is critical for real-time performance, very few guarantees on latency can be provided in the Internet [7].
On the other hand, advances in clock synchronization [11] have made it possible to provide precise time over a network with good reliability [29].
Programming applications based on a shared notion of time enables distributed components to specify timing constraints in terms of the shared notion of time, enabling fine-grained coordination with fewer messages exchanged [30].
As proposed in [1], a timeline is a virtual reference time base that is not necessarily tied to a specific reference device or time system.
This abstraction enables developers to implement coordinated applications easily.
Consider an application that needs to perform coordinated actions by its distributed components.
All of these components bind to a common timeline, each specifying its respective QoT requirements.
The timeline abstraction [1] abstracts away low-level synchronization details, while the underlying framework orchestrates the clocksynchronization services and clocks to ensure that QoT requirements are met, while making the actually achieved QoT visible to the application.
This is fundamentally different from existing best-effort clock-synchronization techniques [11] [12].
Application-specified QoT requirements open up the possibility of network and system orchestration to ensure that application requirements are met, while managing resources efficiently.The QoT Architecture supports multiple timelines.
This enables different coordinating sub-groups with varying QoT requirements to each have their own virtual time reference and co-exist on the same infrastructure [1].
The QoT Architecture consists of three distinct components:1.
Clocks are used to expose timekeeping hardware, and provide timekeeping and time-stamping capabilities.
Clocks also expose their parameters such as accuracy, precision and drift, which enable uncertainty calculations.2.
System Services are responsible for distributing timeline meta-data, message passing, quantifying timing uncertainties, and synchronizing clocks across nodes.3.
QoT Core acts as a bridge between all the system components, applications and the operating system.
It is responsible for application scheduling as well as maintaining synchronization and timeline state.The architectural components present on each node along with their interactions are illustrated in Figure 2.
Based on this architecture, we developed a prototype QoT Stack for Linux [1], which focused on implementing necessary functionality over a Local-Area Network (LAN).
The existing version of our stack supports the Beaglebone Black [21] embedded platform, with clocksynchronization support for PTP [11] and NTP [12] over Ethernet.
The stack consists of kernel modules and system services, and does not modify the Linux kernel.
This section outlines the key concerns to be addressed from the standpoint of enabling coordination in CPS.1.
Scalability: As illustrated in Figure 1, many emerging CPS applications will scale large geographical areas.
Cisco predicts that the number of connected sensing/actuation endpoints will exceed 50 billion by 2020 [31].
We believe that CPS frameworks which support coordinated action among a large number of geo-distributed components, will enable new classes of applications.2.
Fault Tolerance and Reliability: Most CPS applications are safety-critical [2], making fault tolerance necessary.
In the software services domain, fault tolerance is concerned with reducing down time, and preventing information loss [32].
Hence, most services are replicated across different fault-tolerance domains.
Most CPS also utilize replication techniques to ensure fault tolerance.
However, CPS interact with the real world, where the safety of humans and infrastructure is critical.
Therefore, CPS may also rely on analytical redundancy [33], involving graceful degradation modes.
When multiple components fail, the system must be able to gracefully degrade and stop without causing any harm [34].3.
Security: The presence of malicious nodes can severely impact local behavior and global coordination, which can have consequences in safety-critical applications.
As compared to software services, which are hosted in a secure data center, many CPS have physical nodes deployed in public spaces.
Hence, malicious nodes need to be detected and isolated from the coordination subgroup, without violating safety constraints.4.
Ease of Programmability: In the software services domain, the availability of cloud APIs enables developers to easily deploy and elastically scale applications in the cloud.
Similarly, the emergence of frameworks like Map-Reduce [35] and Spark [36] have enabled scalable parallel computation over clusters in the cloud.
In the CPS domain, enabling coordination across heterogeneous platforms, ranging from sensor networks to the cloud, is a challenge.
Hence, there is a need for a framework, which is easy to use, and has expressive power to support coordinated CPS from local to planetary scales.
We now argue for designing coordinated CPS using a shared notion of time with the associated knowledge of QoT.
In distributed software systems, a shared notion of time enables increased performance and better coordination, along with decreasing the number of messages which need to be exchanged [30].
However, there are inherent uncertainties associated with synchronizing clocks over a network.
Hence, in [30], Liskov reasons that systems should rely on clock synchronization for performance but not correctness.
This is true for most software systems.
For example, reducing timing uncertainty decreases the transaction commit wait in Spanner, leading to better performance [29].
However, in CPS, the uncertainty tolerances are dictated by the application and the environment.
If the required QoT cannot be met, then the application should be aware of it, and gracefully degrade to satisfy safety and reliability requirements.We highlight the benefits of coordination using a shared notion of time by presenting an emerging CPS application utilizing an idealized solution called TimeNet.
Subsequently, we present the practical challenges in enabling scalable coordination in CPS using shared time and QoT.
Coordinating fleets of connected autonomous vehicles for city-wide dynamic traffic management is an example of a geo-distributed application which can benefit from using a shared notion of time.
The proposed application hierarchy is illustrated in Figure 3, and consists of autonomous vehicles, Vehicle-to-Infrastructure (V2I) nodes [40], cloudlets and the cloud.In an ideal world, we can assume that all components of this application are connected to a network which provides instantaneous access to an ideal source of time with no associated uncertainty.
For the sake of simplicity, let's call this hypothetical network TimeNet.
Let's assume that TimeNet can be used to perfectly time-stamp all events and messages with zero uncertainty.
Hence, using TimeNet, a unique total ordering on all events can be derived.In the context of our application, the infrastructure nodes can precisely measure the location of the vehicles, along with the exact timestamp associated with a vehicle's presence at that location.
This timestamped information can be then forwarded to a nearby cloudlet, which receives state information from multiple infrastructure nodes in a small geographical area.
Multiple such cloudlets can then forward their respective state information to the cloud, which sits atop the application hierarchy.
In this hierarchy, the cloud is responsible for shaping traffic flow at a macroscopic level.
Based on the macroscopic policy, the cloudlets make local decisions for their respective regions.
Lastly, infrastructure nodes decide microscopic traffic policy and convey instructions to the autonomous vehicles, which implement these instructions.In an ideal world, accurate information can be inferred from these timestamped events, which can be used to formulate plans of action, such that vehicles coordinate their actions using this ideal notion of time.
Thus, vehicular traffic is dynamically managed at city scale.
In the worst case, if timing constraints are violated or messages delayed, then by using the current time, components can detect failures, and take corrective action [30].
Unfortunately, a perfect source of time does not exist, and practical systems introduce uncertainty in timing measurements.
Hence, to determine the validity of timestamps, the knowledge of its associated uncertainty is essential.
Based on this uncertainty information, coordination policies can order events with different degrees of confidence.
If the uncertainty exceeds tolerable limits, systems can fail-over or gracefully degrade.
For example, in the context of the dynamic traffic management application, if the uncertainty exceeds tolerable limits, the coordination policy can instruct all or some vehicles to temporarily change their speeds, or come to a safe halt.Exposing the notion of QoT to applications also allows timing requirements to be explicitly specified.
This enables the system to optimize for application QoT requirements, and manage resources efficiently.
Hence, in the context of CPS, synchronized clocks along with QoT can deliver both performance and reliability.The present-day GPS is a close approximation to TimeNet, ideally providing synchronization in the order of tens of nanoseconds.
However, GPS is not accesible indoors and inaccurate in urban canyons [37].
This limits its use in many applications [38].
Hence, a practical realization of TimeNet may involve multiple outdoor GPS receivers equipped with chip-scale atomic clocks [39].
These receivers can distribute accurate time to subscribers both wirelessly and over the Internet [12].
To support the notion of QoT, it is crucial that each node in TimeNet quantify the uncertainty in its notion of time.
We now address the various challenges involved in designing a practical extension of our QoT Architecture, in the context of using a hierarchy of cloudlets and the cloud as an enabler of scalable CPS coordination.1.
Global Timeline Service: The timeline abstraction is key to forming different scalable coordination subgroups on the same infrastructure.
Additionally, a timeline enables different coordinating components of an application to specify their QoT requirements and subscribe to a shared notion of time.
These different components may be running on nodes that are interconnected by heterogeneous networking technology.
For example, in the dynamic traffic management application shown in Figure 3, the vehicles and the infrastructure nodes may be connected by a Dedicated Short-Range Communications (DSRC) V2I network [40].
On the other hand, the infrastructure nodes, cloudlets and the cloud are connected by the Internet (using 4G/5G, Wi-Fi or Ethernet).
Hence, there is a need for a global timeline service, which provides a common protocol to coordinate these components interconnected by heterogeneous technologies.2.
Scalable Synchronization Service: In CPS, it is common to find platforms ranging from ARM-based micro-controllers to server-grade x86 machines.
These platforms have different resource constraints and capabilities.
Hence, while most edge devices use wireless networking technologies like Wi-Fi, BLE [41], UWB [42] and Zigbee [43], gateways and cloudlets have both wireless and wired links, and servers in the cloud mostly rely on wired technologies like Ethernet.
The plethora of these networking technologies implies that multiple clock synchronization protocols, such as NTP [12], PTP [11], RBS [44] and FTSP [45], might be in use within the same distributed application.
Additionally, distributed application components will have different QoT requirements.
For example, tight clock synchronization is required among the sensing/actuation endpoints, while computational components (cloudlets and the cloud) have less stringent QoT requirements.
These factors make maintaining a shared notion of time, as well as calculating and transferring timing uncertainty information across these multiple networking domains, challenging.
Given the heterogeneity in applications, platforms, networks and protocols, there is a need for a service which orchestrates the system to ensure that QoT guarantees are met.
The notion of QoT will facilitate fault tolerance.
Hence, it is crucial that each coordinating component maintain its own notion of QoT, based on the synchronization and system uncertainties.
Thus, during network or synchronization outages, each component can calculate the delivered QoT, using previously computed worst-case uncertainty estimates [1].
When the calculated QoT exceeds the specified tolerance, or timing constraints are violated, application components can fail-over to a replica or gracefully degrade.4.
Pub/Sub Messaging: The publish/subscribe paradigm has emerged as the method of choice for communicating among coordinating nodes [46], and is commonly used for coordination in many real-world applications [34] [47].
Additionally, publish/subscribe technologies support a variety of communication media, and have been shown to scale.
Hence, in our architecture, we allow all components bound to a timeline to publish their messages to all other nodes.
Individual nodes can subscribe to subsets of messages based on content or type.
QoT Architecture Global [48].
Virtualization adds additional timing uncertainty due to relatively high jitter in clock-read and timer-interrupt latencies [14].
Thus, scheduling computations precisely on global time in a virtualized environment is challenging.
Additionally, the possibility of VM/container migration raises the question of storing synchronization state in the hyperviser or the guest [14].
Hence, the use of virtualization in the cloud presents a challenge in terms of observing and guaranteeing the QoT delivered to an application.6.
QoT-Aware Cloud Scheduling: The presence of multiple virtualized units running applications with different QoT requirements adds an additional layer of complexity to the QoT-aware cloud scheduling problem.
We envision our QoT scheduler working in conjunction with existing multi-level scheduling frameworks [49] [50].
Hence, there is a need to provide probabilistic QoT-based Service Level Agreements (SLAs).
Additionally, as indicated in the case of Spanner [29], modern data centers may have access to a GPS receiver for precise timing.
We believe that placing a VM or container on a host in proximity to this receiver would enable a higher level of QoT.
Hence, the QoT requirements of applications would dictate the host to which they are allocated.7.
Security: Given that our architecture involves coordination between sets of nodes, we envision using publickey based authentication [51].
Only nodes with appropriate public keys can join the timeline.
Additionally, messages can be encrypted using this key.8.
Coordination APIs: To enable distributed coordination at scale, it is essential to have a core set of APIs that are independent of the platform and OS.
At the same time, the APIs should be extensible to support platformspecific extensions.
The APIs enable applications to (i) bind/unbind from a timeline, (ii) specify/update their QoT requirements, (iii) schedule computation, sensing and actuation based on shared time, (iv) timestamp events, and (v) pub/sub messaging for coordination.
All API calls return the QoT actually delivered to the application, providing the ability to adapt to changes in QoT.
Figure 4 illustrates how the QoT Architecture can enable a host of coordinated CPS applications, running on distributed heterogeneous networked infrastructure.
Most of the existing work in the literature on cloudenabled CPS, focus on reducing latency, by bringing resource-rich computing closer to the edge of the network [7][10] [27] [52].
All these frameworks focus on proper partitioning of functionality among different tiers of nodes, ranging from the cloud to cloudlets, gateways and edge devices.
We believe that using a shared notion of time along with the knowledge of QoT is complementary to these techniques.
While low latency is crucial to achieve real-time performance, using shared time provides scalability, while the knowledge of QoT provides applications the ability to adapt, and be fault-tolerant.
The idea of using a shared notion of time in distributed systems is not new.
In [30], Liskov analyzed the performance benefits of using clock synchronization in many distributed algorithms.
In the embedded domain, PTIDES [53] provides a framework to model, design and deploy time-critical embedded applications, using a shared notion of time.
However, these prior work do not consider the utility of the knowledge of timing uncertainty, and rely on best-effort clock synchronization.
While Google Spanner utilizes uncertainty information for achieving global-scale consistency and performance [29], the use of uncertainty as an enabler of performance, scalability and fault tolerance has not been explored.The use of cloudlets and the cloud entail the use of virtualized computing units which introduce additional timing uncertainty.
In [14], Broomhead et al. experimentally characterized the timekeeping properties of the Xen paravirtualization platform.
To the best of our knowledge, no similar study exists in the context of hardware-accelerated virtualization and container-based frameworks.
Additionally, scheduling virtualized units based on application QoT requirements needs to be explored.
Deploying Cyber-Physical Systems at scale is of increasing interest to researchers.
In this position paper we highlight the merits of designing scalable coordinated CPS using a shared notion of time, along with the associated knowledge of Quality of Time.
We identify the challenges involved in designing a practical QoT-based CPS framework, and believe that by incorporating the proposed design choices, our stack can support cloudlets and the cloud to achieve geo-distributed CPS coordination at scale.
Additionally, we believe that our architecture would also be useful for distributed software systems [29] which can reap scalability and better performance using shared time.
Our position paper argues for coordination in cloudenabled geo-distributed Cyber-Physical Systems using a shared notion of time, along with the associated idea of Quality of Time.
Recent trends in networking hardware and clock synchronization, coupled with the availability of chip-scale atomic clocks and low-cost good-quality oscillators, have enabled distributed nodes to precisely synchronize their clocks.
Hence, we posit that the use of shared-time with the added notion of QoT, will enable planetary-scale coordination, while providing additional avenues for application-level fault tolerance.
This approach is fundamentally different from traditional techniques, which mostly rely on low-latency message passing to achieve coordination.
We believe that this is of significant interest to the research community.We also illustrate the design choices needed to realize a practical global shared-time based framework, to support coordination in CPS, ranging from local to planetary scales.
This paper does not delve into the intricate details of our proposed framework, and focuses on the high-level requirements needed to achieve scalable coordination.
Future work includes overcoming multiple challenges related to QoT-based cloud scheduling and system orchestration.
Additionally, another area of future research is the possibility of our framework being useful for enabling better performance and scalability in software systems.
The authors would like to thank Fatima Anwar, Andrew Symington, Adwait Dongare, Anthony Rowe and Mani Srivastava for their efforts on the QoT Stack for Linux.
This research is funded in part by the National Science Foundation under award CNS-1329644.
The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright notation thereon.
The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of NSF, or the U.S. Government.
