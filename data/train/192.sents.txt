It is well known that antipodal grasps can be achieved on curved objects in the presence of friction.
This paper presents an efficient algorithm that finds, up to numerical resolution, all pairs of antipodal points on a closed, simple, and twice continuously differentiable plane curve.
Dissecting the curve into segments everywhere convex or everywhere concave, the algorithm marches simultaneously on a pair of such segments with provable convergence and inter-leaves marching with numerical bisection.
It makes use of new insights into the differential geometry at two antipodal points.
We have avoided resorting to traditional nonlinear programming which would neither be quite as efficient nor guarantee to find all antipodal points.
Dissection and the coupling of marching with bisection introduced in this paper are potentially applicable to many optimization problems involving curves and curved shapes.
A grasp on an object is force closure if and only if arbitrary force and torque can be exerted on the object through the finger contacts.
Two fingers in frictional contact with a 2D curved shape can form a force-closure grasp if they are placed at two points whose inward normals are opposite and collinear.
Such a grasp is referred to as an antipodal grasp while the two points are referred to as antipodal points.
For example, the closed curve in Figure 1 has eight pairs of antipodal points (numbered the same within each pair).
We present a fast algorithm that finds all antipodal points on a general closed plane curve.
The novelty of this algorithm lies in (a) its dissection of the curve into segments turning in one direction, and (b) its combination of numerical bisection and marching with provable convergence.
Hong et al. [5] proved the existence of two pairs of antipodal points on a closed, simple, and smooth convex curve or surface.
Chen and Burdick [3] computed antipodal points on 2D and 3D shapes through minimizing a grasping energy function.
Blake and Taylor [2] gave a geometric classification of two-fingered frictional grasps of smooth contours.
Ponce et al. [11] employed parallel cell decomposition to compute pairs of maximal-length segments on a piecewise-smooth curved 2D object that guarantee force closure with friction.Nguyen [9] described simple algorithms for synthesizing independent grasp regions on polygons and polyhedra, with or without friction.
Markenscoff et al. [8] determined the number of fingers to immobilize 2-D and 3-D objects with piecewise smooth boundaries.
We refer the reader to [1] for a survey of research on grasping and contact.In preprocessing our algorithm finds points of simple inflection.
In [4] Goodman gave an upper bound on the number of inflection points on parametric spline curves.
Manocha and Canny [7] used the Sturm sequence method to find inflection points on rational curves.
Sakai [12] obtained the distribution of inflection points and cusps on a parametric rational cubic curve.
This excludes a circle on which any two points determining a diameter are antipodal.
on 9 : £ g @ C ¦ v % £ H I ¦ ' D or equivalently, (1) £ A @ R ¦ v % £ ¥ H I ¦ ' w 6 (2) Let x £ g @ y D I H I ¦ £ g @ C ¦  ) £ ¥ H I ¦ .
Since  X   X  £ g @ C ¦  ) £ 5 2 !
£ H I ¦ £ H I ¦ I ¦ 2 !
£ ¥ H I ¦  ( ', by the Implicit Function Theorem, the equation A pair of points may be antipodal only if their normals do not point away from each other.
We add a fifth condition:(v) £ A @ C ¦    1 ¢ £ H I ¦  2 ¢ £ A @ C ¦ 5 4 s U ' for all @    £ g @ B D f @ G ¦ .
Differentiate (2) and then plug (1) in:£ !
£ g @ C ¦ t 2 !
£ ¥ H I ¦       ¦ £ g @ C ¦ b ' w 6 Thus !
£ g @ C ¦ X 2 !
£ H I ¦       b ' and      d  f e  h g  i e  g .
Define the antipodal anglej k £ g @ C ¦as the rotation angle from the normal .
To determine k f , we first calculate the derivative:£ g @ C ¦ to the vector l £ A @ C ¦ m ¢ £ H I ¦ R 2 ¢ £ g @ C ¦ (see Fig- ure 2).
Under condition (v), k  n £ 5 2 p o  D y o  ¦ .
By definition, @ N s ( ) N t ( ) T s ( ) r s ( ) s t θ ( ) T t S Tc c @ ¨  l £ g @ C ¦ ¨ s r £ ¥ H I ¦       2 £ g @ C ¦ I t i  l £ A @ R ¦ ¨  l £ A @ R ¦ ¨ v u !
£ g @ C ¦ !
£ H I ¦ % x w  y Q z | { i k 7 6From Figure 2 we see thaty I z } { i k s d £ g @ C ¦ ) l £ g @ C ¦ Q ~ ¨  l £ A @ C ¦ ¨ .
Differentiate both sides of this equation and substitute    ¨  l £ A @ R ¦ ¨in.
After a few more steps, we obtain k £ g @ C ¦ 2 !
£ A @ R ¦ v %  ©  y  k ¨  l £ g @ C ¦ ¨ u !
£ A @ R ¦ !
£ H I ¦ % X w  6(3 &    Q          F  ¥      F  and  d ¥    Q      &      F        Q  .
In [2], it is referred to as the friction angle.
In this case,!
£ g @ C ¦ 0 S ' and !
£ ¥ H I ¦ 0 S '; by (3),k y £ A @ R ¦ i U '.
and k £ g @ C G f ¦ 0 U 'then a unique pair of antipodal points exists.
Otherwise, no antipodal points exist.When k £ A @ B ¦  S ' and k £ g @ G ¦  U ', we use bisection to find the antipodal points.
Initialize£ g @ X P D I H h C ¦ ¢ ¡ £ £ g @ B D Q H B ¦ and £ g @ " D Q H " ¦ p ¡ ¤ £ A @ G D I H G ¦ .
Then evaluate @  ¡  h ¥ I ¦ &  Q §  and find its opposite point H  .
If k £ A @  ¦ U ' , set £ A @ " D Q H " ¦ i ¡ ¨ £ g @  D I H  ¦ ; otherwise set £ A @ x P D I H h C ¦ © ¡ ª £ g @  D Q H  ¦ .
Repeat the above steps until .
The first pair will be found through "marching" described in Section 2.3.1 if k £ g @ B ¦ and k £ g @ G ¦have the same sign or through bisection in Sections 2.3.2 if they have different signs.
Section 2.3.3 will describe how all the remaining pairs can be found by letting the two strategies invoke each other recursively.
The marching strategy will rely on the following result.
Proof We need only show that  l    ) l S '.
Differentiating the vectorl yields c y l c @ c c @ 1 ¢ £ ¥ H I ¦  2 ¢ £ g @ C ¦ 4 « £ H I ¦ u % !
£ g @ C ¦ !
£ ¥ H I ¦ w 6 Since !
£ A @ C ¦  D !
£ H I ¦ e U ' , we have %  i e  h g  f e  g U '.
Hence l    is in the direction of £ ¥ H I ¦ .
Meanwhile, from condition (v) that l £ g @ C ¦   £ A @ C ¦  U ' it follows that £ g @ C ¦ ) l £ g @ C ¦  U ' and £ H I ¦ ¢ ) l £ g @ C ¦ 0 S ' .
Therefore  l e  5 g    ) l £ g @ C ¦ ¢ S '.
¬ Figure 4 illustrates the working of an iterative method whenk £ g @ C B i ¦ T S ' and k £ A @ C G Q ¦ T S '.
where£ H 5 ® ¦ " ¦ % £ g @ R ® ¦ " ¦ ¯ '.
The iteration continues until Below we establish the correctness of the procedure whenk £ g @ C B i ¦ ¢ S ' and k £ g @ C G Q ¦ i S ' .
Lemma 3 In the casek £ A @ C B i ¦ ¢ S ' and k £ g @ C G f ¦ 0 S ' of the pro- cedure Antipodal-Convex-March, @ ® U ( @ ® ¦ "and every@ ±   ² @ ® ¦ " D f @ ® ¦ satisfies k £ g @ C ¦ 0 S ' for all ­  ³ W ' .
Proof We use induction.
That k £ g @ ¦ ´ k £ A @ C G Q ¦ V S 'follows directly from the initial condition.
Supposek £ g @ ® ¦ i S ' .
The normal £ A @ C ¦ rotates clockwise as @ decreases from @ ® .
Also since £ g @ ® ¦  ) l £ g @ ® ¦  S 'and the normal£ A @ ® ¦ " ¦ , if @ ® ¦ "exists, is in the direction ofl £ g @ ® ¦, we know that ; hence@ ® ¦ " S m @ ® and £ A @ R ¦ i ) l £ A @ ® ¦ µ S ' D for all @   ¶ £ g @ ® ¦ " D F @ ® ¦ .
(4l £ A @ X ® · ¦ 0 ) l £ g @ C ¦ 0 S ' D for all @   ¶ ² @ X ® ¦ " D F @ R ® · ¦ .
(5)Combining inequalities (4) and (5) with condition (v) that , defined by£ g @ C ¦ 3  l £ g @ C ¦ 0 U ' over £ g @ B D f @ G ¦ , we infer that £ g @ C ¦ 0 ) l £ g @ C ¦ ¢ S ' D for all @   ¶ ² @ X ® ¦ " D F @ R ® g ¦ 6 s a O s O t t i s* s i i+1 t t* i+1 s t* 1/κ( ) s* t a s b t b T i ( ) s i+1 T ( ) s i+1 N ( )q © ½    q y  ¥   ½ ¥  .
Thus k £ g @ C ¦ 0 S ' for all @    ² @ R ® ¦ " D f @ R ® A£ A @ R ® ¦ " ¦ 0 ) l £ g @ R ® · ¦ m '(6)is monotonically decreasing and no antipodal point exists on² @ R ® I D F @ G ¦ ¿ ¾ ® À  Á " ² @ À D f @ À C Â " ¦ for all ­ U '.
Suppose the segment defined implicitly by (6) at@ Y  : @ X ® ¦ " 2  @  AE £ A @ R ® A ¦ 3 2 AE £ g @  ¦ AE £ A @  ¦ x £ g @ R ® 2  @  ¦ v % (  x  X  6Below we determine y I z } { 0 k ® Ç £ A @ ® ¦ ± ) £ g @ ® ¦ " ¦ .
Differentiating both sides of this equation with respect to @ ® yields  x  y  k ® k £ A @ ® ¦ 2 !
£ g @ ® ¦ £ A @ ® ¦ ¢ ) £ g @ ® ¦ " ¦ È % £ g @ ® ¦ i ) 1 2 !
£ g @ ® ¦ " ¦ AE £ A @ ® ¦ £ g @ ® ¦ " ¦ 4 2 !
£ g @ R ® · ¦  ©  y  k ®  % !
£ A @ X ® ¦ " ¦ AE £ g @ R ® · ¦  ©  y  k ®AE £ g @  ¦ k y £ A @ C  X ¦ !
£ g @  ¦ % !
£ g @ Y  X ¦ & % !
£ H Q  X ¦ !
£ g @  ¦ !
£ H  ¦ ¨ © l £ g @  ¦ ¨ U ' w 6(7)Note that the iteration starts at must hold.
In this case, the two antipodal angles £ A @ Y  x ¦ 0 U ' or k f £ A @ C  X ¦ 0 S ' .
After finding one pair of antipodal points .
Therefore the interval£ g @ B D F @ Y  p 2 Ë  ¦contains at least one antipodal point.
So we need to invoke the proce-dure Antipodal-Convex-Bisect £ A @ R B P D f @ Y  Ì 2 Í Ë R D I H I B P D Q H Q   2 Í Î i ¦, whereH Q  ± 2 m Î is the opposite pointÏ of @ Y   2 Ð Ë .
Similarly, when k £ A @ R B Y ¦ e U ' and k £ A @ R G f ¦ p U ', the interval£ A @ Y  d % m Ë R D f @ R G F ¦contains at least one antipodal point.
We need to invoke , whereAntipodal-Convex-Bisect £ g @ Y   % t Ë R D F @ C G © D Q H Q   % t Î Y D I H I G F ¦ .
Suppose k £ g @ C B iÙ  ¥    È  n Ù   ¸   , Ù d  ¥    Q    m Ù   ¸  , andÚ   ¥      Û  Ú    ¸   .
Antipodal-Convex- March starts the iteration at    and¸·and¸ and¸·  and finds the first pair of antipodal points ¡ u and¸¡ and¸ and¸¡ u .
Next, Antipodal-Convex-Bisect is invoked on  ¥   f Ø  ¡ u Û V Ü I  and   ¸  f Ø ¸ ¡ u Û © Ý u , whereÚ    ¸ ¡ u Û T Ý u  &  Û  Ú   ¥  ¡ u Û  Ü I , and finds a second antipodal pair ¡  and¸¡ and¸ and¸¡ .
Finally, Antipodal-Convex-March is invoked again, on the pair ¥  f  Ø  ¡  Û T Ü Q  and   ¸ ·  Ø ¸ ¡  Û V Ý  and on the pair ¥  ¡  § Þ Ü Ø  ¡ u Û V Ü I  and   ¸ ¡  Þ Ý  Ø ¸ ¡ u Û V Ý u , respectively.
It finds no more antipodal points.
Without loss of generality, suppose 8 is convex and 9 is concave.
We again compare the signs of the antipodal angles at the two endpoints of 8 .
We first determine if one of the rays extending the normals points vertically upward, as shown in Figure 7.
Under condition (v), .
Sincek £ g @ C G f ¦ has the same sign, k £ A @ R G f ¦ Ê U '.
Then reach the other endpoints, in which case no antipodal points exist, or if they converge to a pair of antipodal points.
x £ g @  ¦ ( !
£ g @  ¦ ¨ x ¢ £ ¥ H  ¦ Ì 2 ¢ £ g @  ¦ ¨ 2 !
£ A @ C  R ¦ !
£ H  ¦ 6 (9) Because !
£ g @ Y  x ¦ T U ' and !
£ H Q  X ¦ T S ' , x  £ A @ Y  x ¦ T U ' .
Because k £ g @ ® ¦ ¢ S ' , for ­ Ì m ' D D 6 x 6 x 6, we see thatk £ g @  ¦ 2 !
£ g @  ¦ & % ¨ © l £ g @  ¦ ¨ u !
£ A @  ¦ !
£ H  ¦ % w U ' 7 6(10)in the non-degenerate case.
This implies that' S x  £ g @ Y  R ¦ ¢ S. Hence the algorithm converges in linear rate.
It also follows from (10) that¨xthat¨ that¨x ¢ £ ¥ H Q  x ¦  2 ¢ £ g @ Y  R ¦ ¨ S "  f e  Q ã F g % "  f e  ã F g 6Geometrically, the osculating circle at 3.
Enumerate all pairs of segments.
For each pair, determine if any of their endpoints are antipodal.
If not, shorten the segments until condition (iii) is satisfied.
To illustrate, for the pair in Figure 9(c), we intersect the cone of inward normals overz 1 N ( ) N ( ) z 3 N ( ) z 2 N ( ) z4 N ( ) z 3 - u 1 N ( ) N ( ) z4 - u 2 N ( ) z 3 z 2 z 1 z4 z 2 z 1 u 1 z 3 z4 u 2 u 1 z 3 z4 s b t b ta s a κ > 0 κ < 0 κ > 0 κ < 0 (a) (b) (c)(d)£ H I B P D Q H I G Q ¦ satisfy conditions (i)-(v).
In [6] we describe an involved algorithm with quadratic convergence rate that computes common tangent lines of two curve segments.
We have implemented the algorithm in C++ for arbitraryspeed curves.
For details of implementation, we refer the .
A non-degenerate closed convex curve, like the cubic spline in (a), has two pairs of antipodal points [6].
Antipodal points in (b), (c), and (d) can be verified.
reader to [6].
The eight pairs of antipodal points in Figure 1 has all three combinations of curvature signs.
The algorithm described in this paper computes all antipodal points on a closed simple curve up to numerical precision.
Inflection points divide the curve into segments that are either convex everywhere or concave everywhere.
Such monotonicity allows a recursive combination of marching with bisection to find all antipodal points of different local geometry.The algorithm is also applicable to a curve that is not closed, as long as an inward normal field is specified on the curve.
It can also be extended in a straightforward way to a curve that is piecewise twice continuously differentiable.
Due to the nonlinear nature of curves, a conventional nonlinear programming approach, inherently local, would rely heavily on initial guesses of antipodal positions.
It would be slow and not guarantee to always find antipodal points, not to mention all of them.The described work will be implemented as part of our ongoing research on localization and grasping of curved objects.
Future work will also include an extension of the algorithm to curved shapes in 3D.
The author would like to thank David Persky for helping with the implementation and Ravi Janardan for suggesting to analyze the numerical algorithm.
