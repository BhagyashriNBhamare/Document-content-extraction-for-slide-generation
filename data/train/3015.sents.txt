Object storage has emerged as a low-cost and hyper-scalable alternative to distributed file systems.
However, interface incompatibilities and performance limitations often compel users to either transfer data between a file system and object storage or use inefficient file connectors over object stores.
The result is growing storage sprawl, unacceptably low performance, and an increase in associated storage costs.
One promising solution to this problem is providing dual access, the ability to transparently read and write the same data through both file system interfaces and object storage APIs.
In this position paper we argue that there is a need for dual-access file systems over object storage, and examine some representative use cases which benefit from such systems.
Based on our conversations with end users, we discuss features which we believe are essential or desirable in a dual-access object storage file system (OSFS).
Further, we design and implement an early prototype of Agni 1 , an efficient dual-access OSFS which overcomes the shortcomings of existing approaches.
Our preliminary experiments demonstrate that for some representative workloads Agni can improve performance by 20%-60% compared to either S3FS, a popular OSFS, or the prevalent approach of manually copying data between different storage systems.
Some estimates predict that by 2020 the world will produce 44 zetabytes of unstructured data each year [75].
Users and enterprises increasingly look to object storage as an economical and scalable solution for storing this unstructured data [42,44].
In addition, object stores can offer simplified management, ease of use, and better data durability than traditional file systems [34,35,59].
These factors have led to the emergence of a rich ecosystem of object stores, both in the cloud and on-premises [2,11,16,19,[21][22][23].
It is predicted that in 2019 more than 30% of the storage capacity in data centers will be provided by object storage [38] and by 2023 the object storage market is expected to grow to $6 billion [40].
Object stores are increasingly being used for tasks that have traditionally required file systems, such as data analytics, media streaming, static web content serving, and data archiving [63,83].
Object store and file system interfaces have fundamental namespace and data access differences.
Object stores are typically characterized by RESTful access, flat namespaces, immutable data, relaxed consistency, and rich user-defined metadata.
These limited object storage semantics make them unsuitable for some applications.
For example, object stores do not support partial writes, so any update must rewrite an entire object.
As a result, existing workflows that rely on partial writes need to be redesigned for object storage in order to avoid the performance penalty of rewrites [77].
Object storage systems also do not provide a hierarchical namespace.
Many applications, such as genomic workflows [54,61], depend on a namespace hierarchy, file renames, and file pointers, none of which are supported by object stores.Users and infrastructure providers have adopted different approaches to overcoming the disparity between files and objects, especially for recently emerging use cases.
In one approach, distributed file systems are paired with object storage, and data is periodically copied over to a file system from the object store for data analytics [4,13,27].
This approach offers the full spectrum of file interfaces but is unwieldy for large datasets and can lead to over-provisioning, cost inflation, reduced backup efficiency, additional time for data transfer, and poor quality of service (QoS) due to storage sprawl [71].
An alternate approach, which we term object storage file system (OSFS), overlays file interfaces on top of existing object stores [41,49,60,62,64,80].
This approach gives a single location for data and provides ease of administration and use.
Given its benefits, we focus on OSFS in this paper.Based on our exhaustive survey we believe that existing OSFSs fall short of simultaneously providing two capabilities that are essential in modern multi-application infrastructures: (i) dual access to data and (ii) an efficient file system interface.
We define dual access as the user's ability to directly address data through a native object or file interface without going through an intermediary layer or having to look up the file-to-object mapping.
Quintessentially, dual access should be intuitive, the same data should be accessible by the same name thorough either interface.
An example of a workflow that benefits from dual access is a movie file being accessed by a transcoder using fread, then being made available by a Content Distribution Network (CDN) service via GET.In this paper, we first present a class of applications that could potentially benefit from an OSFS with a dual-access capability.
We further identify requisites for designing such a system so that it has a high probability of adoption.
We then briefly describe a potential solution, called Agni, with preliminary insights into its design.
Finally, we provide some elementary performance comparisons between Agni and S3FS, a popular OSFS for the discussed use cases, as well as comparing the prevailing manual data transfer approach.Based on our interactions with real customers we present two motivational use cases for a dual-access storage system.
We believe that these examples represent a growing class of applications which can greatly benefit from dual access.Media transcoding, editing and analytics.
The vast majority of media-based workloads are characterized by the generation of numerous media files, followed by some form of data processing on those files, and finally relocation to an archive for cold storage or dissemination to end users.
Data processing can be in the form of video editing, trimming, applying cinematic effects, overlaying different audio channels, and transcoding into different media formats.
Most of the software involved in the processing stage relies on file interfaces.
At the same time, cost effectiveness and near-limitless capacity drive the Media and Entertainment industry towards large-scale adoption of object storage [35,43].
A simple example workflow entails the generation of raw video footage from film studios which is directly moved into object storage using object interfaces.
That raw footage is then edited and transcoded into different media formats and resolutions to support compatibility with different platforms.
When processing is complete, both the original raw videos and the different transcoded formats are moved back into object storage.
Data intended for end-user consumption is delivered directly from object storage using CDNs.Gene alignment.
Currently scientists are struggling with massive data sets (petabytes and growing) in the domain of human genomics [58].
The challenge here is to effectively store large amounts of data, conduct genome analysis at scale, and eventually share this data among the research community.
Object storage is well suited for solving these issues and serving as the central data repository for all genomic data [35].
However, most of the current genome analysis pipelines rely on file system capabilities for analysis [39,54,57,61,68].
A typical example of a gene sequencing pipeline involves generation of human genome sequences at laboratories.
This data is then moved to a central data archive for durability and dissemination.
The data is downloaded over the network to a local file system or network-attached device for gene sequence alignment.
Different researchers run their own versions of sequence aligners over the unaligned data with tools such as Bowtie2 [39].
Sequence-aligned data is re-uploaded to the central archive (based, e.g., on object storage) and shared with other researchers.
Scientists re-download the data and analyze it using tools such as SAMtools [55] and BCFtools [76].
Use cases in other domains such as neuroscience [48,53,56], geoinformatics [70,72], machine learning [52], industrial process control [47], and computer vision [45,65] can also benefit from dual access.
We identify the design requirements for a system which would be effective for the discussed use cases.
These are based on our analysis of use cases, interactions with domain experts, and prior experience in developing storage systems.
We present them in descending order of priority.Object based.
The system should employ object storage to store its data.
This allows the system to realize the benefits of scalable, low-cost object stores.
While it is technically easier to provide object interfaces over file systems, such a design choice does not inherit the desirable properties of object stores.
Furthermore, users and enterprises are already entrenched in object storage and thus an object-based system would require minimal changes to either the vendor or storage technology.Intuitive dual access.
To address the storage sprawl issue the system should provide intuitive dual access to the data.
We stress being intuitive because this is a vital property for high usability and wide adoption.
The most intuitive approach to dual access is to adopt a 1⇒1 mapping.
For example, the contents of a file should be fully stored in and accessible through a single object.
We do not consider a system which splits a file into multiple objects with either 1⇒N or N⇒N mappings as one that provides intuitive dual access.Generic and backend-agnostic.
The system should be deployable over standard APIs, which is important for high flexibility, avoiding vendor lock-in, and the ability to use object stores that are already deployed in customer environments.
We assume a limited, yet representative, set of operations: (i) PUT(name, data) adds a named object; (ii) GET(name, range) fetches a specific range from the object or the entire object 2 ; (iii) DEL(name) deletes an object by name; (iv) MULTI-PART DOWNLOAD(name) retrieves an object in parallel 3 ; (v) MULTI-PART UPLOAD(name, data) adds a named object in parallel.
Based on our experience, these are a common subset of object interfaces available across all popular object stores.Efficient file interface.
In-place updates and metadata operations form an integral part of numerous application workloads [53,82].
Given the disparities between object and file interfaces, providing both dual access and good performance is challenging.
Existing OSFSs support either intuitive dual access or good performance for specific file interfaces, but not both (Section 4).
For instance, a simple 1⇒1 mapping that maintains a file in a single object offers the most intuitive dual access from the user's perspective, and many existing dual-access OSFSs implement this mapping [10,14,32,41,51,62,64].
However, 1⇒1 mapping can drastically reduce the performance of partial file writes and file renames.
This is because even a small modification to a file or the renaming of a file requires a GET and a PUT of an entire object.
As a result, OSFSs either do not support partial writes at all or incur significant performance overhead.
Other systems sacrifice intuitive dual access and adopt 1⇒N, N⇒1, or N⇒N file-to-object mapping policies [24,30,79,80].
Coherent namespaces.
Data is accessed through both interfaces, and the system should support coherent object and file namespaces to enable intuitive access.
Object storage features a flat namespace with key-value style semantics.
An OSFS could use object names with embedded path components to mimic a directory structure for the user's convenience, considering '/' in the object names as delimiters.
But this can lead to various incoherencies in the file system namespace during creation and deletion of objects.
For example, assume that there exists a directory named /A/ in the file system namespace; it would lead to an incoherence if the user were to PUT an object named A in the object namespace.
These incoherences only get compounded when we start to add support for directories, hard links, and symlinks.
Moreover, this could lead to data either becoming unreachable or accidentally overwritten.
The current set of systems rely on the user's cognizance to prevent any incoherence, and do not take this issue into consideration.Eventual data access consistency.
The system should ideally ensure that data access is consistent across both object and file interfaces.
We closely examine the use cases and draw the conclusion that though data is accessed through both interfaces, rarely is this concurrent.
In our view, this property should be exploited for performance improvement when designing the system.
We further believe that eventual consistency is a suitable model, especially given that object storage users and applications already expect it [37,73].
Distributed.
Object storage is inherently scalable and only a distributed file system can fully utilize this characteristic.
The massive datasets of the presented use cases also indicate that a solution would need to scale out beyond the compute power of a single node.
One approach to this is to implement a full-fledged distributed file system that performs byte-range locking.
However, on closer examination of the use cases, the datasets would need distributed access, but not necessarily to the same data.
A potential file system would probably be able to operate with weak cache consistency, since individual nodes would likely work on distinct parts of the data.
Some cloud providers even offer NFS over object storage [7,31].
We believe that a distributed file system with NFS V3-like semantics, but not weighed down by the scalability and performance limitations of NFS, would provide a good balance between consistency and performance.Unified access control.
The differences between file systems and object storage extend to access control methods.
Access control in object storage is more detailed than the Access Control Lists (ACLs) that are available on standard file systems, and the two tend to be incongruent.
Current OSFSs do not provide unified access control between files and objects, i.e., the permissions set for an object are not reflected in its file equivalent or vice-versa.
However, enterprises desire this unification across interfaces.
In addition, there is a vast diversity in the nature of access control supported by different object storage vendors, which presents a dilemma for a backend-agnostic system.
For example, some object stores support object level permissions [1,8,17] while others only offer permissions at the container level [18,26].
We surveyed existing systems and classified them into two broad categories, I and II, based on the approaches presented in Section 1.
We further subdivided II into three types, IIa, IIb, and IIc, based on their support for dual access and efficient file interfaces.
The results of our survey are summarized in Table 1, illustrating that despite a fairly high number of existing relevant systems, none of them meet all of the desirable requirements.
(We do not include file systems which were designed to use object-based storage devices (OSDs), such as Lustre [69], or systems like SwiftOnFile [33], which is an object store deployed over a distributed file system, because of their prohibitive limitations on dual access and generality.)
I : File systems paired with object storage ( in the table).
These are hierarchical storage management systems based on block and object storage.
A distributed file system is deployed over block storage and paired with object storage.
Data is either transparently or manually migrated between them.
This approach is inefficient and cumbersome for large datasets and leads to storage sprawl with the continuous transfer of data between different storage tiers.
II : OSFSs operate over existing object storage systems.
(a)Inefficient file system interface.
These systems offer intuitive dual access but support only simple or inefficient file interfaces.
They can be viewed as object stores with rudimentary file system properties.
(b)No dual access.
These systems offer the full set of efficient file interfaces but do not support intuitive dual access.
They are essentially distributed file systems with few object-like features 4 .
An example is CephFS, which is neither generic nor does it support dual access.
It only operates over RADOS, its own object store, and though it does store data in RADOS, this data cannot be accessed via object interfaces.
(c)Best of both worlds.
These systems offer both intuitive dual access and the full spectrum of efficient file interfaces.
ProxyFS and OIO-FS fall in this category.
However, they are neither generic, since they operate only on specific object stores, nor distributed.
Moreover, they provide only limited object interfaces or support only reads.
ProxyFS adopts N⇒N object-to-file mapping and relies on Swift's ability to present a scattered object as a single entity via the object interface.
Swift containers (buckets) need to be pre-configured for dual-access operation and this feature cannot be enabled retroactively.
ProxyFS is also the only other existing system which considers the issue of maintaining a consistent namespace, and is attempting to tackle it.
It relies on the internal capability of pre-configured Swift containers to maintain coherence but this is currently limited to only a few cases [29].
OIO-FS adopts a 1⇒1 object-to-file mapping and supports dual access only for reads.
We conclude that none of the existing systems fulfill the desired feature set from Section 3.
This prompted us to design and develop Agni ( ) to overcome such limitations.
Agni is an efficient dual-access OSFS that provides eventual consistency through both file and object interfaces while utilizing only commonly implemented object APIs and capabilities.
The effect of an operation through either interface is eventually reflected through the other interface.
It implements a multi-tier data structure that provides high performance for partial writes by accepting them in memory, persisting them to a log, and aggregating writes when merging the log.
Logged updates are indexed temporally which allows the system to update existing files even while flushing data to the log.
Agni merges logged updates asynchronously and presents a single object to the user.
In addition, we have implemented useful dual-access user APIs that, among other functions, allow users to synchronize files with objects on demand.Agni commits all file writes to a log that resides in object storage in order to avoid read-modify-write overhead for partial writes.
The system maps a single file to a single object, but does so across three distinct storage tiers: (i) cache, (ii) log, and (iii) base.
File-based applications read data from and write data to the top-most tier-the cache.
Agni fetches data into the cache on demand.
Asynchronously, the flush process writes data out from the cache to the intermediary tier-the log.
Periodically, a merge process asynchronously reconciles data from the log with the object in the bottom-most tier-the base.
The resting state of the system is when all data is located in the base.
At times parts of file system data can reside in all three tiers, but flush and merge processes eventually return the system to its resting state.
We call this approach eventual 1⇒1 mapping, and the associated delay file-to-object visibility lag.
Figure 1 depicts the three tiers, and the relationship between them and applications.
The file interface always sees consistent data while the object interface sees consistent data when there is no dirty data in the cache and the log.The log provides a transient staging ground for partial writes.
We defer the read-modify-write until the file is merged into the base tier.
To ensure a faster and simpler merge, Agni maintains a separate log for each file.
Updates made via the object interface are reflected to the file system using object notifications 5 .
We refer to this time delay as object-to-file visibility lag.
Weak cache consistency across distributed nodes is maintained via a publish/subscribe messaging service.Currently Agni assumes the absence of concurrent file and object data updates, and does not implement any locking.
This can lead to data corruption when concurrent data writes do occur.
For example, the base can be overwritten because of a write through the object interface even when a file is open.
In this case, data written through both interfaces could potentially be interspersed.
However, we expect this to occur rarely in practice.
In the future we plan to explore the use of checksums to guarantee object-to-file consistency to address this issue: every object in the log would be associated with a checksum of the base that would ensure unmerged updates are not merged with an overwritten base.
In addition, we implement coalesce()-a file interface to force a synchronous merge.
On its completion, updates from the file interface are reflected in the object interface.We implemented Agni using FUSE [78].
Our system supports multiple file systems concurrently, one per object store bucket.
For this paper, we store metadata in Redis [67] and use tmpfs as Agni's cache.
Agni currently runs on AWS S3 [1], OpenStack Swift [26], and Google Cloud Storage [17].
The object notification processor uses the serverless compute service [5], and updates are conveyed to distributed nodes using a cloud native messaging service [6].
Currently Agni does not support a consistent namespace or an integrated access control mechanism.
Our implementation is written in Python; it is open-source, and available at https://github.com/objectfs/objectfs.
Preliminary evaluation: We validate the performance of Agni for two different applications by comparing it to S3FS, a popular OSFS, and to a script which imitates manually copying data.
We prioritized our comparison to these approaches because they satisfy two principal criteria: dual access and being backend-agnostic.
Of the 19 other file systems in Table 1, only 7 systems qualify and only two of those have nearcomplete POSIX support-S3FS and YAS3FS.
We choose to compare Agni to S3FS because of its popularity and maturity [64].
S3FS is implemented in C++ using FUSE, and uses tmpfs as its local cache.
It can be mounted across multiple nodes, but there is no mechanism to maintain coordination between them and thus it is not a distributed file system.Benchmarks are performed on Amazon Web Services (AWS) using an m5.4xlarge instance with 16 vCPUs, 64 GB of RAM, and AWS high network bandwidth.
For both systems we use a 36 GB in-memory file system as a cache, and for Agni we allocate 4 GB to the Redis server.We simulate the media use case by running ffmpeg [74], a transcoding application, to transcode 14 MPEG files (total 32 GB) 6 to MOV files.
Gene sequence alignment is simulated using bowtie2 [39], a gene sequence aligner, to align a single large genome file of 8 GB 7 .
The manual data transfer work- load attempts to mimic the case for both file systems paired with object storage and a manual user performing the actions.
Figure 2 depicts the results.
Agni performs better because it overlaps I/O and computation.
It can upload data to object storage while parts of it are under processing.
Other systems have to wait for the entire file to be processed before their upload can begin.
The merge time denotes the file-to-object visibility lag after the data is uploaded.
Agni performs 40%-60% faster in case of ffmpeg and 20%-40% faster in case of bowtie2 when compared to both of the existing approaches.Future work: Agni is a system under active development, and lacks some attributes essential for its deployment in a production environment.
Our current focus is to implement coherent namespaces and access control over our dual-access system.
Towards this goal, we plan to support two operating modes for Agni: (i) Mode I will offer complete intuitive dual access and the best object interface performance, but will only support basic object interfaces, and applications will have not have the ability to verify the reflection of file interface updates through the object interface.
Additionally, this mode will able to rectify namespace incoherencies that can be remedied retroactively without data loss, and will be able to identify the set of incoherencies that will require user intervention to resolve.
Finally, access control in this mode will be dependent on the support offered natively by the object store.
(ii) Mode II will actively prevent the occurance of namespace incoherence, and will support filesystem-like operations such as creation and deletion of directories, symlinks, and hard links via the object interface.
Access control will be uniform and independent of the object store.
In addition, applications will have the capability to verify the reflection of file interface updates before accessing an object.
However, this mode will have lower object interface performance and intuitiveness.
9We would like to get the storage community's feedback on the following points: 1.
Many enterprises are looking to move towards multi-cloud or hybrid-cloud setups.
We'd like to discuss the challenges of deploying dual-access storage systems in such organizations.
2.
We leverage the acceptability of weak data consistency across both interfaces to improve Agni's performance.
This works for our use cases, but are there use cases that require strong data consistency?
If weak consistency is sufficient, what would be acceptable object-to-file and fileto-object visibility lags?
3.
We describe a set of use cases in Section 2 which are well suited for dual-access systems.
Are attendees aware of any other use cases (sourced from their real-world experience) which could benefit from such systems?
4.
We have presented our rationale behind the design requirements in Section 3.
Are there other design attributes which we have not discussed?
Are there any aspects of our design which necessitate more deliberation or rethinking?
Further, we believe that more data workflows are bound to migrate to cloud.
Which additional design attributes would be important to better position Agni in cloud environments?
5.
In Future work, we discuss our approach to tackling the unsolved challenges of presenting a coherent namespace and unified access control.
The intuition is to provide support for a diversity of potential user requirements and choices of object storage.
Does our approach appear to be feasible or are we overfitting?
Are there other approaches to this problem and how do organizations currently address these issues?
We would like to get the storage community's feedback on the following points: 1.
Many enterprises are looking to move towards multi-cloud or hybrid-cloud setups.
We'd like to discuss the challenges of deploying dual-access storage systems in such organizations.
2.
We leverage the acceptability of weak data consistency across both interfaces to improve Agni's performance.
This works for our use cases, but are there use cases that require strong data consistency?
If weak consistency is sufficient, what would be acceptable object-to-file and fileto-object visibility lags?
3.
We describe a set of use cases in Section 2 which are well suited for dual-access systems.
Are attendees aware of any other use cases (sourced from their real-world experience) which could benefit from such systems?
4.
We have presented our rationale behind the design requirements in Section 3.
Are there other design attributes which we have not discussed?
Are there any aspects of our design which necessitate more deliberation or rethinking?
Further, we believe that more data workflows are bound to migrate to cloud.
Which additional design attributes would be important to better position Agni in cloud environments?
5.
In Future work, we discuss our approach to tackling the unsolved challenges of presenting a coherent namespace and unified access control.
The intuition is to provide support for a diversity of potential user requirements and choices of object storage.
Does our approach appear to be feasible or are we overfitting?
Are there other approaches to this problem and how do organizations currently address these issues?
