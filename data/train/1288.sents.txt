Much work has been done on characterizing the workload of a database system.
Previous studies focused on providing different types of statistical summaries , and modeling the run-time behavior on the physical resource level as well.
In this paper, we focus on characterizing the database system's workload from the view of database user.
We use user access patterns to describe how a client application or a group of users access the data of a database system.
The user access patterns include a set of user access events that represent the format of the queries and a set of user access graphs that represent the query execution orders.
User access patterns can help database administrators tune the system, help database users optimize queries, and help to predict and cache future queries.
In this paper, we will present several approaches to use user access patterns to improve system performance, and report some experimental results.
Database workload characterizing is usually based on the database traces.
The traces are a collection of measures, such as pages read/written, number of locks and number of SQL statements, produced by all transactions being processed by the DBMS within a time interval.
Database workload characterization can be based on the three abstract levels: application level, transaction or session level, and physical resource level [9].
Previous studies focus on providing all kinds of statistical summaries and run-time behavior on the physical resource level.
Most of the work is from the view of database server.
We are interested in database user behaviors in the session level, i.e., the queries submitted by a user within a user session.
In this paper, we propose the idea of user access patterns to characterize the database's workload from the view of database users.
The main components of the user access patterns are a collection of user access events which represent the format of the queries, and a collection of user access graphs which represent the query execution orders.
We suggest several ways to improve system performance by applying user access patterns.
The rest of the paper is organized as follows.
We discuss the concepts of user access patterns and give formal definition in Section 2.
In Section 3 , we propose several approaches to improve system performance by using user access patterns.
We give experimental results in Section 4.
Related work is discussed in Section 5, and Section 6 is the conclusion.
Fig. 1.
An example of user access graphs Figure 1 shows two-level user access graphs for the patient-information model.
When a user logs in (P1), the corresponding profile is retrieved (P2).
Then he/she can retrieve either treatment history (P3) or treatment schedule (P4).
Graph P, illustrated on the left side, is a high-level user access graph that describes the execution orders of five sub-models.
Table 1 is an instance of the treatment-history sub-model which contains five consecutive SQL queries.
The corresponding user access graph P3 is shown on the right side of Figure 1.
We call a the user access graph with nodes that are user access events a basic user access graph.The patient-information model contains two global information: the customer's id and the login date.
To reflect such information in the user access graph, graph P associates two global data: g cid and g date.
The value of g date usually will not changed after a user login, thus it is a global constant and g cid is a global variable.
Graph P3 inherits the global data of P , and it has an additional information/data: treatment id (g tid).
However, global variable g cid in P3 becomes a global constant since the value will never be changed in P3.The value of global variables may change when an event is submitted.
For example, we don't know the value of treatment id until q33 is submitted.
When q33 is submitted, the treatment id (g tid) will be the value embedded in q33.
Thus, we assign a local variable l tid as the parameter of v33, and v33 associates with an action: g cid=l cid.The parameter of v34 is global variable g tid.Definition: database user session -a database user session consists of a sequence of queries which aim to finish certain function or task.Definition: user access graph -we use user access graphs to describe the query execution orders within a user session and the orders between user sessions.
A user access graph is a directed graph G p (V p , E p ) which associates with a set of global variableF p = (f 1 , ..., f n ) and a support value τ p .
V p = (v 1 , ..., v m )is a set of user access events or user access graphs.
The parameter of a node is either a constant, a global variable, or a local variable.
A directed edge e k = (v i , v j , σ vi→vj ) means that v j follows v i with a probability of σ v i →v j .
Some nodes associate with actions that change the value of global variables.
G p has one start node and one or more end nodes.Definition: basic user access graph -a basic user access graph is a user access graph whose nodes are user access events.
Table 1.
An instance of treatment-history-retrieving procedure.
Business meaning q30 select count(t id) from treatment where c id = 'c101' get treatment count.
q31 select t id from treatment where c id = 'c101' get treatment id q32 select t date from treatment where customer id = 'c101' get treatment date.
q33 select * from treatment details where treatment id = 't202' get treatment details.
q34 select * from treatment payment where treatment id = 't202' get payment information.From Table 1, we observe that query q34 can not be anticipated until query q33 is submitted.
Thus, the corresponding user access event v34 is determined by v33.
We call events whose parameters are either constants, global constant or global variables determined events since the corresponding queries can be known before they are submitted.
Other events are called undetermined events.
For example, event v33 is undetermined event since it has a local variable l tid, and the others are determined events.
A determined event can be result-determined by the results of other events, parameterdetermined by the parameters of other events, or it only depends on constants or global constant which is called a graph-determined event.
A graph-determined event does not depend on any other events.
The difference between an undetermined event and a resultdetermined event is that the parameters of a result-determined event can be derived from query result.
For example, v31, v32 are graph-determined event, and v34 is parameterdetermined by v33.Definition: determined/undetermined event -an event v i is a determined event in a graph p, if and only if the parameters are either constants or global variables.
Otherwise, v i is undetermined.Definition: graph/result/parameter determined event -if every parameter of an event is a constant or a constant global variable, we call it a graph determined event.
Event v j is result-determined by v i , if and only if one or more parameters of v j are unknown until v i finishes execution.
Event v j is parameter-determined by v i , if and only if one or more parameters are unknown until v i is submitted.There are many user access graphs in a client application or a group of users.
We are interested in frequent user access graphs, i.e., the graph support is bigger than a predefined threshold τ .
The user access patterns of a client application or a user group contains:-A collection of frequently-performed queries; -A collection of time-consuming or resource-consuming queries; -A collection of frequent user access event associated with parameter distribution; -A collection of frequent user access graphs which have a larger support than a predefined threshold τ .
User access patterns can be obtained by applying various data mining and statistic analysis methods on the database workloads or traces.
Mining user access patterns usually involves the following steps: query clustering and classification; user and session identification; session clustering and classification and session modelling (i.e., generating user access graphs).
In this paper, we will concentrate on using user access patterns to improve system performance, and assume the patterns are already obtained.
We summarize the usage of user access patterns as follows:The queries submitted by a database user are logically correct, but may not be executed efficiently.
Database users can re-design the submitted queries according to the user access patterns.
From the user access patterns, we can find the bottleneck of the system, i.e., the resource-consumed queries and the frequently-performed queries.
Efficiently rewriting these queries will improve the system performance.
Since each user access event represent a set of SQL queries, we can redesign the corresponding SQL template which may result in a great improvement on the overall system performance.We can also reconstruct the query execution orders, i.e., redesign the user access graphs.
In Section 4.3, we will show that this approach can also achieve a better performance.User access patterns can help to tune the database system.
There are many studies done on tuning DBMS through analyzing database workloads, such as index tuning [4] and materialized view suggesting [1,5].
These techniques may provide useful suggestions for improving system performance, but the drawback is that they do not distinguish the step of finding user behaviors with the step of using the behaviors for query optimization.
In our approach, we assume user access patterns are already mined from representative workloads.
Since user access patterns represent the user behaviors, tuning the database system based on the user access patterns is better than analyzing the queries in a workload.User access patterns can help to anticipate and prefetch queries.
The submitted queries usually follow the user access graphs.
Thus by matching a user request sequence with the user access graphs, we can predict future queries.
Pre-computing the answers of future queries can reduce the query response time.
Some extra step is needed to predict the corresponding queries.
For example, we can not predict the corresponding query of an un-determined event since some local variable is unknown until the query is submitted.
When a query is submitted, all queries that are parameter-determined by it are known, and can be predicted.
And when a query finishes execution, all queries that are result-determined by it are known, and can be predicted.User access patterns can also be used for query caching.
We can store the answers of time-consumed queries or frequently-performed query to avoid repeated computing.
In some cases, semantic relationships exist between the queries submitted by one user.
Such relationships can help to rewrite and cache a query to answer multiple queries.
For example, the predicate of query q31 and q32 in Table 1 are the same.
Thus we can submit an alternative query q31 -"select count(*), t id,t date from treatment where customer id = 'c101'" -to answer both queries.
In [18], we propose three types of solutions to rewrite the queries in a basic 'user access path.
Given two consecutive queries u and v, a sequential-execution (SEQ) solution prefetches the answer of v which u is submitted.
We may also submit the union query (u ∪ v) to answer both u and v , and it is called the union-execution (UNI) solution.
The third solution is called proberemainder-execution (PR) solution.
In this solution, an extended version of query u, referred to as u , is submitted and cached.
It includes columns needed by query v. To answer v, the solution retrieves part of the answer from R u , as well as submitting a remainder query v to the server to retrieve the tuples that are not in the cache.
The SEQ solution pre-executes queries to shorten the latency between the request and the response, while the UNI and PR solution aim to improve response time by decreasing the network transmission cost and the server processing cost.
Since the submitted queries have certain format and follow certain order, it is reasonable to define certain rules to guide the execution of these queries.
Thus, we proposed a new database gateway, SQL-Relay [17].
Unlike other database gateways and database caching servers, SQL-Relay treat each query as one type of event, and use pre-defined query execution rules to process it.
It also traces user request sequences for query prediction.
Database user can pre-define query execution rules to guide the execution of the events.
There are three types of execution rules: global rewriting rules, local rewriting rules and prefetching rules.
A global rewriting rule aims to rewrite a single query and improve it's execution performance, i.e., generating an equivalent query which can be execution more efficiently.
A prefetching rule pre-fetches the answer of future queries based on the current request sequence.
When semantic relationships exist between the queries of a user access path, a local rewriting rule can make use of such semantic relationship to rewrite the current query to answer multiple queries.
The query execution rules can be obtained by analyzing user access patterns.
SQL-Relay also include several functions to manipulate the query answers, such as projection, sum, count and simple selections.
SQL-Relay is also a query caching server.
It manages two kinds of caches, the global cache and the local cache.
The global cache candidate can be chosen from the time-consumed queries and frequently-performed queries in the user access patterns.
Query answers generated by applying prefetching rules or local rewriting rules are stored as local caches.
We implement SQL-Relay by using Java language, and in the next section, we will show the experimental results by using SQL-Relay in an OLTP application.
Now, we present the experimental result of an OLTP application.
A clinic office has a client application which helps the employee check in patients, make appointments and sell products.
After preprocessing the database workload collected in 8 hour observation time , we found 12 instances of the application.
The query log has 9,344 SQL statements and 190 SQL templates, where 72% (136) of queries are SPJ (select-projectjoin) queries.
Few tables (6 out of 126) are frequently updated, and very few records are affected by a modification query (insertion, deletion or update).
Thus, the cache maintenance cost is not too high.718 sequences are found from the log.
These sequences can be classified into 21 basic user access graphs with a support value bigger than 10.
We require each node or path must have a minimal support value 3 or a confidence value 0.1.
Representative user access graphs are shown in Figure 2.
User access graph P1 1, P1 2 and P1 3 are high-level graphs.
An instance of user access path P1 which retrieves a given customer's profile is listed in Table 2.
P1 has four global parameters: user id (g uid), customer id (g cid), branch id (g bid), and login date (g date), where g date is a constant global variable.
Event v30,v9,v47 are un-determined event, and event v10 and v20 are parameter-determined by v9.
We can submit a query "select * from customer where cust num='1074' to answer both query q9 and q20, and partly answer query q10.
Therefore, we can define a local rewriting rule for P1.From the user access patterns, we generate 19 query prefetching rules and 7 local rewriting rules and deploy them on SQL-Relay.
The global cache candidates are the selection query whose result size is smaller than 10K, and is managed by using LRU replacement policy.
Whenever the content of a base (3) only using query prefetching rules on SQL-Relay, and (4) using local rewriting rules and query prefetching rules together.
The query response time is calculated at the client side.
It includes server processing time, network transmission time, cache processing and maintaining time.
Our result show that the response time of case 4 is the shortest since both network transmission time and server processing time are reduced.
The prefetching case has a shorter response time than the server caching, but it doesn't improve server performance and has heavier network traffic than the later.
TPC Benchmark T W (TPC-W) [15] is a transactional web benchmark that simulates the activities of a business oriented transactional database-driven web server.
TPC-W models an on-line bookstore that consists of 14 browser/web server interactions, and each interaction consists of a sequence of SQL queries.
TPC-W simulates three different profiles/users by varying the ratio of browse to buy: primarily shopping (WIPS), browsing (WIPSb) and web-based ordering (WIPSo).
The benchmark also specifies the frequency of the web interactions and the transition probabilities matrix.
Thus, we can derive user access patterns from the specification.In [2], a TPC-W Java implementation is proposed.
The remote browser emulation (RBE), web merchant application logic are implemented completely in Java language.
We adopt the implementation to Tomcat application server, and Microsoft SQL Server 2000 database.
In the original implementation, the queries in a web interaction do not Table 2.
An instance of user access path P1 ID Statement q30 select authority from employee where employee id ='1025' q9 select count(*) as num from customer where cust num = '1074' q10 select card name from customer t1,member card t2 where 1.
cust num = '1074' and t1.card id = t2.card id q20 select contact last,contact first from customer where cust num = '1074' q47 select t1.branch ,t2.
* from record t1, treatment t2 where t1.contract no = t2.contract no and t1.cust id ='1074' and check in date = '2002/03/04' and t1.branch = 'scar' q49 select top 10 contract no from treatment schedule where cust id = '1074' order by checkin date desc share common connections.
We modify the implementation to make all queries in a web interaction share the same connection.
We collect TPC-W database workload which contains the mix of 15 concurrent RBEs over an 8 hour's observation time.
The workload contains 25,994 SQL queries.
There are only 46 SQL templates in the workload, thus well-design SQL-templates can achieve a better system performance.
The average disk I/O for the queries of Best Seller web interaction is 4,260 block, and the average I/O for all other queries is only 170 block.
Thus, they are the most resource-consumed queries.
We also observe that the queries of Best Sellers, New Products and Subject Search web interaction are the most frequently-performed queries.
Thus, caching the result of these queries can obtain a great performance improvement.
Other studies also support our observation [16,10].
User access patterns can also help us to design the queries.
For example, table 3 lists the pseudo code for the order display web interaction.
It contains 5 consecutive queries, where σ q1→q2 is the frequency of the valid users, and σ q2→q3 is the frequency of the users who have at least one order.
The think-time between these queries is very short, thus prefetching rules are not suitable.
We still can rewrite these queries to achieve better performance.
Query q2,q3,q4 are result-determined by their predecessor, and query q5 is result-determined by q2.
We can split join query q3 into query q3 1: select * from customer where cid=@c id and query q3 2: "select orders.
*, address.
* country.
* from customer,address,country,orders where o id=@o id and o bill addr=addr id and addr co id=co id.
Since both column c uname and c id are the key of table customer, thus query q3 1 is equivalent to query q1': select * from customer where c uname=@c uname and c passwd=@c passwd has containing-match relationship with q1.
We can replace q1 with q1', and it is called rewriting case1.In the second case, we try to rewrite query q3 and q4.
Since o id is the primary key, and o ship addr is the foreign key, we can join q3 and q4 together as q3'.
The advantage is that we make use of the foreign key constraints, and only submit one query to the server.
The disadvantage is that we introduce a new join condition.
In the third case (case 3), we first rewrite query q3 as q3 1 and q3 2, then replace query q1 with q1' and join q3 2 and q4 as well.
In case 4, we consider combining query q2, q3, Table 3.
Pseudo code for the order display web interaction ID Statement q1 select @c cid = c id from customer where c uname=@c uname and c passwd=@c passwd q2 select @o id = max(o id)from orders where o c id=@c id q3 select customer.
*, orders.
*, address.
* country.
* from customer,address,country,orders where o id=@o id and c id=@c id and o bill addr=addr id and addr co id=co id; set @a id = result.o addr id q4 select address.
*, country.
* from address,country where addr id=@a id and addr co id=co id q5 select * from order line,item where ol i id=i id and ol o id=@o id and q4 together.
Since q2 will return a single value which is only used by query q3, we can rewrite q2 as the sub-query of the join of q3 and q4.
In the last case (case 5), we first rewrite query q3 as q3 1 and q3 2, then replace query q1 with q1' and rewrite q2 and q3 2 and q4 together.The performance of these rewriting solutions depends on the internal query process mechanism of DBMS.
We create necessary indices according to the definition of TPC-W benchmark, and test the system performance under two different database servers: Microsoft SQL Server 2000 2 and MySQL 4.0.
The benchmark does not specify the frequency of the valid users and the frequency of the users who have at least one order, we set them as 0.95 and 0.80 respectively.
The client application is implemented by using Java language which has a connection speed of 56K bps with the server.
Table 4 illustrates the experimental results, and case 0 corresponds to the original queries.
The two servers have different results since they have different query processing mechanism.
For SQL Server 2000, case 4 and 5 generate fewer requests to the server and have faster response time than the other cases.
However, they have more server I/O.
Meanwhile, case 2 and 3 have a shorter response time than case 0, and they have the same amount of server I/O as case 0.
Case 1 has no significant improvement over case 0.
MySQL server does not support sub-query, thus case 4 and 5 are not applicable.
Case 2 and 3 have shorter response time than case 0 and 1.
And case 1 and 3 have less server I/O than case 0 and 2, while case 1 has the lowest network traffic 3 .
A survey of the techniques and methodologies for the construction of workload models in different application domains is presented in [3].
Some previous workload studies focused on describing the statistical summaries and run-time behavior [14,20,8], clustering database transactions [21,19,11], predicting the buffer hit ratio [6,7], and improving caching performance [13,12,18].
Chaudhuri et al [14] suggest to use SQL-like primitives for workload summarization, a few examples of workload summarization and the possible extensions to SQL and the query engine to support these primitives are also discuss in the paper.
n [20], a relational database workload analyzer (REDWAR) is developed to characterize the workload in a DB2 environment.
The study focuses on statistical summaries, such as averages, variations, correlations and distributions, and description of the run time behavior of the workload.
In [8], Hsu et al analyze the characteristics of the standard workload TPC-C and TPC-D, and examine the characteristics of the production database workloads of ten of the world's largest corporations.
Yu et al [19] propose an affinity clustering algorithm which partitions the transactions into clusters according to their database reference patterns.
Nikolaou et al [11] introduce several clustering approaches by which the workload can be partitioned into classes consisting of units of work exhibiting similar characteristics.
Dan et al [6,7] analyze the buffer hit probability based on the characterization of low-level database access (physical pages).
They make distinctions among three types of access patterns: locality within a transaction, random access by transactions, and sequential accesses by long queries.
Sapia [13,12] discusses the PROMISE (Predicting User Behavior in Multidimensional Information System Environment) approach which provides the cache manager with transaction level access patterns to make prediction for OLAP system.
In [18], we propose algorithms to analyze the semantic relationship between the events of a user access graph, rewrite and cache the current query based on the semantic relationship between it and future queries.
In this paper, we use the user access events to represent the static features of a database workload, and use the user access graphs to represent the dynamic features.
To our knowledge, this is the first attempt to analyze database user's access patterns systemically and completely.
The experimental results presented in this paper show that the application of user access patterns can improve system performance greatly.
Database vendors can also use the idea of SQL-Relay proposed in the paper to develop intelligent database gateway.
