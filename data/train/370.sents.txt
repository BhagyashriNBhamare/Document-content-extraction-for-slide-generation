Energy harvesting sensor platforms have opened up a new dimension to the design of network protocols.
In order to sustain the network operation, the energy consumption rate cannot be higher than the energy harvesting rate, otherwise, sensor nodes will eventually deplete their batteries.
In contrast to traditional network resource allocation problems where the resources are static, time variations in recharging rate presents a new challenge.
In this paper, we first explore the performance of an efficient dual decomposition and subgradient method based algorithm, called QuickFix, for computing the data sampling rate and routes.
However, fluctuations in recharging can happen at a faster timescale than the convergence time of the traditional approach.
This leads to battery outage and overflow scenarios, that are both undesirable due to missed samples and lost energy harvesting opportunities respectively.
To address such dynamics, a local algorithm, called SnapIt, is designed to adapt the sampling rate with the objective of maintaining the battery at a target level.
Our evaluations using the TOSSIM simulator show that QuickFix and SnapIt working in tandem can track the instantaneous optimum network utility while maintaining the battery at a target level.
When compared with IFRC, a backpressure-based approach, our solution improves the total data rate by 42% on the average while significantly improving the network utility.
In various application scenarios, energy can be harvested from the surrounding environment to recharge the batteries and extend the network's lifetime.
Many forms of energy such as solar, wind, water flow, thermal and vibration are being explored for driving sensor network platforms [1], [2], [3], [4].
Such sensor platforms have opened up a new dimension to the design of networking protocols.
However, the strength of harvested energy is a function of various static parameters, such as the specifications and orientation of the solar panel; and time-varying parameters, such as the weather and the season.
The protocol needs to adapt to such dynamics to avoid running out of battery.
This is especially needed for environmental monitoring applications as they often require periodic data collection from all nodes in the network.
Our objective in this paper is to design a distributed and adaptive solution that jointly computes the data collection rates for each node, finds the routes and schedules transmissions based on interference constraints and energy replenishment rates, such that the network utility can be maximized while maintaining perpetual operation of the network.Similar to the standard flow control and resource allocation (e.g. [5], [6]) approaches, we formulate the problem as a conThis material is based upon work supported by the National Science Foundation under Grants CNS-0721434, CNS-0721817, CNS-0831919, CCF-0916664, and CCF-0635242.
strained optimization problem.
In our formulation, we have an energy conservation constraint involving the replenishment rates, along with the standard flow conservation and interference constraints.
The fundamental difference of our problem is that, our energy conservation constraint is time-varying, due to the time-varying nature of energy replenishment, i.e., our problem is dynamic and thus it has a different solution in every point in time.
The standard implementations of the dual decomposition method for resource allocation involves a large number of iterations, each of which incurs a high overhead due to the necessary message exchange between neighboring nodes.
In a static setting, the convergence time is less of an issue, since the solution of the problem is fixed.
However, with time-varying replenishment rate, we have a time-varying optimal resource allocation in our problem.To that end, the first major question we answer in this paper is, "how closely can we track that optimal point by using distributed iterations to solve the Lagrangian dual problem?"
We show (in Section IV) that, in a network with an arbitrary topology, the time scale of such solutions is too slow to follow the variations in the replenishment rate for the optimal point to be tracked sufficiently closely.
Consequently, we focus on well-structured networks with an underlying directed acyclic network graph (DAG).
We exploit the DAG structure to develop an efficient synchronous message passing scheme, QuickFix, motivated by general solution structure of dynamic programs.
We show that the convergence time of QuickFix is sufficiently small to track the optimal solution fairly closely.The second major question we address is, "how does the finiteness of the total amount of energy storage in each node affect the performance of joint energy management and resource allocation?"
If one accounts for the finite batteries in the original problem formulation, the solution involves complicated Markov decision processes, which does not lead to better understanding of the dynamics of the system.
Instead, we propose a simple novel adaptive localized algorithm, SnapIt, that operates above QuickFix, to slightly modify the optimal sampling rate provided by QuickFix, based on local battery states.
We show that using SnapIt along with QuickFix has two important consequences.
Firstly, the fraction of time for which a node is down reduces significantly due to a complete battery discharge reduces significantly (to 0 in many instances as shown in our evaluations).
Secondly, due to the short response time of SnapIt, the joint algorithm is capable of responding to the changes in replenishment rate much more quickly.
Hence, the overall network utility also increases with SnapIt.In summary, the key contributions of this paper are as follows:• We develop a decomposition and subgradient based distributed solution, called QuickFix, that can efficiently track instantaneous optimal sampling rates and routes in the presence of a time-varying recharging rates.
Prior works based on such techniques have mostly focused on static scenarios.
• For perpetual operation in the presence of rapid fluctuations in the recharging rates, we present a new local algorithm, called SnapIt, that attempts to maintain the battery at a certain target level while stochastically maintaining a high network utility.
• Simulations using TOSSIM 2.x [7] show that the algorithms working in tandem can lead to an efficient solution for simultaneously achieving proportional fairness and perpetual operation.
It is also shown to significantly outperform IFRC, a backpressure-based protocol.
Rate Control and Routing: Routing in energy harvesting sensor network is explored in [8].
The authors proposed two heuristic solutions.
The first solution is a localized protocol that allows the source node and exactly one intermediate node to deviate from the shortest path and opportunistically forward packets to a solar-powered neighboring node.
On the other hand, the second solution, with the assistance of the sink, chooses the shortest path with the minimum number of nodes that run solely on the batteries.
In another work [9], an online routing algorithm which seeks to maximize the number of accepted flows is proposed.
In contrast to these works, we consider joint computation of routes and rates with a different objective of fair data collection and perpetual operation.Lexicographically maximum rate assignment and routing for perpetual data collection has been studied in [10].
It extends the framework in [11], and presents a centralized as well as a distributed algorithm.
The centralized algorithm is proven to give the optimal lexicographic rate assignment.
However, the distributed algorithm can only reach the optimum if the routing paths are predetermined, and the network is a tree rooted at the sink.
Furthermore, the dynamics of recharging profiles is not considered.
The exact recharging profile for each day must be known and it is sensitive to the initial battery levels.
In contrast, our distributed solution does not require any knowledge of the future recharging rates.
Furthermore, our distributed solution can work on a more generalized structure than a tree.
All of these factors result in a more practical algorithm in comparison to the algorithm proposed in [10].
Other prior works on rate control in WSNs include [12], [13], [14], [15], [16], [17], [18].
Although some of these works [15], [16], [17] also aim to achieve fairness in WSNs, none of them consider energy replenishment.
In this paper, we reengineered IFRC [15] to consider recharging capabilities of modern sensor platforms and use it as a benchmark.
Performance: The dual decomposition technique has been applied in many works to maximize the network utilization.
In [5], the utility function, as ours, is defined as the summation of the log of the rate achieved by each flow in the network.
However, in their formulation, the route for each flow is fixed.
The authors propose both a primal and a dual-based algorithm.
Both algorithms tune the transmission attempt probability of each node to maximize the utility function.
In contrast to [5], a general utility function is considered in [6].
It also applies the dual decomposition technique to develop a distributed algorithm.
However, the algorithm not only addresses rate assignment, but also routing.
Maxmin fairness of rate assignment problem in WSNs is studied in [19].
Their proposed algorithm is also based on dual decomposition.
In their model, each sensor transmits with a certain probability.
Thus, after Lagrangian relaxation, the dual function is not concave.
To overcome this problem, they convexify their problem and apply the Gauss-Seidel method to solve the problem.
Although all the above approaches allow nodes in the network selftune certain parameters to maximize the network utilization, none of them consider energy constraints, not to mention recharging.
This section outlines the network model and the problem formulation.
We consider a static sensor network represented as G = (N, L), where N is the set of sensor nodes including the sink node, s, and L is the set of directed links.
We assume that a DAG (directed acyclic graph) rooted at the sink is constructed over the network for data collection.
The problem is formulated as a convex optimization problem by exploiting the DAG structure.
This formulation not only provides clear system design guidelines but also allows us to design an efficient signaling scheme.
Before presenting the problem formulation, we present some of the key notations used in the paper.
The notations and their corresponding semantics are also listed in Table I for reference.For each sensor node i ∈ N , A i denotes its ancestors in the DAG, i.e., the nodes that are on some path(s) from node i to the sink s. Conversely, D i denotes the descendants.
Also, C i and P i are the children and parent nodes of node i respectively.
The amount of energy consumed in sensing the environment is represented by λ represents the energy cost for receiving a packet at node i.
These parameters are the energy costs of the system.
In particular, we consider slotted-time system and the time during a day is broken into multiple time intervals called epochs.
The length of each epoch is τ slots.
We use π i (e) to represent the average (long term) energy replenishment rate of node i in epoch e, while ρ i (t) is used to represent the real instantaneous (short term) energy replenishment rate of node i in time slot t. For each epoch The set of descendants of node i A iThe set of ascendants of node i C iThe set of children nodes of node i P iThe set of parent nodes of node i B i (t)Battery state of node i at time t M iBattery capacity of node i π i (e) Estimated average recharging rate of node i in epoch e ρ i (t)The instantaneous recharging rate of node i at time t τEpoch length r iSampling rate of node i λ Energy cost for RX at node i f ijThe amount of capacity allocated on link (i, j) w ijThe fractional amount of node i's traffic that passes link(i, j) z ij (w)A function of w, that represents the fractional amount of i's traffic that passes j ΠThe feasible region of link capacity variables f ij WThe feasible region of routing variables w ij µ iLagrange multiplier for energy conservation constraint at node i υ iLagrange multiplier for flow balance constraint at node i αThe constant step size used in the subgradient methode, we define π i (e) = 1 τ E eτ t=(e−1)τ +1 ρ i (t).
We assume that π i (e) can be estimated by each node with high accuracy.
Estimating π i (e) is beyond the scope of this paper.
Moreover, we define w ij to be the fractional outgoing traffic of i that passes through a parent j and z ij (w) to be the fractional outgoing traffic of i that passes through an ancestor j. Thus,w ij = 0, ∀j / ∈ P i and z ij (w) = 0, ∀j / ∈ A i .
Note that z ij (w)is a function of w, where w is the vector of w ij ∀i, j.
The recursive relation between the two variables is given below.z ij (w) = X k∈P i w ik z kj (w)(1) In this section, we present an outline of the dual based cross-layer framework for distributedly computing the rates and routes in each epoch.
We define the utility function U i (r i ) for node i to be log(r i ), where r i is the sampling rate of node i.
Our goal is to maximize the sum of the utility functions U i (r i ) = log r i , which is strictly concave and known to achieve proportional fairness [20].
Thus, we formulate our problem as an optimization problem as shown below:Pe: maxr i ,f ij ,w ij X i log(r i ) (2) s.t. π i (e) ≥ λ (sn) i r i + X j∈D i z ji (w)λ (rx) i r j + X j∈P i λ (tx) ij f ij (3) X j∈P i f ij ≥ r i + X j∈D i z ji (w)r j r i ∈ R + , f ij ∈ Π, w ij ∈ WThe first and the second constraints are the energy conservation and flow balance constraints, respectively.
The flow balance constraint states that the sum of allocated capacity for each outgoing link should be greater than the total amount of traffic going through each node, including its own data.Besides these two constraints, the amount of capacity allocated on each link must be in the feasible capacity region Π.
We assume the node exclusive interference model as in [6].
Thus, the feasible capacity region can be similarly defined as the convex hull of all the rate vectors of the matchings in G.One can observe that this problem is dynamic, since the energy conservation constraint involves the time varying replenishment rate π i (e).
Thus, the the feasible region and the optimum solution differ in each epoch.
One can view this dynamic problem as a sequence of static problems.
The standard method to solve each static problem involves the application of the dual decomposition and the subgradient methods.
However, the implementation of these solutions in the network involves a large overhead due to message exchange between neighboring nodes.
Consequently, the convergence time becomes an important issue.To that end, we introduce QuickFix, which, in each iteration of the subgradient method, exploits the special structure of DAG to form an efficient control message exchange scheme.
This scheme is motivated by the general solution structure of a dynamic program.
QuickFix is based on the hierarchical decomposition approach as the starting point.
By relaxing the energy conservation and flow balance constraints in Problem P e , we get the partial dual function q(µ, υ) as follows:q(µ, υ) = max r i ,f ij ,w ij X i log(r i ) + X i µ i 0 @ π i (e) − λ (sn) i r i − X j:(i,j)∈D i z ji (w)λ (rx) i r j − X j∈P i λ (tx) ij f ij 1 A + X i υ i 0 @ X j∈P i f ij − r i − X j:(i,j)∈D i z ji (w)r j 1 A s.t. r i ∈ R + , f ij ∈ Π, w ij ∈ WThe dual problem is therefore:min µ i ≥0,υ i ≥0 q(µ, υ)(4)The dual problem in (4) can be decomposed hierarchically [21], [22], [23] as follows.
The top level dual master problem is responsible for solving the dual problem.
Since the dual function is not differentiable, the subgradient method [23], [24] is applied to iteratively update the Lagrange Multipliers µ i and υ i at each node using (5).
The notation [.]
+ means projection to the positive orphan of the real line R.µ k+1 i = » µ k i − α 1 " π i (e) − λ (sn) i r i − X j∈D i z ji (w)λ (rx) i r j − X j∈P i λ (tx) ij f ij «-+ υ k+1 i = » υ k i − α 2 " X j∈P i f ij − r i − X j∈D i z ji (w)r j «-+(5)Each time the Lagrange Multipliers are updated, a primal decomposition is performed to decouple the coupling variables f ij , such that when f ij are fixed, the problem can be further decomposed into two layers of subproblems.
The upper level optimization problem can then be further decomposed into many smaller subproblems, one for each i, as shown in (6):max r i ,w ij log(r i ) − µ i 0 @ λ (sn) i r i + X j∈D i z ji (w)λ (rx) i r j 1 A − υ i 0 @ r i + X j∈D i z ji (w)r j 1 A s.t. r i ∈ R + , w ij ∈ W(6)At the lower level, we have the optimization problem shown in (7), which is in charge of updating the coupling variablesf ij max f ij X (i,j)∈L (υ i − λ (tx) ij µ i )f ij s.t. f ij ∈ Π (7)The lower level optimization problem in (7) is equivalent to the maximum weight matching problem.
Under the node exclusive interference model, it can be solved in polynomial time.
However, in order to solve the maximum weight matching problem in a distributed fashion, we utilize the heuristic algorithm in [25].
While applying the algorithm, instead of the queue difference between neighboring nodes, we use the combined energy and queue state of a node (υ i − λ (tx) ij µ i ) to modulate the MAC contention window size, when a node i attempts to transmit a packet over the link (i, j).
Note that in the upper level optimization problem, the f ij and υ i variables are fixed, and since the objective function is strictly concave in (r, w), it admits a unique maximizer as shown in (8).
r * i = 1 λ (sn) i µ i + υ i + P j∈A i z ij (w * )(λ (rx) j µ j + υ j )(8)We refer to λ Observe that if a node wants to maximize its rate, it should find the path(s) such that its aggregate price P i is minimized, i.e., it is a joint routing and rate control problem.
Since our formulation utilizes the DAG structure, this allows a node to calculate its aggregate price recursively from those of its parents as stated in Proposition 1.
Furthermore, Proposition 1 implies that a node should select the parent with the minimum sum of local and aggregate prices as its relay node in the DAG.
This motivates the following distributed routing and rate control algorithm.
Each node collects the local and aggregate prices from all its parents and selects the parent(s) with the minimum sum of the local and aggregate prices as the relay node(s) in the DAG.
Then, each node uses (9) to calculate its own aggregate price and then applies (8) to determine its rate.
Having determined the local rate and the outgoing link(s) to use, a node distributes its local and aggregate prices to its children, so that the children nodes can determine their routes and rates.
This process continues until the leaf nodes are reached.
Now, starting from the leaf nodes, each node reports its aggregate traffic to its parents, so that the parent nodes can have the needed information to update their local prices.
Aggregate traffic T i of node i is the total amount of traffic generated by the descendants that goes through node i. Similar to the computation of the aggregate price, a node can compute its aggregate traffic recursively using (10).
The proof of Propositions 1 and 2 can be found in our technical report [26].
Proposition 1.
The aggregate price P i can be recursively computed asP i = X j∈P i w ij " (λ (rx) j µ j + υ j ) + P j «(9)Proposition 2.
The aggregate traffic T i of node i can be recursively computed as * / Once a leaf node has determined its rate and outgoing links 6 in Phase I, it reports its local rate to its parent nodes of the selected links.
Non-leaf nodes must collect the aggregate traffic from all its children nodes on the DAG.
After that, a non-leaf node computes its aggregate traffic using (10) and report it to all the parent nodes.; Inform MAC layer of newly selected link(s) and their given.
Here, QuickFix is run for a DAG of 67 nodes.
The improvement in convergence rate with QuickFix relative to the standard dual-based solution is apparent.
However, we leave the convergence rate analysis for future work.T i = X k∈C i w ki (r k + T k )(10 SCHEME FOR VARIABLE REPLENISHMENT RATE We introduce a localized scheme called SnapIt that uses the current battery level to adapt the rate computed by QuickFix with the objective of maintaining the finite-capacity battery at a target level.
This mechanism does not require any control signaling between nodes.
Furthermore, we observe that by attempting to maintain the battery at a target level, the interval (epoch) of running the QuickFix algorithm can be extended, leading to reduced control overhead.
Another approach with a similar motivation of utilizing energy efficiently with replenishing batteries is given in [27].
There, each node manages energy to keep its duty cycle period as smooth as possible and at the same time tries to keep the battery state close to a certain desired level.
Although we do not consider dutycycling in this work, SnapIt enables sensor nodes to achieve perpetual operation.If we denote the total size of the battery of node i as M i , SnapIt uses the mid point, i.e., M i /2 as the target battery state.
Each node takes into account the instantaneous energy state, B i (t), of its battery and makes slight variations on the rate allocation in order to keep the drift toward M i /2.
These variations are small enough to guarantee a total utility close to the optimal.The optimal rate assignment for node i in epoch e is r * i (e) = r * i (π i (e)), provided by QuickFix by solving P e .
Since the solution to P e depends on π i (e), and not the state of the battery, QuickFix is the battery-state oblivious static assignment r * i (e) for all times t during epoch e. QuickFix is inclined to choose the rates such that the energy conservation constraint (3) at a node is kept active if possible.
Consequently, energy is drained at a rate, identical to the average replenishment rate possibly over multiple successive epochs.
This leads to a high rate of battery discharge and hence a low network utility.SnapIt chooses the rate (and hence the transmission power), independently at each node i based on the current state of the battery as follows: For t, (e − 1)τ + 1 ≤ t ≤ eτ ,r SnapIt i (t) = ( r * i (e) − δ i , B i (t) ≤ M i /2 r * i (e) + δ i , B i (t) > M i /2 ,(11)for some δ i > 0, which we will specify later on.
Consequently, the transmit cost (power) reduces by δ i λ (sn) i if the battery is less than half full and increases by the same amount when it is more than half full.
Each node can run SnapIt based solely on the local battery state B i (t) to make rate assignments.
In general, one may choose to update the rate assignments at longer intervals τ S > 1, where τ S ≪ τ .
The algorithm is detailed as follows: As shown in Fig. 2, the instantaneous utility associated with SnapIt alternates between u u (e) = log(r * i (e) + δ i ) and u d (e) = log(r * i (e) − δ i ), depending on the battery state.
Due to concavity of the log function, the average utility at epoch e will be lower (by Jensen's inequality) than the optimal value log(r * i (e)), which can only be achieved if M i = ∞.
The smaller the value we select for δ i , the closer the average utility of SnapIt gets to log(r * i (e)).
However, a small δ i implies a small drift away from the complete discharge state, and hence a higher likelihood of complete discharge.
The important question is how to choose δ i such that, not only the average utility approaches to the optimal value, but also the complete discharge rate decays to 0 sufficiently fast.
Next, we show that this is possible under rather weak assumptions on the instantaneous replenishment rate ρ i (t).
In particular, we assume that the asymptotic semi-invariant log moment generating functionΛρ i (s) = lim T →∞ 1 T log E " exp s ∞ X t=1 ρ i (t) !
#(12)of ρ i (t) exists and is finite for all s ∈ (−∞, s max ) for some s max > 0.
Note that this existence requires an exponential (or faster) decay for the tail of the sample pdf of ρ i (t) and it rules out the possibility of long range dependencies in the {ρ i (t)} process.
We also assume that the estimate, π i (e) used for the average replenishment rate for each epoch e is unbiased, i.e.,π i (e) = 1 τ E eτ t=(e−1)τ +1 ρ i (t)for all e ≥ 1.
In presenting our result, we use the following notation: a n = O(b n ) if a n goes to 0 at least as fast as b n , a n = o(b n ) if a n goes to 0 strictly faster than b n , and a n = Θ(b n ) if a n and b n go to 0 at the same rate.
Also p SnapIt i (M i ) is the probability of complete battery discharge for node i as a function of the size, M i , of its battery, ¯ U SnapIti = E U (r SnapIt i (t)) and ¯ U * i = E [U (r * i (e))]are the time average utilities achieved by SnapIt and the optimal rate allocation with an unlimited battery size respectively.Theorem V.1.
If the variance, σ 2 ˜ ρi 񮽙 var 1 τ τ t=1 ρ i (t)is bounded and the utility function is the log function, U (·) = log(·), then, given any β ≥ 1, SnapIt achieves p SnapIti (M i ) = 6 O(M −β i ) and ¯ U * i − ¯ U SnapIt i = Θlog Mi Mi with the choice ofδ i = βσ 2 ˜ ρ i log Mi λ (sn) i Mi .
Proof: See Appendix A.This theorem shows that it is possible to have a quadratic decay for the probability of complete battery discharge, and at the same time achieve a utility that approaches the optimal value (that of an unlimited energy source) approximately 1 as 1/M i .
To understand the strength of this SnapIt, note that there exists no scheme that achieves (even asymptotically) the optimal utility with an exponential decay for the probability of complete discharge.
Very briefly, the proof has the following sketch.
By choosing δ i = κ log Mi Mi , we show for any choice of κ > 0, the desired scaling for the utility function is achieved.
Then, by choosing κ = βσ 2˜ ρi /λ (sn) i, we prove that we can achieve the desired quadratic decay for the probability of complete discharge.An extensive performance analysis of SnapIt is given in Section VI along with some comparisons to the static scheme that assigns a rate, fixed at the optimal value r * i (e) during the entire epoch e.
As we shall illustrate, in many scenarios, the dynamic scheme significantly reduces the battery discharge rate, and consequently increases the overall utility considerably.
In this section, we evaluate QuickFix/SnapIt and compare it with IFRC [15] using TOSSIM 2.x [7].
The parameters used in the simulations are listed in Table II.
We build the recharging profiles of the nodes using the real solar radiation measurements collected from the Baseline Measurement System at the National Renewable Energy Laboratory [28].
The data set used is Global 40-South Licor, which measures the solar resource for collectors tilted 40 degrees from the horizontal and optimized for year-round performance.
Unless explicitly specified, we use the profile of a sunny day (Feb. 1st 2009).
The data is appropriately scaled to create a recharging profile for a solar panel with a small dimension (37mm×37mm).
The battery capacity of sensor nodes is assumed to be 2100mAh.
The epoch length τ is set to one hour and we choose to run the QuickFix algorithm one iteration every five minutes.
Throughout the evaluation, we focus on the performance measures during the daytime because the energy harvesting rate is zero at night.
However, based on the application's minimum sampling rate requirement, one can determine the minimum battery level that can support the minimum sampling rate at night and the SnapIt algorithm will maintain the battery at that level to ensure the network remains active during the night time.
It should also be noted that although we did not consider the energy cost for signaling in our formulation, we did take that into account in the simulations.
In the remaining section we compare our algorithms with the instantaneous optimum computed using MATLAB in each time slot )without considering battery state); contrast it with a backpressurebased algorithm (IFRC); and, evaluate the sensitivity of the results with respect to the parameter δ.
We first demonstrate the operation of SnapIt using a small 6-node network which has three levels.
Node 0, at the first level, is the sink.
Node 1 and node 2 are at the second level and they are the immediate children nodes of the sink.
Nodes 3, 4 and 5 are at the third level.
Nodes 3 and 5 have only one parent (nodes 1 and 2, respectively) and node 4 has two parents (both node 1 and node 2).
A small network is used here because it takes a long time for MATLAB to generate a solution for each epoch if the network is large.
This actually signifies the importance of our work.
In this set of simulations, we use the same recharging profile for all the sensor nodes.
The performance metric include the network utility, the sum of data rates, the cumulative downtime of sensor nodes, and the cumulative battery full time.
The network utility and the sum of data rates are computed based on the packet reception rates at the sink.
The sum of data rates is used as one of the metrics because the utility function is in the logarithmic scale and has a small slope.
The latter metric makes it easier to visualize the difference in performance between different solutions, especially at higher data rates.
show that the network utility and the sum rates observed at the sink are close to the optimum no matter whether SnapIt is used or not.
However, if the battery level is high (above the target level), SnapIt will exploit the excessive energy in the battery and increase the rates by δ.
This benefit is especially observable during 6-8 AM in Figure 4(a).
In Figure 3(c), we observe the cumulative downtime of nodes 1 and 2 when the initial battery levels of all the sensor nodes are at a very low level (0.15% of the full capacity).
We only observe nodes 1 and 2 because these are the only potential bottleneck nodes in the network.
Without using SnapIt, the cumulative downtime for both nodes are high.
This is due to the fact that the QuickFix algorithm only runs coarsely (one iteration every 5 minutes), and thus its computed rates can be inaccurate and even infeasible.
The SnapIt algorithm mitigates this problem by reducing the rates when the battery level is below the target level.
Therefore, the cumulative downtime for both nodes are zero (thus invisible in Figure 3(c)) when SnapIt is used.In contrast to Figure 3(c), we observe the cumulative battery full time when the initial battery levels of all the sensor nodes are at a very high level (99% of the full capacity).
It can be observed that, without using SnapIt, the batteries of nodes 1 and 2 spend more time in the full state.
This causes nodes 1 and 2 to miss the opportunities to harvest more energy.
In contrast, if SnapIt is used, both nodes 1 and 2 spend less time in full battery state, and the additional harvested energy is leveraged to increase the network utility.
Next, we compare our protocol with a backpressure-based protocol, IFRC [15], which aimes to achieve maxmin fairness in WSNs [18] [15].
IFRC uses explicit signaling embedded in every packet to share a node's congestion state with the neighbors.
Rate adaptation is done by using AIMD.
Several queue thresholds are defined in IFRC.
A node will reduce its rate more aggressively as a higher queue threshold is reached.
Since IFRC does not consider battery state and energy replenishment, we similarly defined several thresholds for battery levels and energy harvesting rates so that all the nodes can maintain the battery at half of the full capacity.
We use a tree instead of a DAG when performing the comparison as IFRC assumes a tree network.
The tree is constructed using 67 nodes based on Motelab's [29] topology.
We used the recharging profiles of a sunny day (Feb. 1st 2009) as well as that of a cloudy day (Feb. 2nd 2009) for the evaluation.
The initial battery level for all nodes is set to 50% of the full capacity.
Figure 5 clearly shows that QuickFix can achieve both higher network utility and sum of rates.
The sum of rates is 42% higher than IFRC on average.
The main reason is as follows.
In order to maintain the battery at 50%, IFRC halves the rate of a sensor and that of all its descendants if the battery drops below 50%.
In contrast, SnapIt only slightly reduces the rate by a small amount, δ.
It is possible to improve the performance of IFRC, but a smarter rate control algorithm is needed.
Larger δ can result in a higher network utility when there is extra energy in the battery.
However, large δ has a negative impact on the battery levels as it can cause a node and its ancestors to consume the energy at a higher rate.
We manually select three nodes and observe their battery levels over time.
The three selected nodes A, B, and C are 1-hop, 3-hops, 6-hops away from the sink respectively.
And nodes A and B are on a path from node C to the sink, i.e. both nodes A and B are ancestors of node C. Figure 6 shows that the performance of our solution is not very sensitive to the exact value of δ if δ is small.
However, high values of δ (= r i ) should be avoided due to the consequent high fluctuations in the battery that also increases the chances of a node to run out of battery.
Achieving proportional fairness in energy harvesting sensor networks is a challenging task as the energy replenishment rate varies over time.
In this paper, we showed that our proposed QuickFix algorithm can be applied to track the instantaneous optimum in such a dynamic environment and the SnapIt algorithm successfully maintains the battery at the desired target level.
Our evaluations show that the two algorithms, when working together, can increase the total data rate at the sink by 42% on average when compared to IFRC, while simultaneously improving the network utility.
As part of the future work, we plan to generalize our solution to (a) Network utility using 10%, 50% and 100% of nodal sampling rate as δ.
arbitrary graphs rather than a DAG.
We will also explore dynamic adaptation of our parameter δ for faster operation, while continuing to avoid battery overflows and underflows.
XRecall that rate allocation with SnapIt is described as follows: for t, (e − 1)τ + 1 ≤ t ≤ eτ , r SnapIt i (t) = r * i (e) − δ i , B i (t) ≤ M i /2 r * i (e) + δ i , B i (t) > M i /2 , for a certain δ i > 0 and r * i (e) is the optimal sampling rate for epoch e.Let us define the processes˜ρprocesses˜ processes˜ρ i (e) 񮽙 1represents the average drift of the battery of node i in epoch e in which B i (t) < M i /2 for all t and the energy conservation constraint (3) is active.
This implies that r * i (e) = λ (sn) i π i (e), i.e., the battery is drained at the rate it is being replenished in epoch e.
We can write the semi-invariant asymptotic log moment generating function of process {˜ρ{˜ρ i (e)} as:Since we assume that the replenishment rate estimator π i (e) is unbiased, E [˜ ρ i (e)] = 0 for all e ≥ 1 and (14) reduces to:Differentiating both sides with respect to δ i , (15) becomes.
For δ i = 0, s o i = 0 and the above equality becomesProof of Theorem V.1: Here we prove that our scheme satisfies the scaling properties given in Theorem V.1.
By choosing δi = κ log M i M i , we first show that the asymptotic scaling of p SnapIt i (Mi) with M i is of the form p SnapIt i (Mi) = O(M −β i ).
For node i, let us consider the worst case scenario, in which rate r SnapIt i (t)is such that the energy is consumed at the rate it is being replenished, i.e., energy conservation constraint (3) is active at all times.
The probability of complete discharge in this scenario constitutes an upper bound for the actual probability of complete discharge.
The drift D − i (e) for this scenario is treated in the above lemma.
Applying Wald's identity [30] for D − i (e), we can write:By Lemma A.1, we have, we prove the desired result around r * i 񮽙 r * i (e), we haveLet γ − i 񮽙 γ − i (e) be the fraction of time that battery state B i (t) < M i /2.
Then,where (16) follows since κ is chosen such that β ≥ 1.
Thus, since r * i > 0 for all i and ¯ U * i = E [log(r * i (e))], we can write Recall that rate allocation with SnapIt is described as follows: for t, (e − 1)τ + 1 ≤ t ≤ eτ , r SnapIt i (t) = r * i (e) − δ i , B i (t) ≤ M i /2 r * i (e) + δ i , B i (t) > M i /2 , for a certain δ i > 0 and r * i (e) is the optimal sampling rate for epoch e.Let us define the processes˜ρprocesses˜ processes˜ρ i (e) 񮽙 1represents the average drift of the battery of node i in epoch e in which B i (t) < M i /2 for all t and the energy conservation constraint (3) is active.
This implies that r * i (e) = λ (sn) i π i (e), i.e., the battery is drained at the rate it is being replenished in epoch e.
We can write the semi-invariant asymptotic log moment generating function of process {˜ρ{˜ρ i (e)} as:Since we assume that the replenishment rate estimator π i (e) is unbiased, E [˜ ρ i (e)] = 0 for all e ≥ 1 and (14) reduces to:Differentiating both sides with respect to δ i , (15) becomes.
For δ i = 0, s o i = 0 and the above equality becomesProof of Theorem V.1: Here we prove that our scheme satisfies the scaling properties given in Theorem V.1.
By choosing δi = κ log M i M i , we first show that the asymptotic scaling of p SnapIt i (Mi) with M i is of the form p SnapIt i (Mi) = O(M −β i ).
For node i, let us consider the worst case scenario, in which rate r SnapIt i (t)is such that the energy is consumed at the rate it is being replenished, i.e., energy conservation constraint (3) is active at all times.
The probability of complete discharge in this scenario constitutes an upper bound for the actual probability of complete discharge.
The drift D − i (e) for this scenario is treated in the above lemma.
Applying Wald's identity [30] for D − i (e), we can write:By Lemma A.1, we have, we prove the desired result around r * i 񮽙 r * i (e), we haveLet γ − i 񮽙 γ − i (e) be the fraction of time that battery state B i (t) < M i /2.
Then,where (16) follows since κ is chosen such that β ≥ 1.
Thus, since r * i > 0 for all i and ¯ U * i = E [log(r * i (e))], we can write
