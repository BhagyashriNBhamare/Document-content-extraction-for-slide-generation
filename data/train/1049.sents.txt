Forward-error correction (FEC) is used in many streaming applications for protecting multimedia data over lossy network paths.
However, studies in the literature [1, 3, 4] report conflicting results on the benefits of FEC.
To address this uncertainty, we study the performance of FEC-based streaming and provide additional insight into how FEC overhead rate affects the performance of scalable video streaming under dynamically changing network packet loss.
Through analytical investigation, we derive the relationship between packet loss, FEC overhead, and utility of received video, and propose a simple control mechanism that adjusts the amount of FEC based on packet loss information.
We find that our FEC control allows the application to maintain high end-user utility and achieve better quality of video at the receiver.
Internet streaming is becoming increasingly important in the Internet.
However, since multimedia data are highly sensitive to delay and packet loss on network paths, streaming applications usually require special mechanisms that can overcome packet loss without utilizing retransmission.
As an effort for providing such an environment, many studies consider forward-error correction (FEC) for recovering lost data segments [2,7,10].
FEC schemes require application servers to send extra information along with the original data.
With proper amount of redundant data included in the transmitted packets, FEC can mitigate the impact of packet loss on the quality of video, thus improving the performance of streaming over best-effort networks.
However, selection of FEC overhead becomes a fairly complicated task if network path dynamics change over time, which often reduces the performance gain of FEC in practical network environments [2].
Although FEC appears beneficial, studies in the literature report conflicting results on the effect of FEC.
Some of them (e.g., [1,5]) show that FEC provides little benefit to applications due to the extra overhead, while others (e.g., [3,4]) find FEC to be promising for multimedia applications.
To tackle this uncertainty in the benefits of FEC and ultimately improve the quality of video delivered over the Internet, this paper analyzes the performance of scalable FEC-based streaming in terms of end-user utility (see below) and derives expressions for the penalty inflicted on FEC-protected video under Markov and renewal patterns of packet loss.We assume a scalable (FGS-like) enhancement layer 1 and define end-user utility U as the fraction of received data that is useful for decoding:U = M T ,(1)where M is the average number of bytes/packets used in decoding a frame and T is the average amount of data per frame successfully delivered to the receiver.
Assuming that R is the streaming rate of the application and F is the rate of FEC packets, we use model (1) to understand how the FEC overhead ψ = F/(R + F ), (0 < ψ < 1), affects the utility of received video.
We show that U exhibits percolation and converges to 0, 0.5, or (1 − ψ)/(1 − p) depending on the value of ψ as the streaming rate R approaches infinity.Driven by the importance of selecting the proper FEC overhead, we subsequently explore a simple control mechanism that adjusts the amount of overhead based on packet loss information fed back to application servers by their receivers.
We find that such adaptive control allows the application to maintain high utility (U ≈ 1), thus improving the quality of video.The rest of paper is organized as follows.
Section 2 discusses related work.
Section 3 studies the impact of packet loss on FEC-based streaming and Section 4 describes the proposed mechanism for adjusting the amount of FEC.
Section 5 evaluates the proposed adaptive FEC overhead control method and Section 6 concludes the paper.
Many studies investigate the performance of FEC; however, the results on the effectiveness of FEC generally vary and often depend on rate adjustment mechanisms that are used for including FEC overhead.
We next discuss some of the studies in favor and against FEC.Altman et al.[1] study simple media-specific FEC for audio transmission and show that it provides little improvement to the quality of audio under any amount of FEC.
This work uses media-specific FEC that is less effective in recovering lost packets than media-independent FEC [7].
Biersack et al. [2] evaluate the effect of FEC for different traffic scenarios in an ATM network.
This study measures the reduction of loss rate for each source and reports that the performance gain of FEC quickly diminishes when all traffic sources employ FEC and the number of sources increases.Additional studies attempt to maximize the effect of FEC by choosing the proper amount of overhead and avoiding unlimited rate increase by keeping the combined rate R + F equal to some constant S. Bolot et al. [3] present a mediaspecific method for adjusting FEC overhead under certain constraints on the total sending rate S.
This work achieves close to optimal audio-specific subjective quality.
Frossard et al. [4] propose a method that selects rates R and F using the distortion perceived by end-users.
The method is fairly complex since it involves solving recurrence equations, which does not scale to large FEC block sizes.Note that none of the above studies uses a mechanism that can select the proper amount of overhead dynamically, or offers an explanation of how FEC overhead affects the performance of video applications for a given packet loss rate.
In this section, we investigate the performance of FECbased video streaming considering two loss patterns: Markov and renewal-based.
Note that many studies (e.g., [11]) show that the pattern of Internet packet loss can be captured by Markov models.
Thus, we examine the characteristics of packet loss assuming that the loss process is a two-state Markov chain.
Following the Markov analysis, we briefly study a more general distribution of packet loss that models network congestion as an alternating ON/OFF process and allows heavy-tailed burst lengths.Since our main interest in FEC is how its overhead affects the utility of received video, we examine a generic mediaindependent FEC scheme based on (N, k) block codes (such as parity or Reed-Solomon codes), where N is the total number of packets in an FEC block and k is the number of redundant FEC packets in the block.
Thus, the actual number of video data packets in each block is H = N − k and the FEC overhead rate (i.e., fraction of FEC packets) ψ is k/N .
Recall that under (N, k) block coding, all data packets H are recovered if the number of lost packets in a block is no more than the number of FEC packets k. However, if the channel loses more than k packets, then none of the lost packets can be recovered by the receiver [7].
We study the effect of packet drops on video quality using the example of MPEG-4 FGS (Fine Granular Scalability) [8] 񮽙񮽙 񮽙񮽙 񮽙񮽙 񮽙񮽙 񮽙 񮽙 񮽙񮽙 񮽙񮽙񮽙 񮽙񮽙 Figure 1: Two-state Markov chain.
(similar results apply to non-FGS layered coding 2 ).
In what follows below, we employ the Markov packet-loss model for FGS sequences, derive the expected amount of useful data recovered from each frame, and define the effectiveness of FGS packet transmissions over a lossy channel.
Note that in our analysis, we only examine the enhancement layer and assume that the base layer is fully protected.Assume that long-term network packet loss is given by p and the loss process can be modeled by a two-state discrete Markov chain shown in Fig. 1, where states 0 and 1 represent no-packet loss and packet loss, respectively.
In the figure, α is the probability that the next packet is lost given that the previous one has arrived and β is the probability that the next packet is received given that the previous one has been lost.
In the stationary state, probabilities π0 and π1 to find the process in each of its two states are given by:π0 = β α + β , π1 = p = α α + β .
(2)We assume fixed FGS frame size H and address the question: what is the expected amount of useful packets that the receiver can decode from each frame under p-percent random loss?
To answer this question, we denote by Zj the number of consecutively received packets in a frame j and compute its expectation E [Zj], which plays an important role in determining the utility of received video.
An extension to include variable frame sizes is straight-forward and it is omitted due to space constraints.To derive E[Zj], we define L be the number of packets lost in a block and ¯ Q = E[Zj|L > k] be the expected number of useful video packets recovered from the front of an FEC block when L is greater than the number of FEC packets k in the block.
Then, we have the following preliminary result.Lemma 1.
Assuming a two-state Markov packet loss in (2) and L > k, the expected number of useful video packets recovered per frame is:¯ Q = E[Zj|L > k] = 1 − p α 1 − (1 − α) H ¡ .
(3)Proof.
Assume that Dj is the random distance in packets from the beginning of frame j before the first packet-loss event.
Then, all Dj are geometric random variables with respect to each frame j and have integer values in the range [1, ∞).
Note that if the loss process is in state 1 at the beginning of the j-th frame, then the amount of recovered data in the frame is Zj = 0.
However, if the loss process is in state 0, then the recovered amount depends on the value of Dj.
Further note that when Dj ≤ H, the decoder recovers exactly Dj packets from the frame.
Otherwise, all H packets are recovered.Thus, conditioning on the fact that the loss process is in state 0, we can write:¯ Q = π0 ¢ H £ i=1 ifi + ∞ £ i=H+1 Hfi¤ ,(4)where fi = P (Dj = i) = (1 − α) i−1 α is the geometric PMF of Dj.
Then, (4) becomes:¯ Q = π0 ¢ α H £ i=1 i(1 − α) i−1 + H ∞ £ i=H+1 α(1 − α) i−1 ¤ (5) = π0 ¢ α H £ i=1 i(1 − α) i−1 + H ¢ 1 − α H £ i=1 (1 − α) i−1 ¤ ¤ .
Substituting π0 = β/(α + β) = 1 − p and expanding summations in (5), we get (3).
Next, denote by P (L ≤ k) the probability that the number of lost packets in an FEC block is smaller than or equal to the number of redundant packets in the block.Theorem 1.
Assuming two-state Markov packet loss with average loss probability p, the expected number of useful packets recovered per FEC block of size N is:E[Zj] = k £ i=0 P (N, i)H(6)+ ¢ N £ i=k+1 P (N, i) ¤ ¥ 1 − p α 1 − (1 − α) H ¡ ¦, where P (N, i) is the probability of losing exactly i packets out of N transmitted packets.Proof.
Conditioning on the probability of packet loss in each FEC block, we can write:E[Zj] = P (L ≤ k)H + P (L > k) ¯ Q.(7)Substituting ¯ Q in (3) into (7), and re-writingP (L ≤ k) = § k i=0 P (N, i) and P (L > k) = § N i=k+1 P (N, i), we get (6).
Note that by conditioning on the last state of the loss process, we can write the probability P (N, i) as:P (N, i) = P (N, i | 0) + P (N, i | 1),(8)where P (N, i | j), j = 0 or 1, represents the probability of losing i packets from N transmitted packets given that the loss process is in state j at the end of the block.
Further note that P (N, i | 0) and P (N, i | 1) can be written as recursive equations:P (N + 1, i | 0) = P (N, i | 0)(1 − α) + P (N, i | 1)β, (9) P (N +1, i | 1) = P (N, i−1 | 1)(1−β)+P (N, i−1 | 0)α.
(10)To verify model (6), we simulate the Markov loss process with average packet loss p = 0.1 and transition probability α = 0.08 (β = α(1 − p)/p).
We send 200-byte packets with the total sending rate S = N × 200 × 8 b/s and drop packets using the Markov chain in Fig. 1.
Then, we examine the video frame in each block and compute expected decoding rate˜Rrate˜ rate˜R using the number of useful packets Zj in the frame.
We illustrate˜Rillustrate˜ illustrate˜R for two different FEC overhead rate ψ in Fig. 2.
To compute P (N, i), we apply closed-form models of (9) and (10) using an expansion from [12].
As the figure shows, the model matches simulation results very well.
Note, however, that the behavior of˜Rof˜ of˜R changes for different ψ.
For example, for ψ = 1.1p, ˜R is approximately linear to sending rate S.
When we use lower overhead ψ = 0.9p, the expected decoding rate˜Rrate˜ rate˜R saturates at 360 kb/s as S increases as shown in Fig. 2(b).
Hence, it appears that the amount of overhead in FEC-based streaming plays a significant role in determining video quality at the receiver.We next derive the utility U of received video and explain how FEC overhead affects the quality of video.
Re-writing (1), we getU = E[Zj]/(N (1 − p)), i.e., U = k § i=0 P (N, i)H N (1 − p) + N § i=k+1 P (N, i) N α 1 − (1 − α) H ¡ .
(11)In order to closely examine the impact of FEC overhead on the utility U for given packet loss p, we define the overhead rate ψ as a linear function of packet loss: ψ = ηp (where η is a constant) and focus on asymptotic behavior of U as video rate becomes large (i.e., H → ∞).
For mathematical tractability, we reduce the Markov loss model to the Bernoulli loss (i.e., α = p) and compute the utility of received video U .
Theorem 2.
Assuming Bernoulli packet loss in an FEC block of size N , average loss probability p, and FEC overhead rate ψ = ηp, (0 < ψ < 1), the utility of received video for each FEC block converges to the following as H → ∞:lim H→∞ U = ¨ © © 0 0 < η < 1 0.5 η = 1 1−ψ 1−p 1 < η < 1/p .
(12)Proof.
Note that for Bernoulli packet loss within the block, the probability P (L ≤ k) in (7) follows a binomial distribution B(N, p): Recall that the binomial distribution B(N, p) can be approximated to the normal distribution N (µ, σ 2 ) if N is large, where µ = N p and σ 2 = N p(1 − p).
Hence, (13) becomes:P (L ≤ k) = k £ i=0 ¢ N i ¤ p i (1 − p) N −i .
(13)P (L ≤ k) ≈ z −∞ φ(x)dx,(14)where z = (k − µ)/σ and φ(x) is the PDF of the standard normal distribution.
Using ψ = ηp, re-write z as:z = ηN p − N p N p(1 − p) = (η − 1) (H + k)p √ 1 − p .
(15)Observe from (15) that as H → ∞, z → −∞ if η < 1, z → ∞ if η > 1, and z = 0 if η = 1.
Thus, from (14), as H → ∞, the probability P (L ≤ k) converges to the following:lim H→∞ P (L ≤ k) = ¨ © © 0 0 < η < 1 0.5 η = 1 1 1 < η < 1/p .
(16)Next, by definition, the utility is:U = E[Zj] (H + k)(1 − p) = P (L ≤ k)H + P (L > k) ¯ Q (H + k)(1 − p) (17) = HP (L ≤ k) (H + k)(1 − p) + 1 − (1 − p) H (H + k)p (1 − P (L ≤ k)) .
Re-arranging terms in (17) and using (16) and k = ψN = ψH/(1 − ψ), we get (12).
To illustrate the convergence of P (L ≤ k) for different values of η, we plot P (L ≤ k) for varying frame size H in an FEC block and p = 0.1 in Fig. 3(a), which verifies (16).
We also plot simulation results of U for different η and compares them with model (12) in Fig. 3(b).
Note that model (12) matches simulation results as shown in Fig. 3(b) and U indeed converges to 0, 0.5 or (1 − ψ)/(1 − p) = 0.97 as the streaming rate becomes large.Note that the asymptotic characteristics of achieved utility in (12) is valid for the Markov loss case as we demonstrate in Fig. 4(a), in which we plot simulation results of the utility and compare them with utility model (12) for three different values of η.
As the figure shows, the convergence of U follows a trend similar to that in the Bernoulli case although the rates of their convergence are not identical.
This implies that the amount of overhead used in FEC has a significant impact on the quality of received video.
In this section, we study the quality of FEC-based video under ON/OFF pattern of packet loss, where all packets are lost during each ON period and all packets are delivered during each OFF period.
Assume that the packet loss process V (t) goes through ON/OFF periods.
Then, we can write:V (t) = 1 ON at time t 0 OFF at time t .
(18)Suppose that the duration of the i-th ON period is given by a random variable Xi and the duration of the i-th OFF period is given by Yi (Xi and Yi may be drawn from different distributions).
Assume that Xi and Yi are independent of each other and sets {Xi} and {Yi} consist of i.i.d random variables drawn from a Pareto distribution (heavytailed ON durations model real packet losses in the Internet buffers [6]).
Then, the process V (t) is an alternating renewal process, where each renewal cycle is Wj = Xj + Yj and the n-th renewal occurs at time epoch Tn = § n j=1 Wj.
Next, notice that long-term network packet loss p is the fraction of time that the process is in the ON state, which allows us to write p = P (V (t)= 1) = E[Xi]/(E[Xi] + E[Yi]).
Define L(t) as the number of lost packets in an FEC block of size N under the ON/OFF model, where L(t) = t+N t V (u)du.
Then, we can write an equation similar to (7) discussed in Section 3.1 and model the amount of useful data recovered from the FEC block as:E[Zj] = P (L(t) ≤ k)H + P (L(t) > k)E[Zj|L(t) > k], (19)where k is the number of FEC packets in a block.
Unfortunately, computing probability P (L(t) ≤ k) under an ON/OFF renewal process (where ON/OFF durations are Pareto distributed) appears to be impossible in closed form even though many studies (e.g., [9]) have attempted to compute it in the last 50 years.
Hence, we do not pursue this direction further and show instead the impact of packet drops and FEC overhead on the received video using simulations without offering a closed-form model.
values of η and p = 0.1 in Fig. 4(b).
As the figure shows, U again exhibits a percolation point around η = 1 (i.e., ψ = p).
For example, if η is larger than 1, then U converges to (1 − ψ)/(1 − p) as H → ∞; however, if η = 1, the convergent value drops to 0.5; and further drops to 0 when η < 1.
Note that the asymptotic result shown in Fig. 4(b) follows the same trend observed in the Markov loss case, which also confirms the importance of choosing the proper amount of overhead for achieving high quality of video.
As discussed in preceding subsections, the effectiveness of FEC depends on how the server uses redundant packets based on packet-loss dynamics of network paths.
Thus, nonadaptive FEC schemes that use a fixed amount of overhead encounter significant quality degradation if packet loss fluctuates as often observed in the Internet.
We illustrate one such example that uses improper amount of FEC overhead and show how U deteriorates when the amount of overhead is not sufficient for a given packet loss p using the Markov loss simulation.
For this example, we use block size N = 100 and fixed overhead k = 10 (i.e., 10% of the block size).
We plot simulation results of utility U for varying packet loss p in Fig. 5(a).
As the figure shows, U sharply decreases as packet loss p becomes larger than overhead rate ψ.
We also plot the utility U for the ideal case in which optimal amount of overhead resulting in the maximum utility (i.e., U = 1) is used.Notice that even in adaptive FEC, the proper selection of ψ is critical for providing high utility.
Recall that our model (12) discussed in Section 3.2 offers additional insight into understanding the relationship between ψ and the utility U under various packet loss rates.
Now the question we have is how to select the proper amount of overhead that satisfies an application's target utility under changing packet loss.
We address this issue in the next section.
In a practical network environment (such as the Internet), packet loss is not constant and changes dynamically depending on cross traffic, link quality, routing updates, etc.
Hence, streaming servers must often adjust the amount of FEC overhead according to changing packet loss to maintain high end-user utility.To avoid filling the network paths with unnecessary FEC packets and remain friendly to other applications in the Internet, a streaming server must comply with sending rate S that is derived by its congestion control algorithm.
Given S, the streaming server determine FEC rate F and video source rate R such that S = R + F .
Recall that to achieve high end-user utility, overhead rate ψ must be slightly higher than packet loss p as discussed in Section 3.2.
Considering the relationship between packet loss p and overhead rate ψ, we next investigate a simple proportional controller that adjusts ψ based on the measured packet loss:ψi(n) = ψi(n − Di) + τ (ηpi(n − Di) − ψi(n − Di)) , (20)where index i represents flow number, pi(n) is the measured average packet loss in the FGS layer for flow i during interval n, τ is the controller's gain parameter, and Di is the roundtrip delay for flow i.Note that, in general, the measurement of pi(n) is coupled with congestion control and should be provided by its feedback loop.
Next notice that the controller (20) is stable under arbitrary (heterogeneous) delays if the following is satisfied.
Lemma 2.
Controller (20) is stable iff 0 < τ < 2.
Proof.
Taking the z-transform of (20), we obtain the characteristic equation 1 − (1 − τ )z −D i = 0.
Thus, the system has a single pole z = 1 − τ 1/D i .
For the control system to be stable, it is sufficient and necessary that the absolute value of z be less than 1 (i.e., |z| < 1).
Solving this inequality, we obtain 0 < τ < 2.
Next, assume that packet loss p(n) converges to some stationary point p * .
Then, it is easy to see that in the stationary state, the overhead rate becomes ψ * = ηp * .
Now, the task for achieving high utility becomes a matter of selecting proper values of constant η for different values of packet loss p. To tackle this problem, we examine the relationship between η and p to maintain a certain target utility UT .
Suppose UT is at least 0.5 (i.e., η > 1).
Then, from (12), we get the following condition to achieve the target utility:η ≤ (1 − UT )/p + UT ,(21)which indicates that η is inverse proportional to packet loss p for given UT .
Hence, in practice, controller (20)-(21) can effectively adjust overhead rate such that the achieved utility is at least UT even in networks of dynamically changing p.
In this section, we present simulation results of our adaptive FEC-based scheme including the properties of U and video quality.
In this simulation, one video frame (40, 000 bytes without including the base layer) consists of 200 packets, 200 bytes each (these numbers are derived from MPEG-4 coded CIF Foreman).
We start our investigation with the behavior of achieved utility U .
To illustrate the adaptivity of the controller (20)-(21), we simulate a streaming session with a hypothetical packet loss pattern shown in Fig. 5(b).
The evolution of packet loss p(n) in Fig. 5(b) is obtained using Markov chain in (2), which changes states with transition probability α and β in Fig. 6(a).
For this simulation, we use FEC block size (21) maintains the target utility UT very well along the entire streaming session except the transition points where current packet loss p(n) is different from that one RT T before.
For example, when packet loss jumps from 0.14 to 0.25 at time t = 4 seconds, U deviates from UT since ψ becomes too small to keep the target utility; however, when the new loss information (i.e., p = 0.25) becomes available at the server in the next RT T (i.e., t = 4.1 seconds), the controller brings back the proper FEC rate ψ for maintaining UT under the updated packet loss.
Also observe in the figure that fixed-overhead schemes M1 and M2 cannot maintain high utility as p(n) varies even though M2 sends more FEC than our scheme.
In this section, we compare the adaptive method with the fixed FEC scheme using PSNR quality curves.
Through simulation, we obtain packet loss statistics of each MPEG-4 FGS frame and then apply them to the Foreman video sequence offline.
We enhance each base-layer frame using consecutively received FGS packets and plot PSNR quality curves accordingly.
Note that for this comparison, we protected the entire base layer in all cases and allow random loss only in the FGS layer.
Further note that the rate of the base layer is 128 kb/s and frame rate is 10 frames per second.Observe that M1 suffers significant quality degradation when U drops after frame 60 (i.e., 6 seconds) as shown in Fig.
6(d).
Similarly, M2 also exhibits low video quality during the first 6 seconds due to ψ being too large.
Compared to the two cases M1 and M2, our adaptive method provides higher quality of video as illustrated in Fig. 6(d).
For instance, the adaptive method offers as much as 2.5 dB higher PSNR than M2 during the duration of the first 60 frames and outperforms M1 by almost 10 dB for the duration of the last 40 frames.
This paper studied the effect of random packet loss on scalable video traffic in best-effort networks with FEC-protection and proposed an adaptive FEC overhead control mechanism that can provide a high quality of video to end-users.
We also examined several stochastic loss models for streaming video and conclusively established that proper control of FEC overhead can significantly improve the utility of received video over lossy channels.
