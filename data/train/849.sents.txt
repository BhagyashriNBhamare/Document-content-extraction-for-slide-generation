We present the STORIES methods and tool for (a) learning an abstracted story representation from a collection of time-indexed documents; (b) visualising it in a way that encourages users to interact and explore in order to discover temporal "story stages" depending on their interests; and (c) supporting the search for documents and facts that pertain to the user-constructed story stages.
In addition, we give an overview of evaluation studies of the tool.
Our work builds on several areas of research, whose relevance is described in detail in [1]: temporal text mining (TTM), e.g. [2], [3], [4], [5], topic detection and tracking (TDT) [6], [7], [8], burstiness [9], [10], [11], [12], and various summarisation approaches using co-occurrence, such as [10], [13].
We aim at more flexible content sub-structures than the fixed "topics" of TTM and TDT and apply measures of burstiness and co-occurrence to characterise these.Further influences on our work are News and other timelines on the Web.
Summarisation like that provided by Google Trends 1 shows surges in publication and query activity in certain time periods, but these tools require one to know which sub-topic to look for (and that this subtopic is indexed).
Google News Timeline 2 provides a preset time period (day, week, month, year) overview of news using a timeline interface.
with the Web at this atomic level, users can track and discover parts of a story without any linguistic processing.
However, in the problem we study, users are less interested in a single document or its relations to the others than in learning about the underlying story.
Building on visualisation strategies as described, e.g. in [15], [16], [17], our tool presents users options for interactive summarisation, search and exploration.
Story learning: The system learns a story from a corpus of time-indexed textual documents, all relevant to a top-level topic (the whole story, e.g., "Asia Tsunami 2004" or "Enron").
First, this corpus is transformed into a sequence-of-terms representation.
Subsequently, the contentbearing terms are extracted, defined as the 150 top-TF (term frequency) terms.
This defines a lower threshold on TF: δ ∈ R. Next, the corpus C is partitioned by publication periods, e.g. calendar weeks.
Thus, C is the union of all document sets c i , with i = 1, . . . , I the time periods.For each c i , the frequency of the co-occurrence of all pairs of content-bearing terms b j in documents is calculated as the number of occurrences of both terms in a window of w terms, divided by the number of all documents in c i .
This measure of frequency and therefore relevance is normalised by its counterpart in the whole corpus to yield time relevance as the measure of burstiness:TR i (b 1 , b 2 ) = (f req i (b 1 , b 2 ))/(f req C (b 1 , b 2 )).
Thresholds are applied to avoid singular associations in small sub-corpora and to concentrate on those associations that are most characteristic of the period and most distinctive relative to others: θ 1 ∈ N is a lower bound on the total number of co-occurrences, and θ 2 ∈ R, usually with θ 2 > 1, is a lower bound on the time relevance of a co-occurrence.
This gives rise to the story graphsG i = V i , E i for time periods i.
The edges E i of G i are {(b 1 , b 2 )|# co-occ.
s of b 1 , b 2 within w terms in doc.s from c i ≥ θ 1 and TR i (b 1 , b 2 ) ≥ θ 2 }.
The nodes V i of G iare the terms involved in at least one association in this symmetric graph: {b j |∃b k : (b j , b k ) ∈ E i }.
A sequence of story graphs forms the story evolution.
To obtain a smoother story evolution, we use moving averages of co-occurrence frequency values, assigning to each period i the union over all documents from i to (i + l − 1), for window size l.Fact extraction and textual time-indexed summaries: From each document, we extract "facts", short statements with semantic role labelling, as returned by Open Calais.
5 The full set of these facts for each time period is indexed using Lucene.
6 We then use the story graphs to filter the most important facts: For each of the graph's edges, we query the index, using node names of the edge as query terms, and select the top fact as defined by Lucene's normalised TF.IDF scoring.
We treat the resulting set of short textual statements as a summary of the story.Story-space interaction: This usage interaction (see Section IV) rests on changes to the parameters: dates to specify i and l to track story evolution and "zoom in or out" of a story stage; changes to θ 2 and θ 1 and the removal of δ to "uncover" further details of a story stage.Story search: Story search can be constrained by the nodes of a subgraph of the story graph.
Retrieval is then restricted to documents relevant to these subgraphs.
This is a form of query expansion similar to the method of [18]: the selection of documents of the starting corpus C corresponds to a top-level query; this query is expanded by the information from the subgraph and the time restriction.
STORIES then uses all the nodes n as a query (restriction) for the documents inside c i to obtain the pertinent document subset, as identified by a search over a Lucene index.
Story learning: We apply the method to news articles downloaded from different sources on the Web.
Corpora can be compiled either on a continuous basis (e.g., subscribed-to feeds) or in response to a top-level query to a search engine.
For example, the corpus can be a set of documents retrieved by a search in Google News or Blogdigger, usually in the archives of such search engines to control publication times.
The top-level query describes the whole story (e.g., "Enron" or "person name" for crime cases or celebrity reporting).
Data cleaning and other data preparation steps are then applied, in particular HTML wrapper induction and removal, tokenisation, cross-document named-entity recognition, lemmatisation, and stopword removal.
Finally, document and term measures as described in Section III are computed.Story-space interaction: The main goal of story-space interaction is exploration for sense-making.
We implemented the methods as a Java application using the GUESS 7 visualisation library.
The primary representations are visualisations of story graphs.
They provide functionalities to• scan over time to track the global story evolution (see Fig. 2).
This corresponds to changing time period i. (The user may also inspect a morphing sequence that traces story evolution through all periods.)
• zoom by adapting the period-window size.
Figure 1 illustrates the use of a dual slider for setting or changing the time period for which the graph is shown.
By moving the slider to the left or right, the user can scan over time; by changing its length, she can zoom in to a shorter period and see a specific overview, or unzoom to a longer period and see a more general overview.
• uncover: Slide rulers allow the user to filter out story elements below individually set θ 1 (absolute number of occurrence of an association) or θ 2 (time relevance) thresholds.
A configurable colour coding with different colour schemes accentuates time relevance differences.
• track: By selecting any node by mouse-clicking, the user can set a tracking focus on it.
This outputs a graph of bursty co-occurrences that include this "tracking node" as one of its terms.
The usual TF filter on terms δ gets disabled.
This allows users to drill down beyond just the top nodes (see Fig. 2).
• get a global overview: By requesting the "facts" for the chosen time granularity, the user can get a textual overview of the whole story (see Fig. 2).
Story search: Users may select an edge and then highlight a subgraph which contains the selection's adjoining edges and neighbouring nodes (Fig. 1).
Each selected edge expands the query by adding its nodes to the query 'shopping cart', as long as the query has fewer than six distinct terms, a common upper bound on query size.
In this way the user incrementally builds the query and at the same time can discover and learn about the story.Search provides an (internally unstructured) list of documents.
In addition, we are currently experimenting with an extension of the interface by navigation in document space based on a visualisation of multidimensional similarity [19].
We evaluated the story graphs' information-retrieval capabilities using two examples, a missing-persons case and celebrity reporting [1].
We established a ground truth by extracting time-indexed "real" events from the associated Wikipedia article and a 'celebrity-watch' Web site, respectively.
Wikipedia in particular was chosen to obtain a ground truth that can be expected to have high inter-rater agreement.
To find out whether and which parts of the story-graph summaries capture that ground truth, we first optimised the method's parameters by an (automated) technique used for the evaluation of textual summarisations [20], and then asked raters to (manually) map story-graph edges to the groundtruth events (both within the same time period).
While recall was quite high (up to 80% of all events were judged as being represented in the graph), precision was much lower (no more than about 33% of edges were thought to represent ground-truth events).
This raises the question of whether it would be possible to select "more meaningful" parts of the overall story evolution and of the individual story graphs, in order to make a concise and sensible summary available to users.
Ideally, the meaningful parts would be automatically computable and stand out in the visualisation so as to attract attention and entice users to search by them, while the others could be left in the picture to provide context.
We initially concentrated on story-graph topological properties as possible predictors of events.
A first analysis [19] showed that global properties of the graphs like graph size and number of connected components as well as the existence of nodes with high degree centrality were useful for predicting "real" eventfulness of a period.Fact extraction is comparable in quality to current multidocument summarisation approaches.
8 Evaluations of search quality [1] demonstrated that the STORIES search finds coherent subsets of documents, that its quality is comparable to or better than state-of-the-art clustering, and that the tool enables people to answer questions on ground-truth events accurately and quickly.
In future work, we will investigate more advanced language processing (linguistic parsing, semantic role labelling, etc.), the use of lexical resources and other background knowledge, as well as different sources of media bias/viewpoints.
We also plan to explore aggregation and analysis dimensions other than time, such as multilinguality, as investigated in ElectionWatch 9 or Found in Translation 10 .
Further quantitative and qualitative evaluations will be carried out.
We will also study user behaviour and attitudes towards different forms of story understanding and search.
Figure 1.
Story understanding by zooming in time and story search: The main window contains the story graph.
Centre, top: The screenshot fragment in the green box on the left side of the main window shows a first story graph for a corpus of reports on Britney Spears from 2007.
A wide time window contains, among others, seemingly unrelated story lines on "head", "shave", and "rehab".
Right: Narrowing the time window reveals that it was Britney Spears who shaved her head (and that there is a possible connection to her entering rehab).
By marking the edges connecting the three terms, the user obtains a list of pertinent documents (centre, bottom), whose text can be inspected (left).
Figure 2.
Scanning and tracking: In a corpus of reports on Enron from 2001, the company Dynegy appears first in period 2 (left, top: part of the story graph).
Marking the node for tracking removes the TF filter.
Going back to period 1 shows that it was already mentioned there, but only very infrequently (left, bottom).
Then scanning forward to period 2 shows a wealth of associations associated with Dynegy's planned takeover of Enron, which became public then (middle; "dynegy" label enlarged for readability).
Right: a part of the facts timeline.
