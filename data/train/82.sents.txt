It is well known that in a network with arbitrary (convex) latency functions that are a function of edge traffic, the worst-case ratio, over all inputs, of the system delay caused due to selfish behavior versus the system delay of the optimal centralized solution may be unbounded even if the system consists of only two parallel links.
This ratio is called the price of anarchy (PoA).
In this paper, we investigate ways by which one can reduce the performance degradation due to selfish behavior.
We investigate two primary methods (a) Stackelberg routing strategies, where a central authority, e.g., network manager, controls a fixed fraction of the flow, and can route this flow in any desired way so as to influence the flow of selfish users; and (b) network tolls, where tolls are imposed on the edges to modify the latencies of the edges, and thereby influence the induced Nash equilibrium.
We obtain results demonstrating the effectiveness of both Stackelberg strategies and tolls in controlling the price of anarchy.
For Stackelberg strategies, we obtain the first results for nonatomic routing in graphs more general than parallel-link graphs, and strengthen existing results for parallel-link graphs.
(i) In series-parallel graphs, we show that Stackelberg routing reduces the PoA to a constant (depending on the fraction of flow controlled).
(ii) For general graphs, we obtain latency-class specific bounds on the PoA with Stackelberg routing, which give a continuous trade-off between the fraction of flow controlled and the price of anarchy.
(iii) In parallel-link graphs, we show that for any given class L of latency functions, Stackelberg routing reduces the PoA to at most α + (1 − α) · ρ(L), where α is the fraction of flow controlled and ρ(L) is the PoA of class L (when α = 0).
For network tolls, motivated by the known strong results for nonatomic games, we consider the more general setting of atomic splittable routing games.
We show that tolls inducing an optimal flow always exist, even for general asymmetric games with heterogeneous users, and can be computed efficiently by solving a convex program.
This resolves a basic open question about the effectiveness of tolls for atomic splittable games.
Furthermore, we give a complete characterization of flows that can be induced via tolls.
We consider the problem of optimizing the performance of a network in the presence of selfish, noncooperative, uncoordinated traffic (users).
A popular way of modeling such selfish behavior is by means of a noncooperative game played between the selfish agents, and by viewing the equilibria, typically Nash equilibria, of the game as outcomes of selfish behavior.
It is well known that selfish behavior and the lack of coordination often leads to a degradation in performance quality, and in recent years there has been considerable interest and progress in quantifying the performance loss in various settings in terms of the price of anarchy of the corresponding induced game; see e.g., [23,31,28].
The price of anarchy (abbreviated PoA) of a game is the ratio between the cost of the Nash equilibrium solution (i.e., the outcome of selfish behavior) and the socially optimum solution.
In this paper, we investigate ways of reducing the price of anarchy in network congestion games (which we also refer to as network routing games).
A network routing game is determined by a directed network G = (V, E) with nonnegative, nondecreasing latency or delay functions e (x) on the edges, a source and sink s, t ∈ V , and a given volume of flow that needs to be routed from s to t, which is split into many users.
(This specifies a single-commodity network-routing game; more generally (see Sections 3.4 and 4), one could have multiple (s i , t i ) pairs with different amounts of flow to be routed for each source-sink pair.)
To analyze selfish behavior, we focus on the concept of a Nash equilibrium, which is a combination of users' strategies where no individual user can reduce her cost by changing her strategy (when the other users' strategies stay fixed).
In the context of congestion games, the cost of a user is measured in terms of the congestion experienced by it, and the system cost is the aggregate of the user costs.In the nonatomic routing game, there are an infinite number of users, each controlling an infinitesimal amount of flow (traffic).
The strategy space of each user is the collection of directed paths in G from s to t.
The cost associated with selecting a path P is the delay of P , which is the sum of the delays of the edges in P .
In the atomic, splittable routing game, there are a finite number of users.
Each user i controls a certain amount of flow D i > 0, and her strategy consists of choosing a feasible fractional (i.e., splittable) flow from s to t of volume D i .
The cost associated with flow f i is the total delay incurred in routing along f i , which is the sum over all edges e of the flow f i,e times the delay of edge e.The system cost of a flow f is the total latency or delay experienced by all the users, defined by C(f ) = ∈E f e e (f e ).
The price of anarchy of a game is the worst possible ratio of C(f NE )/C(o), where f NE if a flow at a Nash equilibrium, and o is a system-optimal flow, i.e., it minimizes C(f ).
It is known that with arbitrary (convex) latency functions, the price of anarchy may be unbounded even if G consists of only two parallel s-t links.
Thus it becomes important to consider ways by which one can reduce the performance degradation due to selfish behavior and bound the price of anarchy.
We investigate two primary methods for reducing the price of anarchy.
(a) Stackelberg routing strategies.
A central authority, such as the network manager or router, controls a fixed fraction of the flow and routes this flow in any desired way, then the remaining traffic routes itself selfishly.
The goal is to find a Stackelberg strategy, that is, a routing of the centrally controlled traffic, that minimizes the cost of the resulting flow (which includes the Stackelberg flow).
As mentioned in [29], an appealing aspect of Stackelberg strategies is their simplicity: unlike other prominent approaches such as, for example, mechanism design or pricing policies, no communication is required between the system and the selfish users, and no notion of money is needed.
Moreover, despite this simplicity, various situations that arise in the design of communication networks can be modeled by the above setting.
For example, Korilis et al. [22] motivate this problem from its applicability in virtual private network design, where the system must allocate bandwidth on preassigned virtual paths so as to handle ongoing and future traffic; the bandwidth assigned on the virtual paths can be viewed as centrally controlled traffic, while the individual users of the network (who may come and go) may be treated as selfish traffic.
(b) Network tolls.
A central authority imposes tolls (or taxes) on the network edges.
The net latency experienced by user i on an edge e with toll τ e is given by˜iby˜ by˜i,e (x) = γ i e (x) + τ e , where the quantity γ i ≥ 0 indicates the sensitivity of user i to delay.
(In the nonatomic game, one can consider the setting where the γ i s form a continuum.)
The goal is to compute tolls on the edges such that the resulting Nash flow (with respect to the modified latency functions˜efunctions˜ functions˜e,i (x)) has low cost (compared to the social optimum).
Network tolls are a classical means of congestion control.
They were proposed way back by Pigou [27] in 1920, and various results have demonstrated the effectiveness of tolls for nonatomic routing games [2,13,9,14,20,35] by showing that one can always induce an optimal flow via tolls (thus reducing the price of anarchy to 1).
Given these positive results, it is natural to investigate whether tolls can help reduce the price of anarchy in more general settings, such as atomic splittable games.
Moreover, tolls for atomic traffic can be important in areas such as routing of Internet traffic, where there could be relatively few domains (Google, Yahoo, etc.) that generate a large fraction of the traffic.Our results.
We obtain results demonstrating the effectiveness of both Stackelberg strategies and tolls in controlling the price of anarchy.
For Stackelberg strategies, we obtain the first results for nonatomic routing in graphs that are more general than (s, t) parallel-link graphs (Section 3), and we strengthen existing results for parallel-link graphs.
We show that in series-parallel graphs, for any α ∈ [0,1], and arbitrary latency functions, one can efficiently compute a Stackelberg strategy controlling α-fraction of flow that reduces the price of anarchy to 1 α + 1.
This underlines the power of Stackelberg strategies in such settings.
(Note that without any central control, the PoA with arbitrary latency functions is unbounded even for parallel-link graphs.)
Previously, such results were known only for parallel-link graphs, due to Roughgarden [29].
For general graphs, we obtain latency-class specific bounds on the price of anarchy with Stackelberg routing.
Our bounds give a continuous trade-off between the fraction of flow controlled and the price of anarchy.
The trade-off function is a decreasing function of α and varies between the worst-case PoA when α = 0, and 1 when α = 1.
For linear latencies, we describe an explicit trade-off curve showing how the PoA varies with α.We obtain stronger results for parallel-link graphs.
We show that for any given class of latency functions, the price of anarchy (of that class) can always be improved by Stackelberg routing.
More precisely, let ρ(L) denote the PoA of a class L of latency functions (without controlling any flow).
We show that by controlling an α-fraction of flow one can reduce the price of anarchy to α + (1 − α) · ρ(L).
This yields a nice, smooth trade-off, and shows that Stackelberg strategies are especially effective in parallel-link graphs.In Section 4, we consider the use of tolls to reduce the PoA.
As mentioned earlier, various results have affirmed the usefulness of tolls in nonatomic routing games, and the power of tolls in this setting is relatively well understood.
Motivated by these positive results, we therefore investigate the more general setting of atomic splittable games.
We show that there always exist tolls that induce an optimal flow as a Nash flow in the routing game with tolls.
This is true even for asymmetric and heterogeneous atomic splittable routing games, where different users may have different source-sink pairs and different sensitivities to delay.
We call such tolls optimal tolls and show that they can be computed efficiently by solving a convex program.
Furthermore, we give a complete characterization of flows that can be induced (as some Nash equilibrium) via tolls (Nash flows in atomic splittable instances are not necessarily unique).
These results also extend to the setting of general atomic splittable congestion games.
Previously, except in some restricted cases, even the existence of optimal tolls was not known.Related work.
The nonatomic network routing game was originally proposed in the seminal paper of Wardrop [34] as a way of thinking about road traffic.
The notion of equilibrium introduced in [34] is an analogue of the Nash equilibrium concept for the setting of nonatomic routing games (which involve an infinite number of players).
Koutsoupias and Papadimitriou [23] introduced the idea of evaluating the performance degradation of a selfish game by considering its worst-case possible Nash Equilibrium.
Using the terminology defined above, they considered atomic unsplittable routing games on parallel-link graphs with linear latency functions under the maximum user cost objective (as opposed to the sum of user costs).
Papadimitriou [26] later coined the term "price of anarchy" to describe the ratio between the system-performance of the worst-case Nash equilibrium, and the system-performance of the best centrally-enforced solution.
Price of anarchy results for nonatomic routing games were first obtained by Roughgarden and Tardos [31], who obtained tight bounds for linear latency functions.
Subsequently, Roughgarden [30] (see also [28]) gave tight bounds for many classes of latency functions.Much less is known about atomic routing games.
For atomic splittable routing, very recently, Cominetti, Correa, and Stier-Moses [10], Harks [17], and Bhaskar, Fleischer, and Huang [4], all presented various bounds on the price of anarchy (with the latter two results appearing after the publication of the conference version of this paper [33]).
Cominetti et al. [10] showed that in a symmetric atomic game, that is, when all users control the same amount of flow and share the same source and sink, the cost of a Nash equilibrium is at most the cost of the Nash equilibrium in the corresponding nonatomic game.
Hayrapetyan, Tardos and Wexler [18] proved such a result for parallel-link graphs, even when the users control different amounts of flow, and Bhaskar et al. [4] generalized this to series-parallel graphs when all users share the same source and sink.
Thus, in these settings, the PoA of the atomic splittable game is at most the PoA of the corresponding nonatomic game.
Harks [17] proved that the PoA with atomic splittable routing is at most m on a graph with m parallel links, and Bhaskar et al. showed that this bound also holds for series-parallel graphs with m atomic players having the same source-sink pair.
Awerbuch, Azar and Epstein [1], and Christodoulou and Koutsoupias [7] provide PoA bounds for atomic, unsplittable routing games, and show that these can be worse than the PoA bounds in the nonatomic and atomic splittable setting.Korilis, Lazar and Orda [22] first considered the use of Stackelberg strategies as a means of improving system performance.
They considered atomic, unsplittable routing games in graphs with s-t parallel links and latency functions of the form e (x) = 1 ue−x , and obtained necessary and sufficient conditions (e.g., on the amount of flow that is centrally controlled) for the existence of a Stackelberg strategy that induces the optimal flow.
Subsequently, Roughgarden [29] considered the question of improving price of anarchy bounds via Stackelberg strategies.
The work of [29] also considered parallel-link graphs, and showed that for arbitrary latency functions, and any α ∈ [0, 1], one can compute a Stackelberg strategy that reduces the price of anarchy to at most 1 α .
Given that the price of anarchy is unbounded in such graphs, the benefit of Stackelberg strategies is particularly striking in this setting.
Kumar and Marathe [24] considered the algorithmic problem of computing the best Stackelberg strategy and gave a PTAS for this problem on parallel-link graphs.Recently, there has been a flurry of work related to Stackelberg routing, which has appeared concurrently with or subsequent to the publication of the conference version of this paper.
Independent of our work, Karakostas and Kolliopoulos [21] have obtained PoA bounds for multicommodity nonatomic games on general graphs with linear latency functions, using the LLF and Scale Stackelberg strategies proposed in [29] (which we also use and analyze).
Correa and Stier-Moses [11] have also independently obtained some results on Stackelberg routing.
Kaporis and Spirakis [19] show that one can efficiently compute the smallest α such that an optimal flow can be induced by controlling α-fraction of flow.
Sharma and Williamson [32] consider the related question of finding the smallest α for which the cost of the Nash flow can be improved, for parallel-link instances with linear latencies.
Very recently, Bonifaci, Harks and Schäfer [5] showed that for general graphs, no Stackelberg strategy can reduce the price of anarchy to a constant depending only on α, for any α ∈ [0, 1), thus resolving one of the main questions left open by our work and [29].
Finally, we note that Fotakis [16] and Harks [17] obtained some PoA bounds for Stackelberg strategies in atomic unsplittable congestion games, and atomic splittable routing games respectively.The use of tolls as a means for congestion control was proposed way back by Pigou [27] in 1920.
For nonatomic users with identical trade-offs for delay versus toll, Pigou [27], and more formally Beckman et al. [2], showed that marginal cost tolls induce the optimal flow.
Much recent work has been directed toward the setting of heterogeneous users, where different users may have distinct trade-offs for delay versus toll, In this setting, it turns out that one can exploit linear-programming duality to obtain tolls that induce an optimal flow, even for multicommodity traffic [13,9,8,14,20,35].
Questions regarding the efficacy of tolls for atomic users have only been considered very recently.
Independent of our work, Yang and Zhang [36] have also shown the existence of optimal tolls for atomic splittable routing.
Although their result is stated only for homogeneous users having the same delay-toll tradeoff, their proof, which is quite similar to ours, can be extended to the setting of heterogenous users.The only other results we are aware of on tolls for atomic splittable traffic are those that follow from the above-mentioned results of Cominetti et al. [10], Hayrapetyan et al. [18], and Bhaskar et al. [4], which show that the cost of an atomic Nash flow is bounded by that of the nonatomic Nash flow in certain settings; their results imply that optimal tolls exist for series-parallel graphs, and symmetric users on general graphs.
Cominetti et al. [10] also obtain bounds which suggest that the PoA (for general atomic splittable instances) can be reduced by imposing tolls.
Caragiannis et al. [6] considered the atomic unsplittable case in parallellink graphs with linear latency functions.
In contrast to our results about the existence of optimal tolls, they showed that optimal tolls need not always exist in the unsplittable case, and gave various lower and upper bounds on the PoA achievable through tolls.
Let G = (V, E) be the underlying directed graph endowed with nonnegative, nondecreasing latency functions { e (x)} on the edges, and a source and sink s, t ∈ V .
We will assume that each e (x) is continuous.
Without loss of generality, we can scale the problem so that the total volume of traffic to be routed from s to t is 1 (i.e., if D is the total flow volume, we can equivalently work with the latency functions˜efunctions˜ functions˜e (x) = e (Dx)).
We use C(f ) to denote the cost of a flow f , which is the total latency experienced by the flow, defined by C(f ) = e f e e (f e ).
Let o = {o e } denote an optimal flow, and OPT = C(o) be the cost of this flow.
We use (G, ) to denote an instance (with total flow volume 1) in the corresponding nonatomic routing game, and (G, k, {D i }, ) to denote an atomic (splittable) routing game with k users, where user i controls D i ≥ 0 units of flow (so i D i = 1).
Let P = P st be the set of all simple s-t paths.
The terms "latency", and "cost" of an edge e refer to the quantities e (f e ), and f e e (f e ) respectively.
For a path P , we will sometimes use P (f ) and c P (f ) to denote respectively the total latency and cost of the edges on path P under the flow f .
Given a flow f and path P , we use f P as a shorthand for min e∈P f e .
A Nash equilibrium is a combination of users' strategies, such that no single user can profit by deviating from his strategy (when the other users' strategies stay fixed).
A flow f NE is a Nash flow for the nonatomic routing game (G, ), if it is feasible, and for every P, P ∈ P with f NEP > 0, P (f NE ) ≤ P (f NE ).
Thus, in a Nash flow f NE , all flow paths have the same common latency L, that is, if f NE P > 0, then P (f NE ) = L = min P ∈P P (f NE ).
A flow profile (f 1 , . . . , f k ) is a Nash flow for the atomic splittable routing game (G, k, {D i }, ), if for each user i = 1, . . . , k, f i is a feasible flow for i, and f i minimizes the quantity e f i,e e (f e ) where f is the flow j f j .
Let (x) denote the derivative of (.)
at x.
The following basic facts about optimal and Nash flows will be useful (details and proofs may be found, for example, in [28]).
(f NE e ) = e ( ˜ f NE e ) for every edge e. (d) A flow (f 1 , . . . , f k )is a Nash equilibrium for an atomic instance (G, k, {D i }, ) iff for each user i, and any paths P, P ∈ P with f i,P > 0, we havee∈P ( e (f e )+f i,e e (f e )) ≤ e∈P ( e (f e )+f i,e e (f e )), where f = j f j .
For a latency function (x), define ρ() = sup 0≤y≤xxx (x) y(y)+(x−y) (x) .
Let ρ(L) denote the worstcase price of anarchy over all nonatomic instances (G, ), where each function e (x) lies in class L.Roughgarden [30] showed that if L contains all the constant functions, then ρ(L) is precisely sup ∈L ρ().
Correa, Schulz and Stier-Moses [12] gave an alternative proof of this result, using the quantity β() = sup 0≤y≤xy((x)−(y))xx (x) .
Note that β() = 1 − 1 ρ() , and hence β(L) = sup ∈L β() = 1 − 1 ρ(L) .
We now consider Stackelberg routing for nonatomic routing games and obtain bounds on the price of anarchy.
Throughout, we use α to denote the fraction of traffic controlled by the central authority.
We first consider series-parallel graphs with arbitrary latency functions, in Section 3.1, and prove that the cost of the flow induced by our Stackelberg strategy is at most a constant (depending on α) times the optimum.
In Section 3.2, we focus on obtaining PoA bounds that depend on the latency functions in the instance.
We first show that for any "reasonable" Stackelberg strategy, the price of anarchy never increases (as compared to the PoA without any flow-control) due to Stackelberg routing.
Although this is a highly intuitive result, one should note that there are various examples, most notably the Braess paradox, where measures taken in the interest of improving overall performance actually end up hurting the system performance, due to the presence of selfish users.
We use this to obtain bounds for any given latency class that quantify the trade-off between the fraction of flow controlled and the PoA.
For linear latency functions, we obtain an explicit function describing the variation of the PoA with the fraction of flow controlled.
In Section 3.3, we consider parallel-link networks and present various improved results.
We show that for any class of latency functions L with PoA ρ(L), by controlling α-fraction of flow, one can reduce the PoA to r(ρ(L), α) = α+(1−α)ρ(L), thus obtaining a nice, smooth trade-off curve.
In Section 3.4, we consider some extensions.
We argue that some of the latency-class specific bounds of Section 3.2 (those obtained for the Scale strategy) also extend to multicommodity nonatomic games.
Finally, we show that the combination of Stackelberg strategies and tolls can yield benefits that are not achievable by either in isolation.
We observe that for any instance (G, ), by using our Stackelberg strategy in conjunction with tolls, we can enforce an optimal flow where the maximum toll paid by a user along a flow path is bounded (in terms of OPT ).
Throughout, we use g to denote the Stackelberg flow, and h to denote the induced Nash flow, that is, h is the Nash flow with respect to the modified latency functions˜efunctions˜ functions˜e (x) = e (g e + x).
Since the total flow volume is 1 (due to scaling), g and h are s-t flows of volume α and 1 − α respectively.
We use the terms Stackelberg flow and Stackelberg strategy interchangeably.
We will assume that x e e (x) is convex for each e, so that an optimal flow can be computed in polynomial time.We use the following two Stackelberg strategies to obtain our results:(a) The Largest-Latency-First (LLF) strategy.
This consists of the following: compute an optimal flow o, and repeatedly saturate the paths used by o starting from the largest-latency path until we have routed α units of flow.
More precisely, we set g e = 0 for all edges e initially; while α is positive, we repeatedly find a path P such that P (o) = max P :(o−g) P >0 P (o), and set g e ← g e +min(α, (o−g) P )for all e ∈ P , and α = max(0, α − (o − g) P ).
Since o is an acyclic flow, the flow g can be computed in polynomial time from the flow o.
We sometimes call g an α-LLF flow.
Clearly we have g e ≤ o e for all edges e. Let P 1 , . . . , P k be the paths on which flow is routed (in that order, i.e.,P i (o) ≥ P i+1 (o)) to obtain g. Define L g = P k (o) = min i P i (o).
Thus, L g ≥ max P :(o−g) P >0 P (o).
This is a generalization of the Largest-Latency-First strategy given in [29] for parallel-link graphs, therefore we adopt the same terminology.
(b) The Scale strategy.
In this strategy, we set g e = α · o e on all edges, that is, we simply scale the optimal flow.
This strategy was also mentioned in [29] in the context of parallel-link graphs, but no PoA bounds were obtained using this strategy.
We use this strategy in Section 3.2, to obtain latencyclass specific PoA bounds for general graphs.The following facts about an α-LLF flow will be useful.Lemma 3.1 Let g be an α-LLF flow obtained by routing flow on paths P 1 , . . . , P k (in that order), and let L g be as defined above.
Then (i) L g ≤ OPT /α, and (ii) e g e e (o e ) ≥ α · OPT .
Proof : Let g(P i ) denote the amount of flow routed on P i , so i g(P i ) = α and g e = i:e∈P i g(P i ) for each edge e.
We haveOPT ≥ e g e e (o e ) = e i:e∈P i g(P i ) e (o e ) = i g(P i ) P i (o) ≥ i g(P i ) L g = α · L gwhere the last inequality follows from the definition of L g .
For part (ii), consider any flow decomposition {h(P )} P ∈P of o − g. Let L = max P :h(P )>0 P (o).
Note that L ≤ L g by definition, since g is an α-LLF flow.
Let A = e g e e (o e ), which is at least α · L g as shown above.
NowOPT = A + e (o e − g e ) e (o e ) = A + P h(P ) P (o) ≤ A + P h(P ) L g ≤ A + 1 − α α · A = A/α.
We show that for directed series-parallel (sepa) graphs with end points (or terminals) s and t, the PoA under the LLF strategy is at most 1 α + 1.
Definition 3.2 Directed series-parallel graphs with end points s and t are defined inductively as follows.A basic sepa graph is a directed edge (s, t).
Given two sepa graphs G 1 and G 2 with end points s 1 , t 1 , and s 2 , t 2 respectively, one can create a new sepa graph G as follows.
In a series combination, terminal s 2 is identified with terminal t 1 to create graph G with terminals s = s 1 , t = t 2 ; in a parallel combination, terminal s 1 is identified with terminal s 2 , and terminal t 1 is identified with t 2 , to obtain the new terminals s = s 1 = s 2 and t = t 1 = t 2 .
In both cases,E G = E G 1 ∪ E G 2 .
We will use the following properties of series-parallel graphs, which are easily proved by induction on the series-parallel structure of the graph.
is some s-t path P such that f P > 0 and f e ≤ f e for every e ∈ P .
(ii) Let P be an s-t path, f be an s-t flow, and e 1 , . . . , e k be the subset of edges of P for which f e > 0.
Then there is a path P containing e 1 , . . . , e k with f P > 0.
We will use part (i) of Claim 3.3 (taking f = o − g and f = h) to obtain a sharp bound on the latency of the Nash flow h induced by LLF.
Part (ii) of the claim will allow us to bound the increase in latency of a Stackelberg flow-path by at most the Nash latency.
This will yield a constant PoA bound for sepa graphs.Theorem 3.4 In series-parallel graphs, the LLF strategy induces a flow of cost at most 1 α + 1) · OPT .
Proof : We first bound the cost of the Nash flow h. Applying part (i) of Claim 3.3 with f = o − g and f = h, yields a path Q with (o − g) Q > 0, and g e + h e ≤ o e for all e ∈ Q.
The Nash latency is at most Q (g + h), which is at most Q (o), which in turn is at mostL g since (o − g) Q > 0.
Hence, e h e e (g e + h e ) ≤ (1 − α) · L g .
Now we bound e g e e (g e + h e ).
Consider any path P with g P > 0.
Applying part (ii) of Claim 3.3 with path P and the flow h, shows that there exists a path P with h P > 0 that contains all the edges of P with h e > 0.
The combined latency of all these edges is at most P (h + g), which is at most L g by the above bound on the Nash latency.
Thus, the total latency of path P is at most e∈P :he=0 e (g e ) + L g , implying that the cost of g is at most α · L g + OPT .
So the total cost of g + h is at most L g + OPT ≤ 1 α + 1 · OPT (using part (i) of Lemma 3.1).
We now obtain bounds on the PoA that depend on the latency functions in the instance.
Let (G, { e }) be a nonatomic instance, where each function e lies in some class L of latency functions.
We assume that every function in L is differentiable and that L contains all the constant functions.
Recall that the PoA of class L is given by ρ(L) = sup ∈L ρ(), where ρ() = sup 0≤y≤xxx(x) y(y)+(x−y)(x) .
Recall also that β() = sup 0≤y≤x y((x)−(y)) xx(x) = 1 − 1 ρ() , and β(L) = sup ∈L β() = 1 − 1 ρ(L) .
Since we scale the problem (if necessary) so that the total volume of traffic to be routed is 1, we are implicitly assuming that L is closed under such scaling; that is, if is in L, then so is˜Dis˜ is˜D for any D ≥ 0, where˜Dwhere˜ where˜D (x) = (Dx) (note that ρ() = ρ( ˜ D )).
We drop the argument L below and use β and ρ to denote β(L) and ρ(L) respectively.
In this section, we will also consider the Stackelberg strategy Scale defined earlier.We first prove in Lemma 3.5 that any Stackelberg flow with g e ≤ o e on all edges induces a flow of cost at most ρ · OPT , where the cost of the Nash flow is at most ρ · e (o e − g e ) e (o e ).
We then use these bounds to prove bounds r LLF (ρ; α) and r Sc (ρ; α) on the price of anarchy under the LLF and Scale strategies respectively, which vary between ρ and 1 as α goes from 0 to 1.
We simplify the expression r Sc (ρ; α) (which yields a stronger bound) for polynomial latency functions, and obtain a closed-form expression for linear latencies.
Independently, Correa and Stier-Moses [11] have also obtained Lemma 3.5.
Lemma 3.5 Consider a Stackelberg flow satisfying g e ≤ o e for all e. Then, (i)C(g + h) = e (g e + h e ) e (g e + h e ) ≤ ρ · OPT , and (ii) e h e e (g e + h e ) ≤ ρ e (o e − g e ) e (o e ).
Proof : We use the proof approach of Correa et al. [12].
The Nash flow h satisfies the variational inequality e (h e − f e ) e (g e + h e ) ≤ 0 for any s-t flow f of volume 1 − α.
Taking f = o − g, which is a valid flow, we get thate (g e + h e ) e (g e + h e ) ≤ e o e e (g e + h e ).
We write o e e (g e + h e ) = o e e (o e ) + o e e (g e + h e ) − e (o e ).
Using the definition of β, the last term is at most β(g e + h e ) e (g e + h e ) (this holds even ifo e > g e + h e ).
So (1 − β) e (g e + h e ) e (g e + h e ) ≤ OPT .
This proves part (i), since ρ = (1 − β) −1 .
Let˜eLet˜ Let˜e (x) = e (x + g e ).
As in (i), we start with the inequalitye h e ˜ e (h e ) ≤ e (o e − g e ) ˜ e (h e ).
We have (o e − g e ) ˜ e (h e ) = (o e − g e ) ˜ e (o e − g e ) + (o e − g e ) ˜ e (h e ) − ˜ e (o e − g e ), and the last term is at most β( ˜ )·h e ˜ e (h e ).
Finally, note that β( ˜ ) ≤ β, so we obtain that(1−β)· e h e e (g e +h e ) ≤ e (o e −g e ) e (o e ), proving part (ii).
Lemma 3.5 shows that if g e ≤ o e , then the quantities e g e e (o e ), and e h e e (g e + h e ) are bounded in terms of OPT .
Our goal will be to bound g e e (g e + h e ) in terms of g e e (o e ) and h e e (g e + h e ), and thereby bound C(g+h).
For example, for linear latencies, we always have g e e (g e +h e ) ≤ g e e (g e )+h e e (g e +h e ), so if g is the flow due to the Scale strategy this gives the (weak) bound C(g + h) ≤ α + 2ρ(1 − α) · OPT .
Let g LLF denote the flow due to the LLF strategy, and g Sc = α·o denote the flow due to the Scale strategy.
Let L E = { e } e∈E ⊆ L be the collection of latency functions appearing in the nonatomic instance.
In general, for either strategy, there could be various combinations (λ, κ) such that g e e (g e + h e ) ≤ λ · g e e (g e ) + κ · h e e (g e + h e ), and we would like to obtain the tightest bound.
To this end, for any b ≥ 0, we definec LLF (L E ; b) = max ∈L E sup 0≤x,y≤1 (x − b · y)(x + y) xx(x) .
This definition is tailored so that with x = g e , y = h e , we getg e e (g e + h e ) ≤ c LLF (L; b) · g e e (g e ) + b · h e e (g e + h e ).
Define c Sc (L E ; α, b) = max ∈L E sup 0≤x,y≤1 (αx − b · y)(αx + y) αxx(x) .
For any b ≥ 0, we will obtain a bound on the PoA under g LLF and g Sc in terms of b, ρ(L), and c LLF (for g LLF ) or c Sc (for g Sc ); we will then select the value of b that minimizes this ratio.
We drop the L E in c LLF and c Sc in the sequel.
Note that c Sc (α, b) ≤ c LLF (b) for every α (since 0 ≤ α ≤ 1), so our PoA bound for the Scale strategy will be better than that for LLF.
But, we include an analysis of LLF since it may be of independent interest.
The following facts will be useful.
.
To simplify presentation, we assume that the supremum is attained by some (x b , y b ).
(If not, then one simply takes (x b , y b ) that attains a value arbitrarily close to the supremum and uses a limit argument.)
Then, we havec LLF (b 1 ) ≥ (x b −b 1 ·y b )e(x b +y b ) x b e(x b ) and c LLF (b 2 ) ≥ (x b −b 2 ·y b )e(x b +y b ) x b e(x b ) .
So λc LLF (b 1 ) + (1 − λ)c LLF (b 2 ) ≥ (x b −b·y b )e(x b +y b ) x b e(x b ) = c LLF (b).
Theorem 3.7 (i) The PoA under the Scale strategy is at mostr Sc (ρ; α) = min ρ, inf b≥0 α · c Sc (α, b) + ρ(1 − α)(1 + b) .
(ii) The PoA under the LLF strategy is at mostr LLF (ρ; α) = min ρ, inf b≥0 α · c LLF (b) + ρ(1 − α)(1 + b) ,which is a decreasing function of α.
The functions r LLF and r Sc take values ρ and 1, at α = 0 and α = 1 respectively.Proof : Lemma 3.5 shows that the PoA is at most ρ.
The cost of g + h is C(g + h) = e g e e (g e + h e ) + e h e e (g e + h e ).
Taking g = g Sc = α · o, and using the definition of c Sc (α, b), we get that for any b ≥ 0,e g Sc e e (g Sc e + h e ) ≤ c Sc (α, b) e g Sc e e (o e ) + b e h e e (g Sc e + h e ).
Let C 1 := C(g Sc + h).
So C 1 ≤ α · c Sc (α, b) · OPT + (b + 1) e h e e (g Sc e + h e ).
Using part (ii) of Lemma 3.5 to bound e h e e (g Sc e + h e ), we get that C 1 ≤ α · c Sc (α, b) + (1 − α)(b + 1)ρ · OPT for every b ≥ 0.
Thus the PoA is at most r Sc (ρ; α) = min{ρ, inf b≥0 α · c Sc (α, b) + (1 − α)(b + 1)ρ }.
Clearly r Sc (ρ; 0) = ρ.
Part (ii) of Claim 3.6 shows that lim b→∞ c Sc (1, b) = 1, which gives r Sc (ρ; 1) = 1.
Similarly taking g = g LLF , we get thate g LLF e e (g LLF e + h e ) ≤ c LLF (b) e g LLF e e (g LLF e ) + b e h e e (g LLF e + h e ).
Thus, for every b ≥ 0,C 2 := C(g LLF + h) ≤ c LLF (b) · A + (b + 1)ρ · B, by Lemma 3.5 part (ii), where A = e g LLF e e (o e ), and B = e (o e − g LLF e ) e (o e ).
Let A = θ · OPT , so we have θ ≥ α by part (ii) of Lemma 3.1.
Thus, in the worst case we obtain the boundC 2 /OPT ≤ min{ρ, max θ∈[α,1] inf b≥0 (θ · c LLF (b) + (1 − θ)(b + 1)ρ)}.
The rest of the proof is devoted to showing that the above expression can be simplified to obtain the bound r LLF (ρ; α), and proving the properties of r LLF stated in the theorem.
This is somewhat technical, but relatively straightforward.If α = 1, then θ = 1, and if θ = 1, the infimum is 1 since lim b→∞ c LLF (b) = 1, so the bound in the theorem clearly holds.
If max θ∈ [α,1] (. . .) is attained at θ = α, then again the bound in the theorem holds.
So let α < 1, and suppose that the maximum is attained by θ ∈ (α, 1).
Since c LLF (b) is a convex function (part (iii) of Claim 3.6), for any θ ∈ (0, 1), θ · c LLF (b) + (1 − θ)(b + 1)ρ is minimized at the unique value b θ ≥ 0 satisfying c LLF (b θ ) = ρ(1 − 1/θ).
So b θ increases with θ.
Let ϕ(θ) = θ · c LLF (b θ ) + (1 − θ)(b θ + 1)ρ, so we have ϕ (θ) = c LLF (b θ ) + θ · c LLF (b θ )b θ − (b θ + 1)ρ + (1 − θ)b θ ρ = c LLF (b θ ) − (b θ + 1)ρ.
Thus, ϕ (θ)is a decreasing function of θ, and hence, letting θ * be such that c LLF (b θ * ) = (b θ * + 1)ρ, we obtain that ϕ(θ) is maximized at θ * .
Our assumption that over the range [α, 1], ϕ(θ) is maximized at some θ ∈ (α, 1) implies that θ * ∈ (α, 1) (and maximizes ϕ(θ) over [α, 1]).
Then, b α < b θ * , and so c LLF (b α ) ≥ c LLF (b θ * ) ≥ ρ and ϕ(α) ≥ ρ.
Thus, in every case we can bound the PoA by min{ρ, ϕ(α)} = r LLF (ρ; α).
For α < θ * , the value of r LLF (ρ; α) stays fixed at ρ; for α ≥ θ * , we have r LLF (ρ; α) = min{ρ, ϕ(α)}, which decreases as α increases.
Hence, r LLF decreases with α.
Finally, since lim b→∞ c LLF (b) = 1, we have r LLF (ρ; 1) = 1.
Let L d be the class of polynomial latency functions with degree (at most) d, and define c Sc (L d ; α, b) = sup ∈L d sup 0≤x,y≤1 (αx−b·y)(αx+y) αx(x).
For the class L d , we can simplify the RHS in part (i) of Theorem 3.7 and obtain an upper bound on r Sc (α, b).
For linear latencies, we can further simplify this bound and obtain a closed-form expression.
Our bound for linear latencies is weaker than the bound obtained by Karakostas and Kolliopoulos [21], but it is obtained through a general technique that can be used to compute PoA bounds for other latency classes as well.Theorem 3.8 The PoA for the class L d under the Scale strategy is at most The proof involves straightforward calculus but is somewhat tedious, so it is deferred to Appendix A. Very recently, Bonifaci et al. [5] obtained some results that yield an improved bound for the PoA for the class L d under the Scale strategy.r(d; α) = α + ρ(L d )(1 − α) 1 + b(d, α) , We now consider parallel-link networks and obtain various improvements.
We obtain a simple proof showing that for any class of latency functions L with PoA ρ(L), LLF reduces the PoA to r(ρ(L), α) = α + (1 − α)ρ(L).
Thus, in parallel-link graphs, the (worst-case) PoA always improves by centrally controlling flow.
We begin by giving a very simple proof of the following result from [29].
Theorem 3.9 ( [29]) In a parallel-link network, the LLF strategy induces a flow of cost at most 1 α · OPT .
Proof : Re-index the links in decreasing order of e (o e ), their latency in the optimal flow o (breaking ties arbitrarily).
Let k be the index of the highest index link used by g, soL g = k (o k ) ≤ OPT /α (part (i) of Lemma 3.1).
Let L be the Nash latency.
We claim that L ≤ L g .
If not, then for all i ≥ k, we have i (g i + h i ) ≥ L > L g ≥ i (o i) since all links have latency at least L under the flow g + h.
This implies that g i + h i > o i for every i ≥ k. For i < k, g i = o i , so this implies that the total (g + h) flow has volume greater than 1, giving a contradiction.The claim implies the following simple facts: (a) for i ≤ k, i (g i + h i ) ≤ i (o i ) since i (o i ) ≥ L g ≥ L for all these links; (b) thus, i g e e (g e + h e ) ≤ OPT ; and (c) OPT ≥ αL g ≥ αL.
Since the cost of h is (1 − α)L, this implies that C(g + h) ≤ OPT + (1 − α)L ≤ 1 α · OPT .
The bound α + (1 − α)ρ is at most 1 α , for α ≤ min 1 ρ(L)−1 , 1.
Thus, when ρ(L) ≤ 2 (e.g., for linear, quadratic, cubic latency functions), the bound in Theorem 3.10 is always at most 1 α , and yields a tighter bound on the PoA.For linear latency functions, Roughgarden [29] obtained a tighter bound on the PoA, but the proof in [29] is tailored specifically for linear latencies and does not extend to other latency classes.
The proof above works for any class of latency functions, and demonstrates that Stackelberg strategies always improve the price of anarchy in parallel-link networks.
Multicommodity networks.
The PoA bounds obtained above for the Scale strategy in Section 3.2 extend to multicommodity (or asymmetric) nonatomic routing games.
Here the nonatomic users are divided into different types and the total flow volume of users of type i is D i , which has to be routed from s i to t i .
Roughgarden [28] defined two types of Stackelberg strategies for multicommodity networks: weak Stackelberg strategies, where the central authority controls αD i units of flow for each user-type i, and strong Stackelberg strategies, where the center controls an α fraction of the total flow, i.e., it can control any amount β i D i flow of type i provided thati β i D i ≤ α i D i .
The Scale strategy (which is well-defined even in the multicommodity setting) is thus a weak strategy.
Notice that nowhere in the analysis of Scale in Section 3.2 do we use the fact that we have a single-commodity network.
Thus, the analysis and the PoA bounds derived for Scale hold as is even for multicommodity networks.Combining Stackelberg strategies and tolls.
While Stackelberg strategies and tolls have till now been considered separately, a natural question to consider is whether combining these two measures yields any benefits that are not achievable by either in isolation?
There are two issues of interest here: the cost of the resulting flow, and the total toll paid by a user (along a flow path).
We observe that for any instance (G, ), by using the LLF strategy in conjunction with tolls, we can enforce an optimal flow where the maximum toll paid by a user along a flow path is bounded (in terms of OPT ).
In contrast, it is known that for arbitrary instances (G, ), Stackelberg strategies alone cannot reduce the PoA below 1 α (see [28]), and without any flow control, the total toll paid along a flow path may be unbounded (compared to OPT ) [15] (although the optimal flow can always be enforced [9,35,14,20]).
A Stackelberg strategy g used in conjunction with tolls τ = {τ e } induces the flow g + h, where h is the Nash flow with respect to the latenciesêlatenciesˆlatenciesê (x) = e (x + g e ) + τ e .
The above result follows from two facts.
(a) For any feasible flow f , there exists a flow f ≤ f that can be enforced via tolls [14].
(b) For any flow f enforceable by tolls, there exist tolls that enforce f such that the maximum toll paid by a user is at most max P ∈P P (f ) [15]; a slight modification of the proof shows that the maximum toll paid is at most max P :f P >0 P (f ).
Thus, if g is the flow due to the LLF strategy, then considering the instance (G, ˜ ), where˜ewhere˜ where˜e (x) = e (x + g e ), one can enforce a flow f ≤ o − g as the Nash flow, charging a toll of at mostmax P :(o−g) P >0˜P>0˜ >0˜P (o − g) ≤ 1α · OPT to any user.
Note that the induced flow f + g ≤ o is also optimal.
In this section, we consider the use of tolls for atomic splittable routing games.
We show that tolls that induce an optimal flow always exist and can be efficiently computed, and this is true even in general asymmetric atomic routing games, where different atomic users may have different source-sink pairs.
We also give a complete characterization of flows that can be induced via tolls.
Since Nash flows are not necessarily unique for atomic splittable routing games (even in general graphs with a single source-sink pair [3]), by inducing a flow H, we mean that H can be realized as some atomic Nash equilibrium via tolls.
To our knowledge, this (and the independent work [36]) is the first such result on tolls for atomic splittable traffic.
As mentioned in the Introduction, except in some special cases implied by the results of Cominetti et al.[10], Hayrapetyan et al. [18], and Bhaskar et al. [4], even the existence of tolls inducing an optimal flow was not known.
(We remark that in some of these settings, it is also the case that atomic Nash equilibria are unique; Orda et al. [25] show this for parallel-link graphs, and [10] show this for single-commodity, symmetric instances.)
We consider an asymmetric atomic splittable routing game (G, k, {D i }, ), where user i controls D i ≥ 0 units of flow which has to be routed from s i to t i .
The users are heterogeneous, which means that the net latency experienced by user i on edge e due to a toll τ e , is given by˜iby˜ by˜i,e (x) = γ i e (x) + τ e , where γ i ≥ 0 indicates the sensitivity of user i to delay.
Let P i = P s i t i denote the set of all simple s i -t i paths.
Given a flow f = i f i , where each f i is a feasible flow for user i, define * i,e (x) = e (x)+f i,e e (x); this represents the marginal cost of increasing flow on edge e for user i. Let˜ Let˜ Let˜ * i,e (x) = ˜ i,e (x) + f i,e ˜ i,e (x) = γ i * i,e (x) + τ e .
The flows f 1 , . . . , f k will be clear from the context.
As usual, let * i,P (f ) and˜ and˜ and˜ * i,P (f ) denote e∈P * i,e (f e ) and e∈P˜ e∈P˜ e∈P˜ * i,e (f e ).
A flow is at Nash equilibrium if no user can reduce the cost of its flow by rerouting any part of it.
The following characterization will be useful: a flow profile (f 1 , . . . , f k ), with f = i f i , is a Nash equilibrium (or Nash flow) under tolls {τ e }, iff for each user i, (a) f i is feasible, i.e., it routes D i units from s i to t i , and (b) for any two paths P, P ∈ P i with f i,P > 0, we have˜ have˜ have˜ * i,P (f ) ≤ ˜ * i,P (f ).
We say that a flow H is enforceable, if there exist tolls {τ e } such that H is realized as some Nash equilibrium given these tolls.
The proof approach is similar to that in [14,20,35].
We show that tolls (if they exist) are obtained as the optimal Lagrangian multipliers (or dual variables) to an appropriate convex program (instead of a linear program).
Consider the following convex program:min L(f ) := i γ i P ∈P i P (H)f i,P + i γ i e e (H e ) · ( P ∈P i :e∈P f i,P ) 2 2 (CP H ) s.t. i P ∈P i :e∈P f i,P ≤ H e for all e ∈ E,(1)P ∈P i f i,P = D i for all i,(2)f i,P ≥ 0 for all i, P ∈ P i .
(3)The objective function of (CP H ) is clearly convex, so (CP H ) is a convex program.
Although (CP H ) has exponentially many variables, we can express it compactly using flow-edge variables.
Thus, (CP H ) can be solved efficiently up to an arbitrarily small error.
Observe that (CP H ) is very similar to the linear program used in [14,20] to prove the existence of tolls that enforce flow H in the nonatomic setting.
The only difference is in the objective function, which now contains a non-linear term that appears due to the fact that atomic users take into account the impact their routing strategy on the flow that they control.
Applying the Karush-Kuhn-Tucker (KKT) conditions for convex optimization to (CP H ), we get that (f 1 , . . . , f k ) is an optimal solution to (CP H ) if it is feasible, and there exist Lagrangian multipliers τ e ≥ 0, z i , y i,P ≥ 0 corresponding to constraints (1), (2), and (3) respectively, such that the following hold: Simplifying, we get e∈P γ i ( e (H e ) + f i,e e (H e )) + τ e − z i − y i,P = 0 for every i, P ∈ P i , where f i,e = P ∈P i :e∈P f i,P .
Theorem 4.1 A feasible flow H is enforceable if and only if there is an optimal solution (f 1 , . . . , f k ) to (CP H ) that satisfies all constraints (1) with equality.Proof : First suppose that H is enforceable via tolls {τ e }.
So H = f = i f i , where (f 1 , . . . , f k ) is an atomic Nash equilibrium induced by these tolls.
So for any path P ∈ P i with f i,P > 0, the value e∈P γ i ( e (f e ) + f i,e e (f e )) + τ e must be the same, and must be minimum among all paths P ∈ P i ; set z i equal to this value.
Set y i,P = e∈P γ i ( e (f e ) + f i,e e (f e )) + τ e − z i .
It is easy to verify that f , and (τ, z, y) satisfy the KKT conditions (note that f e = H e ).
Since (f 1 , . . . , f k ) is feasible for (CP H ), it must be an optimal solution, and it satisfies all constraints (1) with equality.
Now suppose that there exists an optimal solution (f 1 , . . . , f k ) to (CP H ) such that f e := i f i,e = H e for every edge e.
Then there must exist Lagrangian multipliers (τ, z, y) satisfying the KKT conditions.
For any path P ∈ P i with f i,P > 0, we must have γ i,P = 0 by condition (iii).
So by condition (iv), we have z i = e∈P γ i ( e (H e ) + f i,e e (H e )) + τ e .
Also for any path P we have z i ≤ e∈P γ i ( e (H e ) + f i,e e (H e )) + τ e since y i,P ≥ 0.
Thus (f 1 , . . . , f k ) is an atomic Nash equilibrium induced by the tolls {τ e }, which implies that H is enforceable.
In order to simplify the expression for r Sc in Theorem 3.7, we first obtain a bound on c(L d ; α, b) for the class L d of degree-d polynomial latency functions.For a latency function , define c(; α, b) = sup x,y≥0 .
So there is a unique value of b at which this expression is equal to 1; recall that this value is denoted by b(i, α).
Note that b(i, α) ≤ i. I thank Lisa Fleischer for several stimulating discussions, and useful comments on earlier drafts of this paper.
In particular, the results in Section 3.1 were obtained in collaboration with her, and I thank her for allowing me to include these results.
