Service prioritization among different traffic classes is an important goal for the future Internet.
Conventional approaches to solving this problem consider the existing best-effort class as the low-priority class, and attempt to develop mechanisms that provide "better-than-best-effort" service.
In this paper, we explore the opposite approach, and devise a new distributed algorithm to realize a low-priority service (as compared to the existing best effort) from the network endpoints.
To this end, we develop TCP Low Priority (TCP-LP), a distributed algorithm whose goal is to utilize only the excess network bandwidth as compared to the "fair share" of bandwidth as targeted by TCP.
The key mechanisms unique to TCP-LP congestion control are the use of one-way packet delays for congestion indications and a TCP-transparent congestion avoidance policy.
Our simulation results show that: (1) TCP-LP is largely non-intrusive to TCP traffic; (2) both single and aggregate TCP-LP flows are able to successfully utilize excess network bandwidth; moreover, multiple TCP-LP flows share excess bandwidth fairly; (3) substantial amounts of excess bandwidth are available to low-priority class, even in the presence of "greedy" TCP flows; (4) the response times of web connections in the best-effort class decrease by up to 90% when long-lived bulk data transfers use TCP-LP rather than TCP.
M OTIVATED by the diversity of networked applications, a significant effort has been made to provide differentiation mechanisms in the Internet, e.g., [1].
However, despite the availability of simple and scalable solutions (e.g., [2]), deployment has not been forthcoming.
A key reason is the heterogeneity of the Internet itself: with vastly different link capacities, congestion levels, etc., a single mechanism is unlikely to be uniformly applicable to all network elements.In this paper, we devise TCP-LP (Low Priority), an endpoint protocol that achieves two-class service prioritization without any support from the network.
The key observation is that end-to-end differentiation can be achieved by having different end-host applications employ different congestion control algorithms as dictated by their performance objectives.
Since TCP is the dominant protocol for best-effort traffic, we design TCP-LP to realize a low-priority service as compared to the existing best effort service.
Namely, its objective is for TCP-LP flows to utilize the bandwidth left unused by TCP flows in a non-intrusive, or TCP-transparent, fashion.
This research is supported by NSF Grants ANI-0085842 and ANI-0099148, the Department of Energy, and by a Sloan Fellowship.Moreover, TCP-LP is a distributed algorithm that is realized as a sender-side modification of the TCP protocol.One class of applications of TCP-LP is low-priority file transfer over the Internet.
For network clients on low-speed access links, TCP-LP provides a mechanism to retain faster response times for interactive applications using TCP, while simultaneously making progress on background file transfers using TCP-LP.
Similarly, in enterprise networks, TCP-LP enables large file backups to proceed without impeding interactive applications, a functionality that would otherwise require a multi-priority or separate network.
Finally, institutions often rate-limit certain applications (e.g., peer-to-peer file sharing applications) such that they do not degrade the performance of other applications.
In contrast, TCP-LP allows low priority applications to use all excess capacity while also remaining transparent to TCP flows.A second class of applications of TCP-LP is inference of available bandwidth for network monitoring, end-point admission control [3], and performance optimization (e.g., to select a mirror server with the highest available bandwidth).
Current techniques (e.g., [4], [5], [6]) estimate available bandwidth by making statistical inferences on measurements of the delay or loss characteristics of a sequence of transmitted probe packets.
In contrast, TCP-LP is algorithmic with the goal of transmitting at the rate of the available bandwidth.
Consequently, competing TCP-LP flows obtain their fair share of the available bandwidth, as opposed to probing flows which infer the total available bandwidth, overestimating the fraction actually available individually when many flows are simultaneously probing.
Moreover, as the available bandwidth changes over time, TCP-LP provides a mechanism to continuously adapt to changing network conditions.Our methodology for developing TCP-LP is as follows.
First, we develop a reference model to formalize the two design objectives: TCP-LP transparency to TCP, and (TCP-like) fairness among multiple TCP-LP flows competing to share the excess bandwidth.
The reference model consists of a two level hierarchical scheduler in which the first level provides TCP packets with strict priority over TCP-LP packets and the second level provides fairness among microflows within each class.
TCP-LP aims to achieve this behavior in networks with non-differentiated (first-come-first-serve) service.Next, to approximate the reference model from a distributed end-point protocol, TCP-LP employs two new mechanisms.First, in order to provide TCP-transparent low-priority service, TCP-LP Â¢ flows must detect oncoming congestion prior to TCP flows.
Consequently, TCP-LP uses inferences on one-way packet delays as early indications of network congestion vs. packet losses used by TCP.
We develop a simple analytical model to show that due to the non-linear relationship between throughput and round-trip time, TCP-LP can maintain TCPtransparency even if TCP-LP flows have larger round-trip times than TCP flows.
Moreover, a desirable consequence of early congestion inferences via one-way delay measurements is that they detect congestion only on the forward path (from the source to the destination) and prevent false early congestion indications from reverse cross-traffic.
TCP-LP's second mechanism is a novel congestion avoidance policy with three objectives: (1) quickly back off in the presence of congestion from TCP flows, (2) quickly utilize the available excess bandwidth in the absence of sufficient TCP traffic, and (3) achieve fairness among TCP-LP flows.
To achieve these objectives, TCP-LP's congestion avoidance policy modifies the additive-increase multiplicative-decrease policy of TCP via the addition of an inference phase and use of a modified back-off policy.Finally, we perform an extensive set of ns-2 simulation experiments and study TCP-LP's characteristics in a variety of scenarios.
First, in our experiments with greedy TCP flows (FTP downloads), we show that TCP-LP is largely nonintrusive to TCP traffic, and that TCP flows achieve approximately the same throughput whether or not TCP-LP flows are present.
Second, we explore TCP-LP's dynamic behavior using experiments with artificial "square-wave" background traffic.
We show that single and aggregate TCP-LP flows can successfully track and utilize the excess network bandwidth.
Finally, in our experiments with HTTP background traffic, we show that flows in the best-effort class can benefit significantly from the two-class service prioritization scheme.
For example, the response times of web connections in the best-effort class decrease by up to 90% when long-lived bulk data transfers use TCP-LP rather than TCP.
Thus, our simulation results indicate that TCP-LP is a practically applicable protocol that accurately achieves the functionality of the reference model.
The reminder of this paper is organized as follows.
In Section II, we present the reference model to describe TCP-LP's design objectives and in Section III we present the TCP-LP protocol.
Sections IV and V present simulation preliminaries and experimental results.
Finally, in Sections VI and VII we discuss related work and conclude.
In this section, we provide a brief review of TCP congestion control and present a reference model to describe TCP-LP's design objectives.
Figure 1 shows a temporal view of the TCP/Reno congestion window behavior at different stages with points on the top indicating packet losses.
Data transfer begins with the slow-start phase in which TCP increases its sending rate exponentially until it encounters the first loss or maximum window size.
From this point on, TCP enters the congestionavoidance phase and uses an additive-increase multiplicativedecrease policy to adapt to congestion.
Losses are detected via either time-out from non-receipt of an acknowledgment, or by receipt of a triple-duplicate acknowledgement.
If loss occurs and less than three duplicate ACKs are received, TCP reduces its congestion window to one segment and waits for a period of retransmission time out (RTO), after which the packet is resent.
In the case that another time out occurs before successfully retransmitting the packet, TCP enters the exponential-backoff phase and doubles RTO until the packet is successfully acknowledged.
One objective of TCP congestion control is for each flow to transmit at its fair rate at its bottleneck link.
While biasing rates in favor of flows with small round-trip times, we nonethe-less refer to TCP as "fair" in the discussion below.
1 The objective of TCP-LP is to use excess network bandwidth left unutilized by non TCP-LP flows thereby making TCP-LP flows transparent to TCP and UDP flows.
This design objective is formalized in Figure 2(a) which depicts a twoclass hierarchical scheduling model (see [8]) that achieves the idealized system functionality.
In the reference system, there is a high-priority and low-priority class, with the former obtaining strict priority service over the latter.
Within each class, service is fair among competing flow-controlled flows.
As networks do not typically employ such scheduling mechanisms, the objective of TCP-LP is to obtain an approximation to the reference model's behavior via an end-point congestion control algorithm.
As depicted in Figure 2(b), in the actual system, all flows (high and low priority) are multiplexed into a single first-come-first-serve queue and service approximating that of the reference model is obtained via the use of two different congestion control protocols, TCP and TCP-LP.
In other words, TCP flows should obtain strict priority service over TCP-LP flows, and competing TCP-LP flows should each obtain a fair bandwidth share compared to other TCP-LP flows.
2 In this section we develop TCP-LP, a low-priority congestion control protocol that uses the excess bandwidth on an endto-end path, versus the fair-rate utilized by TCP.
We first devise a mechanism for early congestion indication via inferences of one-way packet delays.
Next, we present TCP-LP's congestion avoidance policy to exploit available bandwidth while being sensitive to early congestion indicators.
We then develop a simple queueing model to study the feasibility of TCPtransparent congestion control under heterogeneous round trip times.
Finally, we provide guidelines for TCP-LP parameter settings.
The goal of TCP-LP is to provide low priority service in the presence of TCP traffic.
To achieve this goal, it is necessary for TCP-LP to infer congestion earlier than TCP.
In principle, the network could provide such early congestion indicators.
For example, TCP-LP flows could use a type-of-service bit to indicate low priority, and routers could use Early Congestion Notification (ECN) messages to inform TCP-LP flows of lesser congestion levels than TCP flows.
However, given the absence of such network support, we devise an endpoint realization of this functionality by using packet delays as early indicators for TCP-LP, as compared to packet drops used by TCP.
In this way, TCP-LP and TCP implicitly coordinate in a distributed manner to provide the desired priority levels.1) Delay Threshold: TCP-LP measures one-way packet delays and employs a simple delay threshold-based method for early inference of congestion.
DenotÃ« as the minimum and maximum one-way packet delays experienced throughout the connection's lifetime.
3 Thus, An early indication of congestion is inferred by a TCP-LP flow whenever the smoothed one-way delay exceeds a threshold within the range of the minimum and maximum delay.
In other words, the early congestion indication condition is& ' Â¨ Â© E D Â¨ Â© F G @ H )Â¨ !
I # Â¨ Â© 3 2 P C(2)whereQ S R T P G R 1denotes the threshold parameter (we discuss the setting of parameters P and % in detail in Section III-D).
Thus, analogous to the way ECN uses increasing queue sizes to alert flows of congestion before loss occurs, the above scheme infers forthcoming congestion from the end points' delay measurements so that TCP-LP flows can be nonintrusive to TCP flows.2) Delay Measurement: TCP-LP obtains samples of oneway packet delays using the TCP timestamp option from [9].
Each TCP packet carries two four-byte timestamp fields.
A TCP-LP sender timestamps one of these fields with its current clock value when it sends a data packet.
On the other side, the receiver echoes back this timestamp value and in addition timestamps the ACK packet with its own current time.
In this way, the TCP-LP sender measures one-way packet delays.
Note that the sender and receiver clocks do not have to be synchronized since we are only interested in the relative time difference.
Moreover, a drift between the two clocks is not significant here as resets ofÂ¨Â©ofÂ¨ ofÂ¨Â© F andÂ¨!
andÂ¨ andÂ¨!
on time-scales of minutes can be applied [10].
Finally, we note that by using one-way packet delay measurements instead of round-trip times, cross-traffic in the reverse direction does not influence TCP-LP's inference of early congestion.
1) Objectives: TCP-LP is an end-point algorithm that aims to emulate the functionality of the reference-scheduling model depicted in Figure 2.
Consider for simplicity a scenario with one TCP-LP and one TCP flow.
A strict priority scheduler serves TCP-LP packets only when there are no TCP packets in the system.
However, whenever TCP packets arrive, the scheduler immediately begins service of higher priority TCP packets.Similarly, after serving the last packet from the TCP class, the strict priority scheduler immediately starts serving TCP-LP packets.
Note that it is impossible to exactly achieve this behavior from the network endpoints as TCP-LP operates on time-scales of round-trip times, while the reference scheduling model U operates on time-scales of packet transmission times.
Thus, our goal here is to develop a congestion control policy that is able to approximate the desired dynamic behavior.2) Reacting to Early Congestion Indicators: TCP-LP must react quickly to early congestion indicators to achieve TCPtransparency.
However, simply decreasing the congestion window promptly to zero packets after the receipt of an early congestion indication (as implied by the reference scheduling model) unnecessarily inhibits the throughput of TCP-LP flows.
This is because a single early congestion indication cannot be considered as a reliable indication of network congestion given the complex dynamics of cross traffic.
On the other hand, halving the congestion window of TCP-LP flows once-per round-trip time, as recommended for ECN flows [11], would result in too slow a response to achieve TCP transparency.To compromise between the two, TCP-LP employs the following algorithm.
After receipt of the initial early congestion indication, TCP-LP halves its congestion window and enters an inference phase by starting an inference time-out timer.
During this inference period, TCP-LP only observes responses from the network, without increasing its congestion window.
If it receives another early congestion indication before the inference timer expires, this indicates the activity of cross traffic, and TCP-LP decreases its congestion window to one packet.
Thus, with persistent congestion, it takes two roundtrip times for a TCP-LP flow to decrease its window to 1.
Otherwise, after expiration of the inference timer, TCP-LP enters the additive-increase congestion avoidance phase and increases its congestion window by one per round-trip time (as with TCP flows in this phase).
We observe that as with router-assisted early congestion indication [11], consecutive packets from the same flow often experience similar network congestion state.
Consequently, as suggested for ECN flows, TCP-LP also reacts to a congestion indication event at most once per round-trip time.
Thus, in order to prevent TCP-LP from over-reacting to bursts of congestion indicated packets, TCP-LP ignores succeeding congestion indications if the source has reacted to a previous delay-based congestion indication or to a dropped packet in the last round-trip time.Finally, the minimum congestion window for TCP-LP flows in the inference phase is set to 1.
In this way, TCP-LP flows conservatively ensure that an excess bandwidth of at least one packet per round-trip time is available before probing for additional bandwidth.3) Pseudo Code: Figure 3 shows the pseudo code for TCP-LP's congestion avoidance policy.
We denote cwnd as congestion window size and itti as the inference time-out timer state indicator.
It is set to one when the timer is initiated and to zero when the timer expires.
Further, Figure 4 illustrates a schematic view of TCP-LP's congestion window behavior at different stages, where points on the top mark early congestion indications and the inference timer period is labeled itt.
For example, with the first early congestion indicator, this flow enters the inference phase.
It later successfully exits the inference phase into additive increase as no further early congestion indicators occur.
On the other hand, the second As described above, TCP-LP must detect congestion earlier than TCP.
However, in a heterogeneous networking environment, different flows can have different round-trip times ranging from several msec to several sec.
Here we address to what extent TCP-LP flows with large round-trip times can still infer congestion prior to TCP flows with smaller roundtrip times.
Such behavior is required such that TCP-LP flows with large round-trip times can still utilize excess network bandwidth without hindering TCP flows with small round-trip times.Our approach is to develop a simple queueing model that characterizes TCP-LP's non-intrusiveness in the presence of TCP cross-traffic, and quantifies it with respect to the threshold parameter In such a scenario and under a fluid flow model, we can quantify the conditions in which the TCP-LP flow will decrease its sending rate before the TCP cross-traffic will experience packet loss.
We assume that the queue is initially empty and consider that the aggregate rate of the two flows is as the respective times when the TCP-LP and TCP cross-traffic flow determine that the queue is congested.
For TCP-LP, this time is given by the solution toP r d ( t s v u 8 w x )V @ y )f a Â Â W Y X ` Xa Â @ f c Â Â W Y X ` X c 3 2 X # V $ 3 2 Â¨ X !
Â (3) so that X 2 a ( Â Â Â Â Â w Â Â 5 Â 5 u Â u 8 w Â Â Â Â Â Â Â 5 u Â u Â .
Similarly, X 5 c ( Â Â Â Â w Â Â 5 Â 5 u Â u 8 w Â Â Â Â Â Â Â 5 u Â u Â.
In the Equation (3), the termV @ Â )f a Â Â W Y X ` Xa 5 @ f Â c Â W Y X ` X q c Â 3 ` Xdenotes instantaneous arrival rate of the two flows at time X , while the term # V denotes service rate.
For the TCP-LP flow to decrease its rate before the cross traffic experiences packet loss, it is necessary thatX a d @ W Y X ` Xa R e X c , which is equivalent to W Y X ` X 5 a E R Â Â Â Â w Â Â Â Â q u Â u 8 w F Â Â Â Â Â Â Â 5 u Â u Â ) q 1 f # v g P r 3.
To interpret this result, consider thatf a Â Â W Y X ` Xa d ( i h f c " Â W Y X ` X c .
For f a j ( f c, this means that the TCP-LP flow's round-trip time is h times larger than the competing TCP flow's roundtrip.
In this case, the above condition is equivalent toh A ) 8 h k @ y 1 3 l R f Â c f Â a W Y X ` X c n m d ) q 1 l # g P r 3Â C(4)Inequality (4) .
Figure 6 depicts the relationship between the ratios of the round-trip times h and the delay threshold Here, we propose guidelines for setting TCP-LP's parameters given that the receipt of a single packet whose smoothed one-way delay is greater than a prespecified threshold serves as an early notification of congestion to a TCP-LP flow.1) Delay Smoothing % : First, we consider the delay smoothing parameter % of Equation (1).
With large variations in network delay due to bursty cross traffic, smoothing oneway packet delays is essential for preventing false early congestion indications.
On the other hand smoothing over excessively long time intervals (corresponding to small vales for % ) can substantially degrade TCP-LP's ability to detect congestion in its early stages.
To balance these two requirements, TCP-LP uses smoothing parameter% ( i 1 Y Â r ~, the value typically used for computing the smoothed round-trip time for TCP.2) Delay Threshold P : Next, we consider the earlycongestion-indication delay threshold P of Equation (2).
The example from Figure 6 illustrates the advantages of small values for the threshold P as TCP-LP's responsiveness decreases when P increases.
However, the use of very small thresholds can substantially degrade TCP-LP's throughput in realistic scenarios.
This is because even very small (and frequent) bursts of cross-traffic can cause queueing delays on a bottleneck link.
TCP-LP senses these delays from the edge, and if it uses small thresholds, frequent delay oscillations can be misinterpreted as congestion indications, even in a lightly loaded network.
In turn, false early congestion indications would cause a TCP-LP flow to unnecessarily decrease its sending rate.Thus, P must be set to balance increased protocol responsiveness with avoiding false early congestion indications.
To obtain the smallest value of Thus, while necessarily not comprehensive, we find that setting the threshold P to the value of 0.15 is able to accurately decouple the influence of ACK cross-traffic streams from data cross-traffic streams.
In other words, while being robust in utilizing available bandwidth in the presence of pure ACK streams, TCP-LP retains its responsive nature in the presence of pure data or aggregation of data and ACK streams.
5 3) Inference Time-out itt: Finally, a similar tradeoff between congestion-responsiveness and throughputaggressiveness holds for the inference time-out timer parameter.
With a longer inference time-out timer, TCP-LP becomes more responsive to congestion whereas a smaller inference time-out timer causes TCP-LP to switch sooner to the more aggressive additive-increase phase.
To compromise between the two, we set itt to three round-trip times, thereby giving enough space for a TCP-LP flow to rapidly decrease its window size in periods of persistent congestion, while at the 5 Numerous additional simulations (not shown) including scenarios with hundreds of flows, heterogeneous link capacities and multiple bottlenecks corroborate that this value represents a high performance compromise between TCP-LP's responsiveness and ability to prevent false congestion indications.
same time allowing TCP-LP to probe the network aggressively enough.
In this section, we describe TCL-LP/ECN, a benchmark algorithm that uses network ECN instead of end-point delay thresholds to infer congestion.
This provides means to evaluate the early-congestion-inference aspect of TCP-LP separately from its congestion-control policy.
We also present the baseline simulation scenario and describe the "square-wave" and web-like background traffic patterns.
Here, we describe TCP-LP/ECN, a variant of TCP-LP that uses ECN for detecting congestion instead of one-way packet delays.
(Recall that one of our basic design goals is to develop an end-point protocol that is able to operate without any support from the network.)
We simulate TCP-LP/ECN by modifying the implementation of RED [12] in ns-2 as follows.
First, we set the minimum and the maximum RED thresholds to the value of , and TCP packets are dropped only when the queue overflows.
In this way, TCP-LP/ECN emulates the distributed TCP-LP protocol with the former using router queue measurements and the latter using end-point delay measurements.
As a baseline topology, we consider many flows sharing a single congested link as shown in Figure 9.
The bandwidth of this link is either 1.5 Mb/s or 10 Mb/s and it has propagation delay 20 ms. The access links have capacity 100 Mb/s and delay 2 ms. The queue size is set to 2.5 times the delaybandwidth product.
For each data point, we perform 50 simulation runs and report averages.
Each simulation run lasts 1000 sec.
Our ns-2 implementation of TCP-LP is derived by modifying TCP/Reno.
To explore the dynamics of TCP-LP, we use on-off constantrate flows with equal on and off times, giving periodic "squarewave" patterns of available bandwidth as in reference [13].
While not representative of actual traffic patterns, this scenario is motivated by the need to systematically explore TCP-LP's ability to utilize the excess bandwidth and to study its transparency and fairness properties.
In these experiments, the available bandwidth alternates between the full link capacity of 10 Mb/s and 3.3 Mb/s when the periodic source is idle and active respectively.
The period of oscillations is changed from one to 1000 round-trip times, i.e., from 50 ms to 50 sec.Next, to explore TCP-LP's behavior with web traffic, we adopt the model developed in [14].
In this model, clients initiate sessions from randomly chosen web sites with several web pages downloaded from each site.
Each page contains several objects, each of which requires a TCP connection for delivery (i.e., HTTP 1.0).
The inter-page and inter-object time distributions are exponential with means of one sec and one msec, respectively.
Each page consists of ten objects and the object size is distributed according to a Pareto distribution with shape parameter 1.2.
We now use simulation to evaluate the performance of TCP-LP in a variety of scenarios.
Our goal is to explore TCP-LP's behavior in both artificial and realistic network environments.
We evaluate TCP-LP's impact on both the throughput and delay characteristics of competing cross-traffic.
Moreover, we explore TCP-LP's ability to utilize the excess network bandwidth and to achieve fairness among competing TCP-LP flows.
We first consider simultaneous FTP downloads, where one flow uses TCP-LP and the other uses TCP.
Our objectives are to examine to what extent TCP-LP can utilize excess bandwidth in the presence of greedy long-lived TCP traffic, and to investigate the extent to which TCP-LP flows perturb TCP traffic.
In addition to this scenario, we also measure the throughput in simulations without TCP-LP consisting of one and two TCP flows.
The results are summarized in the first row of Table I.
In this scenario, there is no excess capacity available for TCP-LP, and TCP-LP slightly perturbs the TCP flows and receives a throughput of 2.7% of the link capacity for both TCP-LP and TCP-LP/ECN.
With ten FTP/TCP flows in the reverse direction, the ACKs of the forward-direction TCP flows are delayed thereby increasing their round-trip time and ACK losses, and decreasing their throughput.
Thus, excess capacity is indeed available for TCP-LP flows.
In particular, the second row of Table I illustrates that the throughput of the (forward) TCP flow in this case is 49.7%.
With the presence of a TCP-LP flow, the TCP flow's throughput is only marginally reduced to 49.3%, indicating that TCP-LP achieves nearly perfect TCP transparency while achieving 7.3% throughput.
Figure 10 depicts the temporal dynamics of this scenario and illustrates that TCP's congestion window widely oscillates in the range between zero and 30 packets.
The window of the TCP-LP flow, also depicted, is able to track TCP's oscillation and increases its own window size when TCP's window decreases, and via early congestion inference, TCP-LP quickly backs off when the TCP flow ramps up its window size.
By the time the TCP flow's window reaches its maximum of 30 Next, we explore TCP-LP's performance in the presence of square-wave background traffic as described in Section IV-B.1) Square Wave Period: Our first experiments investigate TCP-LP's ability to utilize excess bandwidth remaining from periodic on-off flows that transmit at constant rate when "on".
Figure 11 depicts the bandwidth utilized by TCP, TCP-LP and TCP-LP/ECN, normalized to 6.6 Mb/s, the average excess bandwidth left unused by the square-wave background traffic.
For comparison, we also depict the normalized average available bandwidth curve.
Observe that all three curves in Figure 11 have similar shape, and all three protocols utilize approximately only 50% of the available bandwidth when the square-wave period is too small (e.g., 0.2 seconds).
Surprisingly, in this regime, both TCP-LP and TCP-LP/ECN utilize more available bandwidth than TCP.
This is due to the early congestion indication and responsive congestion avoidance policy of the TCP-LP protocol, which is able to defer access to the cross-traffic bursts (from 0 to 2/3 V in this case) while avoiding entering the exponential-backoff phase.2) Aggregation Level: Next, we explore the impact of the number of flows under a fixed square wave period of 6.4 sec.
Figure 12 illustrates that with higher levels of aggregation consisting of even 5 flows, TCP flows quickly overcome the performance problem of Figure 11.
On the other hand, for TCP-LP utilization increases more slowly with aggregation level, as with a small number of flows, TCP-LP is not able to develop large congestion windows because it senses the existence of other competing TCP-LP flows and decreases Here we study fairness among TCP-LP flows using Jain's fairness index [15].
The index, always between 0 and 1, is 1 if all flow throughputs are the same.
Our experiments include ten flows of the same type (TCP, TCP-LP or TCP-LP/ECN) that compete with the same non-responsive square wave background traffic.
Figure 13 depicts the fairness indexes of three protocols for different periods of square wave oscillations.
First, observe that for both TCP and TCP-LP/ECN, the fairness index is approximately equal to 1 for all periods.
However, TCP-LP's fairness index is slightly below one for time scales of up to 400 ms. Examining the traces, we conclude that this originates from inaccurate estimates of the minimum and maximum delays.
In most cases, one TCP-LP flow overestimates the minimum delay valuÃ« valuÃ« Â© F due to wide and frequent oscillations of the background traffic.
For this reason, it sends more than its fair share and the fairness index drops slightly.
However, as the oscillation period increases, all flows use periods of low cross-traffic rate to accurately estimate the minimum one-way delay.
Here, we explore TCP-LP's behavior in an environment dominated by web-like transactions in the scenario described in Section IV-B.
We run four experiments for the topology of Figure 9 with a link capacity of 1.5 Mb/s.
In addition to web traffic between nodes zero and one, there is one FTP connection that operates in the same direction as the web-traffic.
This connection is a long-lived bulk transfer and is a candidate for low-priority service.
In the first three experiments, the FTP connection uses TCP-LP, TCP-LP/ECN, and TCP.
Finally, to measure webtraffic response times without any cross-traffic, we perform a fourth experiment in which no FTP traffic is generated.
For the web transactions, we measure and average the response times for different sized objects.1) Impact on HTTP Response Times: To explore TCP-LP's impact on web traffic, we compare HTTP file retrieval times with and without background TCP-LP bulk transfers.
Figure 14 depicts the averaged difference between the two transfer times.
For example, when TCP-LP is used for a long-lived file transfer, the mean retrieval time for a 10 kB web-file is 0.49 sec.
On the other hand, this retrieval time is 0.43 sec when there is no TCP-LP file transfer, hence the point (10, 0.06) in the figure.
These experiments illustrate the non-intrusive aspect of TCP, as the long-lived TCP-LP bulk transfer flow only slightly increases the mean web-traffic response time, with increasing transparency achieved with larger HTTP file sizes.
show that if the bulk transfer flow uses TCP rather than TCP-LP, then the web response times are significantly degraded.
Figure 15 depicts web-file response times normalized by the response times obtained when the background file transfer uses TCP.
Because of this normalization, the curve labeled "TCP" in Figure 15 is a straight line with a value of one.Observe that use of TCP-LP for bulk data transfer reduces the web traffic response times by approximately 80% compared to TCP bulk transfer.
TCP-LP's reduction in response time for web traffic occurs because without it, the TCP bulktransfer demands its fair share of network bandwidth when competing with web-traffic.
On the other hand, the bulktransfer flow itself utilizes 61% of the bandwidth when TCP is used, only 10% more than when TCP-LP is used.
This result emphasizes the benefits of low prioritization of bulk data transfers over web-traffic, which TCP-LP achieves in a distributed manner.
We next consider a more realistic multiple bottleneck scenario using the topologies of Figures 16 and 19.
In all experiments, links 0-1, 1-2 and 2-3 have capacity of 1.5 Mb/s, while all the others have capacity of 100 Mb/s.
Figure 17 depicts the averaged difference between HTTP file response times with and without the presence of a bulktransfer TCP-LP flow.
Observe that despite having a round-trip time three times as large, TCP-LP retains its non-intrusiveness to the HTTP/TCP flows.
This confirms the modeling result from Section III-C, which states that TCP-LP flows are nonintrusive to TCP flows even if their round-trip times are much larger.
Also, we do not observe any substantial difference between TCP-LP and TCP-LP/ECN, except that TCP-LP is slightly more responsive.2) Impact of High vs. Low Priority Bulk Transfer: Figure 18 depicts the response times for different sized objects from all three pools normalized by the response times obtained when background FTP transfer uses TCP.
We observe that the benefit of prioritization observed in the single bottleneck scenario still holds in this multiple-bottleneck scenario, although less pronounced.
The difference is because the long-lived TCP flow is now less intrusive to web traffic due to its larger roundtrip time.
3) Multi-hop Web Traffic: Next, we consider the scenario in which web traffic traverses multiple hops and three FTP connections each traverse a single hop as depicted in Figure 19.
Thus, the FTP flows in this scenario play the role of "fast elephants", a term for long-lived flows with short round-trip times [16].
Figure 20 depicts the averaged difference between web file response times with and without the three TCP-LP bulk transfers.
In this scenario, the small TCP-LP round-trip time only improve its responsiveness and non-intrusiveness to competing web-traffic such that it becomes fully transparent to TCP.
For example, the mean response time for the 10 kB file is 0.98 sec, while it is 0.74 sec in the idealized scenario when there are no FTP downloads in the system.
This is revealed as the point (10, 0.24) for TCP-LP in Figure 20.
Observe that the absolute difference in response times increases three times in this scenario when compared to the single-node scenario simply because the HTTP traffic now traverses three congested hops.
However, the per-node impact of the bulk-transfer TCP-LP flows is approximately left unchanged.Finally, for comparison, we again explore the system behavior when TCP is used for bulk data transfers.
Figure 21 depicts the normalized response times for HTTP file retrievals.
The figure indicates that "fast TCP elephants" severely impede the performance of web traffic that traverses multiple hops.
This poor performance is because many web-traffic flows experience loss of their first packet which requires waiting for a default time-out interval of 3 sec before resending.
According to our results, each TCP flow from the web stream experiences four to five such timeout intervals on average.
On the other hand, the results from Figure 21 indicate that simple two-class prioritization achieved by TCP-LP can successfully provide a desirable system behavior.
While TCP-LP attains 52% of the bandwidth (10% less than TCP), it improves web-traffic response times by more than 90%.
[18] all use delay-based congestion control in an effort to increase TCP throughput due to a reduced number of packet losses and timeouts, and a reduced level of congestion over the path.
In contrast, TCP-LP uses one-way delay measurements vs. round-trip delays.
Moreover, the key difference between TCP-LP and RTT-based congestion control protocols is in their primary objective.
While the former aim to achieve fairshare rate allocations, TCP-LP aims to utilize only excess bandwidth.
In this context, we also note that Martin et al. [19] suggest that RTT-based congestion avoidance is problematic to incrementally deploy in the Internet due to degraded throughput as compared to TCP/Reno flows.
Observe that TCP-LP does not suffer from this problem again due to its different objective: TCP-LP targets the excess-capacity rate vs. the fairshare rate.Second, TCP-LP uses early congestion indication (earlier than TCP) as a basis for achieving class differentiation.
Clark and Feng [2] proposed RIO (RED with In and Out) in which routers apply different marking/dropping functions for different classes of flows, thereby providing service differentiation.
While similar in philosophy to TCP-LP, TCP-LP develops an end-point realization of early congestion indication for the purpose of low-priority transfer.
Consequently, TCP-LP is applicable over routers and switches that provide no active queue management or service differentiation.Next, TCP-LP relates to adaptive bandwidth allocation schemes that aim to minimize file-transmission times using file-size-based service differentiation.
Guo and Matta [20] use RIO in core routers and a packet classifier at the edge to distinguish between long-and short-lived TCP flows.
Yang and de Veciana [21] develop TCP/SAReno in which the AIMD parameters dynamically depend on the remaining file size.
While TCP-LP also substantially improves file-transmission times in the best-effort class, the key difference between TCP-LP and the above schemes is that it provides strict low-priority service, independent of the file size.Finally, as TCP-LP targets transmitting at the rate of available bandwidth, it is related to cross-traffic estimation algorithms which attempt to infer the available bandwidth via probing (see reference [6] for a thorough review of such algorithms).
For example, Ribeiro et al. [4] and Alouf et al. [5] provide algorithms for estimation of parameters of competing cross-traffic under multifractal and Poisson models of cross traffic.
In contrast, TCP-LP provides an adaptive estimation of available bandwidth by continually monitoring one-way delays and dynamically tracking the excess capacity.
Similarly, Jain and Dovrolis [6] develop pathload, a delay-based rate-adaptive probing scheme for estimating available bandwidth.
The key difference between pathload and TCP-LP is that the latter aims to utilize the available bandwidth, while the former only estimates it.
This paper presents TCP-LP, a protocol designed to achieve low-priority service (as compared to the existing best-effort class) from the network endpoints.
TCP-LP allows lowpriority applications such as bulk data transfer to utilize excess bandwidth without significantly perturbing non-TCP-LP flows.
TCP-LP is realized as a sender-side modification of the TCP congestion control protocol and requires no functionality from the network routers nor any other protocol changes.
We performed an extensive set of ns-2 simulations and showed that 1) TCP-LP is largely non-intrusive to TCP traffic while at the same time, TCP-LP flows can successfully utilize a large portion of the excess network bandwidth.
2) In practice, significant excess capacity is available even in the presence of "greedy" long-lived FTP/TCP flows due to factors such as ACK delays from reverse traffic.
3) Competing TCP-LP flows share the excess bandwidth fairly.
4) File transfer times of best-effort web traffic are significantly reduced when long-lived bulk data transfers use TCP-LP rather than TCP.
A linux implementation of TCP-LP is available at http://www.ece.rice.edu/networks/TCP-LP.
In future work, we plan to Â validate the above findings using experiments in a controlled network testbed as well as on the Internet.
We would like to thank Sally Floyd for helpful comments on TCP-LP, and Liang Guo for providing valuable pieces of ns code.
