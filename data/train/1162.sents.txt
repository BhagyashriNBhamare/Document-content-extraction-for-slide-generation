The rectilinear Steiner minimum tree (RSMT) problem, which asks for a minimum-length interconnection of a given set of terminals in the rectilinear plane, is one of the fundamental problems in electronic design automation.
Recently there has been renewed interest in this problem due to the need for highly scalable algorithms able to handle nets with tens of thousands of terminals.
In this paper we give a practical Ç´ÒÐÓÓ ¾ Òµ heuristic for computing near-optimal rectilinear Steiner trees based on a batched version of the greedy triple contraction algorithm of Zelikovsky [21].
Experiments conducted on both random and industry testcases show that our heuristic matches or exceeds the quality of best known RSMT heuristics, e.g., on random instances with more than 100 terminals our heuristic improves over the rectilinear minimum spanning tree by an average of 11%.
Moreover, our heuristic has very well scaling runtime, e.g., it can route a 34k-terminals net extracted from a real design in less than 25 seconds compared to over 86 minutes needed by the Ç´Ò ¾ µ edge-based heuristic of Borah, Owens, and Irwin [3].
Since our heuristic is graph-based, it can be easily modified to handle practical considerations such as routing obstacles, preferred directions, via costs, and octilinear routing-indeed, experimental results show only a small factor increase in runtime when switching from rectilinear to octilinear routing.
The rectilinear Steiner minimum tree (RSMT) problem, which asks for a minimum-length interconnection of a given net (i.e., set of terminals) in the rectilinear plane, is one of the fundamental problems in electronic design automation.
Although deep-submicron technology has introduced additional routing objectives, minimum length continues to be the primary objective when routing non-critical nets, since the minimum-length interconnection has minimum total capacitance and occupies minimum amount of area.Of growing interest are practical methods for minimumlength rectilinear routing of nets with up to tens of thousands of terminals.
Nets of this size, e.g., scan enable, are becoming more common in modern designs due to the increased emphasis on design for test [1].
Such nets are non-critical and tend to consume significant routing resources, so minimizing length is the appropriate optimization objective.
Furthermore, very large RSMT instances are created by reductions that model non-zero terminal dimensions, e.g., nets with pre-routes.
Highquality routing of such instances requires representing each terminal by a set of electrically equivalent points [15] and this results in RSMT instances with as much as 100,000 points [22].
The main contribution of this paper is a highly scalable heuristic for computing rectilinear Steiner trees.
Existing implementations of exact methods [17] and of best-performing heuristics such as Iterated 1-Steiner [10] and RajagopalanVazirani [12] cannot be used on instances with tens of thousands of terminals due to combinatorial explosion and quadratic memory requirements, respectively.
Our heuristic requires Ç´Òµ memory and Ç´Ò ÐÓÓ ¾ Òµ time for Ò terminals, and routes, e.g., a 34k-terminals net extracted from a real design in less than 25 seconds compared to over 86 minutes needed by the Ç´Ò ¾ µ edge-based heuristic of [3].
More importantly, this dramatic reduction in runtime is achieved with no loss in solution quality.
On random instances with more than 100 terminals our algorithm improves over the rectilinear minimum spanning tree (MST) by an average of 11%, matching in solution quality the edge-based heuristic of [3].
To the best of our knowledge, this is the first practical sub-quadratic RSMT heuristic with such performance.
½ Due to considerable potential for further wirelength reductions, recently there has been much interest [11,16,18] in octilinear routing, which allows 񮽙񮽙 AE diagonal interconnect in addition to the traditional horizontal and vertical orientations.
¾ Since our heuristic is graph-based, it can be easily modified to handle octilinear routing -indeed, the results reported in Section V show only a small factor increase in runtime compared ½ The Ç´Ò ÐÓÓ Òµ implementation given in [3] for the edge-based heuristic requires advanced data structures, potentially involving large hidden constants.
We are not aware of any implementation demonstrating the practical applicability of this implementation.
to the rectilinear implementation.
The heuristic can be similarly extended to handle other practical considerations such as routing obstacles, preferred directions [19], and via costs.Our highly scalable Steiner tree heuristic, referred to as the batched greedy algorithm (BGA) in the following, derives its efficiency from three key ideas: ¯ Combining the implementation proposed in [5] for the greedy triple contraction algorithm (GTCA) of Zelikovsky [21] with the batched method introduced by the Iterated 1-Steiner heuristic of Kahng and Robins [10].
¯ A new divide-and-conquer method for computing a superset of size Ç´Ò ÐÓÓ Òµ of the set of Ç´Òµ triples required by GTCA.
¯ A new linear size data structure that enables finding a bottleneck (i.e., maximum cost) edge on the tree path between two given nodes in Ç´ÐÓÓ Òµ time after Ç´Ò ÐÓÓ Òµ preprocessing, with very low constants hidden under the big Ç.
This data structure allows computing the gain of a triple (see Section II for the definition) in Ç´ÐÓÓ Òµ time, leading to an Ç´Ò ÐÓÓ ¾ Òµ implementation of BGA.
¿ The rest of the paper is organized as follows.
In Section II we briefly review the greedy triple contraction algorithm of [21] and describe our new batched greedy algorithm.
In the following two sections we describe in detail two of the key BGA subroutines: in Section III we give the new divide-andconquer method for computing the set of Ç´Ò ÐÓÓ Òµ triples used by BGA, while in Section IV we describe the new data structure for computing bottleneck edges.
Finally, in Section V we give experimental results comparing BGA with previous implementations of rectilinear and octilinear Steiner tree heuristics and exact algorithms on test cases both randomly generated and extracted from recent VLSI designs.
¿ Our data structure may be of interest in other applications that require computing bottleneck edges.
For example, Zachariasen incorporated it in the beta version of the GeoSteiner 4.0 code for computing optimum geometric Steiner trees.
On large instances, computing bottleneck edges with the new data structure was found to be faster, most likely due to improved memory access locality, than look-up in a precomputed matrix [20].
We begin this section by introducing the Steiner tree terminology used in the rest of the paper.
A Steiner tree for a set of terminals is a tree spanning the terminals and possibly additional points, called Steiner points.
A Steiner tree is called a full Steiner tree if all terminals are leaves (i.e., have degree 1).
Any Steiner tree Ì can be split into edge-disjoint full Steiner trees called the full Steiner components of Ì [6].
A Steiner tree Ì is called 񮽙-restricted if every full component of Ì has at most 񮽙 terminals (an example of a 3-restricted rectilinear Steiner tree is shown in Figure 1).
The minimum-cost 3-restricted Steiner tree is in general cheaper than the minimum spanning tree (MST) of the terminals (note that the MST is the minimum-cost 2-restricted Steiner tree of the terminals).
The greedy triple contraction algorithm (GTCA) in [21] finds an approximate minimum-cost 3-restricted Steiner tree by greedily choosing 3-restricted full components which reduce the cost of the MST.
In order to describe GTCA we need to introduce a few more notations.
Let 񮽙 Ë be the complete graph on a given set Ë of terminals, and let Å Ë Ì ´Ëµ be the MST of 񮽙 Ë .
A triple 񮽙 is an optimal Steiner tree for a set of three terminals. 񮽙
We denote by 񮽙񮽙ÒØØÖ´񮽙 µ the single Steiner point of 񮽙 and by 񮽙Ó×Ø´񮽙 µ the cost of 񮽙 .
In the graph Å Ë Ì ´Ëµ 񮽙񮽙, there are two cycles (see Figure 2( GTCA (see Figure 3) repeatedly adds a triple 񮽙 with the largest gain and contracts it, i.e., collapses the three terminals of 񮽙 into a single new terminal.
Contraction of a triple is conveniently implemented by adding two new zero-cost edges 񮽙´񮽙 µ µ 񮽙񮽙 ¼ ½ 񮽙 񮽙 ¼ ¾ 񮽙 between the three terminals of 񮽙 (see Figure 2(b)).
It is easy to see that addition of 񮽙´񮽙 µ changes the MST of 񮽙 Ë -in the updated MST the two edges in 񮽙´񮽙 µ replace the two edges in Ê´񮽙 µ.
Finally, GTCA adds all chosen triples to the original MST of 񮽙 Ë and outputs the MST of this union.
The cost of the rectilinear Steiner tree constructed by GTCA is at most 1.3125 times more than the opti-񮽙 The optimum Steiner tree of 3 given terminals can be computed in constant time under the common geometric metrics, including rectilinear [8] and octilinear [11] metrics.
mal Steiner tree.
Fößmeier, Kaufmann and Zelikovsky [5] prove that in order to achieve an approximation ratio of 1.3125 in Theorem 1 it is sufficient to consider only empty tree triples of terminals.
A triple 񮽙 is empty if the minimum rectangle bounding the triple does not contain any other terminals and is a tree triple if the center 񮽙 of 񮽙 is adjacent to all terminals of the triple in Å Ë Ì ´Ë · 񮽙µ (or, equivalently, if Ò ´񮽙 µ 񮽙 ¼).
As shown in [5], there are at most ¿¿Ò empty tree triples.
Even so, finding the best triple in Step 3 of GTCA is very time consuming.
An efficient Ç´Ò ¾ ÐÓÓ Òµ time implementation of GTCA should maintain dynamic minimum spanning trees for which, to date, there is no data structure able to handle instances with tens of thousands of nodes in practical running time.
Existing data structures are difficult to implement and involve big asymptotic constants, see Cattaneo et al. [4] for a recent empirical study.Our new heuristic, the batched greedy algorithm (BGA) (see Figure 4) adopts the batched method from [10], substantially reducing running time by relaxing the greedy rule used to select triples in GTCA.
After contracting a triple we continue by picking the best triple among those with unchanged gain; in general this may not be the best triple overall.
Note that a triple 񮽙 can change its gain only if one of the edges in Ê´񮽙 µ is removed when contracting other triple -if none of the contracted triples removes edges from Ê´񮽙 µ then the gain of 񮽙 is unchanged.
When done with one such batched phase (the body of the while loop in Step 4) it is still possible to have positive gain triples.
Therefore, we recompute triple gains and repeat the batched phase selection until no positive gain triples are left.
To enable further improvements, we add the centers of triples selected in Step 4 to the terminal set then iterate Steps 2-5 (which constitute a round of the algorithm) until no more centers are added to the tree.In next section we show how to compute in Ç´Ò ÐÓÓ Òµ time a set of Ç´Ò ÐÓÓ Òµ triples containing all empty tree triples (see Theorem 3).
Then, in Section IV we describe a data structure which enables computing a bottleneck edge on the tree path between any two given nodes in Ç´ÐÓÓ In this section we show how to compute in Ç´Ò ÐÓÓ Òµ time a set of Ç´Ò ÐÓÓ Òµ triples containing all empty tree triples.
For simplicity we assume that terminals are in general position, i.e., no two of them share the same Ü-or Ý-coordinate.
This assumption is not restrictive since we can always break ties, e.g., according to terminal IDs.In a triple, the terminal which does not share Ü-and Ý-coordinates with the center is called diagonal.
There are 4 types of triples depending on where the diagonal terminal lies with respect to the center: a triple is called north-west if the diagonal terminal is in the north-west quadrant of the center (see Figure 1); north-east, south-west, and south-east triples are defined similarly.
We will use the divide and conquer method to find Ç´Ò ÐÓÓ Òµ north-west triples containing all north-west empty tree triples.
Triples of the other types are obtained by reflection and application of the same algorithm.For finding north-west triples we recursively partition the terminals into (almost) equal halves with a bisector line paral- the half-planes defined by the bisector line, and let 񮽙, Ê, and 񮽙 be the diagonal, right, and bottom terminals of a north-west triple that is intersected by the bisector line (see Figure 5).
We distinguish the following 4 cases:Case 1: Ê ¾ Ì Ê and 񮽙 ¾ ÄÄ.
Figure 6 (a) illustrates how to compute for each diagonal terminal 񮽙 the unique terminal Ê that can serve as a right terminal in an empty north-west triple with 񮽙 as the diagonal terminal.
All terminals in Ì Ê are processed in Ü-ascending order as follows: (1) if the next terminal has Ý larger then the current terminal, then a dashed pointer is set from the next to the current terminal, and then the current terminal is advanced to the next terminal; (2) otherwise, a solid pointer is set from the current terminal to the next one, and the current terminal is moved back along the dashed pointer (if it exists, otherwise the current terminal is advanced to the next).
Clearly this procedure is linear since the runtime is proportional to the number of pointers established and each terminal has at most two pointers (one solid and one dashed).
When processing of the points in Ì Ê is finished, each solid arc connects a terminal 񮽙 with the leftmost terminal in TR lower than and to the right of 񮽙, i.e., with the unique terminal Ê that can serve as a right terminal in an empty north-west triple with 񮽙 as the diagonal terminal.In order to find all Case 1 north-west triples, we must find for each solid arc´Êµarc´Êµ in Ì Ê the node 񮽙 in ÄÄ which can complete the triple, i.e., the node 񮽙 with maximum Ý-coordinate in the vertical strip defined by 񮽙 and Ê.
This is done in linear time by one traversal of the terminals in LB in Ü-ascending order (i.e., strip by strip) while computing the highest point in each strip.Case 2: Ê¾ Ì Ê and 񮽙 ¾ ÄÄ.
For each terminal Ê, the unique terminal in Ì Ê that can serve as the bottom terminal in an empty north-west triple with Ê as the right terminal (i.e., the highest terminal in Ì Ê lower and to the left of Ê) can be found by a procedure similar to the one in Step 1.
Cf. [5], an arc It is easy to see that computing the gain of a triple 񮽙 and the edges in Ê´񮽙 µ reduces to finding bottleneck (i.e., most expensive) edges on the tree paths between pairs of terminals in 񮽙 .
The hierarchical greedy preprocessing (HGP) algorithm given in Figure 7 computes for a given tree on Ò terminals two auxiliary arrays, ÔÔÖÒØ and , with at most ¾Ò ½ elements each.
Using these arrays, the bottleneck tree edge between any two terminals Ù and Ú can be found in Ç´ÐÓÓ Òµ using the algorithm in Figure 8.
Assuming that edges are sorted in ascending order of cost, HGP is equivalent to the following recursive procedure.
First, for each node Ù, direct the cheapest edge incident to Ù, away from Ù, and save its index in´Ùµin´Ùµ.
As a result some edges remain undirected, some become unidirected, and some become bidirected.
In the subgraph induced by the (uni-and bi-) directed edges, each connected component consists of a bidirected edge with two (possibly empty) arborescences attached to its ends.
HGP collapses each such connected component Ã into a single node Õ, then sets ÔÔÖÒØ´Ùµ to Õ for every Ù ¾ Ã.Since each connected component contains at least one bidirected edge, no more than ÒÒ¾ collapsed component nodes are created.
The procedure is repeated on the tree induced by collapsed components until there is a single node left.
The total runtime of HGP is Ç´Ò ÐÓÓ Òµ because of the edge sorting in Step 1, remaining HGP steps require Ç´Òµ time.Clearly, edge costs decrease along any directed path of a connected component Ã.
Therefore, if Ù and Ú are two ver- Figure 8 is an iterative implementation of this recursive definition.
Since the hierarchy of collapsed connected components has a depth of at most ÐÓÓ Ò, we get:Theorem 4The algorithm in Figure 8 finds the maximum cost edge on the tree path connecting two given nodes in Ç´ÐÓÓ Òµ time after Ç´Ò ÐÓÓ Òµ time for hierarchical greedy preprocessing.
Comprehensive experimental evaluation indicates that the Iterated 1-Steiner heuristic of Kahng and Robins [10] significantly outperforms in solution quality the RSMT heuristics proposed prior to 1992 [9].
Since then, the edge-based heuristic of Borah, Owens, and Irwin [3], and the IRV heuristic [12] have been reported to match or slightly exceed Iterated 1-Steiner in solution quality.
However, among these best-performing heuristics only the edge-based heuristic can be applied to instances with tens of thousands of terminals, since current implementations of Iterated 1-Steiner and IRV require quadratic memory.
Besides Borah's Ç´Ò ¾ µ implementation of the edge-based heuristic, we compared our Ç´Ò ÐÓÓ ¾ Òµ batched greedy algorithm to the recent Ç´Ò ÐÓÓ ¾ Òµ Prim-based heuristic of Rohe [14].
For comparison purposes, we also include results from our implementation of the Guibas-Stolfi Ç´Ò ÐÓÓ Òµ rectilinear MST algorithm [7], and, whenever possible, the optimum RSMTs computed using the beta version of the GeoSteiner 4.0 algorithm recently announced in [13].
All heuristics and MST algorithms were run on a dual 1.4 GHz Pentium III Xeon server with 2GB of memory running Red Hat Linux 7.1.
The GeoSteiner code using the CPLEX 6.6 linear programming solver was run on a 360 MHz SUN Ultra 60 workstation with 2 GB of memory under SunOS 5.7.
The test bed for our experiments consisted of two categories of instances: instances drawn uniformly at random from a ½񮽙 ¼¼¼񮽙 ¼¼¼ ¢½񮽙 ¼¼¼񮽙 ¼¼¼ grid, ranging in size between 100 and 500,000 terminals, and a set of 8 testcases extracted from recent industrial designs, ranging in size between 330 and 34,000 terminals.
Table I gives the percent improvement over the rectilinear MST and running time (in CPU seconds) for experiments on rectilinear instances.
On random instances, the batched greedy heuristic matches or slightly exceeds in average solution quality the edge-based heuristic of [3].
Both batched greedy and the edge-based heuristic improve the rectilinear MST by an average of 11% in our experiments.
This is roughly 1% more than the average improvement achieved by the Prim-based heuristic of [14], and is within 0.7% of the optimum average improvement for the sizes for which the optimum could be computed using GeoSteiner.
Results on VLSI instances show that the relative performance of the heuristics is the same to that observed on random instances.
However, the improvement over the rectilinear MST and the gaps between heuristics are smaller in this case.The results in Table I show that the batched greedy algorithm is highly scalable.
Even though batched greedy is not as fast as the MST or the Prim-based heuristic of [14], it can easily handle up to hundreds of thousands of terminals in minutes of CPU time.
Compared to Borah's Ç´Ò ¾ µ implementation of the edge-based heuristic, batched greedy is two or more orders of magnitude faster as soon as the number of terminals gets into the tens of thousands.The batched greedy algorithm can be easily adapted to other cost metrics, such as octilinear routing.
The only required modifications are in the distance formula (see Footnote 2) and in the procedure for finding the optimum Steiner point of a triple.
Table II gives results obtained by the octilinear versions of the Guibas-Stolfi MST, Ç´Ò ¾ µ edge-based, 񮽙 batched greedy, and GeoSteiner 4.0 algorithms.
Octilinear batched greedy is almost always better than the octilinear edge-based heuristic, and very close to optimum for the instances for which the latter is available.
Furthermore, octilinear batched greedy remains highly scalable, with just a small factor increase in runtime compared to the rectilinear version.
Non-critical nets with tens of thousands of terminals are becoming more common in modern designs due to the increased emphasis on design for test.
Even a single net of this size can render quadratic Steiner tree algorithms impractical, given the stringent constraints on routing runtime (e.g., designers expect full chip global and detailed routing to be completed overnight).
In this paper we have given a highquality Ç´Ò ÐÓÓ ¾ Òµ heuristic that can practically handle these nets without compromising solution quality.Since our heuristic is graph-based, it can be easily modified to handle other cost metrics, e.g., octilinear routing.
We are 񮽙 We use our own octilinear modification of Borah's code since the implementation in [11] appears to have cubic rather than quadratic runtime.
currently extending the heuristic to handle other practical considerations, such as routing obstacles, preferred directions, and via costs.
We would like to thank Manjit Borah, Benny Nielsen, André Rohe, and Martin Zachariasen for giving us access to their implementations, and Charles Alpert for providing the VLSI benchmarks.
