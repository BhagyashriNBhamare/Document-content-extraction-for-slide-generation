This paper concerns the efficient construction of sparse and low stretch spanners for unweighted arbitrary graphs with n nodes.
All previous deterministic distributed algorithms, for constant stretch spanner of o(n 2) edges, have a running time Ω(n 񮽙) for some constant 񮽙 > 0 depending on the stretch.
Our deterministic distributed algorithms construct constant stretch spanners of o(n 2) edges in o(n 񮽙) time for any constant 񮽙 > 0.
More precisely, in the Linial's free model, we construct in n O(1/ √ log n) time, for every graph, a 5-spanner of O(n 3/2) edges.
The result is extended to O(k 2.322)-spanners with O(n 1+1/k) edges for every parameter k 񮽙 1.
If the minimum degree of the graph is Ω(√ n), then, in the same time complexity, a 9-spanner with O(n) edges can be constructed.
This paper deals with deterministic distributed construction of sparse and low stretch graph spanners.
Intuitively, spanners can be thought of as a generalization of the concept of a spanning tree.
We look for a spanning subgraph such that the distance between any two nodes in the subgraph is bounded by some constant times the distance in the whole graph.
More formally, H is a k-spanner of a graph G if H is a spanning subgraph of G, and if d H (u, v) 񮽙 k · d G (u, v) for all nodes u, v of G, where d X (u, v) denotes the distance from u to v in the graph X.
The smallest k for which H is a k-spanner is called the stretch of H, and the size of H is its number of edges.
The quality of a spanner refers to the trade-off between the stretch and the size of the spanner.The distributed model of computation we will be concerned with is the Linial's free model [26], also known as LOCAL model in [34].
In this model, communication is completely synchronous and reliable.
At every time unit, each node may send or receive a message of unlimited size to or from all its neighbors, and can locally compute any function.
The model also assumes that each node is equipped with a unique identifier.
Much as PRAM algorithms in parallel computing give a good indication of parallelism, the free model gives a good indication of the locality and distributed time.From a theoretical point of view, we are interested in the locality nature of constructing graph spanners, i.e., what spanners can we compute assuming only some local knowledge?
The locality of a distributed problem is often expressed in term of the time needed to resolve it.
In fact, in the distributed setting, the best a node can do in O(t) time units is to collect its t neighborhood.
For instance, Θ(log * n) time are necessary and sufficient to compute a maximal independent set for trees, bounded degree graphs, or bounded growth graphs with n nodes [11,21,27,22].
Results are known for other fundamental problems such as non-uniform coloring [2,33], minimum spanning tree [16,17,29,28,35], small dominating set [25,38], and maximal matching [23,27].
Graph spanners are in the basis of various applications in distributed systems.
For instance, Peleg and Ullman [36] establish the relationship between the quality of spanners, and the time and message complexity of network synchronizers (see also [1,32]).
Spanners are also implicitly used for the design of low stretch routing schemes with compact tables [12,14,37,39,41], and appear in many parallel and distributed algorithms for computing approximate shortest paths and for the design of compact data-structures, a.k.a. distance oracles [9,20,40,42,10].
Sparse and low stretch spanners can be constructed from (d, c)-decomposition of Awerbuch and Peleg [6], that is a partition of the graph into clusters of diameter at most d such that the graph obtained by contracting each cluster can be properly c-colored.
There are several deterministic algorithms for constructing (d, c)-decompositions [3][4][5]33].
The resulting distributed algorithms provide O(k)-spanners of size O(n 1+1/k ), for any integral parameter k 񮽙 1.
However, these algorithms run in Ω(n 1/k+񮽙 ) time, where 񮽙 = Ω(1/ √ log n ), and provide a stretch s 񮽙 4k − 3.
Better stretch-size trade-offs exist but with an increasing time complexity.
Recently, a deterministic distributed algorithm has been proposed for constructing a (2k − 1)-spanner of size O(n 1+1/k ) in O(n 1−1/k ) time [13].
In particular, 3-spanners of size O(n 3/2 ) can be deterministically constructed in O( √ n ) time.Elkin et al. [15,19,18] develop a distributed algorithm for spanners such that the distance between two nodes in the spanner is at most 1+񮽙 times the distance in the original graph plus β.
The size is O(βn 1+δ ) whereas the time is O(n δ ), where β = β(δ, 񮽙) is independent of n but grows super-polynomially in δ −1 and 񮽙 −1 .
Randomized algorithms achieving better performances exist.
Baswana et al. [8,7] gave a randomized algorithm which computes an optimal (2k − 1)-spanner with expected size O(n 1+1/k ) in O(k) time.
The latter stretch-size trade-off is optimal since, according to an Erdös Conjecture verified for k = 1, 2, 3, 5 [43], there are graphs with Ω(n 1+1/k ) edges and girth 2k + 2 (the length of the smallest induced cycle), thus for which every s-spanner requires Ω(n 1+1/k ) edges if s < 2k + 1.
However, as mentioned in [4], a randomized solution might not be acceptable in some cases, especially for distributed computing applications.
In the case of graph spanners, deterministic algorithms that guarantee a high quality spanner are more than of a theoretical interest.
Indeed, one cannot just run a randomized distributed algorithm several times to guarantee a good decomposition, since it is impossible to efficiently check the global quality of the spanner in the distributed model.
We consider unweighted connected graphs with n nodes.
All previous deterministic distributed algorithm for O(1)-spanner of size o(n 2 ) have a running time Ω(n δ ) for some constant δ > 0 depending on the stretch.
In this paper we construct constant stretch spanner of size o(n 2 ) in o(n 񮽙 ) time for any constant 񮽙 > 0.
More precisely, in the free model we construct in n O(1/ √ log n ) time for every graph a 5-spanner of O(n 3/2 ) edges.
The result is extended to larger stretch spanner of size O(n 1+1/k ) for every k 񮽙 1.
More precisely, for k power of two, the stretch is at most k log 2 5 < k 2.322 .
For other values of k, we obtain stretches s = s(k) which surprisingly depend on the positions of the first two leading 1's in the binary written of k (cf. the table below for the first values).
We also show that if the minimum degree of the graph is Ω( √ n ), then, in the same time complexity, a 9-spanner with O(n) edges can be constructed.
The previous algorithms have simple randomized versions with improved performances.
In particular, we can compute a 5-spanner of size O(n log 2 n) in O(log n) time if the minimum degree is Ω( √ n ).
The main idea to break the O(n δ ) time barrier is to abandon the optimality on the stretch-size trade-off.
We show that constant stretch spanners can be constructed on the basis of a maximal independent set, i.e., a set of pairwise non-adjacent nodes, maximal for inclusion.
This can be deterministically computed in n O(1/ √ log n ) time [4,33].
Therefore, the time complexity to construct our spanners is improved by a factor of n 1/k .
The generic algorithm is described in Section 2 and analyzed in Section 3, where a distributed implementation is presented.We mainly reduce the problem to the computation of an independent ρ-dominating set, that is a set X of pairwise non-adjacent nodes such that every node of the graph is at distance at most ρ from X. Using the terminology of [34], a ρ-dominating set if nothing else than a (ρ, s)-ruling set for some s > 1.
Actually, in order to optimize the stretch, the main algorithm combines two strategies in a way depending on the binary written of k.In Section 4, we present the main results about 5-and 9-spanners.
Observing that for ρ = 1 an independent ρ-dominating set is a maximal independent set, we conclude that our generic algorithm can be implemented to run in n O(1/ √ log n )time for ρ = 1.
Several optimizations are then proposed including randomization and graphs of large minimum degree.
Let us consider an unweighted connected graph G = (V, E).
Given an integer t 񮽙 1, the t-th power of G, denoted by G t , is the graph obtained from G by adding an edge between any two nodes at distance at most t in G. For a set of nodesH, G[H] denotes the subgraph of G induced by H. For X, Y ⊆ V , let d G (X, Y ) = min {d G (x, y) | x ∈ X and y ∈ Y }.
We associate with each v ∈ V a region, denoted by R(v), that is a set of nodes containing v and inducing a connected subgraph of G. Given C ⊆ V , G C denotes the graph whose node set is C, and there is an edge between u and v inC if d G (R(v), R(u)) = 1.
We denote by R + (v) = {u ∈ V | d G (u, R(v)) 񮽙 1} and by R + C (v) = {u ∈ C | d G (R(u), R(v)) 񮽙 1}.
The eccentricity of a node v in G is defined as max u∈V {d G (u, v)}.
For a node v ∈ X, we denote by BFS(v, X) a Breadth First Search spanning tree in X rooted at v.
We define IDS(G, ρ) as any independent ρ-dominating set of G. Finally, we define the integer 񮽙(x) as follows:񮽙(x) = 񮽙 −1 if x 񮽙 0, 񮽙log 2 x񮽙 otherwise.In the reminder of the paper we assume the free model of computation as defined in the introduction.
We define the time complexity of a distributed algorithm to be the worst-case number of time units from the beginning of the algorithm to its termination.
The main idea of the algorithm is to find an efficient clustering of dense regions in the graph.
A high level description of the algorithm, named Spanner, is given in Fig. 1.
Intuitively, i 0 represents the relative position of the first two leading 1's in the binary written of k.The algorithm works in many phases, where new regions are formed at each phase.
There are two types: the light regions (L) and the heavy regions (H).
At a given phase, some of the heavy regions are selected and enlarged by including nodes from other neighboring regions.
One important observation is that each new enlarged region is connected and the new constructed regions are mutually disjoint.At each phase of the algorithm, one of the two strategies depicted in Fig. 2 and Fig. 3 applies.
The main idea behind the two strategies is the same: choose some well selected dense regions and merge them with the other ones in order to form new larger regions.
The main difference is that the density of a region is computed in a different way.
The stretch of the output spanner depends on the way the radius of the regions increases and on the total number of phases of the algorithm, depending on the volume of the regions.
And, radius and volume increase very differently.On one hand, in Strategy 1, a region is dense if its neighborhood is n 1/k times greater than its size.
Applying only Strategy 1 allows to obtain small stretch for small values of k. However, asymptotically, the stretch is exponential in k. On the other hand, in Strategy 2, a region is dense if the number of its neighboring regions is n 1/k times greater than its size which provides an exponential growth of the size of a region.
Applying only Strategy 2 allows to obtain asymptotically stretches polynomial in k.The main idea of algorithm Spanner is to switch from one strategy to an other at each phase in order to obtain the smallest possible stretch.
A full analysis shows that, by alternating Strategy 1 and Strategy 2, the best stretch can be obtained by applying Strategy 1 only once at a well chosen phase i 0 .
Typically, i 0 = p − q if k = 2 p + 2 q with p > q.We associate with each region R(v) an active node, called center, and the set of centers forms C. Initially, each node is the center of the region formed by itself.
Each phase i ∈ {1, . . . , 񮽙(k) + 1} can be decomposed in seven parts we briefly sketch.In Step 1, we compute the two sets H and L corresponding respectively to heavy and light regions.
In Step 2, a light region is connected with some neighboring nodes.
This step is crucial in the stretch bound analysis.
If Strategy 1 is applied, then each light region is connected with each neighboring node in V , i.e., ∀u ∈ L, R + (u) is spanned.
If Strategy 2 is applied, then each light region is connected with every neighboring region.
Note that at the beginning of a given phase, every region is spanned by a BFS tree constructed in Step 6 of the previous phase.1.
L := n v ∈ C, |R + (v)| 񮽙 n 1/k · |R(v)| o and H := C \ L; 2.
∀(u, v) ∈ L × V such that ∃ edge e between R(u) and v, S := S ∪ {e} 3.
X := IDS(G 2(r+1) [H], ρ) 4.
∀z ∈ V , if dG(z, X) 񮽙 (2ρ + 1)r + 2ρ, then set c(z) to be its closest node of X, breaking ties with identities.
5.
∀v ∈ X, R(v) := {z ∈ V | c(z) = v} 6.
∀v ∈ X, S := S ∪ BFS(v, R(v)) 7.
C := X and r := (2ρ + 1)r + 2ρ 1.
L := n v ∈ C, |R + C (v)| 񮽙 n 1/k · |R(v)| o and H := C \ L 2.
∀(u, v) ∈ L × C such that ∃ edge e between R(u) and R(v), S := S ∪ {e} 3.
X := IDS((GC ) 2 [H], ρ) 4.
∀u ∈ C, if dG C (u, X) 񮽙 2ρ, then set c(u) to be its closest node of X in GC , breaking ties with identities.
5.
∀v ∈ X, R(v) := {R(u) | u ∈ C and c(u) = v} 6.
∀v ∈ X, S := S ∪ BFS(v, R(v)) 7.
C := X and r := (4ρ + 1)r + 2ρ The nodes H are then processed at the aim of constructing new regions with a set of new centers.
The key point of our construction is to efficiently merge all the regions defined by the set H into more dense, connected and disjoint regions.
In order to guarantee that the algorithm terminates quickly, the dense regions must grow enough.
More precisely, if a dense region R(v) is enlarged it must contain at least its neighborhood R + (v) when Strategy 1 is applied or its neighborhood in the graph G C if Strategy 2 is applied.
It is clear that two regions at distance one or two (in G or in G C depending on the strategy 1 or 2) cannot grow simultaneously without overlapping.
Thus, a difficulty is to elect in an efficient way the centers of regions that are allowed to grow in parallel.In Step 3, we compute an independent ρ-dominating set X in the graphG 2(r+1) [H] if Strategy 1 is applied (resp.
(G C ) 2 [H] for Strategy 2), where r is a radius that grows at each phase.
The set X defines the set of nodes allowed to grow in parallel.In order to guarantee that nodes in non selected regions in Step 3 (the set H \ X) will be spanned by the output spanner, we must merge them with nodes in the selected regions.
Thus, in Step 4, we define a coloring strategy allowing a correct merge process.
In fact, in order to ensure that the new regions are disjoint, we let nodes choose their new region in a consistent manner, i.e., a node chooses to be in the region of the closest node in X breaking ties using identities.
IfStrategy 1 is applied then each node chooses by itself its new dominator, i.e., its new region.
However, once a node u chooses its new dominator node v, and in order to ensure that the new formed regions are connected, we include all the nodes in the shortest path between u and v, even those in non dense region.
If Strategy 2 is applied then, the center of each region chooses a new region and merge its whole region with the new chosen region.In Step 5, the new regions are formed according to the coloring step.
Note that as soon as the new region are formed, they are spanned in Step 6.
Finally, in Step 7, the set C and the variable r are updated for the next phase.
For every phase i, we denote by H i (resp.
X i and L i ) the set H (resp.
X and L) computed during phase i, i.e., after Steps 1 and 3 of phase i. Similarly, we denote by c i (z) the color of z assigned during phase i, i.e., after Step 4 of phase i.
We denote by C i the set C at the beginning of phase i, and r i denotes the value of r at the beginning of phase i. For a node v ∈ C i , we denote by R i (v) the region of v at the beginning of phase i.
In the following we need the four important properties.Lemma 1.
At the beginning of phase i, every v ∈ C i is of eccentricity at most r in G[R i (v)].
Lemma 2.
At the beginning of phase i, for every two nodesu 񮽙 = v ∈ C i , R i (u)∩ R i (v) = ∅.
i 񮽙 = i 0 , if |R i (v)| 񮽙 V i for every v ∈ C i , then |R i+1 (v)| 񮽙 n 1/k · V 2 i for every v ∈ C i+1 .
Lemma 4.
For every node u ∈ V , there exists a phase i and a node v ∈ V such that:-at the beginning of phase i, v ∈ C i and u ∈ R i (v); and -v is in the set L i computed in Step 1 of phase i. Lemma 5.
For any integer k, ρ 񮽙 1, the stretch s of the output spanner S of algorithm Spanner verifiess 񮽙 񮽙 (4ρ + 1) 񮽙(k) if k = 2 񮽙(k) , 2(2ρ + 1)(4ρ + 1) 񮽙(k)−1 + 4ρ(4ρ + 1) 񮽙(k−2 񮽙(k) ) − 1 otherwise.Proof.
As a consequence of Lemma 4 and Step 6 of the algorithm, every node u ∈ V is spanned by the output S of the algorithm, i.e., S is a spanner of G. From the initialization step of the algorithm, we have r 1 = 0.
Let us denote by i 1 = 񮽙(k) and i 2 = 񮽙(k − 2 񮽙(k) ), i.e., i 0 = i 1 − i 2 .
For every 1 < i 񮽙 i 0 , we have r i = (4ρ + 1)r i−1 + 2ρ.
Thus, r i = 1 2 · 񮽙 (4ρ + 1) i−1 − 1 񮽙 for 1 񮽙 i 񮽙 i 0 .
Let us consider an edge (z, z 񮽙 ) ∈ E. Using Lemma 4, there exists a phase j (resp.
j 񮽙 ) and a node v (resp.
v 񮽙 ) such that v ∈ C j (resp.
v 񮽙 ∈ C j 񮽙 ), z ∈ R j (v) (resp.
z 񮽙 ∈ R j 񮽙 (v 񮽙 )) and v ∈ L j (resp.
v 񮽙 ∈ L j 񮽙 ).
We take v (resp.
v 񮽙 ) to be the first dominator of z, i.e., node in C whose region contains z, (resp.
z 񮽙 ) that fall into set L.
In fact, one can see that node z (or z 񮽙 ) can be in a sparse region at some phase and switch to a dense region at the next phase, because either its sparse region has been merged with a neighboring dense one (if Strategy 2 is applied), or it is in the neighborhood of a dense region, or it is on a shortest path leading to a dense region (if Strategy 1 is applied).
W.l.o.g., suppose that j 񮽙 j 񮽙 .
Case 1: i 2 = −1.
Hence, i 0 = 񮽙(k) + 1 and k = 2 񮽙(k) .
By induction and using Lemma 3, at the beginning of phase i 0 , the size of the region of any node in C i0 is at least n (2 i 0 −1 −1)/k = n (k−1)/k .
Note that we apply Strategy 1 at phase i 0 .
Thus, every node in C i0 will be in L. Subcase 1.1: Suppose that j 񮽙 j 񮽙 < i 0 .
Thus, using Step 6, a BFS tree spanning R j (v) is added to the output spanner at phase j − 1.
In addition, one can easily show that there exists a node v 񮽙񮽙 ∈ C j such that z 񮽙 ∈ R j (v 񮽙񮽙 ).
Hence, a BFS tree spanning R j (v 񮽙񮽙 ) is added to the output spanner at phase j − 1.
Using Step 2, there exists an edge e ∈ S connecting R j (v) and R j (v 񮽙񮽙 ).
Thus, d S (z, z 񮽙 ) 񮽙 4r j + 1 = 2(4ρ + 1) j−1 − 1.
Subcase 1.2: Suppose that j = j 񮽙 = i 0 .
Hence, Strategy 1 is applied at phase j. Thus, a BFS tree spanning R j (v) is added to the output spanner at phase j −1.
Using Step 2, R + j (v) is also spanned.
Thus, because z 񮽙 ∈ R + j (v), d S (z, z 񮽙 ) 񮽙 2r j + 1 = 2r i0 + 1 񮽙 (4ρ + 1) i0−1 .
Finally, because ρ > 0, in both subcases, the stretch is bounded by (4ρ + 1) 񮽙(k) .
Case 2: i 2 񮽙 0.
Hence, at the beginning of phase i 0 + 1, the radius of a region is at most (2ρ + 1)r i0 + 2ρ.
Thus,r i0 +1 = 1 2 (2ρ + 1) · 񮽙 (4ρ + 1) i0−1 − 1 񮽙 + 2ρ(1)Suppose i 2 񮽙 = 0.
For every i 0 +1 < i 񮽙 񮽙(k)+1, we have r i = (4ρ+1)r i−1 +2ρ.
Thus, by induction, for every i 0 + 1 < i 񮽙 񮽙(k) + 1,r i = (4ρ + 1) i−i0−1 · r i0+1 + 1 2 ((4ρ + 1) i−i0−1 − 1)In particular,r 񮽙(k)+1 = (4ρ + 1) 񮽙(k)−i0 · r i0 +1 + 1 2 ((4ρ + 1) 񮽙(k)−i0 − 1)Thus,r 񮽙(k)+1 = (4ρ + 1) i2 · r i0 +1 + 1 2 ((4ρ + 1) i2 − 1)(2)Now suppose that i 2 = 0.
Hence, i 0 = 񮽙(k) and it is easy to see that Eq.
2 is still true.Subcase 2.1: Suppose that j 񮽙 = i 0 .
Thus, it easy to show that there exists a node v 񮽙񮽙 ∈ C j such that z 񮽙 ∈ R j (v 񮽙񮽙 ).
Using Step 6, R j (v 񮽙񮽙 ) and R j (v) were spanned by a BFS tree at phase j − 1.
In addition, because Strategy 2 is applied at phase j, an edge e connecting R j (v) and R j (v 񮽙񮽙 ) is added at phase j (Step 2).
Thus, d S (z, z 񮽙 ) 񮽙 4r j + 1.
Subcase 2.2: Suppose that j = i 0 .
Thus, because R + j (v) is spanned, d S (z, z 񮽙 ) 񮽙 2r j + 1.
At phase 񮽙(k) + 1, all active nodes will be in the set L 񮽙(k)+1 .
Thus the stretch is bounded by 4r 񮽙(k)+1 + 1.
Using Eq.
(1) and (2), we have:4r 񮽙(k)+1 + 1 = 4 񮽙 (4ρ + 1) i2 · r i0+1 + 1 2 ((4ρ + 1) i2 − 1) 񮽙 + 1 = 2(2ρ + 1)(4ρ + 1) i1−1 + 4ρ(4ρ + 1) i2 − 1 Lemma 6.
For any integer k, ρ 񮽙 1, the size of the output spanner S of algorithm Spanner is O(log k · n 1+1/k ).
In the free model, distributed computation of some distributed procedure A on G t [H] can be easily simulated on G as follows, charging the overall time by a factor of t. Hereafter, we assume that each node u ∈ G can determine if it belongs or not to H. Indeed, consider one communication step in A running on some node u of G t [H] followed by one local computation step.
In G, an original message in A is sent from u with a counter initialized to t − 1 as an extra field.
Now, each node v ∈ G, upon the reception of a message with some counter in its header: 1) decrements the counter; 2) stores this message if v ∈ H; and 3) forwards the incoming message with the updated counter to all its neighbors in G if the updated counter is non-null (if many messages are received during a round, then they are concatenated before being sent).
After t communication rounds in G, every node u ∈ H starts the local computation step of A on the base of all received messages during the last t communication rounds.
Similarly, given C ⊆ V , the computation of some distributed procedure A on G C can be simulated on G as follows, charging the overall time by a factor O(r) where r is an upper bound of the eccentricity of a node v ∈ C in G[R(v)].
At each time procedure A requires for a node v of G C to send a message to a neighbor, v broadcasts the message in G[R(v)] (which is connected).
The nodes at the frontier of R(v), i.e., nodes having neighbors in different regions, broadcast also the message out their region.
Symmetrically, upon the reception of messages from different regions, messages are concatenated and a convergecast is performed to v.
The time overhead for one step of A is at most 2r + 1.
Relying on the above discussions, running procedure A on G 2(r+1) [H] or on (G C ) 2 [H] can be simulated on G within a factor of O(r) on the time complexity.Lemma 7.
For any integer k, ρ 񮽙 1, Spanner can be implemented with a deterministic distributed algorithm in O(log k · ρ log k · τ ) time, where τ is the time complexity to compute an independent ρ-dominating set in a graph of at most n nodes.
Let MIS(n) denote the time complexity for computing, by a deterministic distributed algorithm, a maximal independent set (MIS) in a graph with at most n nodes.
The fastest deterministic algorithm [33] shows that MIS(n) 񮽙 n O(1/ √ log n ) .
It is also known that MIS(n) 񮽙 Ω( 񮽙 log n/ log log n) [23].
It is not difficult to check that a set X is an independent 1-dominating set if and only if X is a maximal independent set (cf. [34, pp. 259, Ex.
4]).
Thus, using the fast distributed MIS algorithm as a subroutine in algorithm Spanner, we obtain: Theorem 1.
There is a deterministic distributed algorithm that given a graph G with n nodes and any fixed integer k = 2 p with p 񮽙 0, constructs a (k log 2 5 )-spanner for G with O(n 1+1/k ) edges in O(MIS(n)) time.Proof.
Size and time are direct consequences of lemmas 3 and 7 fixing k and ρ = 1.
Note that 񮽙(k) = p = log k. Thus, using Lemma 5, the stretch of the output spanner is bounded by 5 log k = k log 5 .񮽙 񮽙
Theorem 2.
There is a deterministic distributed algorithm that given a graph G with n nodes and any fixed integer k = 2 p + 2 q − 1 with p 񮽙 q > 0, constructs a (6 · 5 p−1 + 4 · 5 q−1 − 1)-spanner for G with O(n 1+1/k ) edges in O(MIS(n)) time.Proof.
Size and time are direct consequences of lemmas 3 and 7 fixing k and ρ = 1.
If p = q, then k = 2 p+1 − 1 = 񮽙 p j=0 2 j .
Hence, 񮽙(k) = p and 񮽙(k − 2 񮽙(k) ) = 񮽙(2 p+1 − 1 − 2 p ) = 񮽙(2 p − 1) = p − 1.
Thus, using Lemma 5 (second case), the stretch of the output spanner is bounded by 6 · 5 p + 4· 5 p−1 − 1.
If p 񮽙 = q, then k = 2 p + 񮽙 q−1 j=0 2 j .
Hence, 񮽙(k) = p.
In addition, 񮽙(k − 2 񮽙(k) ) = 񮽙(2 p + 2 q − 1 − 2 p ) = 񮽙(2 q − 1) = q − 1.
Thus, using Lemma 5 (second case), the stretch of the output spanner is bounded by 6 · 5 p + 4 · 5 q−1 − 1.񮽙 񮽙
Corollary 1.
For every integer k such that k = 2 p + 2 q − 1, where p 񮽙 q 񮽙 0, there is a deterministic distributed algorithm that given a graph G with n nodes, constructs a s[k]-spanner for G with O(n 1+1/k ) edges in O(MIS(n)) time, It is known that sparser spanners exist whenever the minimum degree increases (cf. the concluding remark of [7]).
In this paragraph, we show that graphs with minimum degree large enough enjoy an O(1)-spanner with only O(n) edges, moreover computable with a fast deterministic distributed algorithm.
Let us first note that if a graph G has a ρ-dominating set X, then G has a (4ρ + 1)-spanner with at most n + |X| 2 /2 edges.
Assuming we are given such a dominating set, the spanner can be constructed distributively in O(ρ) time by first clustering the nodes of the graph around the nodes in the dominating set, and then by connecting every two neighboring clusters.
The two endpoints either belong to the same cluster, and thus the endpoints are at distance at most 2ρ in the spanner, or belong to two adjacent clusters.
In that case the endpoints are at distance at most 2ρ + 1 + 2ρ in the spanner using the selected inter-cluster edge of the spanner.
Proposition 1.
For every parameter ρ 񮽙 1, there exists a deterministic distributed algorithm that given a graph G with n nodes and a ρ-dominating set X, constructs a (4ρ + 1)-spanner for G with at most n + |X| 2 /2 edges in O(ρ) time.This proposition can be combined with the observation that if G has minimum degree δ 񮽙 √ n log n, then G has a 1-dominating set X of size O( √ n log n ).
Indeed, this can be proved using the following greedy algorithm [30]: one starts with X = ∅ and with the set of all radius-1 balls,B = {N [v] | v ∈ V }, where N [v] = {u ∈ V | d G (u, v) 񮽙 1}.
Then, while B is nonempty, one selects a node x ∈ V for X that belongs to the maximum number of balls in the current set B.The set B is updated by removing all balls containing x.
The constructed set X is a 1-dominating set and it can be shown that|X| 񮽙 n(1 + ln n)/ min v∈V |N [v]| which is at most O( √ n log n ) if δ 񮽙 √ n log n. Thus, the problem is to efficiently compute such 1-dominating set.Unfortunately, no deterministic distributed implementation of the greedy algorithm faster than O(|X|) is known.
A small ρ-dominating set can be computed much more efficiently in O(ρ log * n) time by the algorithm of [25].
Unfortunately, its guaranteed size for X is only of O(n/ρ).
Finally, no algorithm is known to run in o( √ n log n ) time for this problem.
However, using our algorithm, we obtain a 9-spanner with only O(n) edges, moreover with a better time complexity.Theorem 3.
There exists a deterministic distributed algorithm that given a graph G with n nodes and minimum degree δ 񮽙 √ n, constructs a 9-spanner for G with at most 3n/2 edges in O(MIS(n)) time.Proof.
The algorithm consists in two stages.
First, we construct an MIS for G 2 .
Then, each node of the MIS constructs its region using the coloring technique of Spanner.
The spanner is obtained by considering the edges spanning the regions and the edges connecting every two adjacent regions (cf. Proposition 1).
The number of nodes belonging to the MIS, and thus the number of regions, is at most n/δ 񮽙 √ n. Therefore, the number of edges of the spanner is at most n + √ n 2 /2 = 3n/2.
The radius of a region is bounded by 2.
Thus, the stretch is 2 · 2 + 1 + 2 · 2 = 9. 񮽙 񮽙
In [31], Luby gives a simple and efficient randomized PRAM algorithm for computing an MIS in O(log n) expected time.
Luby's algorithm can be turned to run in the free model, and we obtain a distributed algorithm for computing an independent 1-dominating set which terminates within O(log n) expected time.
We remark that upon termination of the algorithm, the constructed 1-dominating set is always correct, the randomization is only on the running time, i.e., it is a Las Vegas algorithm.
The two randomized algorithms we present below guarantee the stretch and the size bounds for the constructed spanners, while the O(k) time (Monte Carlo) randomized algorithms [8] do not give any guarantee on the spanner size.
This is of course achieved at the price of increasing the stretch factor of the spanner.Thus, we obtain the following randomized version of Theorems 1 and 2:Theorem 4.
There is a ( Las Vegas) randomized distributed algorithm that given a graph G with n nodes and any fixed integer k = 2 p with p 񮽙 0, constructs a (k log 2 5 )-spanner for G with O(n 1+1/k ) edges in O(log n) expected time.Theorem 5.
For every fixed integer k 񮽙 3, there is a ( Las Vegas) randomized distributed algorithm that given a graph G with n nodes and any fixed integer k = 2 p + 2 q − 1 with p 񮽙 q > 0, constructs a (6 · 5 p−1 + 4 · 5 q−1 − 1)-spanner for G with O(n 1+1/k ) edges in O(log n) expected time.Recently, in [24], Khun et al. show that every packing problem can be approximated by a constant factor with high probability in O(log n) time in the free model.
Therefore, the (Monte Carlo) algorithm of [24] implies a randomized constant approximation algorithm for the minimum 1-dominating set problem with O(log n) time.
Thus, using Proposition 1, we obtain the following result (to be compared with Theorem 3 and [8]):Theorem 6.
There exists a ( Monte Carlo) randomized distributed algorithm that given a graph G with n nodes of minimum degree δ 񮽙 √ n, constructs a 5-spanner for G in O(log n) time.
The size is O(n log 2 n) edges with high probability.
More generally, for a minimum degree δ graph, we obtain a 5-spanner with O(n + (n log n/δ) 2 ) edges.Let us remark that, in Theorem 6, 5 is the best possible bound on the stretch if δ 񮽙 w(n 1/4 log n).
In fact, there exist graphs with minimum degree c √ n (for some constant c > 0) and girth 6 (the length of its smallest cycle).
Thus, the deletion of any edge implies a stretch of at least 5 for its endpoints.
Therefore, any spanner with size less than 1 2 cn √ n have stretch at least 5, and O(n + (n log n/δ) 2 ) = o(n √ n ) if δ 񮽙 w(n 1/4 log n).
In this paper we have considered deterministic distributed algorithm to construct low stretch and sparse spanners of unweighted arbitrary graphs.
In particular we have shown that 5-spanner with O(n 3/2 ) edges can be constructed in n O(1/ √ log n ) time.
Let us observe that log n < n 1/ √ log n only for n > 2 4 2 .
In other words, deterministic distributed n 1/ √ log n time algorithms might be competitive 1 over randomized log n time algorithms for distributed system up to n 񮽙 32656 processors.
We left open the two following problems:1.
Reduce the stretch from 5 to optimal stretch 3, without increasing the size of the spanner and the running time.
More generally, is it possible, for every k 񮽙 1, to compute with a deterministic distributed algorithm a (2k − 1)-spanners of size O(n 1+1/k ) in O(MIS(n)) time?
2.
Reduce the time complexity to o(MIS(n)), possibly with some small stretch and size increasings.
More precisely, is it possible to compute with a deterministic distributed algorithm a constant stretch spanner with o(n 2 ) edges in o(MIS(n)) time?
Using our approach, it suffices to show that there is a constant ρ for which an independent ρ-dominating set can be computed in o(MIS(n)) time for every graph.
