Segmental duplications, or low-copy repeats, are common in mammalian genomes.
In the human genome, most segmental duplications are mosaics consisting of pieces of multiple other segmental duplications.
This complex genomic organization complicates analysis of the evolutionary history of these sequences.
Earlier, we introduced a genomic distance, called duplication distance, that computes the most parsimonious way to build a target string by repeatedly copying substrings of a source string.
We also showed how to use this distance to describe the formation of segmental duplications according to a two-step model that has been proposed to explain human segmental duplications.
Here we describe polynomial-time exact algorithms for several extensions of duplication distance including models that allow certain types of substring deletions and inversions.
These extensions will permit more biologically realistic analyses of segmental duplications in genomes.
Genomes evolve via many types of mutations ranging in scale from single nucleotide mutations to large genome rearrangements.
Computational models of the mutational process allow researchers to derive similarity measures between genome sequences and to reconstruct evolutionary relationships between genomes.
For example, considering chromosomal inversions as the only type of mutation leads to the so-called reversal distance problem of finding the minimum number of inversions/reversals that transform one genome into another [1].
Several elegant polynomial-time algorithms have been found to solve this problem (cf. [2] and references therein).
Developing genome rearrangement models that are both biologically realistic and computationally tractable remains an active area of research.Duplicated sequences in genomes present a particular challenge for genome rearrangement analysis and often make the underlying computational problems more difficult.
For instance, computing reversal distance in genomes with duplicated segments is NP-hard [3].
Moreover, models that include multiple types of mutations-such as inversions and duplications-often result in similarity measures that cannot be computed efficiently.
Current approaches for duplication analysis rely on heuristics, approximation algorithms, or restricted models of duplication [3][4][5][6][7].
For example, there are efficient algorithms for computing tandem duplication [8][9][10][11] and whole-genome duplication [12,13] histories.Here we consider another class of duplications: large segmental duplications (also known as low-copy repeats) that are common in many mammalian genomes [14].
These segmental duplications can be quite large (up to hundreds of kilobases), but their evolutionary history remains poorly understood.
The mystery surrounding them is due in part to their complex organization; many segmental duplications are mosaic patterns of smaller repeated segments, or duplicons.
One hypothesis proposed to explain these mosaic patterns is a two-step model of duplication [14].
In this model, a first phase of duplications copies duplicons from the ancestral genome and aggregates these copies into an array of contiguous duplication blocks.
Then in a second phase, portions of these duplication blocks are copied and reinserted into the genome at disparate loci forming secondary duplication blocks.In [15], we introduced a measure called duplication distance, which we used in [16] to find the most parsimonious duplication scenario consistent with the two-step model of segmental duplication.
The duplication distance from a source string x to a target string y is the minimum number of substrings of x that can be sequentially copied from x and pasted into an initially empty string in order to construct y. Note that the string x does not change during the sequence of duplication events.
We derived an efficient exact algorithm for computing the duplication distance between a pair of strings.
Here, we extend the duplication distance measure to include certain types of deletions and inversions.
These extensions make our model less restrictive and permit the construction of more rich, and perhaps more biologically plausible, duplication scenarios.
In particular, our contributions are the following.Summary of Contributions Let µ(x) denote the maximal number of times a character appears in the string x. Let |x| denote the length of x.1.
We provide an O(|y| 2 |x|µ(x)µ(y))-time algorithm to compute the distance between (signed) strings x and y when duplication and certain types of deletion operations are permitted.
2.
We provide an O(|y| 2 |x|µ(x)µ(y))-time algorithm to compute the distance between signed strings x and y when duplicated strings may be inverted before being inserted into the target string.
Deletion operations are also permitted.
3.
We provide an O(|y| 2 |x| 3 µ(x)µ(y))-time algorithm to compute the distance between signed strings x and y when any substring of the duplicated string may be inverted before being inserted into the target string.
Deletion operations are also permitted.
4.
We provide a formal proof of correctness of the duplication distance recurrence presented in [16].
No proof of correctness was previously given.
We begin by reviewing some definitions and notation that were introduced in [15] and [16].
Let ∅ denote the empty string.
For a string x = x 1 . . . x n , let x i,j denote the substring x i x i+1 . . . x j .
We define a subsequence S of x to be a string x i1 x i2 . . . x i k with i 1 < i 2 < · · · < i k .
We represent S by listing the indices at which the characters of S occur in x. For example, if x = abcdef , then the subsequence S = (1, 3, 5) is the string ace.
Note that every substring is a subsequence, but a subsequence need not be a substring since the characters comprising a subsequence need not be contiguous.
For a pair of subsequences S 1 , S 2 , denote by S 1 ∩ S 2 the maximal subsequence common to both S 1 and S 2 .
Definition 1.
Subsequences S = (s 1 , s 2 ) and T = (t 1 , t 2 ) of a string x are alternating in x if either s 1 < t 1 < s 2 < t 2 or t 1 < s 1 < t 2 < s 2 .
Definition 2.
Subsequences S = (s 1 , . . . , s k ) and T = (t 1 , . . . , t l ) of a string x are overlapping in x if there exist indices i, i and j, j such that 1 ≤ i < i ≤ k, 1 ≤ j < j ≤ l, and (s i , s i ) and (t j , t j ) are alternating in x. See Figure 1.
Definition 3.
Given subsequences S = (s 1 , . . . , s k ) and T = (t 1 , . . . , t l ) of a string x, S is inside of T if there exists an index i such that 1 ≤ i < l and t i < s 1 < s k < t i+1 .
That is, the entire subsequence S occurs in between successive characters of T .
See Figure 2.
Definition 4.
A duplicate operation from x, δ x (s, t, p), copies a substring x s . . . x t of the source string x and pastes it into a target string at position p. Figure 3.
Specifically, if x = x 1 . . . x m and z = z 1 . . . z n , then z • δ x (s, t, p) = z 1 . . . z p−1 x s . . . x t z p . . . z n .
SeeThe cost associated with a duplicate operation is 1.
3 Fig. 3.
A duplicate operation, δx(s, t, p).
A substring of the source string x ranging between indices s and t is copied and inserted into the target string z at index p.Definition 5.
The duplication distance from a source string x to a target string y is the minimum cost of a sequence of duplicate operations fromx, δ x (s 1 , t 1 , p 1 ), δ x (s 2 , t 2 , p 2 ), δ x (s 3 , t 3 , p 3 ), .
.
.
, that generates y from an initially empty target string 4 (that is,y = ∅ • δ x (s 1 , t 1 , p 1 ) • δ x (s 2 , t 2 , p 2 ) • . . . ).
Lemma 1 (Non-overlapping Property).
Consider a source string x, an initial target string z, and a sequence of duplicate operations of the form δ x (s i , t i , p i ) that transforms z into the final target string y.
The substrings of x that are duplicated during the construction of y appear as mutually non-overlapping subsequences of y.Proof.
(Sketch) First note that a substring S that is duplicated from x and inserted into a target string z is initially a substring of the newly augmented target, but subsequent duplicate operations may insert other strings in between the characters of S transforming it into a subsequence of the final target string y. Consider now two strings S 1 and S 2 that are copied from x and inserted into an intermediate target string in succession yielding an augmented target string z .
There are two cases: (1) S 1 ∩ S 2 = ∅ or (2) S 2 is inside of S 1 in z (Definition 3).
In either case, S 1 and S 2 are not overlapping in z .
This argument can be extended for any sequence of duplicate operations; as each string is inserted into an intermediate target string z , it does not overlap any of the subsequences of z that correspond to previously-inserted strings; we maintain the invariant that the subsequences of z corresponding to characters inserted in individual duplicate operations are mutually non-overlapping in z , and therefore also in the final string y.
In this section we review the basic recurrence for computing duplication distance that was introduced in [16].
The recurrence is based on the observation that y 1 must be the first (i.e. leftmost) character to be copied from x in some duplicate operation.
The recurrence defines two quantities: d(x, y) and d i (x, y).
We shall show, by induction, that for a pair of strings, x and y, the value d(x, y) is equal to the duplication distance from x to y and that d i (x, y) is equal to the duplication distance from x to y under the restriction that the character y 1 is copied from index i in x, i.e. x i generates y 1 .
d(x, y) is found by considering the minimum among all characters x i of x that can generate y 1 , see Eq.
1.
To compute d i (x, y), there are two possible cases to consider: either (1) y 1 was duplicated as a substring of x of length one, namely just x i , or (2) x i+1 is also copied in the same duplicate operation.
In the former case the minimum cost is 1 (for this duplicate operation) plus the minimum cost to generate the remaining suffix of y, namely 1 + d(x, y 2,|y| ).
In the latter case, the set of candidate characters in y to be generated by x i+1 is {j : y j = x i+1 , j > 1}.
For each such j, the minimum cost of generating y provided that y 1 is generated by x i and y j is generated by x i+1 , is the minimum cost of generating y 2,j−1 (i.e., d(x, y 2,j−1 )) plus the minimum cost of generating the string y 1 y j,|y| using x i and x i+1 to generate y 1 and y j .
Since x i and x i+1 are copied in the same duplicate operation, the cost of generating y 1 y j,|y| using x i and x i+1 is equal to the cost of generating just y j,|y| using x i+1 , namely d i+1 (x, y j,|y| ), see Eq.
2.
The recurrence is, therefore:d(x, ∅) = 0 d(x, y) = min {i:xi=y1} d i (x, y)(1)d i (x, ∅) = 0 d i (x, y) = min 1 + d(x, y 2,|y| ) min {j:yj =xi+1,j>1} {d(x, y 2,j−1 ) + d i+1 (x, y j,|y| )}(2)Theorem 1.
d(x, y)is the minimum cost of a sequence of duplicate operations that generate y from x. For {i :x i = y 1 }, d i (x, y)is the minimum cost of a sequence of operations that generate y from x such that y 1 is generated by x i .
Proof.
Let OP T (x, y) denote minimum cost of a sequence of duplicate operations that generate y from x. Let OP T i (x, y) denote the minimum cost of a sequence of operations that generate y from x such that y 1 is generated by x i .
We prove by induction on |y| that d(x, y) = OP T (x, y) and d i (x, y) = OP T i (x, y).
For |y| = 1, since we assume there is at least one i for which x i = y 1 , OP T (x, y) = OP T i (x, y) = 1.
By definition, the recurrence also evaluates to 1.
For the inductive step, assume that OP T (x, y ) = d(x, y ) and OP T i (x, y ) = d i (x, y ) for any string y shorter than y.
We first show that OP T i (x, y) ≤ d i (x, y).
Since OP T (x, y) = min i OP T i (x, y), this also implies OP T (x, y) ≤ d(x, y).
We describe different sequences of duplicate operations that generate y from x, using x i to generate y 1 :-Consider a minimum-cost sequence of duplicates that generates y 2,|y| .
By the inductive hypothesis its cost is d(x, y 2,|y| ).
By duplicating y 1 separately using x i we obtain a sequence of duplicates that generates y whose cost is 1 + d(x, y 2,|y| ).
-For every {j : y j = x i+1 , j > 1} consider a minimum-cost sequence of duplicates that generates y j,|y| using x i+1 to produce y j , and a minimum-cost sequence of duplicates that generates y 2,j−1 .
By the inductive hypothesis their costs are d i+1 (x, y j,|y| ) and d(x, y 2,j−1 ) respectively.
By extending the start index s of the duplicate operation that starts with x i+1 to produce y j to start with x i and produce y 1 as well, we can produce y with the same number of duplicate operations, and hence the same cost.Since the cost of OP T i (x, y) is at most the cost of any of these options, it is also at most their minimum.
Hence,OP T i (x, y) ≤ min 1 + d(x, y 2,|y| ) min {j:yj =xi+1,j>1} {d(x, y 2,j−1 ) + d i+1 (x, y j,|y| )} = d i (x, y).
To show the other direction (i.e. that d(x, y) ≤ OP T (x, y) and d i (x, y) ≤ OP T i (x, y)), consider a minimum-cost sequence of duplicate operations that generate y from x, using x i to generate y 1 .
There are a few cases:-If y 1 is generated by a duplicate operation that only duplicates x i , then OP T i (x, y) = 1 + OP T (x, y 2,|y| ).
By the inductive hypothesis this equals 1 + d(x, y 2,|y| ) which is at least d i (x, y).
-Otherwise, y 1 is generated by a duplicate operation that copies x i and also duplicates x i+1 to generate some character y j .
In this case the sequence ∆ of duplicates that generates y 2,j−1 must appear after the duplicate operation that generates y 1 and y j because y 2,j−1 is inside (Definition 3) of (y 1 , y j ).
Without loss of generality, suppose ∆ is ordered after all the other duplicates so that first y 1 y j . . . y |y| is generated, and then ∆ generates y 2 . . . y j−1 between y 1 and y j .
Hence, OP T i (x, y) = OP T i (x, y 1 y j,|y| ) + OP T (x, y 2,j−1 ).
Since in the optimal sequence x i generates y 1 in the same duplicate operation that generates y j from x i+1 , we have OP T i (x, y 1 y j,|y| ) = OP T i+1 (x, y j,|y| ).
By the inductive hypothesis, OP T (x, y 2,j−1 ) + OP T i+1 (x, y j,|y| ) = d(x, y 2,j−1 ) + d i+1 (x, y j,|y| ) which is at least d i (x, y).
This recurrence naturally translates into a dynamic programing algorithm that computes the values of d(x, ·) and d i (x, ·) for various target strings.
To analyze the running time of this algorithm, note that both y 2,j and y j,|y| are substrings of y.
Since the set of substrings of y is closed under taking substrings, we only encounter substrings of y. Also note that since i is chosen from the set {i : x i = y 1 }, there are O(µ(x)) choices for i, where µ(x) is the maximal multiplicity of a character in x. Thus, there are O(µ(x)|y| 2 ) different values to compute.
Each value is computed by considering the minimization over at most µ(y) previously computed values, so the total running time is bounded by O(|y| 2 µ(x)µ(y)), which is O(|y| 3 |x|) in the worst case.
In this section we generalize the model to include deletions.
Consider the intermediate string z generated after some number of duplicate operations.
A deletion operation removes a contiguous substring z i , . . . , z j of z, and subsequent duplicate and deletion operations are applied to the resulting string.
The cost associated with τ (s, t) depends on the number t − s + 1 of characters deleted and is denoted Φ(t − s + 1).
Fig. 4.
A delete operation, τ (s, t).
The substring of z that ranges between indices s and t is deleted.Definition 7.
The duplication-deletion distance from a source string x to a target string y is the cost of a minimum sequence of duplicate operations from x and deletion operations, in any order, that generates y.We now show that although we allow arbitrary deletions from the intermediate string, it suffices to consider just deletions from the duplicated strings before they are pasted into the intermediate string, provided that the cost function for deletion, Φ(·) is non-decreasing and obeys the triangle inequality.Definition 8.
A duplicate-delete operation from x, η x (i 1 , j 1 , i 2 , j 2 , . . . , i k , j k , p), for i 1 ≤ j 1 < i 2 ≤ j 2 < · · · < i k ≤ j k copies the subsequence x i1 . . . x j1 x i2 . . . x j2 . . . . . .
x i k .
.
.
x j k of the source string x and pastes it into a target string at position p. Specifically, if x = x 1 . . . x m and z = z 1 . . . z n , thenz • η x (i 1 , j 1 , . . . , i k , j k , p) = z 1 . . . z p−1 x i1 . . . x j1 x i2 . . . x j2 . . . x i k . . . x j k z p . . . z n .
The cost associated with such a duplication-deletion is 1 + k−1 =1 Φ(i +1 − j − 1).
Lemma 2.
If Φ(·) is non-decreasing and obeys the triangle inequality then the cost of a minimum sequence of duplicate and delete operations that generates a target string y from a source string x is equal to the cost of a minimum sequence of duplicate-delete operations that generates y from x.Proof.
Since duplicate operations are a special case of duplicate-delete operations, the cost of a minimal sequence of duplicate-delete operations and delete operations that generates y cannot be more than that of a sequence of just duplicate operations and delete operations.
We show the (stronger) claim that an arbitrary sequence of duplicate-delete and delete operations that produces a string y with cost c can be transformed into a sequence of just duplicate-delete operations that generates y with cost at most c by induction on the number of delete operations.
The base case, where the number of deletions is zero, is trivial.
Consider the first delete operation, τ .
Let k denote the number of duplicatedelete operations that precede τ , and let z be the intermediate string produced by these k operations.
For i = 1, . . . , k, let S i be the subsequence of x that was used in the ith duplicate-delete operation.
S 1 , . . . , S k form a partition of z into disjoint, non-overlapping subsequences of z. Let d denote the substring of z to be deleted.
Since d is a contiguous substring, S i ∩ d is a (possibly empty) substring of S i for each i.
There are several cases:1.
S i ∩ d = ∅.
In this case we do not change any operation.
2.
S i ∩ d = S i .
In this case all characters produced by the ith duplicate-delete operation are deleted, so we may omit the ith operation altogether and decrease the number of characters deleted by τ .
Since Φ(·) is non-decreasing, this generates z (and hence y) with a lower cost.
3.
S i ∩ d is a prefix (or suffix) of S i .
Assume it is a prefix.
The case of suffix is similar.
Instead of deleting the characters S i ∩ d we can avoid generating them in the first place.
Let r be the smallest index in S i \ d (that is, the first character in S i that is not deleted by τ ).
We change the ith duplicate-delete operation to start at r and decrease the number of characters deleted by τ .
Since Φ(·) is non-decreasing, the cost of generating z may only decrease.
4.
S i ∩ d is a non-empty substring of S i that is neither a prefix nor a suffix of S i .
We claim that this case applies to at most one value of i.
This implies that after taking care of all the other cases τ only deletes characters in S i .
We can then change the ith duplicate-delete operation to also delete the characters deleted by τ , and omit τ .
Since Φ(·) obeys the triangle inequality, this will not increase the total cost of deletion.
By the inductive hypothesis, the rest of y can be generated by just duplicate-delete operations with at most the same cost.
It remains to prove the claim.
Recall that the set {Si} is comprised of mutually non-overlapping subsequences of z. Suppose that there exist indices i = j such that S i ∩ d is a non-prefix/suffix substring of S i and S j ∩ d is a non-prefix/suffix substring of S j .
There must exist indices of both S i and S j in z that precede d, are contained in d, and succeed d. Let i p < i c < i s be three such indices of S i and let j p < j c < j s be similar for S j .
It must be the case also that j p < i c < j s and i p < j c < i s .
Without loss of generality, suppose i p < j p .
It follows that (i p , i c ) and (j p , j s ) are alternating in z. So, S i and S j are overlapping which contradicts Lemma 1.
To extend the recurrence from the previous section to duplication-deletion distance, we must observe that because we allow deletions in the string that is duplicated from x, if we assume character x i is copied to produce y 1 , it may not be the case that the character x i+1 also appears in y; the character x i+1 may have been deleted.
Therefore, we minimize over all possible locations k > i for the next character in the duplicated string that is not deleted.
The extension of the recurrence from the previous section to duplication-deletion distance is:ˆ d(x, ∅) = 0 , ˆ d(x, y) = min {i:xi=y1}ˆd xi=y1}ˆ xi=y1}ˆd i (x, y),(3)ˆ d i (x, ∅) = 0 , ˆ d i (x, y) = min    1 + ˆ d(x, y 2,|y| ), min k>i min {j:yj =x k ,j>1}ˆd j>1}ˆ j>1}ˆd(x, y 2,j−1 ) + ˆ d k (x, y j,|y| ) +Φ(k − i − 1) .
(4)Theorem 2.
ˆ d(x, y) is the duplication-deletion distance from x to y. For {i :x i = y 1 }, ˆ d i (x, y)is the duplication-deletion distance from x to y under the additional restriction that y 1 is generated by x i .
The proof of Theorem 2 is almost identical to that of Theorem 1 in the previous section and is omitted.
However, the running time increases; while the number of entries in the dynamic programming table does not change, the time to compute each entry is multiplied by the possible values of k in the recurrence, which is O(|x|).
Therefore, the running time is O(|y| 2 |x|µ(x)µ(y)), which is O(|y| 3 |x| 2 ) in the worst case.
Note that if the cost function is the identity Φ(·) = 1, then the duplication-deletion distance is equal to duplication distance without deletions.
We omit the proof.
In this section we extend the duplication-deletion distance recurrence to allow inversions.
We now explicitly define characters and strings as having two orientations: forward (+) and inverse (-).
An inversion of the signed string (+1 + 2 + 3) yields (−3 − 2 − 1).
In a duplicate-invert operation a substring is copied from x and inverted before being inserted into the target string y.
We allow the cost of inversion to be an affine function in the length of the duplicated inverted string, which we denote Θ 1 + Θ 2 , where Θ 1 , Θ 2 ≥ 0.
We still allow for normal duplicate operations and delete operations from the target string at any time during the generation process.
Note that we only handle deletions after inversions of the same substring.
The order of operations might be important, at least in terms of costs.
The cost of inverting (+1 + 2 + 3) and then deleting −2 may be different than the cost of first deleting +2 from (+1 + 2 + 3) and then inverting (+1 + 3).
Definition 9.
A duplicate-invert operation from x, ¯ δ x (s, t, p), copies an inverted substring −x t , . . . , −x s of the source string x and pastes it into a target string at position p. Specifically, if x = x 1 . . . x m and z = z 1 . . . z n , then z • ¯ δ x (s, t, p) = z 1 . . . z p−1 ¯ x t ¯ x t−1 . . . ¯ x s z p . . . z n .
The cost associated with each duplicate-invert operation is 1+Θ 1 +(t−s+1)Θ 2 .
Definition 10.
The duplication-inversion-deletion distance from a source string x to a target string y is the cost of a minimum sequence of duplicate and duplicate-invert operations from x and deletion operations, in any order, that generates y.Definition 11.
A duplicate-invert-delete operation from x, ¯ η x (i 1 , j 1 , i 2 , j 2 , . . . , i k , j k , p), for i 1 ≤ j 1 < i 2 ≤ j 2 < · · · < i k ≤ j k pastes the string − The cost of such an operation is 1 + Θ 1 + (j k − i 1 + 1)Θ 2 + k−1 =1 Φ(i +1 − j − 1).
Similar to the previous section, it suffices to consider just duplicate-invert-delete operations, rather than duplicate-invert operations and delete operations.
sAbove we handled the model where the duplicated substring of x may be inverted in its entirety before being inserted into the target.
We now generalize to models in which only a substring of the duplicated string is inverted before being inserted into y.
If the length of the inverted substring is , then the cost of this operation is 1 + Θ().
For example, we allow the substring (+1 + 2 + 3 + 4 + 5 + 6) to become (+1 + 2 − 5 − 4 − 3 + 6) before being inserted into y.It is possible to extend the duplication-inversion-deletion recurrence to handle an inversion of any prefix or suffix of the duplicated substring, without changing the asymptotic running time of the recurrence.
We omit the details.Another variant allows for inversion of an arbitrary substring of the duplicated string at the price of asymptotically longer running time.
For 1 ≤ s ≤ t ≤ |x|, let˜xlet˜ let˜x s,t be the string x 1 . . . x s−1 − x t · · · − x s x t+1 . . . x |x| .
That is, the string that is obtained from x by inverting (in-place) x s,t .
For convenience, define alsõ x 0,0 = x.
The duplication-deletion with arbitrary-substringduplicate-inversions distance satisfies the following recurrence.
The running time is O(|y| 2 |x| 3 µ(x)µ(y)).
{s,t:s=0,t=0 or 1≤s≤t≤|x|}=y1}˜ =y1}˜d st i (x, y), ConclusionWe have shown how to generalize duplication distance to include certain types of deletions and inversions and how to compute these new distances efficiently via dynamic programming.
In earlier work [15,16], we used duplication distance to derive phylogenetic relationships between human segmental duplications.
We plan to apply the generalized distances introduced here to the same data to determine if these richer computational models yield new biological insights.
Above we handled the model where the duplicated substring of x may be inverted in its entirety before being inserted into the target.
We now generalize to models in which only a substring of the duplicated string is inverted before being inserted into y.
If the length of the inverted substring is , then the cost of this operation is 1 + Θ().
For example, we allow the substring (+1 + 2 + 3 + 4 + 5 + 6) to become (+1 + 2 − 5 − 4 − 3 + 6) before being inserted into y.It is possible to extend the duplication-inversion-deletion recurrence to handle an inversion of any prefix or suffix of the duplicated substring, without changing the asymptotic running time of the recurrence.
We omit the details.Another variant allows for inversion of an arbitrary substring of the duplicated string at the price of asymptotically longer running time.
For 1 ≤ s ≤ t ≤ |x|, let˜xlet˜ let˜x s,t be the string x 1 . . . x s−1 − x t · · · − x s x t+1 . . . x |x| .
That is, the string that is obtained from x by inverting (in-place) x s,t .
For convenience, define alsõ x 0,0 = x.
The duplication-deletion with arbitrary-substringduplicate-inversions distance satisfies the following recurrence.
The running time is O(|y| 2 |x| 3 µ(x)µ(y)).
{s,t:s=0,t=0 or 1≤s≤t≤|x|}=y1}˜ =y1}˜d st i (x, y), We have shown how to generalize duplication distance to include certain types of deletions and inversions and how to compute these new distances efficiently via dynamic programming.
In earlier work [15,16], we used duplication distance to derive phylogenetic relationships between human segmental duplications.
We plan to apply the generalized distances introduced here to the same data to determine if these richer computational models yield new biological insights.
