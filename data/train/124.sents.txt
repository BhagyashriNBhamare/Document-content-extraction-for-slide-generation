Works on ontology versioning pay special attention to the logical analysis of ontology evolution.
The paper considers extensible declarative approach to ontology change description.
Metric temporal description logic with metric temporal modalities "future n" and "past n" and hybrid satisfaction operator @ is proposed as the logical basis for declarative ontology evolution analysis.
Underlying time structure assumed to be linear and discrete, which is acceptable for modeling of ontology versions sequence.
Introduced is OWL-MeT-metric extension of the Web ontology language OWL, which is supported with a reasoning engine under development on the basis of Pellet reasoner.
Ontology versioning and change detection are one of the Semantic Web research challenges [1].
Many previous efforts at providing ontology versioning have focused on the differentiation of the conceptual and explication changes [2], on the identification of an ontology in the Semantic Web [2], [3], on ontology change operations and their effects at the instances level [3], [4].
Change detection between similar ontologies or between versions of the same ontology when there is no version log is discussed in [5], [6].
Change detection and propagation between versions of the same ontology, when there is a version log, is investigated in [7].
Special attention is paid to the change management organization for distributed and modular ontologies [8], [9], inconsistent ontologies [10].
The approach reported in the paper focuses on the analysis of ontology evolution, namely, compatibility and interchangeability of ontology versions, and proposes a formal declarative basis for such analysis.
Indeed, an ontology is a formal theory [11], and for any two versions of the same ontology it is interesting to know whether these versions are compatible from the logical point of view, whether it is possible to use definition of an object in one version to access instances of that object in another version.Presented research aims at the development of logical means which will facilitate the various tasks of ontology evolution analysis.
It is proposed to use temporal logic, and to combine temporal logic with explicit use of metric properties of time.
Propositional metric temporal language (first introduced by A.Prior [12]) and calculus (investigated in [13]) serve as the basis for the presented research.
Constructive proofs of soundness, completeness and decidability of propositional metric temporal calculus [13] are based on the tableau technique.The contributions of the paper are: (i) further development of proof-theoretic approach -introduction of metric temporal description logic ALCIO(MT) with additional sort of nominals representing ontology versions; (ii) introduction of OWLMeT -metric extension of OWL with constructs of ALCIO(MT) in a way suitable for the Semantic Web applications; (iii) introduction of reasoning engine for OWLMeT, based on Pellet 2 -the open-source OWL-DL reasoner in Java.The paper is organized as follows: the Section 2 presents the related work and the motivation to enhance analytical means for ontology evolution; metric temporal description logic ALCIO(MT) with metric temporal modalities and hybrid satisfaction operator is described in Section 3; Section 4 introduces OWL-MeT -the extension of OWL with the constructs of ALCIO(MT) and describes Pellet-based reasoning engine for OWL-MeT; examples of ontology evolution analysis with OWL-MeT are given in the Section 5, and Section 6 presents some conclusions made in frame of the presented research.
Approaches to ontology changes detection and storage basically work on the syntactic layer.
In [2] it was proposed to use rule-based approach to change detection.
The idea behind the approach is to precisely formulate what can be considered as change for every syntactical construct of ontology description language.
The complete list of possible change operations for OWL-Lite was introduced in [3] in the form of "the ontology of ontology change", which is used to mark-up change logs.
The framework for ontology change management, OntoView, was described in [5], [3].
Some disadvantages of the rule-based approach to change detection are investigated in [7].
It was shown that in case of multiple changes occurred in the ontology some changes may interfere, and in the worst case even cancel one another, as far as change detection rules work independently of each other.Proof-theoretic approach to ontology evolution analysis, first introduced in MORE [14], [4] overcomes the drawbacks of other approaches.
First of all, it is ontology language-independent: meta-level temporal language LTLm was used for changes analysis.
Secondly, reasoning over ontology changes instead of querying changes was proposed, which allowed to rely not only on heuristics/rules of change detection, but to deduce complex changes.
Finally, usage of temporal logic is natural as far as changes are characterized with time moments, when they occur.However, analysis of [14] has shown that the usage of temporal logic LTLm has some drawbacks.
LTLm is past-oriented, therefore complex statements binding future and past moments can not be described.
Further, statements about states of affairs in two ontology versions which are at a given distance from each other, without naming these versions are impossible.
Finally, the developers of MORE [4] have outlined for the future work the convenience of explicit usage of version names in a temporal formula, i.e. hybridization of LTLm.Interesting ideas for the detailed change analysis of both the extensional and the structural levels are proposed in [15] for evolving collections of XML documents.
The authors of [15] provide a classification of query types for the analysis of structural changes occurred in the versions of an XML document: structural projection, historical queries, temporal selection, content-based selection.
Use of these query types might seriously enhance the ontology versioning frameworks.
The steps in this direction are made in the SEKT 3 project [4].
The review of the systems and the approaches presented above shows that detailed analysis of ontology evolution can be facilitated with the two components: (i) -there are either all versions of the ontology or the version log for that ontology, and (ii) -reasoning over the versions is performed with help of temporal logics.
The motivation of the approach proposed in the paper is based on the idea of an ontology versioning system facilitating the analysis of evolution.
Following [14] and [15] possible analytical queries may include: − Reasoning queries:• (non-)derivability of a fact in one version with respect to another version, i.e. whether the fact belongs to the intersection/difference of ontology models • (non-)derivability of a fact in a given version − Meta-level ontology-specific queries:• compatibility of versions (e.g. "Is the version 1 is subsumed by the version 5?")
• compatibility of concept definitions (e.g. "Is the concept Child defined in the version 1 subsumed by the concept Child taken from the version 5?")
etc.• most common part of concept definitions taken from different version (e.g. "What properties remain unchanged in the concept Child from the version 5 to the version 10") etc.• detection of conceptual relations [3] between the versions of ontology (e.g. "What version subsumes the version 5?")
− Retrieval queries• temporal selection (e.g. "Get the version 5")• historical queries (e.g. "What was added in the version 5?"
, "What was added in the version 5 as compare to the version 2?"
, "What become obsolete in the version 5 as compare to the version 10?")
• structural projection (e.g. "Get the definition of the concept Child in the version 5", "Get the new/retired/unchanged instances of the concept Child in the version 5 as compare to the version 2")• content-based selection (e.g. "Check all the versions and get all the concept definitions where role hasChild is used", "Check the versions from 5 to 10 and get all the concept definitions where the role hasChild is used").
Presented research assumes that all ontology versions are available for analysis.
Its usage in the case of presence of a version log goes beyond the scope of the paper.Mentioned queries explore the concept of time moment (expressed in an ontology version number).
Moreover, as the time moments / ontology version numbers are used explicitly in queries, there is a need to have correspondent means in underlying logic formalism for referencing time points explicitly.Hybrid logics [16], [17] which allow naming particular possible world may provide means for referencing time moments explicitly in a formulae.
Metric temporal logics [18] allow to reference time moments at a given distance to the future and to the past.First introduced in [18], metric modalities "future n" and "past n" were then investigated by Clifford in [19], where the semantics of the metric temporal language was given.
Other temporal modalities (such as Scott's unary temporal operator "next instant" [12] or Kamp's binary temporal operators "until" and "since" [12]) can be defined via metric ones.
Later on metric modalities were extensively learnt in the research on real-time logic, and in the recent time, in the research on distance logics [20].
Composition of hybrid and metric temporal logic may provide means necessary for ontology evolution analysis.
Highly-expressive and decidable Description Logics are of great interest in the Semantic Web applications.
Known decidable temporal description logics (see, e.g. [21]) focus on topological properties of time, and provide descriptive means for both interval-based and point-based time structure.
Such logics are usually seen as combination of a propositional modal logic (as far as description logics have strict correspondence with propositional multimodal logics) and temporal (therefore, also modal) logic.
Expressive power of obtained composed logic depends on the degree of interaction between two modal logics.Metric description logics are relatively new members of the description logics family.
The research on metric description logics was initiated with the development of logic of distances [20].
Since then many classes of such logics are investigated for the purpose of decidability.Metric temporal description logic ALCIO(MT ) for point-based time structure is the composition of ALCIO -description logic with role inverses and nominals and propositional metric temporal logic.
Particularly, ALCIO(MT) allows application of temporal and hybrid operators only to concepts (both non-temporal and temporal), and role restrictions are not applied to temporal concepts.Let B A, denote atomic non-temporal concepts, R -atomic role,F E, - complex non-temporal concepts, P -complex role, D C,-complex temporal concept, } {o -object nominal (denoting an individual in some possible world), } {a -temporal nominal (denoting possible world, e.g. ontology version).
Then the rules presented in the Fig.1 generate complex concepts/roles.
E, F → A | top | bottom | E u F | E t F | ¬ E | ∃R. E | ∀R. E | } {o P → R | 1 − P C, D → E | } {a | C intersection D | C union D | not C | C@ } {a | future n C | | past n C | somefuture C | somepast C | allfuture C | allpast CALCIO(MT) is interpreted over Kripke model M > Δ =< V I R R dist P F , }, , { , ,, where} , { Z k k ∈ Δ = Δis a set of possible worlds, k Δ is a set of individuals in k-thpossible world, } 0 { : ∪ → Δ × Δ N dist is a metric on Δ , P F R R ,are accessibility relations, I is an interpretation function, and V is a hybrid valuation function.Interpretation I associates with eachk Δ an ALCIO-interpretation > ⋅ Δ =< ) ( , ) ( k I k k I .
Temporal nominals are used as identifiers of ontology versions.
Satisfaction operator @{a}, where {a} is considered as an identifier of an ontology version, is adopted from hybrid logics [17].
Additionally, let functionZ a den → } { :be an encoding of temporal nominals into integers.
Then, given temporal nominal {a}, hybrid valuation V assigns {a} a unique world ) (a den Δ -singleton subset of Δ .
The model-theoretic semantics of ALCIO(MT)-specific operators is defined as follows:) ( ) ( k I C n future } , : { ) ( j I k C o n k j o ∈ + = ∃ Δ ∈ = ) ( ) ( k I C n past } , : : { ) ( j I k C o n j k j o ∈ + = ∃ Δ ∈ = ) ( ) ( k I C somefuture } , : { ) ( j I k C o k j o ∈ ≥ ∃ Δ ∈ = ) (k I C somepast ) ( } , : { ) ( j I k C o k j o ∈ ≤ ∃ Δ ∈ = ) ( ) ( k I C allfuture } , : { ) ( j I k C o k j o ∈ ≥ ∀ Δ ∈ = ) ( ) ( k I C allpast } , : { ) ( j I k C o k j o ∈ ≤ ∀ Δ ∈ = ) ( }) @{ ( k I a C } { )) ( ( a den I C o ∈ =For the purposes of ontology evolution analysis we restrict the domain Δ to be a finite linear sequence of ontology versions -time structure, or in terms of [14] version space.
Time structure is a finite sequence of temporal nominals, each of which identify particular ontology version.
Time structure is ordered with the precedence relation, set between encodings of temporal nominals: if den(a 1 )<den(a 2 ), then the version identified with a 1 precedes the version identified with a 2 .
Satisfiability problem for hybrid multi-modal tense logic with nominals, whose syntactic variant is ALCIO(MT), is EXPTIME-hard [16].
Releasing the domain Δ from being finite leads to analysis of the decidability issues for nonbranching discrete transitive and reflexive unbounded frame.
Tableau rule set for hybrid and metric operators provides a ground for constructive proof of decidability of satisfiability problem for ALCIO (MT).
Termination of the decision procedure is controlled with the application of looptest rules (which are applicable for transitive frames, see, e.g. [22]), and of the formulae marking rules (see, e.g. [23]).
However, the satifiability problem is still EXPTIME-hard, as the results in [16] were obtained for arbitrary frame.
Results obtained in [24] for NP-completeness of satisfiability problem for linear frame (irreflexive, transitive and trichotomous) seem not to be applicable here, as the behaviour of metric operators "future n" / "past n" when n = 0 requires the accessibility relations to be reflexive.
OWL-MeT (abbreviation for OWL-MetricTime) is built on top of the language OWL; it has been assigned namespace owlmet.
Main constructs for definition of temporal concepts of OWL-MET are TClass and TRestriction.
TClass, representing named temporal concepts, is the direct subclass of rdfs:Class, TRestriction, representing unnamed temporal restrictions, is the subclass of owlmet:TClass.
Standard OWL class owl:Class is defined as subclass of owlmet:TClass, therefore all OWL concepts are also OWL-MeT temporal concepts.
Indeed, each non-temporal concept A (which is the instance of owl:Class) can be considered as equivalent to an instance of unnamed temporal restriction future 0 A.
In OWL-MeT temporal concepts are allowed to form unions, intersections and complements, to define axioms of equivalence and subsumption between them.OWL-MeT introduces the special sort of nominals for ontology versionstemporal nominals, or instants.
Instant is also the subclass of owlmet:TClass.
TimeStructure construct fixes the sequence of instants and it is defined with help of rdf:sequence construct.Metric temporal operators are defined as instances of rdf:property, namely "future", "allfuture", "past", "allpast", "somefuture", "somepast"; hybrid satisfaction operator "at", and its supplementary operator "happens" are also the instances of rdf:property.The abstract syntax of OWL-MeT extends the OWL abstract syntax, OWL-MeT new constructs are presented in the Fig. 2.
Complete definition 4 of OWL-MeT includes abstract syntax definition, mapping to RDF graphs and usage examples.The reasoning engine for OWL-MeT is now under development.
It is grounded on the open-source Java-based OWL-DL reasoner Pellet.
Jena 2.4 5 is used for the validation of OWL-MeT constructs and for correspondent RDF models building.
Extension of Pellet to reason over OWL-MeT descriptions requires also reworking of normalization and internalization procedures, and extending of the decision procedure with metric and hybrid tableau rules.In short, hybrid extension of tableau rules creates for each temporal nominal {a} presented in a given OWL-MeT formula a particular tableau, and establishes accessibility relations between these tableaux depending on values of den(a).
Metric extension of tableau rules describes as movement across the tableaux sequence using that accessibility relation, as well as creation of a particular tableau.
For example, operator "future 1 C" checks if the tableau at the distance 1 to the future exists, if notcreates that tableau and establishes accessibility relation R F between the initial tableau and that new.
Operator "future n C" is considered as "future 1 future (n-1) C".
Operators "allfuture C" and "allpast C" due to the transitivity of time copy C to all tableaux accessible via accessibility relation R F (R P ) from the given one.
Operators "somefuture C" and "somepast C" create alternating tableau branches (due to the reflexivity of the model M): one branch will include C, and the other will include "future 1 somefuture C"/ "past 1 somepast C" respectively.
Tableau termination is controlled with the help of adopted looptest rules, avoiding the introduction of both ALCIO -node fully contained in a predecessor ALCIO -node, and the introduction of a temporal nominal node fully contained in a predecessor node.Consider several examples of temporal concept definitions.
Let concept "PerpetuumMobile" be defined as some engine that will work always in the future.
Correspondent OWL-MeT definition with the non-metric operator "allfuture" may be as shown on the Fig. 3.
Statements about a temporal concept, relating both future and past moments use metric operators "future n" and "past n": for example, the definition of "Student" as "UniversityEntrant" in one moment before is shown on the Fig. 4.
Finally, statements with explicit naming of time moments use hybrid satisfaction operator "at".
Mapping to RDF(S) due to certain limitations of RDF(S) had required the introduction of supplementary operator, which is called "happens" and which allows to partition temporal concepts occurring at different points.
The definition of "HappyFather" (see Fig.5) is given as the union of "HappyFatherInXXCentury" and "HappyFatherInXXICentury", where the disjuncts are defined at different time moments.
Time moments "XXCentury" and "XXICentury" are the individuals of the owlmet:TInstant.
Let us show how OWL-MeT may serve for the task of ontology evolution analysis.
Recall that it was proposed in the Section 2 to differentiate three types of analytical queries: retrieval queries (or, queries on the structure of vocabulary), metalevel ontology queries and reasoning queries.Reasoning queries answer the questions about derivability of a certain fact across versions.
For example, to answer the question "Are individuals of concept C in a version v5 derivable both in versions v2 and v10?"
one may check satisfiability of a temporal formula (C @{v5}) subclassof (C @{v2} intersection C @{v10}).
The question "What are new individuals of concept C in a version v5, which were not present two versions before" may be answered by checking satisfiability of a temporal concept (C intersection ((past 2) not C)) @{v5}.
The question "What are individuals of concept C in a version v5, which are not derivable at a distance of two versions in the future?"
may be answered by checking satisfiability of correspondent temporal concept (C intersection ((future 2) not C)) @{v5}.
These examples show the benefits of descriptive means of ALCIO (MT), as compare to known formalisms, e.g. [4].
To discuss the application of OWL-MeT to meta-level ontology specific queries recall that an ontology O is a set of terminological and assertional axioms [25], and satisfiability checking of a knowledge base is equivalent to satisfiability checking of a concept G, equivalent to the conjunction of definitions of all concepts and individuals taken from O 6 .
From the other side, meta-level queries have obvious relationship with the theory of modular ontologies [9].
Indeed, ontology versions in their usual form are ontology modules without concepts, defined externally.
6 Internalization procedure is applicable to logics allowing the definition of a universal role [25]; OWL-Lite and OWL-DL as the languages of ontology version definition possess roleforming operators -union and reflexive transitive closure -necessary to construct a universal role.
Let O i be an ontology, actual at the version i, and let G i be a concept, equivalent to the conjunction of definitions of all concepts and individuals in O i .
Such G i may be considered as the concept, defined internally [9] in an ontology version (or module) i.
Then simple checking of the fact that O i in the version i is satisfiable may be written as G i @{i}.
Checking satisfiability of a particular concept E taken from an ontology version i in another version, say j, may be executed in several steps.
Initially, introduce a compiled concept G E,i -conjunction of all explicit and implicit definitions of concepts and individuals, used to define E in O i .
This can be done, e.g. with the help of compilation algorithm, defined in [9].
Then check satisfiability of concept (G j intersection G E,i ) @{j}.
Analogously, given the whole ontology O i , checking of the fact that in another version, j (where j≠ i), the ontology O i is satisfiable may be written as (G j intersection G i ) @{j}.
Retrieval queries serve for analysis of the structure of vocabulary, used to define an ontology version, and for analysis of structural changes between ontology versions.
Some of the retrieval queries, such as temporal selection, may be formulated without usage of temporal logic.
However, retrieval queries benefit from tight relationship with the underlying ontology language.
A collection of interesting retrieval query templates, such as "NewChildren", "ObsoleteChildren" etc. in [14], or, ideally, proper ontology of ontology change operators, such as in [3] may serve as the source of various templates.
More detailed analysis might require extension of ALCIO(MT) with role restrictions on temporal concepts.
The paper proposes an enhancement of the formal apparatus for ontology evolution analysis, and introduces metric temporal description logic ALCIO (MT), which attempts to release the restrictions of known logical approaches.
Reasoning support of OWL-MeT -the extension of Web Ontology language OWL with metric temporal operators proposed in ALCIO (MT) is now under development on the basis of open-source reasoner Pellet.Future work is seen in following directions: encoding of interesting change operations, such as "RestrictRange", "ExtendRange", "RestrictDomain", "ExtendDomain", "ModifyEquivalenceToSubclass" etc., taken e.g. from [3], and adopted to OWL DL, in OWL-MeT; development and implementation of optimization strategies of reasoning; and, finally, testing the reasoner services on real cases.
Authors would like to thank anonymous reviewers for their helpful comments.
