Intrusion Detection Systems (IDS) have become ubiquitous in the defense against virus outbreaks, malicious exploits of OS vulnerabilities, and botnet proliferation.
As attackers frequently rely on host scanning for reconnaissance leading to penetration, IDS is often tasked with detecting scans and preventing them.
However, it is currently unknown how likely an IDS is to detect a given Internet-wide scan pattern and whether there exist sufficiently fast scan techniques that can remain virtually undetectable at large-scale.
To address these questions, we propose a simple analytical model for the window-expiration rules of popular IDS tools (i.e., Snort and Bro) and utilize a variation of the Chen-Stein theorem to derive the probability that they detect some of the commonly used scan permutations.
Using this analysis, we also prove the existence of stealth-optimal scan patterns, examine their performance, and contrast it with that of well-known techniques.
As the Internet has grown more hostile over time [26], [38], many networks now deploy Intrusion Detection Systems (IDS) [5], [35] to deal with the constant pressure of unsolicited traffic and attempts to exploit various vulnerabilities at end-hosts [26].
In its most general form, IDS monitors all inbound/outbound connections to detect such activities as scanning (e.g., attempts to find open services [1], [10], [26], [37], [41]), intrusion (e.g., malicious packets that exploit known vulnerabilities [21], [23], [33]), anomalies (e.g., new communication patterns indicating infection [7], [14], [36]), and DoS attacks (i.e., suspicious spikes in traffic/connection volume [15], [22]).
In conjunction with firewalls, IDS can block offending hosts and raise alarms to alert administrators to potentially undesirable activity.To maintain scalability [17], adapt over time, and keep state from growing to infinity, existing IDS tools [5], [11], [24], [29], [35] utilize window-based processing of incoming traffic, which entails keeping per-flow statistics only for a limited period of time and applying IDS detection algorithms to the packets accumulated during this window.
This makes the IDS detection process purely regenerative [31] and oblivious to any attacks that span multiple windows.
One activity whose detection is particularly sensitive to the amount of state in each window is horizontal scanning, which consists of probing every Internet host on a given port to see if it is visible outside the firewall.To balance accuracy and false-positive rates, an IDS typically requires some minimum number of packets in the * Supported by NSF grant CNS-1017766.
window before triggering an estimator or raising an alarm.
As observed in [38], a worm could utilize so-called stealthy scan patterns to prevent IDS from reaching this threshold, which makes such scans equally powerful against all underlying estimators.
For horizontal stealth scanning studied in this paper, the main exposed technique [38] is to scan "very slowly," potentially dragging out the process over several months.
However, it is unclear whether stealth scanning is possible at faster rates, in what particular order the IP space should be probed, and how likely the existing IDS packages are to detect such approaches.
To shed light on this issue, we model window rules of two popular IDS implementations (i.e., Snort [35] and Bro [5]), study the rates at which the existing scan techniques [1], [9], [19], [20], [27], [28], [38] become stealthy, and explore fundamental IDS limitations under stealth-optimal scan patterns.While IDS avoidance in the literature commonly targets vulnerabilities of known implementations [12], [13], [25], [30], [34] or concealment of abnormal communication patterns [6], [39], [43], to our knowledge the performance of generic window-based IDS and various scan techniques has not been modeled before.
We perform this task below.
In this section, we outline the goals of a large-scale scanner, introduce three fundamental elements of a scan that determine its performance, and set forth assumptions on the various types of IDS.
We then discuss stealth-optimal scans and their properties.
Assume F = {0, 1, . . . , n} is the IPv4 address space, where n = 2 32 , and S is the set of all CIDR networks.
As discussed in [38], one of the most effective penetration models used by an attacker (i.e., the Flash worm) relies on a two-phase scan/infect approach.
The first phase scans F using m source IPs in some set M (e.g., a subset of the attacker's botnet) to build a list of vulnerable targets V.
The second phase uses zombie hosts in another set M ′ to attempt infection of V using a new exploit.
Sets M and M ′ may overlap if exposure during the first phase does not reduce the infection performance of IPs in M during the second phase.As there is no need for newly infected hosts to scan the entire Internet, they perform only a limited scan of the local network (e.g., the corresponding BGP prefix, which is assumed 1 2 3 4 5 6 7 8 g 2 g 1 g 1 g 1 g 1 g 2pre-permutation post-permutation to be inside the firewall) and then stop.
Due to the short duration of the infection phase (hours rather than weeks) and limited local scanning, this attack is difficult to stop once it starts and infections are hard to detect after phase two is over.
For a given budget m and fixed scan duration T , we assume the attacker's goal is to minimize its detection probability at each CIDR subnet s (i.e., maximize its stealthiness) during the first phase of the attack.
The problem of delivering malicious payload is implementation/exploit-dependent and outside the scope of this paper.
Due to the static nature of set M, we are also not concerned with sub-allocating the scan space dynamically to each newly infected host as commonly studied in worm propagation [20].
Our first contribution is systematic classification of the algorithms involved in scanning.
Define an Internet-wide scan pattern to consist of three principle elements -permutation, split, and schedule.
The existing literature [3], [4], [8], [21], [23], [27], [28], [33] has glanced over the first two elements, but without any formalization or analysis.
The third one is novel and is presented here for the first time.Given a list of items F, a permutation is a one-to-one mapping function g 1 : F → {1, 2, . . . , |F|} that simply shuffles the elements in F.
We often denote the permuted sequence by F ′ = g 1 (F).
Permuting the IP space is highly beneficial because it reduces the instantaneous load on target networks, increases delays between packets entering IDS, and generally lowers the detection probability.
It can also control randomness and correlation among the destinations in each s.We define a split as a many-to-one function g 2 : F → M that assigns the elements of list F to scanner IPs.
One can view this as a partition of F into non-overlapping lists F 1 , . . . , F m , where F i is given to host i ∈ M.
If each of F i is an ordered subset of F, we call this arrangement a block-split.
In the context of the Internet, a pre-permutation scanner [4], [25] first applies partitioning g 2 to F and then permutes each F i using some algorithm g 1 to produce the final assignment F ′ i = g 1 (F i ) of source i.
A post-permutation scanner [3], [8], [18], [19], [20], [28], [42], [44] first applies permutation g 1 to F and then partitions list F ′ using g 2 into F ′ 1 , . . . , F ′ m .
This is schematically shown in Fig. 1, where the pre-permutation scanner (left side) uses a block-split, while the post-permutation one (right side) does not.
The final issue is to determine how each host i probes its target set F ′ i so as to complete the scan by a certain time T .
To allow i to periodically send packets faster or slower than its average rate r i = |F ′ i |/T , define a schedule to be a manyto-one function g 3 : F ′ i → [0, T ] that decides the exact time instances at which i hits each of its assigned targets.
While all existing scanners draw elements from F ′ i with a constant interprobe delay 1/r i , bursty patterns will be discussed shortly.
To understand the relationship between detectability of a scan and its probing rate r, one requires a model of IDS.
In what follows, we present our second contribution that consists of formalized window-based detection rules of popular IDS packages [5], [11], [24], [35] and firewall-log analyzers [29].
Since scalability requires that IDS expire state and operate in windows of finite size [17], other high-performance IDS designs are also likely to fall under one of the two categories introduced here.Our first model, which we call IDS-A, stems from the rules of Snort [35] and its commercial implementations [11], [24].
For each source IP i ∈ M sending packets into a given subnet s ∈ S protected by an IDS, define C s i (t) to be the count of unique targets seen by the IDS from i in the interval [0, t].
Since keeping infinite history of hosts contacted by i incurs substantial RAM/CPU overhead and fails to properly discount outdated information, IDS-A periodically resets i's state back to zero as illustrated in Fig. 2.
Here, random process C s i (t) increases by 1 for each new target hit by i, returns to state 0 every ∆ s time units, and absorbs in pre-defined threshold state a s ≥ 1 that triggers some internal estimation algorithm, which we assume always detects the scanner once invoked 1 .
Our second model, which we call IDS-B, is derived from the techniques used by Bro [5] and certain firewall-log analyzers [29].
In this method, C s i (t) represents the number of unique unresponsive targets hit by i in the interval [0, t].
Unlike IDS-A, this model expires i's state only if it does not probe any new unresponsive targets for ∆ s time units.
Assuming the worstcase scenario where none of the targets respond, this logic can be described by Fig. 3, where the expiration timer of i resets to ∆ s upon each state transition.
This represents the best-case detection scenario for the estimator (e.g., TRW [10], CBCRL [32]) that runs on top of the underlying packet-capture device.For the same parameter set, IDS-B is stricter than IDS-A in the sense that any scanner detected by the latter is always detected by the former.
Similarly, a scanner avoiding IDS-B always avoids IDS-A.
However, IDS-B achieves this improvement at the expense of maintaining a separate timer for each i and stochastically higher overhead (i.e., longer lists of seen targets) in steady-state.
Default parameters (∆ s , a s ) of deployed open-source and commercial IDS-A/B are summarized in Table I.
Our next contribution is to introduce the concepts of detectability and stealthiness of a scan.
Let I ⊆ S be the set of all IDS-equipped networks, where each element of I is a full CIDR block (often written in the /x notation).
Then, we start with the following classification.Definition 1: A network s ∈ I is called size-trivial if m(a s −1) ≥ |s|, unavoidable if a s = 1, and normal otherwise.Size-trivial subnets can be covered with fewer than a s packets per source IP, which means they pose no threat of detection if the scanner can probe them while perfectly loadbalancing between its IPs in M.
In contrast, unavoidable networks raise an alarm on the very first probe (e.g., darknets, personal firewalls) and thus cannot be avoided in practice by any scanner.
Define I ST , I U , I N to be pair-wise nonoverlapping sets of respectively size-trivial, unavoidable, and normal networks in I.Assume r = n/T is the average scanning rate.
Then, for each source IP i ∈ M, letτ s i (r) = inf{t > 0 : C s i (t) = a s |C s i (0) = 1} (1)be the amount of time it takes s to detect i, which is simply the first hitting time of C s i (t) onto state a s after the IDS sees the initial packet from i. Let A s i (r) be an indicator variable of detection event τ s i (r) < T and A s (r) = ∑ i∈M A s i (r) be the number of source IPs detected by subnet s ∈ I in [0, T ].
Then, ρ s (r) = P (A s (r) ≥ 1) is the probability that network s detects the scan at rate r.Assume X is a pattern that scans all IPs in F. Then, define the stealth-cover time (SCT) T s X of a normal subnet s ∈ I N to be the minimum scan duration T that allows X to avoid detection at s. Recalling that r = n/T , observe that T s X = inf{t ≥ 0 : ρ s (n/t) = 0}.
Note that the concept of SCT applies only to normal subnets since size-trivial networks can be scanned without detection in T s X = 0 and unavoidable networks require T s X = ∞, neither of which is helpful in establishing the performance of scanning algorithms.
The concept of k-stealthier is used later in the paper to compare the relative performance of different scan patterns.
IPscalability, on the other hand, determines whether a particular scan pattern can reduce its scan duration T proportional to the number of participating IPs without becoming more detectable.
Interestingly, some of the methods discussed below do not benefit from larger m and are not IP-scalable.
Definition 2: A scan pattern X is called k-stealthier in s ∈ I N than Y if it exhibits k times smaller SCT, i.e., T s X = T s Y /k.
It is called IP-scalable if itOur final definition relates to stealth optimality.
It is usually safe to assume that the scanner remains oblivious to individual IDS values (∆ s , a s ) and CIDR subnet boundaries in set I. However, from the analysis of common IDS implementations (e.g., Bro-TRW [10] requires at least 4 samples for its estimator), one may possess a uniform lower bound β on parameter a s .
In that case, we call the scanner β-aware if 2 ≤ β ≤ a s holds simultaneously for all normal subnets s ∈ I N and no larger bound is known.
If β = 2, we call the algorithm unaware since it benefits from no additional knowledge.Definition 3: For a given m, a β-aware scan pattern X is called STealth-OPtimal (STOP) if for both IDS-A/B it 1) achieves ρ s (r) = 0 in all size-trivial networks; and 2) minimizes the SCT of all normal subnets among all β-aware patterns, i.e., ∀s ∈ I N :T s X = min Y T s Y .
Our goal in this section is to analyze two popular methods for scanning the Internet -sequential [1], [9], [19] and uniform [20], [27], [28], [38].
Our contribution here is not only to derive the detection probability ρ s (r) and cover time T s X for both IDS-A/B, but also to develop a novel unifying modeling framework that applies to both pre and post-permutation splits.
Our first studied method, which we call sequential, does not permute the IP space (i.e., F ′ = F), uses a block-split that partitions F into m equal-size chunks, and sends packets from each i with constant spacing δ = 1/r i = T m/n.
Note that both pre/post permutation splits are equivalent for this method and each subnet s (smaller in size than n/m and not falling on the boundary between adjacent source IPs) is scanned by a single i ∈ M assigned to it.The sequential permutation is guaranteed to avoid IDS-A if and only if each source allows no more than β − 1 inter-packet gaps within any interval [t, t + ∆ s ), which is equivalent to δ(β − 1) ≥ ∆ s .
For IDS-B, this condition is much more conservative since none of the inter-packet delays δ can be smaller than ∆ s .
Combining the two cases, we have the sequential SCT asT s Q = ∆ s n mζ , where ζ = { β − 1 IDS-A 1 IDS-B .
(2)Notice from (2) that sequential scanning is IP-scalable and (β − 1)-stealthier against IDS-A than IDS-B.
This pattern is invisible to all networks with fewer hosts than the IDS threshold (i.e., |s| < a s ), but this is far from optimal since IP-load-balancing can do much better, i.e., automatically avoid detection at all size-trivial networks whose |s| ≤ m(a s − 1).
This difference is quite significant for large m.In terms of probing rates, sequential scans hit each s atmax ( n mT , |s| T )(3)packets per second (pps).
Depending on the scan duration T , this rate may become quite noticeable in comparison to the background traffic and may lead to easy detection.
For T = 24 hours, the first term of (3) is 49.7/m Kpps, regardless of the target subnet size.
However, if both the botnet and s are large (i.e., m|s| ≈ n), the sequential scan rate might not be too far from the optimal |s|/T , which is possibly one of the reasons for its widespread use in the Internet [1].
The main drawback to the sequential permutation is that it does not explore other subnets before hitting the same s with repeat packets.
Uniform scanning improves upon this basic algorithm by spreading packets between random subsets of the Internet.
We call a permutation function g 1 on list F uniform if the probability that each i ∈ F moves into position j ∈ [1, |F|] is 1/|F|.
All existing uniform scanners use block-split and constant inter-packet delays δ = T m/n.
Consider a particular subnet s with |s| IPs that need to be scanned in [0, T ].
For pre-permutation, the uniform shuffle randomly scatters these |s| targets throughout F ′ i , where i is the host permanently assigned to scanning s and F ′ i is its list of targets.
For post-permutation, the same IPs are now scattered in a much larger set F ′ .
This is illustrated in Fig. 4, where the IPs in s are marked with solid circles.Assuming n ≫ 1, the shuffle can be viewed as occurring in time rather than inside a discrete set.
This transformation simplifies understanding of the derivations below and does not impact the accuracy of analysis.
Specifically, imagine that source IPs scan the Internet one after the other (rather than concurrently) as shown at the bottom of Fig. 4 with four intervals of size T following each other back-to-back.
This can be done because IDS does not correlate traffic from different source IPs.
Then, the time instances when s sees probes from M is distributed uniformly in the interval [0, ωT ], whereω = { 1 pre-permutation m post-permutation .
(4) We start by analyzing how the uniform pattern delivers packets to individual networks and develop a simple model for the detection probability in IDS-A.
We later extend this result to IDS-B.
Theorem 1: For T ≫ ∆ s , the probability that a normal subnet s ∈ I N with IDS-A detects a uniform scanner isρ s A (r) ≈ 1 − ( as−1 ∑ j=0 ( |s| j ) q j (1 − q) |s|−j ) 1/q ,(5)where q = ∆ s /ωT .
[30,35].
From the analysis of (5), observe that ρ s (r) is a function of product ωT , which means that increasing ω by a factor of m allows reduction of T by the same factor without changing the detectability of the scanner.
Thus, uniform scanning is IPscalable against IDS-A if and only if it uses post-permutation split.
For pre-permutation split (i.e., ω = 1), the detection probability stays constant regardless of m and the scanner's stealthiness does not benefit from IP diversity.
For IDS-B, our first step is to understand inter-probe delays {Y s k } k seen by s from the attacker in our continuous model in Fig. 4.
Note that the model allows some of these delays to span the border of multiple source IPs, which we deal with later in the section by requiring that |s|/m be sufficiently large.
P (Y s k ≥ y) = ( 1 − y ωT ) |s| , 0 ≤ y ≤ ωT.
(6)Proof: First, notice that the uniform permutation is equivalent to randomly distributing |s| points on a ring of length ωT .
Since there are |s| inter-probe gaps on the ring, their mean is simply E[Y s k ] = ωT /|s|.
Second, the probability that a given address from s falls in the interval [t, t + y) ⊆ [0, ωT ] is y/ωT .
Then, the probability that none of the addresses froms land into [t, t + y) is P (Y s k ≥ y) = (1 − y/ωT ) |s| .
We omit simulations showing that (6) is very accurate.
Instead, we define χ s = P (Y s k < ∆ s ) to be the probability that the uniform permutation sends two probes to s with spacing smaller than ∆ s and proceed to the next result.
Proof: Define J s k to be an indicator variable of event Y s k < ∆ s .
Then, P (J s k = 1) = 1 − P (J s k = 0) = χ s .
Since IDS-B needs a s − 1 consecutive 1s in set {J s k } k to arrive into state a s , defineX s k = { 1 J s k = J s k+1 = . . . = J s k+as−2 = 1 0 otherwise (8)to be an indicator of a detection event occurring at time k + a s − 2.
Denoting by l = |s| − a s + 1 the size of set {X s k } k , we have that X s = ∑ l k=1 X s k is the total number of detections in [0, ωT ] and ρ s (r) = P (X s ≥ 1).
Before deriving this probability, note that we need to analyze only those consecutive runs of 1s in sequence {J s k } k that follow a 0 and start no later than position l. Indeed, supposing that this set contains Z zeroes, X s is non-zero if and only if any of the Z runs of 1s that immediately follow a zero has length of at least a s − 1.
All other runs provide redundant information and can be removed from consideration.Define V j to be the value of X s k following the j-th zero in set {J s k } l k=1 .
We then obtain From the Chen-Stein theorem [2] and treating set {J s k } k as approximately iid, variable X s converges to the Poisson distribution with rateX s = Z ∑ j=1 V j .
(9)λ = E[X s ] = E[Z]E[V s 1 ] as E[Z] → ∞.
Noticing that E[Z] = l(1 − χ s ) and E[V s 1 ] = χ as−1 s , we get λ = l(1 − χ s )χ as−1 s, which immediately leads to ρ s (r) ≈ 1 − e −λ in (7).
We should make two observations about this derivation.
First, for small |s| and large a s , the dependency in set {J s k } k may be strong enough for ρ s (r) to disagree with the model (which arises because ∑ k Y s k ≤ ωT and set {Y s k } k is not iid); however, in the limit (7) is exact.
Second, although some delays Y s k may span between source IPs, condition (|s| − a s )(1 − χ s )/m → ∞ ensures that each IP gets enough 0s in {J s k } k to invoke the Chen-Stein theorem and keeps the overall result asymptotically accurate.
Fig. 6 compares simulations to (7) under the same default conditions as in Fig. 5.
Results show that T, m, and |s| do not influence the accuracy of the model if threshold a s is small compared to |s| (i.e., the error is below 0.1% for a s = 4 and subnet sizes as small as 2 8 ).
However, significantly larger a s create too much dependency among consecutive delays {Y s k } k leading up to detection and result in a more serious mismatch with the model, as shown in part (b) of the figure.
Despite this discrepancy, the model can be used to upper-bound ρ s B (r) and compute scanning rates that guarantee a certain level of stealth.As with IDS-A, uniform scanners are IP-scalable against IDS-B if and only if they use post-permutation split, which can be inferred from the ωT term in (6).
We next examine the time needed for the uniform permutation to cover a particular subnet.
In order to determine this metric, we first relax the definition of SCT since uniform scanners can never achieve ρ s (r) = 0 with finite T .
For a pattern X, define the ϵ-SCT T s X (ϵ) of a normal subnet s ∈ I N to be the minimum duration T in which X can reduce the detection probability at s below ϵ, i.e., T s X (ϵ) = inf{t ≥ 0 : ρ s (n/t) ≤ ϵ}.
We similarly relax the definition of k-stealthier and IP-scalable to operate in terms of ϵ-SCT instead of SCT.This leads to the following approximation.
Theorem 4: Define c = 1/(β − 1).
Then, for ϵ → 0 and |s| ≫ β, the ϵ-SCT of a β-aware uniform permutation is asymptoticallyT s U (ϵ) ≈ α|s|∆ s ω { e η1 (β!)
−c IDS-A e η2 η −1 3 IDS-B ,(10)whereα = ( |s| − log(1 − ϵ) ) c , η 1 = W (−c(β!)
c /α),(11)η 2 = W (−c/α), η 3 = ∞ ∑ j=0 (αe η2 ) −j j + 1 ,(12)and W (.)
is Lambert's function.Proof: Since ρ s (r) = ϵ is asymptotically small, one can make a number of approximations that greatly simplify inversion of (5) and (7).
For small x, we use Taylor expansions (1 − x) y ≈ e −xy , 1 − e −x ≈ x, and log(1 − x) ≈ −x.
We also neglect β in comparison to |s|, i.e., |s| − β ≈ |s|.
Without a-priori knowledge of a s , a uniform scanner must assume that counter C s i (t) reaching β triggers detection for both IDS-A/B.
This means (5) and (7) must undergo inversion with a s replaced by β.
For IDS-A and constant |s|, observe that ϵ → 0 implies q → 0 and the leading term of ϕ s bin isϕ s bin ≈ ( |s| β ) q β (1 − q) |s| ≈ ( |s| β ) e β log q−|s|q .
(13)Recalling that ρ s A (r) ≈ 1 − (1 − ϕ s bin ) 1/q = ϵ, we havelog(1 − ϵ) ≈ log(1 − ϕ s bin ) q ≈ −ϕ s bin q .
(14)Using (13) in (14) and taking the log of both sides, we getlog ( −β!
log(1 − ϵ) |s| β ) ≈ (β − 1) log q − |s|q.(15)This equation is of the general form c = b log q +aq, whose solution using Lambert's W (.)
function is given byq = exp [ −W ( ae c/b b ) + c b ] .
(16)Applying this result to (15) and recalling that q = ∆ s /ωT , we arrive at the first line of (10).
For IDS-B, observe that (7) can be written as− log(1 − ϵ) ≈ |s|(1 − χ s )χ β−1 s .
(17)Since χ s → 0, we have log(1 − χ s ) ≈ −χ s and which again has shape c = aχ s +b log χ s .
Solving (18) for χ s , we get χ s = e −η2 /α, where η 2 and α are given in (11)-(12).
log ( − log(1 − ϵ) |s| ) ≈ −χ s + (β − 1) log χ s ,(18)Expanding χ s = 1 − (1 − q) |s| and applying the log to both sides, we havelog(1 − e −η 2 α ) |s| ≈ log(1 − q) ≈ −q = −∆ s ωT .
(19)Substituting (19), we get the second line of (10).
Fig. 7 shows the relative error between approximations (10) and the corresponding ϵ-SCT found using binary search on models (5), (7).
For β = 2, the latter is so close to the former that their relative difference is initially less than 10 −5 , which falls below Matlab's precision for binary search and explains why it does not improve as ϵ → 0.
The other two curves in each subfigure show monotonic decay as ϵ decreases, with the IDS-B approximation generally better agreeing with the original than IDS-A.
This arises from the extremely crude approximation to the binomial distribution in (13).
For larger β, the error is generally more pronounced and decays slower since the magnitude of the omitted terms is higher; however, in all cases in the figure it stays below 2.4%.
− log(1 − z) = z(1 + z/2 + z 2 /3 + . . .) with z = e −η2 /α into Our contribution in this section is to prove the existence of stealth-optimal scanners and analyze their model-based performance in comparison to uniform/sequential.
To understand optimal patterns, we next derive a lower bound on min Y T s Y and show that there exists a local (i.e., as seen by each s) arrival pattern of packets that achieves optimality under both IDS-A/B.
Later in the section, we develop a scanner that implements this pattern globally (i.e., simultaneously in all CIDR subnets).
Theorem 5: The SCT of s ∈ I N is lower-bounded bymin Y T s Y ≥ |s|∆ s m(β − 1) .
(20)To show that STOP patterns exist, suppose each source i shapes its traffic to s into bursts of β − 1 packets separated by an intra-IP gap As illustrated in Fig. 8, this pattern initially raises target count C s i (t) to β − 1 and then follows it up with the proportionally-stretched gap in (21).
Detection is avoided for IDS-B if and only if δ s intra > ∆ s .
As discussed earlier, IDS-B is stricter than IDS-A, which means that the scanner also automatically avoids IDS-A.
Combining the two cases and solving δ s intra > ∆ s for T , this pattern exhibits the same SCT for both types of IDSδ s intra = T m(β − 1) |s| .
(21)T s O = |s|∆ s m(β − 1) ,(22)which is optimal as it equals the lower bound in (20).
Examining (22), notice that STOP patterns are not only IPscalable, but also (β − 1)-stealthier than any unaware pattern.
Furthermore, the optimal SCT is a linear function of subnet size |s| and all IDS parameters, unlike the uniform permutation whose SCT sometimes scales quadratically with |s|, which we establish later in this section during comparison analysis.
In order to show the existence of global STOP scanners, we design a novel bursty schedule for GIW/RR, which is an Internet-wide scanning framework developed in [16] that relies on Globally IP-Wide (GIW) permutations and RoundRobin (RR) split.
Due to limited space, our explanation of the relevant concepts from [16] is very brief.Define d = 32 − ⌊log 2 (m(β − 1))⌋ to be the number of leftmost bits in the IP address (which we call the depth) at which subnets become size-trivial.
In other words, subnets smaller or equal to /d can never detect the scanner if it perfectly load-balances across its m source IPs.
The main challenge in achieving STOP scanning is to ensure that target IPs arrive in bursts of β − 1 at subnets above depth d and are randomized according to GIW when viewed at subnets below d. Employing the Alternating Gateway Tree (AGT) of [16, Section 3.2], this can be accomplished by traversing the tree β − 2 times and flipping node directions only at depth no smaller than d.
The last, i.e., (β − 1)-st, traversal flips all 32 nodes to ensure that the next burst proceeds according to GIW.Since AGTs are inefficient [16], the above algorithm must be implemented in practice using β − 1 Reversed Linear Congruential Generators (RLCGs) maintained by each source IP [16, Section 3.2].
Specifically, assume that the main RLCG is in position k in its GIW permutation {z k } k and that the scanner needs to generate the next β − 1 targets y 0 , . . . , y β−2 in a burst.
The first target y 0 is simply z k .
Since the remaining β − 2 destinations do not change the top d levels of the tree, for j = 0 to β − 2 do 13:x = LCG[j].
Next() ◃ Get next LCG value 14:if (x !
= EOS) ∧ (IP is ours) then 15:y = ReverseBits(x) ◃ Obtain RLCG 16:if y is valid then ◃ Falls in scanning space?
17:probe(y) ◃ Hit destination 18:end if 19:end if 20: end for 21:Sleep(T (β − 1)/n) ◃ Wait for next burst 22:end for 23: start = x ◃ Next burst follows last hit target 24: end while they can be found in the permutation where {z k } k returns to the same subnet at level d.
This is equivalent to skipping forward by 2 d elements each time.
This leads toy j = z k+j2 d , j = 0, 1, . . . , β − 2.
(23)The entire process is summarized in Algorithm 1.
After deciding the size-trivial depth and the starting IP in Lines 1 − 2, the main loop in Line 4 runs through bursts of β − 1 packets until the random number generator (i.e., the LCG) wraps back to the original seed and returns a special EOS (end-of-sequence) IP address.
To avoid re-generating the entire sequence for each burst, the scanner operates with β−1 LCGs, each pointing to a different part of the original sequence.
Their initialization and advancement is shown in Lines 6 − 7.
For each burst k, RR split decides in Line 10 which local IP will transmit the entire burst.
Decisions about which targets to hit are made in Lines 13 − 14 based on the current position of the underlying LCG and whether the burst is assigned to this particular source IP.
Reversing the bits of the LCG in Line 15 and checking the result against the scanning space (e.g., IANA-allocated or BGP blocks) in Line 16 completes the main portion of the algorithm.
We finish this section by analyzing the relative performance of the various algorithms.
As ϵ → 0, the numerous constants in (10) disappear.
Specifically, α becomes large and η 1 → 0, η 2 → 0, η 3 → 1, which leads toT s U (ϵ) ≈ |s| 1+c ∆ s ωγϵ c , where γ = { (β!)
c IDS-A 1 IDS-B .
(24)First, observe that uniform is stealthier against IDS-A by a factor of (β!)
c than against IDS-B.
This ratio is always no smaller than 2 and is approximately (β/e) 1+c for β ≫ 1.
While for sequential this ratio is always β − 1 and for STOP it is 1, the uniform permutation splits these two extremes onethird of the way (i.e., at β/e ≈ 0.37β) as β → ∞.
Second, notice that T s U (ϵ) is proportional to |s| 1+c , which may scale quite aggressively as |s| becomes large (e.g., quadratically for β = 2).
Because of this, sequential is actually stealthier than uniform for any s with |s| > n 0 , wheren 0 = ( nγϵ c ζ ) β−1 β ,(25)which has not been previously documented and is quite counter-intuitive.
For β = 2, this translates into n 0 = √ γnϵ.
Assuming the desired detection probability ϵ = 10 −3 (i.e., on average, one in 1, 000 subnets detects the scan), sequential is stealthier than uniform against IDS-A in any network with more than 2, 930 IPs and against IDS-B with more than 2, 072 IPs (i.e., these roughly map to /20 and /21, respectively).
However, as β increases, (25) quickly rises as well.
For β = 4, the corresponding thresholds are 14.1M (IDS-A) and 9.9M (IDS-B), which correspond to /8 or larger networks.Third, even though for some scan patterns two sets of IDS-A parameters are equivalent if ratio ∆ s /(a s −1) (i.e., the average allowed gap between packets) remains constant, this is not the case against the uniform permutation.
Lowering ∆ s while keeping the ratio constant actually increases the uniform cover time and makes IDS-A perform better at detecting the scanner.
Thus, for example, combination (15, 2) is much stricter against uniform scanners than Snort's default (60, 5) although both allow on average 1 scan packet per 15-second interval.Fourth, comparing (22) with (2), notice that STOP is n(β − 1)/ζ|s| times stealthier than sequential in each s. Given a /16 subnet with Bro TRW's default β = 4, this translates into an improvement by a factor of 64K against IDS-A and 196K against IDS-B.
This is equivalent to a reduction of T from 1 year to 8 minutes for IDS-A and 2.6 minutes for IDS-B, while keeping the detection probability the same.
For a fixed T , STOP's inbound rate at each subset s is max(n/m|s|, 1) times smaller than sequential's.
Using T = 24 hours and a modest m = 10, this results in 0.76 pps at /16 subnets and one probe every 337 seconds at /24 subnets, which is a reduction by a factor of 6.5K and 1.67M, respectively, over sequential.Finally, notice from (22) and (24) that the stealth-optimal pattern isπ(ϵ) = T s U (ϵ) T s O = |s| c (β − 1) γϵ c(26)times stealthier than uniform.
This ratio is plotted in Fig. 9 for two subnet sizes.
In both subfigures, (26) for IDS-A starts at |s|/2ϵ for β = 2 and converges toward e as β → ∞.
For IDS-B, it starts at double the IDS-A value and never drops below its global minimum π 0 = e log(|s|/ϵ) achieved at β 0 = π 0 /e + 1.
This shows that regardless of β, the STOP pattern is at least π 0 -stealthier against IDS-B than uniform.
For the subfigures (a)-(b), these minimums are 34 and 49.
However, for small β the uniform pattern performs much worse, allowing π(ϵ) to reach 256K in Fig. 9(a) and 65M in Fig. 9(b).
For β = 4 and the same ϵ = 10 −3 , STOP scanners in /16 subnets are 419-stealthier than uniform when facing IDS-A and 1, 209-stealthier when facing IDS-B.
This is equivalent to a reduction in T from 1 year to 21 hours in the former case and to 7 hours in the latter.
One of the most peculiar results obtained in this paper is that all studied post-permutation scanners can linearly increase stealthiness with the number of source IPs.
This leads to an intriguing idea of hijacking unused addresses from the same subnet when the infected device is not located behind a NAT 2 .
To avoid possible detection from IP-address conflicts (which are reported to users and possibly administrators), worms can monitor ARP broadcasts and DHCP leases to silently drop IPs as soon as their legitimate owners join the network.
In such scenarios, j stolen IPs by each infected host allow the scan to become not only j-stealthier (i.e., increase the speed by a factor of j for the same level of detection), but also much harder to map to the correct hardware without administrator access to ARP packets and MAC-layer addresses.We finish the paper with practical implications.
Assuming T = 24 hours and networks no larger than a /16, STOP can avoid the open-source version of Snort [35] using just m = 12 IPs, Bro [5] using 24 IPs, and Bro TRW [5] using 455 IPs, assuming their default settings.
With a 12K-node botnet, where each host hijacks 10 local IPs using ARP, a stealth-optimal scanner can cover the Internet in one day and remain completely undetected in all /8 networks operating any Snort/Bro/TRW device with default parameters.
This happens because none of the IDS are allowed to reach the threshold that trigger underlying detectors, which renders their accuracy irrelevant.
While dropping threshold a s or increasing interval ∆ s is possible, this may lead to unmanageably high rates of false-alarms [40], reduced administrator sensitivity, and lower operating efficiency of IDS.Defenses against IP hijacking and methods for detecting distributed STOP scanners will be studied in future work.
The first and most common direction for evading IDS involves sending malicious packets that do not match the signature database [13], [25], [30], [34].
Public tools such as nmap [25] rely on incorrect reconstruction of the packet at the IDS (e.g., using IP-level fragmentation [30], incorrect checksums, TTL tricks [34]), as well as the ability of the attacker to hide his/her identity and/or packet contents (e.g., using source-address spoofing, confusing IP options and flags [30], [34], and polymorphic packet contents [13]).
The second direction relies on concealing abnormal communication in ways that bypass IDS anomaly detectors [6], [39], [43].
Attackers can mimic benign traffic [6], [39] or modify scan rates [43] to avoid appearing like a propagating worm.The third direction, which is the topic of this paper, works against pattern-based detectors by designing scan algorithms that do not allow IDS to reach its detection thresholds.
We are aware of only one effort in this area, in which [12] alternates between known alive hosts in the target network and the remaining unexplored space to manipulate Bro TRW [10].
This paper introduced a novel formalization of scanner algorithms and IDS detection rules related to horizontal scanning.
We thoroughly investigated the detection probability of previous scan patterns and brought awareness to the existence of low-overhead algorithms for stealth-optimal scanning, which can remain undetected at much faster rates compared to the known approaches.
