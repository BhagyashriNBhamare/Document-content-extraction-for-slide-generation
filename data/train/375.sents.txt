A spanner graph on a set of points in R d provides shortest paths between any pair of points with lengths at most a constant factor of their Euclidean distance.
A spanner with a sparse set of edges is thus a good candidate for network backbones, as in transportation networks and peer-to-peer network overlays.
In this paper we investigate new models and aim to interpret why good spanners 'emerge' in reality, when they are clearly built in pieces by agents with their own interests and the construction is not coordinated.
Our main result is to show that the following algorithm generates a (1 + ε)-spanner with a linear number of edges.
In our algorithm, the points build edges at an arbitrary order.
A point p will only build an edge pq if there is no existing edge p q with p and q at distances no more than 1 4(1+1/ε) · |pq| from p, q respectively.
Eventually when all points finish checking edges to all other points, the resulted collection of edges forms a sparse spanner as desired.
As a side product, the spanner construction implies a greedy algorithm for constructing linear-size well-separated pair decompositions that may be of interest on its own.
A geometric graph G defined on a set of points P ⊆ R d with all edges as straight line segments of weight equal to the length is called a Euclidean spanner, if for any two points p, q ∈ P the shortest path in G has length at most s · |pq| where |pq| is the Euclidean distance.
The factor s is called the stretch factor of G and the graph G is called an s-spanner.
Spanners with a sparse set of edges provide good approximations for the pairwise Euclidean distances and are good candidates for network backbones.
Thus, there has been a lot of work on the construction of sparse Euclidean spanners in both the centralized [19,33] and distributed settings [34].
In this paper we are interested in the emergence of good Euclidean spanners formed by uncoordinated agents.
Many real-world networks, such as the transportation network and the Internet backbone network, are good spanners -one can typically drive from any city to any other city in the U.S. with the total travel distance at most a small constant times their straight line distance.
The same thing happens with the Internet backbone graph as well.
However, these large networks are not owned or built by any single authority.
They are often assembled with pieces built by different governments or different ISPs, at different points in time.
Nevertheless altogether they provide a convenient sparse spanner.
The work in this paper is motivated by this observation of the lack of coordination in reality and we would like to interpret why a good Euclidean spanner is able to 'emerge' from these agents incrementally.Prior work that attempt to remove centralized coordination has been done, as in the network creation game [21,15,26,4,31], first introduced by Fabrikant et al. [21] to understand the evolution of network topologies maintained by selfish agents.
A cost function is assigned to each agent, capturing the cost paid to build connections to others minus the benefit received due to the resulting network topology.
The agents play a game by minimizing their individual costs and one is interested in the existence and the price of anarchy of Nash equilibria.
Though being theoretically intriguing, there are two major open questions along this direction.
First, the choice of cost functions is heuristic.
Almost all past literatures use a unit cost for each edge and they deviate in how the benefit of 'being connected to others' is modeled.
There is little understanding on what cost function best captures the reality yet small variation in the cost function may result in big changes in the network topologies at Nash equilibria.
There is also not much understanding of the topologies at Nash equilibria, some of them are simplistic topologies such as trees or complete graphs, that do not show up often in the real world.
It remains open whether there is a natural cost model with which the Nash equilibrium is a sparse spanner.The game theoretic model also has limitations capturing the reality: selfish agents may face deadlines and have to decide on building an edge or not immediately; once an edge is built, it probably does not make sense to remove it (as in the case of road networks); an agent may not have the strategies of all other agents making the evaluation of the cost function difficult.
In this paper, we take a different approach and ask whether there is any simple rule, with which each agent can determine on its own, and collectively build and maintain a sparse spanner topology without any necessity of coordination or negotiation.
The simple rule serves as a 'certificate' of the sparse spanner property that warrants easy spanner maintenance under edge dynamics and node insertion.
We believe such models and good algorithms under these models worth further exploration and this paper makes a first step along this line.Our contribution.
We consider in this paper the following model that abstracts the scenarios explained earlier.
There are n points in the plane.
Each point represents a separate agent and may consider to build edges from itself to other points.
These decisions can happen at different points in time.
When an agent p plans on an edge pq, p will only build it if whether there does not exist a 'nearby' edge p q in the network, where |pp | and |qq | are within 1 4(1+1/ε) · |p q | from p and q respectively.
This strategy is very intuitive -if there is already a cross-country highway from Washington D.C. to San Francisco, it does not make economical sense to build a highway from New York to Los Angeles.
We assume that each agent will eventually check on each possible edge from itself to all other points, but the order on who checks which edge can be completely arbitrary.
With this strategy, the agents only make decisions with limited information and no agent has full control over how and what graph will be constructed.
It is not obvious that this strategy will lead to a sparse spanner.
It is not clear that the graph is even connected.The main result in this paper is to prove that with the above strategy executed in any arbitrary order, the graph built at the end of the process is a sparse spanner:-The stretch factor of the spanner is 1 + ε.
-The number of edges is O(n).
-The total edge length of the spanner is O(|MST| · log α), where α is the aspect ratio, i.e., the ratio of the distance between the furthest pair and the closest pair, and |MST| is the total edge length of the minimum spanning tree of the point set.
-The degree of each point is O(log α) in the worst case and O(1) on average.To explain how this result is proved, we first obtain as a side product the following greedy algorithm for computing a well-separated pair decomposition.
A pair of two sets of points, (A, B), is called s-well-separated if the smallest distance between any two points in A, B is at least s times greater than the diameters of A and B.
An swell-separated pair decomposition (s-WSPD for short) for P is a collection of s-wellseparated pairs W = {(A i , B i )} such that for any pair of points p, q ∈ P there is a pair (A, B) ∈ W with p ∈ A and q ∈ B.
The size of an s-WSPD is the number of point set pairs in W. Well-separated pair decomposition (WSPD) was first introduced by Callahan and Kosaraju [12] and they developed algorithms for computing an s-WSPD with linear size for points in R d .
Since then WSPD has found many applications in computing k-nearest neighbors, n-body potential fields, geometric spanners and approximate minimum spanning trees [9,10,12,11,6,5,32,29,24,20].
So far there are two algorithms for computing optimal size WSPD, one in the original paper [12] and one in a later paper [22].
Both of them use a hierarchical organization of the points (e.g., the fair split tree in [12] and the discrete center hierarchy in [22]) and output the well-separated pairs in a recursive way.
In this paper we show the following simple greedy algorithm also outputs an s-WSPD with linear size.
We take an arbitrary pair of points p, q that is not yet covered in any existing well-separated pair, and consider the pair of subsets (B r (p), B r (q)) with r = |pq|/(2s + 2) and B r (p) (B r (q)) as the set of points of P within distance r from p (q).
Clearly (B r (p), B r (q)) is an s-well-separated pair and all the pairs of points (p , q ) with p ∈ B r (p) and q ∈ B r (q) are covered.
The algorithm continues until all pairs of points are covered.
We show that, no matter in which order the pairs are selected, the greedy algorithm will always output a linear number of well-separated pairs.
Similarly, this greedy algorithm can be executed in an environment when coordination is not present, while the previous algorithms (in [12,22]) cannot.WSPD is deeply connected to geometric spanners.
Any WSPD will generate a spanner if one puts an edge between an arbitrary pair of points p, q from each well-separated pair (A, B) ∈ W [6,5,32,29].
The number of edges in the spanner equals the size of W.
In the other direction, the deformable spanner proposed in [22] implies a WSPD of linear size.
The connection is further witnessed in this paper: our spanner emergence algorithm implies a WSPD generated in a greedy manner.
Thus the well-separated pairs and spanner edges are one-to-one correspondence.Last, this paper focuses on the Euclidean case when the points are distributed in the plane.
The basic idea extends naturally to points in higher dimensions as well as metrics with constant doubling dimensions [25] (thus making the results applicable in non-Euclidean settings), as the main technique involves essentially various forms of geometric packing arguments.Applications.
The results can be applied in maintaining nice network overlay topologies for P2P file sharing applications [30].
Such P2P overlay networks are often constructed in a distributed manner without centralized control, to achieve robustness, reliability and scalability.
One important issue is reducing routing delay by making the overlay topology aware of the underlying network topology [14,35,28,39,40].
But all these work are heuristics without any guarantee.
A spanner graph would be a good solution for the overlay construction, yet there is no centralized authority in the P2P network that supervises the spanner construction and the peers may join or leave the network frequently.
The work in this paper initiates the study of the emergence of good spanners in the setting when there is little coordination between the peers and the users only need a modest amount of incomplete information of the current overlay topology.We show that the spanner can be constructed under a proper model such that only O(n log α) messages need to be delivered.
The spanner topology is implicitly stored on the nodes with each node's storage cost bounded by O(log α).
With such partial information stored at each node, there is a local distributed algorithm that finds a (1+ε)-stretch path between any two nodes.We remark that the idea of the greedy spanner resembles, on an abstract level, the 'highway hierarchy' in transportation networks.
It has been shown that to find a shortest path to a destination, one only needs to search for a 'highway entrance' within certain radius, and search only on the highways beyond that.
This turns out to substantially reduce the time to find shortest paths on such graphs [8,36].
Our work provides a possible explanation of how the road system evolved to the way it is today.
We propose to verify this in our future work.Related work.
In the vast amount of prior literature on geometric spanners, there are three main ideas: Θ-graphs, the greedy spanners, and the WSPD-induced spanners [33].
Please refer to the book for a nice survey [33].
We will review two spanner construction ideas that are most related to our approach.
The first idea is the path-greedy spanner construction [13,[16][17][18].
All pairwise edges are ordered with non-decreasing lengths and checked in that order.
An edge is included in the spanner if the shortest path in the current graph is longer than s times the Euclidean distance, and is discarded otherwise.
Variants of this idea generate spanners with constant degree and total weight O(|MST|).
This idea cannot be applied in our setting as edges constructed in practice may not be in non-decreasing order of their lengths.
The second idea is to use the gap property [13] -the sources and sinks of any two edges in an edge set are separated by a distance at least proportional to the length of the shorter of the two edges and their directions are differed no more than a given angle.
The gap-greedy algorithm [7] considers pairs of points, again, in order of non-decreasing distances, and includes an edge in the spanner if and only if it does not violate the gap property.
The spanner generated this way has constant degree and total weight O(|MST|).
Compared with our algorithm, our strategy is a relaxation of the gap property in the way that the edges in our spanner may have one of their endpoints arbitrarily close (or at the same points) and we have no restriction on the direction of the edges and the ordering of the edges to be considered.
The proof for the gap greedy algorithm requires heavily plane geometry tools and our proof technique only uses packing argument and can be extended to the general metric setting as long as a similar packing argument holds.
To get these benefit our algorithm has slightly worse upper bounds on the spanner weight by a logarithmic factor.Prior work on compact routing [37,23,3,27,2] usually implies a (1 + ε)-spanner explicitly or implicitly.
Again, these spanners are constructed in a coordinated setting.
Given n points in R d , each point p will check whether an edge pq should be built.
p builds pq only if there does not exist an edge p q such that p and q are within distance |p q | 2(s+1) from p , q respectively.This incremental construction of edges is executed by different agents in a completely uncoordinated manner.
We assume that no two agents perform the above strategy at exactly the same time.
Thus when any agent conducts the above process, the decision is based on the current network already constructed.
The algorithm terminates when all agents finish checking the edges from themselves to all other points.
We first examine the properties of the constructed graph G by these uncoordinated behaviors.
We will discuss in Section 4 a proper complexity model for the uncoordinated construction in a distributed environment and also bound the computing cost of this spanner.Before we proceed, we first realize the following invariant is maintained by the graph G.
The proof follows immediately from the construction of G. that |pp | ≤ |p q |/(2s + 2), |qq | ≤ |p q |/(2s + 2).
2.
For any two edges pq, p q in the constructed graph G, suppose that pq is built before p q , then one of the following is true: |pp | > |pq|/(2s + 2) or |qq | > |pq|/(2s + 2).
To show that the algorithm eventually outputs a good spanner, we first show the connection of G with the notion of well-separated pair decomposition.
Here m is called the size of the WSPD.It is not hard to see that the uncoordinated spanner is equivalent to the following greedy algorithm that computes an s-WSPD.
(p, q), not yet covered by existing pairs in W. 2.
Include the pair of point sets B r (p) and B r (q) in the WSPD W, with r = |pq|/(2+ 2s), where B r (p) is the collection of points within distance r from point p. 3.
Label the point pair (p i , q i ) with p i ∈ B r (p) and q i ∈ B r (q) as being covered.
4.
Repeat the above steps until every pair of points is covered.
Clearly the above algorithm produces a WSPD, as each pair (B r (p), B r (q)) is wellseparated and all pairs of points are covered.
The spanner edge (p, q) is one-to-one correspondence to the well-separated pair (B r (p), B r (q)) in the above algorithmthe rule in Lemma 1 prevented two edges from the same well-separated pair in W to be constructed.
Thus the number of edges in the spanner G is the same as the size of the greedy WSPD.
It is already known that for any well-separated pair decomposition, if one edge is taken from each well-separated pair, then the edges will become a spanner on the original point set [6,5,32,29].
For our specific greedy s-WSPD, we are able to get a slightly better stretch.
The proof is omitted due to space constraint.
(p, q) when it is selected by the greedy algorithm.
Thus G is a spanner with stretch factor (s + 1)/(s − 1).
To make the stretch factor as 1 + ε, we just take s = 1 + 2/ε in our spanner construction.
Next, we show that the greedy WSPD algorithm will output a linear number of well-separated pairs.
We show the connection of the greedy WSPD with a specific WSPD constructed by the deformable spanner [22], in the way that at most a constant number of pairs in W is mapped to each well-separated pair constructed by the deformable spanner.
To be consistent, the greedy WSPD is denoted by W and the WSPD constructed by the deformable spanner is denoted byˆWbyˆ byˆW.Deformable spanner.
Given a set of points P in the plane, a set of discrete centers with radius r is defined to be the maximal set S ⊆ P that satisfies the covering property and the separation property: any point p ∈ P is within distance r to some point p ∈ S; and every two points in S are of distance at least r away from each other.
In other words, all the points in P can be covered by balls with radius r, whose centers are exactly those points in the discrete center set S. And these balls do not cover other discrete centers.We now define a hierarchy of discrete centers in an recursive way.
S 0 is the original point set P .
S i is the discrete center set of S i−1 with radius 2 i .
Without loss of generality we assume that the closest pair has distance 1 (as we can scale the point set and do not change the combinatorial structure of the discrete center hierarchy).
Thus the number of levels of the discrete center hierarchy is log α, where α is the aspect ratio of the point set P , defined as the ratio of the maximum pairwise distance to the minimum pairwise distance, that is, α = maxu,v∈P |uv|/ min u,v∈P|uv|.
Since a point p may stay in multiple consecutive levels and correspond to multiple nodes in the discrete center hierarchy, we denote by p (i) the existence of p at level i. For each point p (i−1) ∈ S i−1 on level i, it is within distance 2 i from at least one other point on level i + 1.
Thus we assign to p (i−1) a parent q (i) in S i such that |p (i−1) q (i) | ≤ 2 i .
When there are multiple points in S i that cover p (i−1) , we choose one as its parent arbitrarily.
We denote by P (p (i−1) ) the parent of p (i−1) on level i.
We denote by P (i) (p) = P (P (i−1) (p)) the ancestor of p at level i.The deformable spanner is based on the hierarchy, with all edges between two points u and v in S i if |uv| ≤ c · 2 i , where c is a constant equal to 4 + 16/ε.
We restate some important properties of the deformable spanner below.Lemma 2 (Packing Lemma [22]).
In a point set S ⊆ R d , if every two points are at least distance r away from each other, then there can be at most (2R/r + 1) d points in S within any ball with radius R.Lemma 3 (Deformable spanner properties [22]).
For a set of n points in R d with aspect ration α,1.
For any point p ∈ S 0 , its ancestor P (i) (p) ∈ S i is of distance at most 2 i+1 away from p. S i .
3.
The deformable spannerˆGspannerˆ spannerˆG is a (1 + ε)-spanner G with O(n/ε d ) edges.
4.
ˆ G has total weight O(|MST| · lg α/ε d+1 ),where |MST| is the weight of the minimal spanning tree of the point set S.As shown in [22], the deformable spanner implies a well-separated pair decompositionˆWtionˆ tionˆW by taking all the 'cousin pairs'.
Specifically, for a node p (i) on level i, we denote by P i the collection of points that are descent of p (i) (including p (i) itself), called the decedents.
Now we take the pair (P i , Q i ), the sets of decedents of a cousin pair p (i) and q (i) , i.e., p (i) and q (i) are not neighbors in level i but their parents are neighbors in level i + 1.
This collection of pairs constitutes a 4 ε -well-separated pair decomposition.
The size ofˆWofˆ ofˆW is bounded by the number of cousin pairs and is O(n/ε d ).
Size of greedy WSPD.
The basic idea is to map the pairs in the greedy WSPD W to the pairs inˆWinˆ inˆW and show that at most a constant number of pairs in W map to the same pair inˆWinˆ inˆW.
Proof.
Choose c = 4(s + 1) (or, s = c/4 − 1) in the deformable spanner DS.
The size ofˆWofˆ ofˆW is O(ns d ).
Now we will construct a map from W tô W. Each pair {P, Q} in W is created by considering the points inside the balls B r (p), B r (q) with radius r = |pq|/(2 + 2s) around p, q.
Now we consider the ancestors of p, q in the spanner DS respectively.
There is a unique level i such that the ancestor u i = P (i) (p) and v i = P (i) (q) do not have a spanner edge in between but the ancestor u i+1 = P (i+1) (p) and v i+1 = P (i+1) (q) have an edge in between.
The pair u i , v i is a cousin pair by definition and thus the decedents of them correspond to an s-well-separated pair inˆWinˆ inˆW.
We say that the pair (B r (p), B r (q)) ∈ W maps to the descendant pair(P i , Q i ) ∈ ˆ W.By the discrete center hierarchy (Lemma 3), we show that,|pq| ≥ |u i v i | − |pu i | − |qv i | ≥ |u i v i | − 2 · 2 i+1 ≥ (c − 4) · 2 i .
The last inequality follows from that fact that u i , v i do not have an edge in the spanner and |u i v i | > c · 2 i .
On the other hand,|pq| ≤ |pu i+1 | + |u i+1 v i+1 | + |qv i+1 | ≤ 2 · 2 i+2 + c · 2 i+1 = 2(c + 4) · 2 i .
The last inequality follows from the fact that u i+1 , v i+1 have an edge in the spanner and|u i+1 v i+1 | ≤ c · 2 i+1 .
Similarly, we have c · 2 i < |u i v i | ≤ |u i u i+1 | + |u i+1 v i+1 | + |v i v i+1 | ≤ 2 · 2 i+1 + c · 2 i+1 = 2(c + 2) · 2 i .
Therefore the distance between p and q is c · |ui v i |, where (c − 4)/(2c + 4) ≤ c ≤ (2c + 8)/c.Now suppose two pair (B r 1 (p 1 ), B r 1 (q 1 )), (B r 2 (p 2 ), B r 2 (q 2 )) in W map to the same pair u i and v i by the above process.
Without loss of generality suppose that p 1 , q 1 are selected before p 2 , q 2 in our greedy algorithm.
Here is the observation:1.
|p 1 q 1 | = c 1 · |u i v i |, |p 2 q 2 | = c 2 · |u i v i |, r 1 = |p 1 q 1 |/(2 + 2s) = c 1 · |u i v i |/(2 + 2s), r 2 = c 2 · |u i v i |/(2 + 2s), where (c − 4)/(2c + 4) ≤ c 1 , c 2 ≤ (2c + 8)/c, and r 1 , r 2 are the radius of the balls for the two pairs respectively.
2.
The reason that (p 2 , q 2 ) can be selected in our greedy algorithm is that at least one of p 2 or q 2 is outside the balls B(p 1 ), B(q 1 ), by Lemma 1.
This says that at least one of p 2 or q 2 is of distance r 1 away from p 1 , q 1 .
Now we look at all the pairs (p , q ) that are mapped to the same ancestor pair (u i , v i ).
The pairs are ordered in the same order as they are constructed, i.e., p 1 , q 1 is the first pair selected in the greedy WSPD algorithm.
Suppose r min is the minimum among all radius r i .
r min ≥ c/(2c + 8) · |u i v i |/(2 + 2s) = |u i v i |/(4s + 8).
We group these pairs in the following way.
The first group H 1 contains (p 1 , q 1 ) and all the pairs (p , q ) that have p within distance r min /2 from p 1 .
We say that (p 1 , q 1 ) is the representative pair in H 1 and the other pairs in H 1 are close to the pair (p 1 , q 1 ).
The second group H 2 contains, among all remaining pairs, the pair that was selected in the greedy algorithm the earliest, and all the pairs that are close to it.
We repeat this process to group all the pairs into k groups, H 1 , H 2 , · · · , H k .
For all the pairs in each group H j , we have one representative pair, denoted by (p j , q j ) and the rest of the pairs in this group are close to it.We first bound the number of pairs belonging to each group by a constant with a pack argument.
With our group criteria and the above observations, all p in the group H j are within radius r min away from each other.
This means that the q 's must be far away -the q 's must be at least distance r min away from each other, by Lemma 1.
On the other hand, all the q 's are descendant of the node v i , so |v i q | ≤ 2 i+1 by Theorem 3.
That is, all the q 's are within a ball of radius 2 i+1 centered at v i .
By the packing Lemma 2, the number of such q 's is at most(2 · 2 i+1 /r min + 1) d ≤ (2 · 2 i+1 (4s + 8)/|u i v i | + 1) d ≤ (4(s + 2)/(s + 1) + 1) d.
This is also the bound on the number of pairs inside each group.
Now we bound the number of different groups, i.e., the value k. For the representative pairs of the k groups, (p 1 , q 1 ), (p 2 , q 2 ), · · · , (p k , q k ), all the p i 's must be at least distance r min /2 away from each other.
Again these p i 's are all descendant of u i and thus are within distance 2 i+1 from u i .
By a similar packing argument, the number of such p i 's is bounded by ( The uncoordinated spanner construction can be applied for peer-to-peer system design, to allow users to maintain a spanner in a distributed manner.
For that, we will first extend our spanner results to a metric with constant doubling dimension.
The doubling dimension of a metric space (X, d) is the smallest value γ such that each ball of radius R can be covered by at most 2 γ balls of radius R/2 [25].
Distributed construction.
Now we would like to discuss the model of computing for P2P overlay design as well as the construction cost of the uncoordinated spanner.
We assume that there is already a mechanism maintained in the system such that any node x can obtain the distance to any node y in O(1) time.
For example, this can be done by a TRACEROUTE command executed by x to the node y.
We also assume that there is a service answering near neighbor queries: given a node p and a distance r, return the neighbors within distance r from p.
Such an oracle is often maintained in a distributed file sharing system.
Various structured P2P system support such function with low cost [30].
Even in unstructured system such as BitTorrent, the Ono plugin is effective at locating nearby peers, with vanishingly small overheads [1].
The spanner edges are recorded in a distributed fashion so that no node has the entire picture of the spanner topology.
After each edge pq is constructed, the peers p, q will inform their neighboring nodes (those in B r (p) and B r (q) with r = |pq|/(2s + 2)) that such an edge pq exists so that they will not try to connect to one another.
We assume that these messages are delivered immediately so that when any newly built edge is informed to nodes of relevance.
The number of messages for this operation is bounded by |B r (p)| + |B r (q)|.
The amount of storage at each node x is proportional to the number of well-separated pairs that include x.
The following theorem bounds the total number of such messages during the execution of the algorithm and the amount of storage at each node.
Although the spanner topology is implicitly stored on the nodes with each node only knows some piece of it, we are actually able to do a distributed and local routing on the spanner with only information available at the nodes such that the path discovered has maximum stretch (s + 1)/(s − 1).
In particular, for any node p who has a message to send to node q, it is guaranteed that (p, q) is covered by a wellseparated pair (B r (p ), B r (q )) with p ∈ B r (p ) and q ∈ B r (q ).
By the construction algorithm, the edge p q , after constructed, is informed to all nodes in B r (p ) ∪ B r (q ), including p. Thus p includes in the packet a partial route with {p p , p q , q q}.
The notation p p means that p will need to first find out the low-stretch path from p to the node p (inductively), from where the edge p q can be taken, such that with another low-stretch path to be found out from q to q, the message can be delivered to q.
This way of routing with partial routing information stored with the packet is similar to the idea of source routing [38] except that we do not include the full routing path at the source node.
By the same induction as used in the proof of spanner stretch (Theorem 1), the final path is going to have stretch at most (s + 1)/(s − 1).
Nearest neighbor search.
We remark that with the spanner each node can easily find its nearest neighbor.
Recall that each point x keeps all the pairs (p, q) that create a 'dumb-bell' pair set covering x.
Then we claim, among all these p, one of them must be the nearest neighbor of x. Otherwise, suppose y is the nearest neighbor of x, and y is not one of p.
But in the WSPD, (x, y) will belong to one of the pair set (P i , Q i ), which correspond to a pair (p , q ).
Then there is a contradiction, as |xp | < |xy| implies that y is not the nearest neighbor of x. Thus one's nearest neighbor is locally stored at this node already.
According to Theorem 5, x will belong to at most O(s d lg α) different pair sets.
So the nearest neighbor search can be finished in O(s d lg α) time by using just the local information.
