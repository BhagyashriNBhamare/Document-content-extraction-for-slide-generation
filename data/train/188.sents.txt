In this paper, we present some new results on the selective discrete Fourier spectra attack, introduced first as the recent Rønjom-Helleseth attack and the modifications due to Gong et al.
The focal point of this paper is to fill some gaps in the theory of analysis in terms of discrete Fourier transform (DFT).
We first analyze a special case of the selective DFT method which the previously introduced algorithm does not account for.
We then proceed by introducing fast selective DFT attacks, which are closely related to the fast algebraic attacks in the literature.
However, in contrast to the classical view that successful algebraic crypt-analysis of LFSR-based stream cipher depends on the degree of certain annihilators, we show that analysis in terms of the DFT spectral properties of the sequences generated by these functions is far more refined.
It is shown that the fast selective DFT attack is more efficient than known methods for the case when the number of observed consecutive bits of a filtering sequence is less than the linear complexity of the sequence.
Thus, by utilizing the natural representation imposed by the underlying LFSRs, we show in general that analysis in terms of DFT spectra is more efficient and has more flexibility than classical and fast algebraic attacks.
Consequently, the selective DFT attack imposes a new criterion for the design of cryptographic strong Boolean functions, which is defined as the spectral immunity of a sequence or a Boolean function.
Linear feedback shift register (LFSR) sequences are widely used as basic functional blocks in key stream generators in stream cipher models due to their fast implementation in hardware as well as in software in some cases.
Examples include filtering sequence generators, combinatorial sequence generators, clockcontrolled sequence generators, and shrinking generators.
The classical treatment can be found in [26].
In practice, E0 [7] and several of the submissions in eStream Project [11] are such examples.
For an LFSR based stream cipher, the initial states of the LFSRs serve as a cryptographic key in each communication session.
The goal of an attack is to recover the key from some known bits of the keystream.
Consequently, the remaining bits of the keystream used in that session can be recovered and can be used in subsequent communication by only changing the known IV each time.
There are many proposed attacks on LFSR based stream ciphers in the literature.
However, in this paper, we will primarily restrict ourselves to the recently proposed algebraic attacks [1] [10], the fast algebraic attack, and its improvements or variants [2,3,12].
These attacks usually contain three steps: (a) pre-computation, (b) substitution for establishing a system of low-degree equations over F 2 or F 2 n from known keystream bits, and (c) solving the system.In 2003, Courtois [9] proposed the fast algebraic attack (FAA) on stream ciphers to accelerate the algebraic attack by identifying linear relations among the key stream bits.
Compared with solving a system of equations directly by linearization and Gaussian elimination, the fast algebraic attack reduces the solving complexity by decreasing the total degree of the equation system, thus reducing the number of monomials in the system and the required number of keystream bits.
The efficiency of the pre-computation and substitution in the fast algebraic attack is improved by Hawkes and Rose [12] for filtering sequence generators and Armknecht [2] for combinatorial sequence generators with or without memory, respectively.
Along this line, Armknecht and Ars [3] introduced a variant of the FAA which reduced the number of required consecutive bits of the key stream, but leaves the number of unknowns unchanged.
More recently, Rønjom and Helleseth [22] introduced the linear subspace attack, to recover the initial state of a filtering sequence generator.
The attacker solves a linear system of n equations in n (n typically 128 or 256) unknowns over F 2 after applying a function on L bits of the keystream, where the total complexity of the attack is given by O(L), L ≤ D, where D is the number of monomials in the system.
The attack is by far more efficient than the original algebraic attack and fast algebraic attack, but needs more keystream when compared to fast algebraic attack.
Shortly after that, Rønjom, Gong, and Hellseth generalized the linear subspace attack by forming a system of linear equations over F 2 n instead [24], thus introducing more freedom in the attack which allows to cover some special cases where the original attack does not work directly.In this paper we introduce fast selective discrete Fourier transform (DFT) attacks, which analogously to FAA-attacks seeks to reduce the number of unknowns in the resulting equation system.
However, when interpreted in terms of the DFT of the keystream sequence we show that the resulting attack is more efficient than the standard FAA-algebraic attack.
Furthermore, it works for the case when the known attacks fail, when the Boolean functions employed in filtering sequence generators are well-designed for meeting cryptographic requirements.
This also imposes a new criterion for the design of key stream generators.
As an analogue to the algebraic immunity of a Boolean function, the new criterion is referred to as the spectral immunity of a sequence or a Boolean function.
In general speaking, algebraic attacks can be considered as attacks in the time domain, while (fast) selective DFT attacks are the attacks launched in the DFT frequency domain.
The remarkable phenomenon is that with such an attack launched in the frequency domain, the number of unknowns in the system of linear equations is invariant.
However, in the algebraic attacks or fast algebraic attacks, this number is changed at different time instances.
We will provide the discussion of this phenomenon in details in Section 5.
This paper is organized as follows.
Section 2 introduces basic definitions and results which will be used throughout this paper.
In Section 3, we introduce the concept of selective DFT filters.
Determining the DFT of a coordinate scaled sequence is equivalent to recovering the initial states of LFSRs based stream ciphers.
In Section 4, we briefly reiterate the original algorithm from [24] for solving this problem given the DFT of the original sequence and m consecutive bits of the coordinate scaled sequence for m equal to the linear complexity of the sequence.
Then we present an algorithm for solving this problem when m is less than the linear complexity, referred to as a fast selective DFT attack in order to emphasize its relation to fast algebraic attacks.
Section 5 shows the applications of these algorithms to filtering sequence generators, as well as the comparison with the known methods.
A new criterion for the design of LFSR based stream ciphers for being resistant to these new attacks, called the spectral immunity of a sequence or a Boolean function, is introduced in Section 6, and some basic properties of spectral immunity are provided in the same section.
Finally, Section 7 concludes this paper.
Let t(x) = x n + c n−1 x n−1 + · · · + c 1 x + 1 be a polynomial over F 2 .
A sequence a = {a t } is called an LFSR sequence of degree n if it satisfies the following recursive relationa n+k = n−1 i=0 c i a k+i , k = 0, 1, · · · .
(1)(a 0 , · · · , a n−1 ) is the initial state of the LFSR which generates a. t(x) is called a characteristic polynomial of a, and the reciprocal of t(x) is referred to as a feedback polynomial of a.
We also say that a is generated by t(x).
The sequence a is an m-sequences if t(x) is primitive [14].
The minimal polynomial of a is a polynomial with smallest degree which generates a. Let m(x) be the minimal polynomial of a, then m(x) | t(x).
The linear complexity (or linear span) of a is the degree of m(x), denoted by l(a).
In general, m(x) can be found using the Berlekamp-Massey algorithm [4,18] from any 2l(a) consecutive bits of a if the linear complexity is known.
The (Left cyclically) shift operator L is defined by La = a 1 , a 2 , · · · , and L r a = a r ,a r+1 , · · · , r ≥ 1.
If b = L r a, then we say that they are shift equivalent, and b is a shift of a. Otherwise, they are shift distinct.
A sequence a = {a t } is generated by f (x) if and only if f (L)a = 0, where 0 is the zero sequence.
Henceforth, we fix some notations for convenience.-N : a positive integer; -n: the smallest integer such that N | 2 n − 1; -F q : a finite field with q elements; -a = {a t }: a binary sequence with period N (it is not necessary that N is the least period of a); -l(a): the linear complexity of a; -α: an element in F 2 n with order N ; -n s : the smallest number t such that s ≡ s2 t (modN ); -C s : the cyclotomic coset containing s2 i modulo N , i.e.,C s = {s2 i (mod N ) | i = 0, 1, · · · , n s − 1}.
The smallest number in C s is called the coset leader of C s .
Without loss of generality, we can assume that s is the coset leader of C s .
-P : the set containing all the conjugates in P , i.e., P = ∪ k∈P C k , where P is a subset of the set consisting of all coset leaders modulo N .
The Discrete Fourier Transform (DFT) of {a t } is defined byA k = N −1 t=0 a t α −tk , k = 0, 1, . . . , N − 1.
(2)The inverse DFT is given bya t = N −1 k=0 A k α kt , t = 0, 1, . . . , N − 1.
(3)Note that the sequence {A k } is a sequence over F 2 n , and it is called a DFT spectral sequence of a (with respect to α) or DFT spectra for short.
LetA(x) = N −1 k=0 A k x k .
Then a t = A(α t ).
Furthermore, A(x) can be written into a more compact form asA(x) = k T r n k 1 (A k x k )(4)anda t = k T r n k 1 (A k α tk ), t = 0, 1, ..., N − 1 (5)where the k's are coset leaders modulo N , n k | n is the size of C k , and T r n k 1 (x) is a trace function from F 2 n k to F 2 .
This is referred to as a trace representation of {a t }.
From now on, we may use T r(x) for all trace monomial terms in A(x) for simplicity, where the exact meaning of T r(x), i.e., from which field to F 2 , depends on the size of the coset containing k.
In this paper, we use (3), (4), and (5) interchangeably.
Note that in the trace representation of a, only the monomial trace terms which correspond to A k = 0 are listed in the summation.Example 1.
Let N = 15, and α be a primitive element in F 2 4 with α 4 +α+1 = 0.
Sequence DFT Spectral Sequence Trace Representation Linear Complexity a =000100110101111 {A k }=011010001000000 A(x) = T r(x) 4 at = T r(α t ) b =111011000101001 {B k }=011α 1 0 α 2 α 6 1α 8 0α 3 α 4 α 9 α 12 B(x) = T r(x + αx 3 + α 6 x 7 ) 12 bt = B(α t ) Let N a = {k | A k = 0, k is a coset leader mod N }, p k (x)be the minimal polynomial of α k over F 2 , and p(x) be the minimal polynomial of a.
We use the notation N * a to denote the set of nonzero coset leaders in N a .
Fact 1 ( [6,15]) With the same notations as above, let N = 2 n − 1,1.
Conjugate property.
A k2 j = A 2 j k , j = 0, 1, · · · , n k − 1.
2.
Decomposition property.
For each k such that A k = 0, let a k = {T r(A k α tk )} t≥0 ,then a k is a sequence with period N/ gcd(k, N ), and the minimal polynomial of a k is equal to the minimal polynomial of α k , i.e., p k (x) = n k −1 i=0 (x+α 2 i k ), which is irreducible over F 2 of degree n k , where n k |n.3.
If gcd(k, n) = 1, then a k is an m-sequence.
Let p(x) be the minimal polyno- mial of a.
Then p(x) = k,A k =0 p k (x), and a = k,A k =0 a k .
4.
The linear complexity of a is equal to the number of nonzero spectra of a, i.e., l(a) = k:A k =0 n k .
Definition 1.
If the sequence b = {b t } is given by b t = A(βα t ), t = 0, 1, · · · , β ∈ F 2 n , then it is called a coordinate scaled sequence of a.If the sequence b = {b t } is a coordinate scaled sequence of a, then the DFT of b is given byB k = β k A k , 0 ≤ k < N(6)for some β ∈ F 2 n , i.e., B(x) = A(βx).
Note that the coordinate scale operator does not change the minimal polynomial of a, nor the linear complexity.
For the theory of LFSR sequences and their DFT spectra, the reader is referred to [14,15].
over F 2 n and F 2Let P be a subset of the set of coset leaders modulo N , and 0 ∈ P .
Now we consider the following system of equations with unknowns Y k :k∈P T r n k 1 (Y k γ t,k ) = v t , t = 0, 1, · · · , |P | − 1,(7)where 0 = γ t,k ∈ F 2 n k .
Using the idea in [16], for anyk ∈ P , {1, α k , α 2k , ..., α (n k −1)k } is a basis of F 2 n k over F 2 .
Hence Y k can be written as the form of x k,0 + x k,1 α k + ... + x k,n k −1 α (n k −1)k , where x k,i ∈ F 2 .
Hence (7) can be converted into the following system of equations over F 2 with |P | variablesk∈P n k −1 j=0 x k,j T r n k 1 (γ t,k α jk ) = v t , t = 0, 1, · · · , |P | − 1.
(8)Lemma 1.
With the notations as above, if (7) has solutions for Y k , k ∈ P , then {Y k } k∈P can be computed by (8), the system of equations over F 2 , whereY k = n k −1 j=0 x k,j α jk .
The results presented below are fundamental for launching selective DFT or fast selective DFT attacks in the following sections.Lemma 2.
Let q(x) = r i=0 c i x i be a polynomial over F 2 of degree r. Let v = q(L)a, and let {A k } and {V k } be the respective DFT spectra of a and v. ThenV k = A k q(α k ), 0 ≤ k < N .
Proof.
From the inverse of DFT given by (3), we havea t = N −1 k=0 A k α tk , t = 0, 1, · · · .
Thus v t = r i=0 c i a i+t = r i=0 c i N −1 k=0 A k α (i+t)k = N −1 k=0 A k α tk r i=0 c i α ik = N −1 k=0 A k α tk q(α k ).
According to Lemma 2 and Fact 1, we have the following cases for the DFT of v.(a) Two Extreme Cases:• Case 1: p(x) | q(x).
Recall that p(x) is the minimal polynomial of a. Thus q(α k ) = 0 for any k ∈ N a .
Hence V k = 0, 0 ≤ k < N which means that v is the zero sequence.
• Case 2: gcd(p(x), q(x)) = 1.
Then q(α k ) = 0 for any k ∈ N a .
Therefore V k = q(α k )A k = 0 ⇐⇒ q(α k ) = 0 ⇐⇒ k ∈ N a \ T .
For the selective case, by applying q(x) to a, the nonzero DFT spectra of the resulting sequence is equal to a subset of the nonzero DFT spectra of a. Thus the linear complexity of v is less than or equal to the linear complexity of a.
The functionality of q(x) here is analog to filters used in communication systems for selecting frequency band for increasing or reducing bandwidth of transmitted signals.
Thus q(x) is referred to as a selective DFT filter of a, and annihilates a subspace generated by some selected factors of the minimal polynomial of a.
We summarize the above discussion into the following theorem.
Theorem 1.
With the same notations as above, for t = 0, 1, · · · , we havev t =    0, p(x) | q(x); k∈Na T r(q(α k )A k α tk ), c(x) = 1; k∈Na\T T r(q(α k )A k α tk ), c(x) = 1, and c(x) = p(x).
Let s = {s t } and b = {b t } be two sequences with period N , and u = {u t } be a term by term product sequence defined by u t = s t b t , t = 0, 1, ..., N − 1.
Let the DFT spectra of b and u be {B k } and {U k }, respectively.Suppose thatN u ⊂ N b .
Let q(x) = k∈Nu\N b p k (x), where p k (x) is the min- imal polynomial of α k .
Then the degree of q(x) is r = |N u \N b |.
We denote q(x) by q(x) = r i=0 c i x i .
For t = 0, 1, ..., l(b) − 1, put f t (x) = r i=0 c i s i+t x i .
Apply- ing q(L) to u, i.e., q(L)u = v, we have v t = r i=0 c i u i+t for t = 0, 1, · · · , l(b)−1.
Lemma 3.
With the notations as above, we havek∈N b T r(B k f t (α k )α tk ) = k∈N b T r(U k q(α k )α tk ), t = 0, 1, · · · , l(b) − 1.
In particular, if q(x) is the minimal polynomial of u, thenk∈N b T r(B k f t (α k )α tk ) = 0, t = 0, 1, · · · , l(b) − 1.
Proof.
For t = 0, 1, · · · , l(b) − 1, we have v t = r i=0 c i s i+t b i+t = r i=0 c i s i+t k∈N b T r(B k α (i+t)k ) = k∈N b T r(B k f t (α k )α tk ).
By Lemma 2, the result follows.
8 Recall that A(x) = k T r n k 1 (A k x k ) and a t = A(α t ).
Let s be a coordinate scaled sequence of a.
In the following, we discuss how to compute the DFT of s given {A k } and m consecutive bits of s. From (6), we know that S k = β k A k for certain β ∈ F 2 n , i.e., s t = A(βα t ).
Thus it is enough to find β.
In the following, we first show how to solve this problem for m = l(s) by rephrasing the algorithm from [22,24] in terms of the DFT, and then present a new algorithm for the case of m < l(s).
This case is already covered by the authors in [22,24], but we repeat it here for the sake of completeness, and to cover a special case which has not been covered before.
The sequence s has the same nonzero spectral index set as a since s is a coordinate scaled sequence of a, i.e., N s = N a , so we use N s for both sequences.
v t = T r(θα tk ), t = 0, 1, · · · , n − 1, where θ = A k q(α k )β k .
(9)Solve the above system of n linear equations with unknown θ in terms of solvingH ·     x 0 x 1 ... x n−1     =     v 0 v 1 ... v n−1    where θ = n−1 i=0 x i α ik by Lemma 1.3.
If gcd(k, N ) = 1, then β can be computed byβ = θ k [A k q(α k )] −k , where k = k −1 (mod N ).
Return β.
If gcd(k, N ) > 1, compute β k = θ[A k q(α k )] −1 and S k = β k A k .
Return S k .
The computation of p(x), p k (x), q(x) in Steps 1 and 2 in the pre-computation can be done by adopting the method in [2,12].
One notable characteristic of Algorithm 1 is that the most cost of computation occurs in the pre-computation.
In this subsection, we introduce the fast selective DFT attack which is analogous to fast algebraic attack.
From Lemma 3, we have the following algorithm to recover the scale factor β when the number of known consecutive bits of s is less than l(s).
Input: {A k } and m consecutive bits of s. Output: β, the scalar factor in the DFT of s, or β k for all k ∈ N b (b will be explained later.)
.
1.
Select b = {b t } and u = {s t b t } which satisfy the following condition:|N b ∪ N u | < l(s).
(10)(Note that here we only consider the case of B 0 = 0 and U 0 = 0.
The other cases can be handled similarly.
For simplicity, we omit them.)
2.
Compute q(x) = k∈Nu\N b p k (x), and q(α k ), where k ∈ N b .
We denote q(x) by q(x) = r i=0 c i x i .
(Note that here we only consider the case of N u ⊂ N b which is practical.)
Procedure 1.
For t = 0, 1, · · · , l(b) −1, using the known bits s 0 , · · · , s m−1 , compute f t (α k ) for k ∈ N b , where f t (x) = r i=0 c i s i+t x i .
2.
Applying q(L) to u, by Lemma 3, we have k∈N b T r(β k (B k f t (α k ) + U k q(α k ))α tk ) = 0, t = 0, 1, · · · , l(b) − 1.
(11) if N b ⊂ N u , or k∈N b T r(β k B k f t (α k )α tk ) = 0, t = 0, 1, · · · , l(b) − 1,(12)if N b ⊂ N u .
Compute the coefficient matrix of (8) in the case of P = N b , i.e., (11), and γ t,k = B k f t (α k )α tk for (12).
3.
Solve the above system of l(b) linear equations over F 2 with l(b) variables.
4.
If there is a k ∈ N b with gcd(k, N ) = 1, then return β = (β k ) k , whereY k = β k , γ t,k = (B k f t (α k ) + U k q(α k ))α tk fork = k −1 (mod N ); otherwise, return {β k | k ∈ N b }.
In Algorithm 2, the number of required consecutive bits from s is at most l(u) + l(b).
The complexity in Step 1 of the pre-computation is contributed from the cost for finding the multiplier sequence b which satisfies (10).
If there is no such a sequence, then this method won't work.
Thus we exclude this case.
This is a similar case as in the algebraic attack or the fast algebraic attack for finding a multiplier polynomial in which the cost for finding those multipliers are not counted [9].
In the following, we demonstrate this attack by one example.
which means that b and u satisfy (10).
We compute q(x) = p 1 (x)p 15 (x) = x 10 + x 8 + x 7 + x 5 + x 3 + x 2 + 1, and f t (x) = 10 i=0 c i s i+t x i for t = 0, 1, 2, 3, 4, where 10 i=0 c i x i = q(x).
Then we have Let B 3 β 3 = x 0 + x 1 α + x 2 α 2 + x 3 α 3 + x 4 α 4 .
Then we need to solve the equationf 0 (x) = x 8 + x 7 + x 5 + x 3 , f 1 (x) = x 7 + x 5 + x 3 + x 2 , f 2 (x) = x 10 + x 5 + x 3 + x 2 , f 3 (x) = x 10 + x 5 + x 3 + x 2 + 1, f 4 (x) = x 8 + x 3 + x 2 + 1.
It follows that f 0 (α 3 ) = α 4 , f 1 (α 3 ) = α 12 , f 2 (α 3 ) = α 9 , f 3 (α 3 ) =αA ·       x 0 x 1 x 2 x 3 x 4       =       0 0 0 0 0       , where A =     T r(α 2 ) T r(α 3 ) T r(α 4 ) T r(α 5 ) T r(α 6 ) T r(α 4 ) T r(α 5 ) T r(α 6 ) T r(α 7 ) T r(α 8 ) T r(α 15 ) T r(α 16 ) T r(α 17 ) T r(α 18 ) T r(α 19 ) T r(α 18 ) T r(α 19 ) T r(α 20 ) T r(α 21 ) T r(α 22 )     =     0 0 0 1 0 0 1 0 1 0 0 0 0 1 1 1 1 1 1 1     .
The solutions are given by      x 0 x 1 x 2 x 3 x 4       =       0 0 0 0 0       or       1 0 1 0 0       .
Hence β = 0 or 1, and β = 1 is the right answer indeed.Remark 1.
In Algorithm 2, we also can select b such that sb = 0.
In this case, we have a system of equations in B k β k as k∈N bT r(B k β k α tk ) = 0 for t such that s t = 1.
This is a similar case as the algebraic attack, and Algorithm 2 is a similar case as the fast algebraic attack.
Those comparisons will be given in details in the next section.
In this section, we show how to apply both algorithms presented in Section 4 for recovering an initial state of a filtering sequence generator and the comparison of the selective DFT attack with the known attacks.
Let w = {w t } be an msequence of period N = 2 n − 1 with trace representation T r(βx) and w t = T r(βα t ), t = 0, 1, · · · , β ∈ F 2 n , where α is a primitive element in F 2 n .
Let 0 ≤ d 0 < d 1 < · · · < d r−1 < n, where r ≤ n.
A filtering sequence s = {s t } with parameters ((w, β), f, d 0 , d 1 , · · · , d r−1 ) is defined bys t = f (w d0+t , w d1+t , · · · , w dr−1+t ), t = 0, 1, · · ·(13)where f (x 0 , x 1 , · · · , x r−1 ) is a boolean function with r variables.
We denote K = (k 0 , · · · , k n−1 ) as an initial state of w, where k i ∈ F 2 .
Thus we haves t = f (L t (k 0 , k 1 , · · · , k n−1 )) = f t (k 0 , · · · , k n−1 ), t = 0, 1, · · ·(14)wheref t (x 0 , · · · , x n−1 ) = f (L t (x 0 , · · · , x n−1 )).
Sometimes we also write s t = f (L t (K)) or s t = f t (K) for short.
If K can be recovered from some known bits of {s t }, then the remaining bits of {s t } can be reconstructed.
Since w t = T r(βα t ), t = 0, 1, · · · , n − 1, then recovering the initial state of the LFSR is equivalent to recover β.
Let H(k) denote the Hamming weight of k, and Γ k = {coset leaders s modulo N | H(s) ≤ k}.
Then|Γ k | = k i=0 n i. Furthermore, the DFT of {s t } has the following property:S k = 0 for H(k) > deg(f ).
Thus N s ⊂ Γ deg(f ) .
(15)Let a be the filtering sequence corresponding to β = 1 in the initial state of the LFSR.
Then s is a shift of a. Note that there are several ways for determining N a [22,21].
So we assume that N s (= N a ) is known.
Let m represent the number of known consecutive bits of s.
We assume that N s satisfies one of the following conditions.
(a) There is at least one k ∈ N s such that gcd(k, N ) = 1, or (b) there are t indexes k 1 , k 2 , ..., k t ∈ N s such that t i=1 a i k i (mod N ) is coprime with N , where a i are nonzero integers.By applying Algorithm 1 to s, if the condition (a) is true, then we choose q(x) = p(x)/p k (x).
So, Algorithm 1 returns β.
Thus the initial state of the LFSR is recovered by T r(βα i ), i = 0, 1, · · · , n−1.
If the condition (a) is not true, but the condition (b) is true, we then select those t indexes, and run Algorithm 1 t times.
Thus we obtain β k1 , β k2 , ..., β kt .
Consequently β = (β a1k1 β a2k2 ...β atkt ) h where h = ( t i=1 a i k i ) −1 (mod N ).
So, the initial state of the LFSR is recovered.
Note that the pre-computation is only done once for the system.
After this, the attacking complexity is the complexity of solving a system of linear equations over F 2 in n unknowns which is at most O(n w ) provided that l(s) consecutive bits of s is known for each communication session, where w can be taken to be Strassen's reduction exponent w = log 2 (7) ≈ 2.807.
This is the most efficient attack currently known for the case that l(s) consecutive bits of s are available to an attacker.In the following, we interpret the results presented by Rønjom and Helleseth in 2006 [22] and Rønjom, Gong, and Helleseth in 2007 [24] under the language of the selective DFT method.
(i) In [22], q(x) = p(x)/p 1 (x).
So, q(L) removes all DFT spectra of s except for S 1 if it is not zero, i.e., 1 ∈ N s .
Thus this attack will fail in some special cases when S 1 = 0, which occur with a very small probability.
(ii) In [24], q(x) = p(x)/p k (x).
So, q(L) removes all DFT spectra except for S k for some k with A k = 0 and gcd(k, N ) = 1.
It will not work if there is no such k in N s .
(iii) The new result for a special case: if all spectral indexes in N s are not co-prime with N , but there are t indexes k 1 , k 2 , ..., k t ∈ N s such that t i=1 a i k i (mod N ) is coprime with N , where a i are nonzero integers.
Thus the selective DFT attack works.
The selective DFT method of Algorithm 2 works if there are b and u which satisfy the condition (10).
Here, we assume that there exists such sequences b and u in order to launch this attack.
This is a similar case as in the algebraic attack or the fast algebraic attack on filtering sequence generators.Using Algorithm 2, we obtain {β k | k ∈ N b }.
Then we recover β.
Consequently, T r(βα i ), i = 0, 1, · · · , n − 1, the required initial state of the LFSR or the key in the filtering sequence generator.
It requires at most l(b) + l(u) consecutive bits of s to recover the initial state of the LFSR.
We first interpret the fast algebraic attack (FAA) introduced by Courtois in [9] and its variant by Armknecht and Ars in [3] by the language of the selective DFT method.
Then we show the comparison of the new method with the FAA/variant.
Let M r = k∈Γr p k (x).
(i) In [9], s t g t (K) = h t (K), where h = f g with d = deg(h), e = deg(g), and d > e, and q(x) = M d , which results in v = 0, i.e., q(x) removes all the nonzero spectra of u. (ii) In [3], q(x) = M d /M e .
In this case, q(x) removes all possible nonzero spectra of u which do not belong to the set of possible nonzero spectra of b (note that N b ⊂ Γ e and N u ⊂ Γ d ).
(iii) For u = sb, in general, this results in a system of linear equations of unknowns β k , where k ∈ N b .
By applying the selective DFT filter to both sides of the identity u = sb, the selective DFT filter remove the nonzero spectra of u which are not those of b. Case (i) removes all nonzero spectra of u.
This is not necessary as we explained above.
Case (ii) considered this problem.
In Algorithm 2, we refine this using the DFT spectra of u and b instead of using Γ i , where i = d, e. (iv) The complexity of both FAA and the variant, not including pre-computation, is to solve a system of linear equations over F 2 with T e variables.
Algorithm 2 needs to solve a system of linear equations over F 2 n which can be converted into a system of linear equations over F 2 with l(b) variables.
Note that the pre-computation only needs to be done once for the system.
Thus the selective DFT is more efficient than the FAA and its variant if l(b) T e .
The comparison of the selective DFT attack with the FAA and its variant is shown in Table 1 m m deg(q) (x, y) FAA/Variant Te + (T d − δTe) Te T d − δTe (F2, Te) Selective DFT l(b) + deg(q) l(b) l(u) − l(b) ≤ deg(q) ≤ l(u) (F2, l(b)) AttackThe best case: l(u) where l(u) < T d The best case: (F2, n) (i) The FAA/variant works on a boolean function domain where the unknowns are monomials of (k 0 , k 1 , · · · , k n−1 ), an initial state of the LFSR which generates s. So, one solves a system of linear equations over F 2 with T e variables.
On the other hand, the selective DFT attack works on a spectral domain, where the unknowns are β and T r(βα i ) = (k 0 , k 1 , · · · , k n−1 ).
So, one solves a system of linear equations over F 2 n which can be converted into a system of linear equations over F 2 with l(b) variables.
Since l(b) could be much smaller than T e , the selective DFT attack could be more efficient than the former.
(ii) The coefficients of monomial terms in b t = g t (x 0 , x 1 , · · · , x n−1 ) with variables x 0 , x 1 , · · · , x n−1 are changed for each t, but the DFT spectra of {b t } are only changed by a scalar multiple of β k , where β corresponds to the desired initial state.
(iii) The number of nonzero coefficients of variables (linearized case) in g t (x 0 , x 1 , · · · · · · , x n−1 ) are dynamically changed for each t, which is bounded by T e .
Thus the number of unknowns in the system of linear equations cannot be reduced from T e .
However, the number of nonzero DFT spectral of {b t } remains a constant for all the shifts, which is the linear complexity of b.(iv) The phenomena (ii) and (iii) are not astonishing, since these are an analogue to the cosine function cos t which is hard to predict the values in real field.
However, the Fourier transform of cos t has only two pulses (i.e., two values) which is a simplest case in spectral analysis.
(v) Another distinct difference between the FAA/variant and the selective DFT attack is that the filtering sequence s can be multiplied by any sequence with period N (N may not be the least period of b) not just a filtering sequence.
This opens a much wider window for this type of attacks, which will be addressed in the next subsection.
The algebraic immunity of f is defined as the smallest degree deg(g) such that f g = 0 or (1 + f )g = 0 [20], denoted as AI(f ).
The FAA/variant works if there exist some functions g and h such that f g = h and e = deg(g) < AI(f ) (in the algebraic attack h = 0).
From this result, the study for algebraic immunity of boolean functions is in fashion.
If the algebraic immunity of f is highest, i.e., AI(f ) = deg(f ), then for any g such that f g = h = 0, if e < AI(f ), then d = deg(h) ≥ AI(f ).
There are two cases as follows.Case 1.
m ≥ T d .
Then FAA/variant works with the complexity of O(T w e ) operations in F 2 , where w can be taken to be Strassen's reduction exponent w = log 2 (7) ≈ 2.807.
Since l(s) ≤ T deg(f ) ≤ T d , Algorithm 1 is applicable.
The latter is a much more efficient attack than the former when T e n. Case 2.
m < T d .
In this case FAA/variant is not applicable.
However, from the selective DFT attack, what matters is the linear complexity l(s).
As long as m ≤ l(s), one can use the selective DFT attack of either Algorithm 1 for m = l(s) or Algorithm 2 for m < l(s) provided that there are such sequences b and u satisfying (10).
Thus, if the boolean function f has high algebraic immunity, the selective DFT attack is either much more efficient than FAA/variant or applicable for those cases that FAA/variant fails.The following is an important remark.Remark 2.
Under the DFT, the complexity of the sequence is measured by the number of its nonzero DFT spectra, which is the linear complexity of the sequence.
This is the reason that the selective DFT attack could work for the case that AI(f ) is high but m < l(s).
A new criterion: The above remark imposes a new criterion for the design of boolean functions with strong cryptographic properties.
In other words, in addition to the existing criteria, a boolean function employed in a filtering or combinatorial generator should satisfy that there are no sequences b and u with low linear complexity such that (10) holds.
This will be formally formalized in Section 6.
Example 3.
The generating polynomial for F 2 5 is x 5 + x 3 + 1.
Let α ∈ F 2 5 satisfy α 5 + α 3 + 1 = 0, and A(x) = T r(α 27 x + α 9 x 3 + α 14 x 7 + α 7 x 11 ).
One can check that the algebraic immunity of A(x) is 2.
On the other hand, we have A(x) · T r(α 29 x 5 ) = 0 for any x ∈ F 2 5 which is the best case from the viewpoint of the selective DFT attacker.
From the results of Section 5.1, if |N s | = 1, then Algorithm 1 is not applicable.
This implies that in order to be resistant to the selective DFT attack of Algorithm 1, the minimal polynomial of an output sequence of an LFSR based key stream generator should be irreducible, which is another new criterion for the design of the LFSR based stream ciphers.
Together with the discussions in Section 5.5, we have the following two cases which we consider as resistant to the selective DFT attacks.
(We treat any vector in F N 2 as a binary sequence with period N .)
(a) Case 1.
The minimal polynomial of s is irreducible, i.e., |N s | = 1, then we say that it is resistant to the selective DFT of Algorithm 1; (b) Case 2.
The sequence s is said to be resistant to the selective DFT of Algorithm 2 if l(u + b) ≥ l(s) for any sequence b ∈ F N 2 with l(b) < l(s) and u = 0, where u is the term-by-term product sequence of s and b.An example of sequence generators with a single nonzero spectral coset leader is the sequences generated by a stop-and-go clock control generator.Example 4.
Let s be a sequence generated by a stop-and-go clock control generator with the following parameters.
Let a = {a t } and b = {b t } be two m-sequences with period N = 2 n − 1.
Let f (x) be the minimal polynomial of a. Thens t = a w(t) , where w(t) = t j=0 b j , t = 0, 1, · · ·where the summation is the integer addition.
Then the minimal polynomial of s is f (x N ) which is irreducible over F 2 .
Thus, the selective DFT attack of Algorithm 1 is not applicable.In order to be resistant to the selective DFT attack from Algorithm 2, we introduce the concept of spectral immunity.
Then P s is referred to as the spectral immunity of s.Remark 3.
For a boolean function f , we may define its spectral immunity P f similarly using the one-to-one correspondence between boolean functions and sequences [15].
Let P be the set consisting of all coset leaders modulo N .
In the following, we present an algorithm to compute the spectral immunity of a given sequence.
This algorithm is adopted from Algorithm 1 in [16].
Input: A nonzero binary sequence s with period N .
Output: The spectral immunity P s of s. x k,i T r(β k,i α kt ) = 0 for any t satisfying s t = 0, then return l. 5.
Let l = l + 1, and go to Step 2.
We have the following upper bound for the spectral immunity of any binary sequence with period N .
Theorem 2.
For any nonzero sequence s with period N , let w(s) denote the Hamming weight of s within one period.
Let l be the minimal integer such that l > min(w(s), w(s + 1)) and there exists a subset Q of P satisfying k∈Q n k = l, then P s ≤ l.Proof.
Without loss of generality, we can assume that l > w(s).
Then there is a nontrivial solution {x k,i } ∈ F l 2 such that k∈Q n k i=1x k,i T r(β k,i α kt ) = 0 for any t satisfying s t = 1 because the number of variables is bigger than the number of equations.
Let u = {u t } defined by u t = k∈Q n k i=1 x k,i T r(β k,i α kt ).
Then u is nonzero, and s · u = 0.
So we have P s ≤ l. Using the selective DFT method, we have presented a new algorithm analogous to the fast algebraic attack that works when the number of keystream bits m is less than or equal to the linear complexity of the keystream.
As applications of the algorithms, we show how to recover the initial states of LFSRs employed in filtering sequence generators when some consecutive bits of the key stream sequence are known.
We have compared the methods with the fast algebraic attack by Courtois, and its variant by Armknecht and Ars for filtering sequence generators.
The comparisons show that the selective DFT attack is more efficient and flexible when m is less than or equal to the linear complexity of the sequence and where the employed boolean functions are well-designed for meeting cryptographic requirements such as having high algebraic immunity.
Furthermore, we introduced a new concept named spectral immunity for cryptographic strong functions in order to be resist to the selective DFT attacks.
The authors would like to thank the anonymous referees for their valuable and helpful comments.
