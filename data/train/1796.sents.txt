BISmark (Broadband Internet Service Benchmark) is a deployment of home routers running custom software, and backend infrastructure to manage experiments and collect measurements.
The project began in 2010 as an attempt to better understand the characteristics of broad-band access networks.
We have since deployed BISmark routers in hundreds of home networks in about thirty countries.
BISmark is currently used and shared by researchers at nine institutions, including commercial Internet service providers, and has enabled studies of access link performance, network connectivity, Web page load times, and user behavior and activity.
Research using BISmark and its data has informed both technical and policy research.
This paper describes and revisits design choices we made during the platform's evolution and lessons we have learned from the deployment effort thus far.
We also explain how BISmark enables experimentation, and our efforts to make it available to the networking community.
We encourage researchers to contact us if they are interested in running experiments on BISmark.
A defining feature of today's Internet is the proliferation of high-speed broadband access.
The United States alone has more than 245 million broadband users, and usage statistics in other regions are even more impressive: at the end of 2012, China reported more than 560 million Internet users, with a penetration rate of more than 40% [20,21], and Africa is seeing increased penetration and plummeting costs for high-speed connectivity [22,28].
These changes encouraged us to study the nature and evolution of Internet connectivity as many users now experience it.
We aimed to deploy a platform that could support continuous measurements from long-running vantage points and allow researchers to develop, test, and deploy new systems and services for common access network environments.
To support rich and accurate Internet measurements from vantage points that are characteristic of typical Internet users, researchers need a testbed that * These authors contributed equally to this paper.represents the perspective of the growing population of Internet users.Our vision for such a testbed was perhaps most comparable to long-running testbeds with dedicated hardware, such as PlanetLab [2] and the RIPE Atlas Project [33].
Inspired by these projects, we decided that deploying dedicated hardware, in the form of commodity home routers, was the best way to ensure that we could perform both long-running and on-demand measurements from a consistent set of vantage points where researchers previously did not have access.
Such a deployment enables measurements that are continuous (unlike many measurement tools, which report only a single set of measurements initiated by the user), direct (unlike browser or host-based measurement tools, which can often reflect the performance of the host or application rather than of the network itself) and comprehensive (unlike client hardware, which cannot directly measure many aspects of both home and access networks).
In contrast to PlanetLab, however, our goal was to focus on broadband access networks, as opposed to research networks, thus achieving a more diverse set of vantage points.
Moreover, in contrast to the RIPE Atlas testbed, we designed the testbed to be extensible, supporting custom measurements, systems, and services.
We also designed the testbed with user security and privacy as a first-order concern.To address this need, we developed BISmark, a system that allows researchers, operators, and policymakers to deploy experiments and applications that gather data about network availability, reachability, topology, security, and performance from home routers running in globally distributed access networks.Beyond the conventional challenges of operating a longrunning service in the wide-area Internet (e.g., PlanetLab), we faced a unique set of challenges when deploying such a testbed in home networks.
First, incentives do not naturally align: whereas in PlanetLab, researchers have an incentive to host machines to gain access to the testbed, BISmark explicitly targets home users, who may not necessarily be interested in networking research.
Second, unlike in universities where PlanetLab nodes are deployed, technical support is not readily available, which makes system robustness, remote maintenance, and recovery even more important.
Third, nodes must be small and easy-to-deploy; such nodes are typically resource-constrained.
Finally, BISmark nodes are on the direct path of real Internet users; a malfunctioning BISmark device not only disrupts a normal user's Internet connectivity but also typically results in the loss of the device.
(At this point, a user is likely to remove the device from the network entirely and never re-install it.)
Therefore, BISmark must also ensure that an unstable device or a poorly designed experiment cannot wreak havoc on the user's Internet connection.
BISmark has enjoyed reasonable success in its first four years.
It has enabled the publication of many studies from broadband access networks from around the world, and is now being adopted by major ISPs, policymakers, and researchers in several countries.
Many research groups are either using the data we have collected or deploying custom experiments.
Yet, enabling a broader set of experiments and scaling BISmark beyond its current size poses new challenges.
Security and robustness remain paramount, and device deployment and attrition are an uphill battle, particularly in certain regions.
This paper discusses the constraints we have faced (and continue to face) in the design, implementation, and deployment of BISmark, discusses lessons and things that we would have done differently (or will change in the future), and describes new challenges as the platform expands both in terms of the number of vantage points and the diversity of experiments we aim to support.The two audiences who will find this paper most useful are (1) designers and developers of network testbeds, who can read about BISmark's architecture and deployment lessons in Sections 3 and 5, respectively; and (2) researchers who want to use BISmark to collect measurements for their own work, who can read about how other researchers have used BISmark in Section 4.
Anyone who is interested in deploying user-facing testbeds or measurement systems in hardware or software may learn from our experiences.
More generally, we hope that anyone who has ever grappled with building a testbed-or plans to do so in the future-will take important lessons from our experience, many of which surprised us, and still others that may seem obvious in hindsight but are nonetheless well worth codifying.
Fixed server or gateway deployments.
PlanetLab [31] is probably the most similar platform to BISmark in that it aims to be a fixed, large-scale deployment hosting a variety of research experiments.
Because BISmark is deployed in home networks on resource-constrained devices, however, it faces additional challenges.
The RIPE Atlas [33] project has deployed thousands of probing devices worldwide, but their capabilities are limited to simple measurements (e.g., ping, traceroute).
SamKnows [35] has deployed thousands of home routers in the US and the UK, but only supports limited performance measurements.Host-based deployments.
Dasu [36] is a host-based software client.
It has a very large footprint (tens of thousands), and allows a variety of network measurements from end hosts.
However, its advantages of scale comes at the cost of decreased flexibility: (1) it lacks the permissions to run certain measurements due to application restrictions, (2) it cannot run continuous measurements (i.e., since hosts can be turned off, moved, etc.), and, (3) the measurements can reflect limitations of the host or the application taking the measurement and thus do not reflect the performance of a fixed network vantage point.
The Grenouille project in France [17] measures the performance of access links using an agent that runs from an end host inside the home network.
Neti@Home [38] and BSense [3] also use this approach, but with fewer users than Grenouille.
Network Diagnostic Tool (NDT) [9] and Network Path and Application Diagnostics (NPAD) [25] send active probes to detect issues with client performance.
Glasnost [16] performs active measurements to determine whether a user's ISP blocks BitTorrent traffic.Netalzyr [23] lets users conduct a series of tests from a browser, but measurements are not continuous, and researchers cannot run custom tests from a set of hosts-the measurements collected are fixed, and the set of hosts from which measurements are collected depend on the users who decide to run the tool.Programming frameworks.
The process of vetting BISmark experiments is manual (as it was in previous testbeds such as RON [1]), which will be a limiting factor as the deployment grows.
BISmark must ultimately strike a balance between flexibility (allowing researchers to specify experiments) and a constrained programming environment (limiting researchers from specifying experiments that could interfere with home users).
Previous work on sandboxed, programmable measurement environments, such as Seattle [8] or ScriptRoute [39], could ultimately serve as a useful environment for specifying BISmark tests.Other measurement studies of broadband access networks.
Previous work characterizes access networks using passive traffic measurements from DSL provider networks in Japan [11], France [37], and Europe [24].
Siekki- nen et al. [37] show that applications (e.g., peer-to-peer file sharing applications) often rate limit themselves, so performance observed through passive traffic analysis may reflect application rate limiting instead of the performance of the access link.
Other studies have characterized access network performance by probing access links from servers in the wide area [12,13].
BISmark aims to enable research and experimentation under constraints inherent to home routers and networks.
Many of the challenges that we faced are not unique to our deployment, but they are exacerbated by operating (1) in a resource-limited setting on home routers; (2) in a setting where downtime (or general interference with users' Internet connectivity) is not acceptable.BISmark's software fulfills four roles.
First, it uniquely identifies each router and correlates it with metadata useful for conducting networking research.
Second, it manages software installation and upgrades, which lets us fix bugs, issue security patches, and deploy new experiments after we have mailed the routers to participants.
Third, it provides experiments a common, easy-to-use, and efficient way to upload data to a central collection server.
Finally, it enables flexible and efficient remote troubleshooting.
We describe BISmark's evolution path, its components, and the various roles that the BISmark software plays.
growth over the past two and a half years.
We purchased, prepared, and mailed nearly half of these routers, while the rest have arisen either organically (e.g., as users "flash" their own routers with BISmark firmware) or through coordinated efforts (e.g., with other organizations or research groups).
We currently deploy Netgear WNDR 3800 routers, which have a 450 MHz MIPS processor, 16 MB of flash storage, 128 MB of RAM, 5 gigabit Ethernet ports, and a dual-band wireless interface.
This hardware is limited, even when compared to other embedded mobile devices like smartphones, yet it is powerful enough to reliably support both basic routing features and a variety of measurement experiments.
We replace the router's default software with a custom version of OpenWrt Linux [29].
OpenWrt has an active developer community, a simple and usable configuration GUI, and broad, mature hardware support.
It frees us from maintaining our own firmware, but ties us to its release cycles, bugs and all.
Despite a few persistent problems that have occasionally affected some users, we have been satisfied with OpenWrt.
We have deployed two hardware revisions of Netgear routers and four firmware releases.Some users download the BISmark firmware from our project page and install it on their own hardware.
This enables further growth, but introduces the challenge of determining the identities of these users.
To handle this scenario, our latest firmware includes a user registration system that prompts users to complete a simple registration process after configuring network settings.
Registration serves two purposes: it automates the previously manual collection of metadata from users about their ISP; and it binds the user's identity to a router so we can restore the router configuration each time the router is reflashed.Section 5.4 discusses the security implications of letting users install BISmark on their own hardware.
Management servers.
To support the router deployment, BISmark has three types of servers:1.
Package repository servers decide which software should run on each router.
Different routers can run slightly different sets of software because we've deployed several firmware versions and users have consented to run various experiments.
2.
Data collection servers validate, store and serve data gathered by routers.
We serve publicly accessible active measurements data from Amazon S3 and mirror all data in servers at our university.
3.
Monitoring servers track availability and can initiate SSH connections to routers for troubleshooting.Measurement servers.
BISmark uses a fixed set of measurement servers against which it conducts standard performance measurements (e.g., throughput ).
The validity of these experiments in many cases depends on having measurement servers that are geographically close to the deployed routers.
We have been fortunate to obtain access to the globally distributed Measurement Lab (MLab) infrastructure [26].
In some cases where we have a critical mass of routers, we have also deployed additional measurement servers.
Measurements are scheduled on the measurement servers by a central scheduler.
This prevents overloading of servers by several concurrent requests from BISmark routers.
We note that this infrastructure is used for intensive active tests such as throughput measurements.
Other experiments that do not rely on a low-latency, globally distributed infrastructure do not use these servers.
Like many rapidly growing systems, BISmark evolved organically in response to use.
Several components written for an early pilot deployment persist.
Although many design choices were sub-optimal in retrospect, the software has always addressed three practical constraints.
The router should not noticeably affect the user's networking experience (e.g., by frequently saturating the uplink).
Combined with limited client resources, this constraint requires us to thoroughly test software before deploying it, because the consequences of malfunctioning software may be the potentially terminal loss of a deployment site.
(In our experience, most users simply unplug the router at the first annoyance and never plug it in again.)
Constraint 3: User intervention is impractical and should be as limited as possible.Users expect their router to "just work".
They have no desire to otherwise interact with it.
After installation, attempts to interact with users via the router itself are awkward and annoying (e.g., captive portals) and out-ofband communication (e.g., email) is unreliable.
We assign each router a unique router identifier, which we use for data analysis, troubleshooting, and inventory; we correlate this identifier with all measurements we collect from the router, participant-provided details about the upstream ISP's advertised performance, the router's geographic location, and the participant's name and mailing address (used to ship the router).
We do not disclose personal information except when required by law enforcement [5] (a scenario that we have not yet encountered).
Common identifiers such as manually assigned hostnames, dynamically generated tokens, or public IP addresses do not satisfy these requirements.
Instead, we use the routers' LAN-facing MAC address, which is both unique and unchanging.
We chose LAN (rather than WAN) addresses because they are printed on the back of the router, which simplifies technical support and inventory.
Unfortunately, LAN-facing MAC addresses pose a security risk because attackers could use them to geographically locate a router.
By default, routers broadcast their MAC address to WiFi devices in the vicinity, including smartphones and collectors for Google's Street View and similar data collection projects.
An attacker with access to both the router's MAC address and these databases could geolocate a router [43].
This vulnerability highlights a broader set of tradeoffs BISmark makes between privacy and transparency; Section 5 discusses these tradeoffs.
Remote access allows us to fix critical problems that would otherwise require a lengthy packaging and software update cycle to fix.
Constraint 5: We need a fast but secure technique to log in to routers on demand.Every BISmark router runs an SSH server which is only exposed on the LAN interface.
Exposing the server on the WAN interface has security concerns; additionally, over 60% of our routers are obscured by at least one layer of Network Address Translation (NAT), rendering the SSH server on WAN useless.
Instead, BISmark routers poll the monitoring server for SSH session requests by sending small UDP probes ("heartbeats") once per minute.
If the server wishes to initiate an SSH session with a router, it responds with a UDP response to that effect; the router then opens an SSH tunnel forwarding a port on the monitoring server to the router's local SSH server.
Administrators on the server then initiate SSH sessions to the forwarded server port.
Although session requests and responses may be lost in the network, we can usually establish a tunnel within one minute and almost always within five minutes.Tunnel creation uses restricted SSH authorization to prevent routers from executing arbitrary commands on the server.
Because the server does not authenticate the UDP probes themselves (only the resulting tunnels), we rate limit requests to prevent denial-of-service or reflection attacks against the server or unsuspecting routers.The overhead of the tunneling protocol is minimal.
Each probe/response pair is 139 bytes, resulting in an overhead of 200 KB per day or 6 MB per month.
The DNS time-to-live on the monitoring server is 15 minutes, resulting in an additional overhead from DNS lookups of less than 1 MB per month.
Using a domain name with a reasonable TTL allows us to quickly migrate the monitoring server in an emergency.
Although a DNS hijacker could direct routers' probes to a different address, such an attack will not compromise security of the routers because they use SSH to establish tunnels.
After we have deployed a router, we must be able to manage its software packages.
Throughout the lifetime of the deployment, we have issued many bug and security fixes as package upgrades, deployed new measurement experiments by installing new packages, and rolled back faulty experiments via package removal.
OpenWrt's builtin opkg lacks several features and safeguards necessary for managing software on a large deployment in the homes of non-technical users.
This section illustrates several of BISmark's unique software management constraints and we overcome them.
Constraint 6: Router state should be centrally managed and controlled.
Exogenous events can interfere with stateful package management.
For example, if a user resets their router to its original configuration, the router should automatically install and upgrade the software it had prior to the reset.
Instead of executing one-time commands sent by a server, the router downloads a list of packages reflecting the current desired state of the router, and installs, removes, and upgrades its packages accordingly.We built custom package management utilities on top of opkg that meet these constraints.
We eschewed offthe-shelf tools like Puppet, Chef, or CFEngine because of resource and complexity constraints, which reflects a general tension between custom and commodity software that we faced throughout the project.
Existing software is often both more complicated than we need and untested on non-x86 architectures.
Sometimes writing a small custom package from scratch for limited functionality is easier than porting and rigorously testing an existing one.
This constraint contrasts with large-scale software administration frameworks for other platforms (e.g., Android, Mac OS X, and Windows), which have at least some user interaction.
Home users are often non-technical or otherwise have little desire to administer their router, and the BISmark administrators cannot manually run package commands on hundreds of routers.
Therefore, software installation, upgrade, and removal must happen automatically.
Routers in our deployment automatically perform these tasks at boot and approximately every twelve hours.
Automating package management increases risk, because a single faulty or buggy package could cripple the entire deployment.
Our management tools impose several restrictions to guard against accidental installation, upgrade, and removal of packages.
First, routers only allow removal of packages that are not included with their base firmware image, which prevents us from accidentally removing critical software.
For example, before instituting this restriction an errant experiment accidentally removed the libc package from a router during testing, rendering it unbootable.
Second, packages must be explicitly tagged as "upgradable" on the server before routers will upgrade them, which helps prevent us from accidentally pushing newer, incompatible versions of packages.
Finally, we require all new packages and versions be tested for several days on a small set of canary routers owned by members of our research group before wider deployment.Routers usually sit on a home network's critical path and must continue functioning at all times.
Fortunately, basic function only relies on a few core packages, and almost always continues to work even if our management tools fail.
Even if we lose access to the router entirely, the home router's core functions are typically undisturbed, since those functions are isolated from our packages.
There are three versions of the BISmark firmware currently deployed; each requires a different set of packages because of library incompatibilities.
Some routers also run additional packages because their users participate in optional BISmark measurement experiments.
Our package management tools must install the correct packages and versions on each router.
The consequences of mistakes range from broken functionality (e.g., missing measurements) to unauthorized collection of data (e.g., if we collect passive measurements from users who have not consented to it.)
Experiments generate data of a wide variety of sizes and rates and upload it to data collection servers for analysis.
We initially used off-the-shelf file synchronization tools to upload this data, but resource, flexibility, and reliability constraints motivated us to develop custom software.
bismark-data-transmit is our client application, which detects new files in a filesystem subtree using Linux's inotify filesystem monitoring interface.
The client uploads these files over HTTPS to a Web application that validates and archives the data.
Efficient use of bandwidth is crucial because BISmark routers share uplink capacity with the home network.
Experiments can generate lots of small files, often frequently, but need to upload them with minimal protocol overhead.
Routers store these files on a volatile RAM disk and upload files as soon as possible; both excessive wear and extreme scarcity prevent them from storing data on persistent flash storage.
To minimize the risk of data loss when they lose power or reboot, routers do not batch files for more efficient transmission.
To avoid frequent and expensive handshakes while still continuously uploading files, we send all files over a single HTTPS connection with a high keep-alive timeout.
Although Web services generally use keep-alive timeouts of only a few seconds, bismarkdata-transmit sets a one hour timeout, which makes sense for communicating with a small, fixed set of clients.Constraint 11: Network and power are unreliable in some locations; data collection should gracefully handle uplink outages and power outages.Some experiments measure properties of the home network itself rather than the home's Internet connectivity and thus continue generating data even when the router's uplink is offline.
These experiments can quickly accumulate a lot of data if unchecked.
bismark-data-transmit retries failed uploads every three minutes and starts discarding data in FIFO order once it has more than 24 MB queued for upload, so even routers connected to very unreliable uplinks can contribute data without exhausting their limited onboard storage.
Some routers frequently lose power, particularly those deployed in developing countries.
bismark-data-transmit minimizes data loss in these cases by uploading data as soon as possible.
Routers can lose data accumulated during a long uplink outage that immediately precedes a power outage.
This section describes research projects that have used BISmark.
We first describe the modes of collaboration that we have used since opening BISmark to external researchers in mid-2013.
Because the platform is both resource constrained and on many users' critical path to the Internet, experiments on BISmark must cope with stricter conditions than most existing testbeds that support long-running deployments (e.g., PlanetLab).
For example, experiments must deal with nodes that have highly variable connectivity and availability.
Figure 4 plots the 95 th percentile of throughput of homes in the deployment; we see ranges from basic broadband (about 1 Mbps) to fiber speeds (100 Mbps).
Figure 5 shows the fraction of time a router is available and online during its lifetime; about 50% of the routers are available more than 90% of the time, but a significant fraction of routers have much patchier availability.
Data from many active measurements are public for anyone to use.
Additionally, we have been advertising BISmark to collaborators and encouraging them to run experiments on the deployment.
Most of this recruiting has been through word-of-mouth, as we build confidence that we can support a larger group of researchers (in fact, we an-ticipate that we would be unlikely to satisfy all requests).
In many of these cases, we have informally adopted a PlanetLab-like incentives model by asking the researchers to spearhead their own small deployment of BISmark routers in an ISP or region of interest.
In certain research projects, the researchers want to do this anyhow because they have a specific group of users that they want to study.
We have two modes of collaboration, which we outline below.
In both cases, researchers must be comfortable with OpenWrt and embedded platform development.
Public deployment.
Collaborators run experiments on the main deployment of routers, which we manage.
We control access and schedule the experiment to run in conjunction with other experiments running on the deployment.
This mode works well for researchers running lightweight experiments from the variety of vantage points that our deployment offers.
We have enabled research from the University of Southern California in this way.
Private deployments.
Researchers (or, in some cases, operators) purchase and deploy their own routers, while we provide the client software and manage back-end services.
In these cases, the researchers retain a high degree of access to their routers, giving them an incentive to keep their deployment running.
This mode is best for researchers who want to run complex or time-consuming experiments in a small geographic area.
For example, University of Cambridge has deployed more than 20 BISmark routers in under-privileged communities in Nottingham to study the mechanics of Internet sharing in such communities.
We have also engaged with several ISPs who have wanted to run their own autonomous deployments.
BISmark offers the ability to study poorly understood or understudied aspects of home networks, including access link performance, application characterization, user behavior patterns, security, and wireless performance.
Table 1 summarizes several experiments we are coordinating on the deployment.
In many cases, we are leading (or have led) the study ourselves; more recently, we have been collaborating with the researchers who are leading the study.
The latter projects are works-in-progress.
The following sections describe both sets of projects in more detail.
Our discussion of experiments that have been run on BISmark is not exhaustive but is intended to highlight both the capabilities and shortcomings of the platform.
BISmark's location at the hub of the home network lets it gauge performance of both local devices and the access link without being affected by confounding factors from the rest of the network.
link characteristics.
We characterized access link performance and the effects of access technology and customer premise equipment in the United States [40] using data from BISmark and the similar FCC/SamKnows deployment.
Our study showed, amongst other things, how the access link can have a significant impact on end-to-end performance.
Research ICT Africa (RIA) reproduced our study in South Africa [10] and expanded it to include mobile devices and 3G dongles.
BISmark is well suited for such studies because of its view into the last mile, and its ability to account for confounding factors and to run longitudinal experiments.
Application performance.
Because hardware limitations can prevent us from running full applications (e.g., Web browsers), we aim to emulate applications' network behavior.
In our work measuring network bottlenecks in Web performance [41], we used a custom browser emulator to measure one aspect of Web performance-the impact of the last mile.
This study found that Web performance becomes bottlenecked on latency for broadband connections faster than 16 Mbps.
Although BISmark was suitable for this particular experiment, we did not measure other aspects of Web performance, such as user perception, the effect of object ordering, or scripting on performance.
This is because we cannot run a full browser on the router; it is also difficult to get such information from passive data.
In such cases, we have to carefully design the experiment so that we know what we are able to study.
Wireless performance.
We are developing techniques that isolate the source of performance bottlenecks to either the access link or the wireless network, as well as tools that help us understand the nature of wireless pathologies.
The home access point sits between two common sources of performance issues-the access link and the wireless network-and is therefore ideally suited for identifying and isolating problems between these locations.
Lessons and caveats.
As demonstrated above, BISmark is ideally suited for access link and home network characterization because it lets us probe these components and collect passive data from them.
Application performance characterization is harder.
Applications (or their emulations) must be light enough to run on the router; this might preclude certain types of applications.
Experiments that measure the access link by sending active probe traffic (e.g., throughput tests) must not degrade performance of the home network while doing so.
For users with bandwidth caps, probe traffic and data traffic (from uploading measurements to the server) should not constitute a significant fraction of the cap without the user's knowledge or consent.
Some measurements such as TCP throughput require server deployments with low latency.
Fortunately, Measurement Lab's global server infrastructure has helped: BISmark nodes automatically select the nearest MLab node for throughput measurements; Figure 6 shows that over 80% of nodes are within 100 ms of a measurement server.
Several projects leverage BISmark's view of the home network behind the NAT.
Home network availability, usage, and infrastructure.
We study the kinds of devices home users use to access the network, how they access the network, and their usage patterns [18].
Our study found interesting behavioral patterns (e.g., users in developing countries turn off home routers when not using them) and usage patterns (e.g., most traffic is exchanged with a few domains).
Most prior studies are incomplete because they rely on one-time or infrequent probes from clients with limited network visibility.
Home network security.
The ability to isolate traffic from different devices behind the NAT can be used to improve security.
Comcast offers a security solution called Constant Guard, which captures DNS lookups to suspicious domains to inform a user when devices in their home may be compromised.
We are extending BISmark to let Constant Guard identify infected devices and redirect some or all flows from suspected devices through Comcast security middleboxes via a virtual private network [4].
Internet usage in underprivileged communities.
The PAWS project [30] distributes BISmark routers augmented with extra measurement tools to broadband customers who volunteer to share their high-speed broadband Internet connection for free with fellow citizens.
The project studies how underprivileged communities share Internet access.Lessons and caveats.
BISmark's view into the home network and its ease of deployability allows it to run experiments that are not possible with other platforms.
However, it also raises new concerns.
Resource constraints limit the amount of data that can be collected and processed on the device.
User privacy is a significant concern; for any experiment that studies user behavior, we must obtain informed consent from the user, which can be a slow and cumbersome process.
We have conducted our own experiments that have required institutional review board (IRB) approval, but complications arise when BISmark serves as a host platform for experiments run from other universities that are sometimes in other countries.
Even with permission to collect personal information, we design our experiments to collect only information necessary to answer targeted questions.
BISmark's worldwide presence lends itself to measuring many different aspects of Internet connectivity.
Measuring Internet topology and connectivity.
We have looked at Internet availability in developed and developing countries [18], and researchers at USC are using BISmark to extend their study of the effects of Google's expanding cache deployment [7] on the performance of various Web services.
Researchers at the University of Maryland are analyzing BISmark's UDP "heartbeat" logs (Section 3.4) to understand the effects of network outages on DHCP address allocations.
Our recent work explores correlated latency spikes in ISPs [34] and the extent to which interconnectivity (or lack thereof) at Internet exchange points contributes to latency inflation and degraded application performance [19].
Global measurements of censorship.
BISmark routers represent a unique opportunity to collect detailed, longitudinal data about how countries engage in censorship.
Researchers in Pakistan have deployed BISmark routers in several homes to measure this phenomena; routers in other countries could also potentially collect similar measurements.
We are replicating OONI [14] on BISmark.
Lessons and caveats.
BISmark is well-suited for connectivity measurements because of its geographical footprint, availability, and its ability to run periodic measurements (time scale of minutes) over a long period of time (months, or even years).
We could also run probes and tests between BISmark routers, but while some such experiments may be better run on platforms like Dasu which will likely always have more deployment sites, BISmark is a full-featured (if low-powered) Linux machine that offers the ability to perform a much larger variety of experiments.
Experiments that measure censorship have additional ethical concerns because it is illegal in some countries, and may even place the household at risk.
In these cases, we must obtain informed consent, which may be difficult with users who flashed their own hardware or don't speak English.
This section summarizes lessons we have learned (often the hard way) during BISmark's development.
Convincing users to deploy routers in their homes, particularly custom hardware, is not easy.
Prior to our current deployment of commodity routers, we conducted a yearlong pilot study with the NOX Box, a small form-factor PC that ran the NOX OpenFlow controller on Debian Linux.
We assembled the hardware from an ALIX 2D13 6-inch by 6-inch board with a 500 MHz AMD Geode processor, 256 MB of RAM, 2 GB of flash memory, three Ethernet ports, and a wireless card.
Although the NOX Box's rel- atively unconstrained hardware and full-featured Linux distribution helped rapid prototyping, our pilot faced several practical problems in the field.Lesson 1: Form factor matters.
Users often trust commodity hardware over custom hardware simply because it is in a recognizable form.
Figure 7 compares the NOX Box hardware from our pilot phase to the commodity Netgear hardware from our current deployment.
The NOX Box doesn't look like a typical home router: it lacks familiar branding, lacks labels for status lights and Ethernet ports, and has a metal rather than plastic enclosure.
These factors bred an inherent distrust of the NOX Box.
People were generally more willing to deploy commodity hardware.Lesson 2: Users often blame BISmark for problems in their home network, whether or not the problem was caused by BISmark.
Many users react by removing the router permanently from their network.Even with commodity hardware, users have heightened awareness of the BISmark router, particularly the experimental nature of the device, and therefore suspect it first when problems arise with their home network.
In some cases, BISmark is indeed at fault.
For example, a firmware bug causes unstable wireless connectivity on some devices, notably Apple MacBooks.
In other cases, the router uncovered buffering problems elsewhere in the home network, temporarily degrading network conditions in the process.
Many times, users misconfigured the router themselves (e.g., by changing firewall settings) or incorrectly blamed BISmark for upstream ISP outages or problems with end hosts (e.g., older devices that lack support for WPA2.)
Regardless of the causes of these problems, many users "solve" them by removing the BISmark router from the network.
This has consequences in terms of money (the router likely will not be turned on again) and time (in flashing, packaging, and shipping the router to the user).
Lesson 3: Home users and researchers have vastly divergent incentives.
Home users want a working network, and researchers want to gather data and information.
Care and effort must be invested to align these incentives.It is critical that our deployment strategy allows us to finance and maintain a large number of routers.
PlanetLab's incentive structure (i.e., hosting infrastructure for the right to run deployment-wide experiments) does not work in our case, because many of the most interesting vantage points will be hosted by users who are not networking researchers and have no interest in conducting their own experiments.
We use two deployment strategies:Free (or subsidized) router distribution.
Our initial strategy was to ship routers to acquaintances, friends of friends, and through targeted advertising in venues such as NANOG and Internet2.
It is difficult and time consuming to track routers in such cases, particularly when users turn them off.
Due to the cost and effort involved, individual shipments only work at relatively small scales.
About 50% of routers we distributed have either never been turned on or have since been decommissioned by their users.Federated distribution.
We are now attempting a federated deployment model to expand our geographical footprint.
We work with a local contact who buys or receives a shipment of routers from us, recruits volunteers and ensures that routers stay up.
This approach worked well for a deployment of approximately 15 routers in South Africa and 20 routers in the UK, and we are now attempting similar approaches in Tunisia, Pakistan, Nigeria, Cyprus, and Italy.
We are also working with Comcast to deploy routers in their customers' homes in return for network analytics.
Even after deploying BISmark routers in homes, it is a struggle to keep them online.
Figure 8 shows attrition of the deployment.
Nearly 25% of all routers go offline within three months, while another 25% have remained online for more than a year.
We have learned many lessons, both about how to deploy reliable router software and how to keep users involved when unreliable software disrupts the user experience.Lesson 4: Users must be engaged to help keep routers online.
Engagement can come in a variety of forms, and may be as simple as helping them better understand their network using the data we collect.If users disconnect their routers, we stand to lose both the device hardware and the data.
We attempt to keep users engaged by providing useful tools like the Network Dashboard [27] to visualize ISP performance and uCap [42] to help users visualize and manage their home network usage.
We conduct our development and data collection in the open; users can track BISmark development online [6,32].
Lesson 5: Upgrading critical software in the field is risky, but the ability to upgrade other software is essential for sustainable deployment.The ability to upgrade non-critical software after deployment has enabled us to pursue "good-enough" software development by deploying systems that are not fully ready.
We can fix bugs and deploy new features by upgrading software in the field.
This helps us reconcile the need for deploying systems that work for end users with constraints that include the need for extensibility and experimentation and limited time and manpower for testing and support.We do not update certain critical software when there is a chance, however small, that a critical functionality (e.g., the wireless network) could break.
Our approach has been to minimize such cases by using a well-tested base platform that can maintain basic functionality even when higher-level client and backend software malfunctions.Lesson 6: Every home network has unique conditions and usage patterns, making comprehensive testing before deployment nearly impossible; bugs arise in practice.We aim to ensure that BISmark is foremost a stable access point, and that our custom software and experiments do not degrade user experience.
The BISmark gateway is on the critical path of Internet access for at least one device in 92% of the homes; a malfunctioning router will disrupt network connectivity and, in the worst case, even completely take those devices offline.
We have one window of opportunity per user to ensure that a router is installed and working correctly.
Most people have no desire to troubleshoot home networks and will readily disconnect their BISmark router if it stops working as intended.Lesson 7: Community support is crucial; we rely heavily on commodity hardware manufacturers and open source software developers to build reliable, usable home routers.Commodity hardware solves many problems we faced with custom hardware because manufacturers (e.g., Netgear) design hardware specifically to deploy it in the homes of non-technical users, which exactly matches BISmark's deployment scenario.
Besides appearance, com-modity hardware addresses many of the NOX Box's reliability and usability problems: (a) flash storage cards failed after only 3-4 months in the field, far sooner than expected for our workload; (b) we assembled each NOX Box from components, a laborious process; and (c) the component cost for each device was approximately $250 USD, or 2-3 times the cost of a commodity wireless router.Similarly, OpenWrt's global community ensures that it is much more comprehensively tested on a variety of home routers than Debian.
Although we occasionally found ourselves "held hostage" by bugs that were not fixed on our timescales, becoming embedded in OpenWrt's developer community was generally helpful.
Lesson 8: Users may want to customize router settings, but doing so may introduce security vulnerabilities.BISmark routers have a flexible administrative interface to help users configure the router; this is a potential security vulnerability.
One household accidentally disabled the router's firewall, opening its DNS resolver to the Internet.
Attackers eventually recruited the router for amplification attacks over a period of many months, which we only discovered when the ISP notified the user of the problem.
Although the disabled firewall was the culprit in this case, it led to a wholesale audit of the deployment and a spirited email exchange with the affected user.
It is still unclear exactly how the firewall was disabled.
Designing and deploying measurements on BISmark has highlighted several nuances of supporting experimentation in production home networks.
To encourage open data, we publish measurements collected from BISmark, but only if doing so doesn't threaten user privacy.
Sometimes this decision isn't obvious.
It is unclear when active data measurements can yield insight into user behavior; for example, patterns in router availability or throughput and latency measurements could indicate when users are home and using the network.
Lesson 10: Vetting experiments is challenging, and a poorly designed (or controlled) experiment can cripple a user's Internet connection.
Enabling a wide range of experiments introduces management and security concerns, specifically with reviewing code, controlling access, and ensuring that experiments do not disrupt user experience by making the device unstable or consuming too much network resources.One household had comparatively slow upstream connectivity (512 Kbps upload) and an old modem with a large buffer, where even short throughput tests can induce bufferbloat pathologies [15].
Although the household's typical workload did not stress the network often enough to expose bufferbloat in their typical usage, BISmark's periodic throughput tests saturated the buffer and rendered the Internet unusable for the duration of the test (a few seconds).
The degradation was bad enough for the user to complain and stop using the device after a few weeks.
BISmark routers should compromise neither home network security nor the integrity of the platform.
Although we try to minimize the possibility of security vulnerabilities by adopting industry-standard software and protocols wherever possible, some attacks against BISmark's backend infrastructure are still possible.Lesson 11: Users have access to the hardware and can modify firmware; this imposes new security challenges.BISmark's backend is subject to two broad security threats.
The first is denial-of-service attacks, where malicious users could attempt to exhaust server resources for processing legitimate routers or measurements.
Attackers could impersonate other users or even mount Sybil attacks to create many fake routers.
Several backend components employ rate limiting, but these limits generally only protect against errant behavior of non-malicious clients.
Thus far, we have deliberately chosen not to fix this class of vulnerabilities to make it easier for people to install BISmark on their routers without our involvement.Other attacks could contribute malicious data to influence conclusions.
Mitigating such attacks requires instrumenting routers with Trusted Platform Modules running signed executables to generate signed data.
Attackers have physical access to router hardware and the software source code, so we rely on social measures: we try to deploy to trusted users and assume that they won't collude.
Anyone can install BISmark on their own hardware, so we treat measurements from such routers with greater suspicion.
Although we did not initially plan to build (and maintain) such a large testbed, we realized the need for it 2009 when we began a study of access network performance.
We recognized the variety of uses for a programmable testbed in home networks, and we also discovered that other researchers and operators share our interest.
As BISmark continues to expand in terms of size and the diversity of experiments that it hosts, we will need to continually re-evaluate many of our design decisions.
We believe our experiences thus far offer a unique perspective in comparison to existing long-running testbeds and useful lessons for others who perform research in broadband access networks.
BISmark would not have been possible without its countless contributors.
Stephen Woodrow was instrumental in improving the underlying management infrastructure, integrating active measurements with MLab, and managing releases and project outreach.
Al
