We consider the problem of optimal scheduling and routing in an ad-hoc wireless network with multiple traffic streams and time varying channel reliability.
Each packet transmission can be overheard by a subset of receiver nodes, with a transmission success probability that may vary from receiver to receiver and may also vary with time.
We develop a simple backpressure routing algorithm that maximizes network throughput and expends an average power that can be pushed arbitrarily close to the minimum average power required for network stability, with a corresponding tradeoff in network delay.
When channels are orthogonal, the algorithm can be implemented in a distributed manner using only local link error probability information, and supports a "blind transmission" mode (where error probabilities are not required) in special cases when the power metric is neglected and when there is only a single destination for all traffic streams.
For networks with general inter-channel interference, we present a distributed algorithm with constant-factor optimality guarantees.
In this paper, we consider a multi-node, multi-hop wireless network with "unreliable" channels.
Each transmission link has an associated error probability that may vary with time due to external factors such as environment changes or user mobility.
Many previous studies assume that accurate channel information is available so that error probabilities are relatively small and can be neglected.
However, in this work we consider the opposite case where precise channel information is difficult or impossible to obtain, but where simple estimates of channel quality can be made based on limited channel feedback.
A motivating example is an underwater sensor network that uses acoustic channels with large propagation delays.
This is a particularly challenging environment due to time varying wave ripple, complex signal reflections between surface and ground, and large delay spreads [2] [3].
While it may not be practical to assume that an accurate channel quality can be determined at the time of packet transmission, it is reasonable to estimate the error probability based on past signal strength values and/or ACK/NACK history from previous transmissions.
In this example there is a single destination indicated by the star node.
Note that a "closest-to-the-destination" heuristic might result in data being routed from node 1 to 2 to 3, resulting in a deadlock.The problem of unreliable channels is also important in other contexts, such as mobile networks where knowledge of which receivers are within transmission range may be uncertain, or in dense ad-hoc networks where unpredictable transmissions of other nodes can act as random inter-channel interference.
It is imperative to develop flexible mathematical models of such networks, and to develop robust networking strategies that exploit all system resources to operate efficiently in these extreme environments.In this paper, we design robust algorithms by exploiting the broadcast advantage of wireless networks.
Specifically, our network model includes the fact that a single packet transmission might be overheard by a subset of receiver nodes within range of the transmitter.
This creates a multi-receiver diversity gain, where the probability of successful reception by at least one node within a subset of receivers can be much larger than the corresponding success probability of just one receiver alone.
Hence, it is desirable to design flexible routing algorithms that do not require a single "next hop" receiver to be specified in advance.
Such algorithms can dynamically adjust routing and scheduling decisions in response to the random outcome of each transmission.The wireless broadcast advantage has been used in various contexts, for example, in [4] for the design of wireless multi-cast algorithms, and in [5] for the design of minimum energy disjoint paths.
There is much recent interest in using multi-receiver diversity for packet forwarding, and proposed algorithms include Selection Diversity Forwarding (SDF) [6], Geographic Random Forwarding (GeRaF) [7], Extremely Opportunistic Routing (ExOR) [8], Multiuser Diversity Forward-ing (MDF) [9], and related algorithms in [10] [11] [12].
We note that such problems involve situations where the same packet is redundantly distributed over different network nodes.
A fundamental decision is whether to allow the different versions of the packet to simultaneously propagate throughout the network, or to designate only a single copy that is allowed to proceed.
The work in [6] [7] considers the simple heuristic that shifts packet forwarding responsibilities to the receiver that is closest to the destination.
While this scheme has many desirable properties, especially for large ad-hoc networks, it is clear that for a given network of fixed size, the "closestto-destination" heuristic neither maximizes throughput nor minimizes average power expenditure.
Further, this scheme can lead to an undesirable deadlock mode if data is consistently forwarded to a particular node for which there are no other next-hop receivers that are closer to the destination (see Fig.
1).
Thus, it is often better to route packets along paths that temporarily take them further from the destination, especially if these paths eventually lead to links that are more reliable and/or that are not as heavily utilized by other traffic streams.
The work in [8] [9] [6] considers routing heuristics based on an estimated delivery cost, such as an estimate of the expected number of hops required to reach the destination along a traditional shortest path.
Work in [10] develops analytical properties of related schemes, and energy-optimal routing for transmission of a single packet is considered in [11] [12] via dynamic programming.
However, when a stream of packets are to be transmitted, none of the above algorithms are throughputoptimal or energy-optimal.
There are several difficulties associated with developing a throughput optimal algorithm in this context.
First, individual nodes might only know the error probabilities on their own outgoing links, and may not know the error rates or traffic loads on other portions of the network.
Second, even if centralized network knowledge were fully available, an optimal algorithm would need to specify a contingency plan for each possible random transmission outcome.
For example, suppose a given node transmits a packet for which there are k potential receivers.
There are 2 k possible outcomes of this single transmission (one for each possible subset of successful receivers).
An optimal algorithm would require a decision for each possible outcome, perhaps also allowing for redundant packet forwarding.
Hence, the design of an optimal algorithm must overcome these geometric complexity issues.
This is further complicated if there are multiple simultaneous packet transmissions and multiple traffic streams sharing the same network, and if the network topology and link error probabilities are changing with time.In this paper, we overcome these challenges with a simple solution that uses the concept of backpressure routing and Lyapunov drift.
We first show that it is possible to restrict attention to algorithms that do not allow redundant forwarding, without loss of optimality.
We then show that the optimal packet commodity to transmit at each network node can be determined by a backpressure index that compares the current queue backlog of each commodity to the backlog in the potential receivers.
Once a packet from this optimal commodity is transmitted, the responsibility of forwarding the packet to its destination is shifted to the receiver node that maximizes the differential backlog.
Responsibility is retained by the original transmitter if no suitable receivers are found on a given transmission attempt.Backpressure techniques of this type were first applied to multi-hop wireless networks by Tassiulas and Ephremides in [13], where throughput optimal algorithms were developed using Lyapunov drift theory.
Lyapunov theory has since been a powerful mathematical tool for the development of stable scheduling strategies for wireless networks and switching systems [13]- [25], including our own work in [22]- [25] that applies backpressure concepts to solve joint stability and performance optimization problems, including energy efficiency and fairness.
Related work on energy efficient wireless scheduling is developed in [26]- [29].
The work in [13]- [29] does not consider the broadcast advantage of wireless networks, and assumes that all transmissions are fully reliable.
Work in [30] [31] considers backpressure in combination with network coding, and work in [32] considers backpressure strategies for cooperative transmission (where multiple nodes transmit redundant information simultaneously for a power enhancement at the receiver).
Heuristic algorithms that combine multireceiver diversity with network coding are developed in [33], and complexity issues of cooperative transmission for line networks are discussed in [34].
We do not consider network coding or cooperative transmission in this paper, and restrict attention to the multi-user diversity problem for networks with errors, as described above.
It is likely that our formulation can be extended to consider more sophisticated control actions by augmenting the set of decision options available to the network controller, in which case redundant packet forwarding may be required for optimality.In the first part of this paper we assume each network node transmits over an orthogonal channel, so that there is no inter-channel interference.
This highlights the routing decision options, illuminates the main concepts, and facilitates construction of a simple distributed algorithm.
Section II formulates this model and Sections III-V construct the dynamic algorithm and prove optimal performance in this interference-free context.
Section VI considers more general networks with inter-channel interference and variable rate and power options.
An optimal centralized algorithm is provided for this more general context.
The centralized algorithm includes a complex decision about commodity selection that is quite different from related backpressure algorithms that do not involve multi-receiver diversity.
Fortunately, we show that a simple distributed modification yields constant-factor performance guarantees.
Simulations for both fixed-topology networks and mobile networks are presented in Section VII.
We consider a timeslotted system with slots normalized to integral units t ∈ {0, 1, 2, . . .}.
There are N network nodes, and links are labeled according to node pairs (a, b) for a, b ∈ {1, . . . , N }.
Data arrives randomly to the network in packetized units, and we let A n (t) represent the number of packets that exogenously arrive to network node n during slot t that are intended for delivery to network node c. All packets destined for a particular node c are defined as commodity c packets.
Arrivals are assumed to be i.i.d. over timeslots, and we let λ (c) n = E{A (c) n (t)} represent the arrival rate of commodity c data into source node n (in units of packets/slot).
Internal queues at each node store packets according to their commodities.
Each packet is assumed to have an appropriate header field with commodity and packet number identifiers.We assume that at most one packet can be transmitted from any given node during a single timeslot, and let µ n (t) represent the number of packets transmitted by node n during slot t (where µ n (t) ∈ {0, 1}).
Each packet transmission is assumed to expend a constant amount of power P tran , and is successfully received by the other nodes of the network according to reception probabilities q nk (t) (for n, k ∈ {1, . . . , N }).
These probabilities may be time-varying due to changing environmental conditions and/or network mobility.
However, we assume channel orthogonality, so that these probabilities do not depend on the transmission decisions made at other nodes.
To allow for the possibility of an underlying time division (TDMA) or random access structure that enables this orthogonality, we assume that transmission opportunities at each node n are determined by a 0/1 process χ n (t).
Specifically, χ n (t) = 1 if and only if node n is allowed to transmit during slot t, and is 0 else.
The χ n (t) process enables the following network models:• Unrestricted Scheduling: χ n (t) = 1 for all n ∈ {1, . . . , N } and all t, so that each node can transmit on any slot.
Transmissions are assumed to be orthogonal.
• Restricted TDMA or Random Access: χ n (t) = 1 only at pre-scheduled (or random) times that ensure channel orthogonality.
This is useful as it is common to program a fixed or pseudo-random schedule of transmission opportunities into each node of an ad-hoc wireless network.
We treat χ n (t) as a background MAC process that is chosen in advance and given to the higher network layers as a fixed or pseudo-random time schedule.
Hence, design of χ n (t) is not part of our control plane, and the χ n (t) processes are not influenced by our routing and scheduling decisions.
Optimality is thus measured with respect to the given χ n (t) processes, and different processes may lead to different overall network performance.
Section VI treats a more general (and complex) network model with inter-channel interference.
There, no χ n (t) process is given, rather, transmission opportunities are optimally chosen with respect to the interference model.
For convenience, we define the network topology state process S(t) as the collective process of all node transmission capabilities and link conditions at time t, so that transmission opportunities and link probabilities can be determined as functionals of S(t).
That is, we have:χ n (t) = ˆ χ n (S(t)) q nk (t) = ˆ q nk (S(t))Let K n (t) represent the set consisting of all potential receivers for node n during slot t (which can potentially change from slot to slot if the network is mobile).
The set K n (t) can generally contain all N − 1 other network nodes, although it typically has a much smaller size and consists only of those nodes within realistic transmission range of node n. 1 Error events for a single packet transmission can be correlated over various links, and hence a more complete characterization of each transmitter n is given by probabilities q n,Ωn (t), where Ω n is a subset of nodes within the receiver set K n (t), and q n,Ωn (t) represents the probability that the set of all nodes that successfully receive the packet transmitted by node n is exactly given by the subset Ω n .
This probability is also determined as a functional of the topology state process: 2 q n,Ωn (t) = ˆ q n,Ωn (S(t))The above probabilities only concern error events on links from the same outgoing node n.
The error events of different packet transmissions from different nodes may also be correlated, and such additional correlations in principle are also determined by the topology state process S(t).
However, we shall find that error correlations between different nodes are irrelevant to network capacity and optimal control.
For analytical purposes, the network topology state S(t) is assumed to take values in a finite (but arbitrarily large) state space S. For each state s ∈ S, packet successes are independent with probabilitiesˆqprobabilitiesˆ probabilitiesˆq n,Ωn (s) over all slots t in which S(t) = s. For convenience, a table of notation is given in Table I.
The timing diagram of Fig. 2 illustrates our model of information exchange between a sender node n and an example receiver node k during a single timeslot.
We assume that χ n (t) = 1 so that node n has the opportunity to transmit and must decide if it should take this opportunity and, if so, which packet should be transmitted.
The beginning of the slot is used to exchange necessary control signals, possibly including channel probability information.
A single fixed length packet is then transmitted from node n, expending P tran units of power.
Every potential receiver then provides immediate ACK/NACK feedback to the transmitter, informing the transmitter if the packet was successfully received.
The absence of an ACK signal is considered to be equivalent to a NACK (this treats the case when the receiver node did not detect any transmission).
The transmitter node accumulates all of the ACK responses and then transmits a final message that provides instructions for future packet forwarding.
Network topology state process χn(t)Determines transmission opportunities for node n in slot t Kn(t)Set of all potential receivers for node n during slot t Ωn A subset of nodes within the potential receiver set Kn(t) q nk (t)Packet reception probability on link (n, k) in slot t q n,Ωn (t) Probability the reception set is Ωn given that n transmits The 3-part handshake of the timing diagram (transmission, ACK/NACK, and final instructions) is designed to cleanly describe a system where transmission outcomes are known to all relevant nodes at the end of a single timeslot.
This facilitates mathematical analysis.
However, in practice the last two steps of the handshake may take place by appending this information to the packet header of future packet transmissions.
This creates a system with delayed feedback information, which in principle does not affect throughput optimality (provided some regularity assumptions hold concerning the timeliness of the feedback) but may affect end-to-end network delay, as discussed in more detail in Section VI-E.
Throughout this paper, we make the idealistic assumption of perfect control information, so that the control signals themselves are not subject to errors.
In particular, for the timing diagram of Fig.
2, it is assumed that if a packet transmitted at node n was successfully received at node k, then the channel from k to n and from n to k is good enough for the remaining parts of the handshake to be successful.
This is a reasonable assumption if forward and backward channels are relatively similar for the duration of a timeslot, or if the dedicated control channel is reliable.
The possibility of control channel errors can create another situation of delayed feedback information, and this is also briefly discussed in more detail in Section VI-E.
The amount of control information required at the beginning of the timeslot depends on the network model.
In the case of single-commodity networks when energy minimization is neglected, we shall show an important channel-blind scheduling property where no control information is required.
However, for more general networks, control information that describes the current channel probability of neighbor nodes is needed.
This can possibly take place via a short pilot signal (possibly sent over a dedicated control channel) and/or through channel estimation based on feedback of previous transmissions.
The goal is to design a control algorithm that supports all traffic (whenever possible) while maintaining average power cost as small as possible.
Specifically, we require that the network be rate stable, so that the long term average rate of delivering packets to their destinations is equal to the input rate of exogenous sources (a more precise definition of rate stability is given in the next section).
The average power cost is defined as follows: For a power vector P = (P 1 , . . . , P N ), we define the separable cost function h(P ) = h 1 (P 1 ) + . . . + h N (P N ), where each component h n (P n ) is non-negative, continuous, and has the property that h n (0) = 0.
The power expended on each timeslot t is given by the vector P (t) = P tran · (µ 1 (t), . . . , µ N (t)), and the time average power cost h is defined:h = lim t→∞ 1 t t−1 τ =0 E {h(P (τ ))}Note that choosing h(P ) = N n=1 P n coincides with the objective of minimizing the time average expected power expenditure.
Under our simple network model, we have P n (t) ∈ {0, P tran } for all t, so that h n (P n (t)) ∈ {0, h n (P tran )}.
In this case, the h n (·) function plays only a limited role in generalizing the minimum average power objective, although it shall be more meaningful in the extended formulation of Section VI that considers a continuum of power options.
Here we characterize the optimal throughput and average power cost operating points, considering all possible control algorithms that conform to the network structure specified in previous sections.
We allow each network node to have infinite buffer space for storing packets, so that it can replicate any packet that it has successfully received in the past.
Every timeslot t, each network node n observes χ n (t).
If χ n (t) = 1, then node n can transmit any packet that it has successfully received in the past (regardless of whether or not it has already transmitted this packet).
The packet is then successfully received at the neighbor nodes according to the probabilities q n,Ωn (t).
We say that a packet is successfully delivered to its destination when the first replica of that packet is successfully received by the destination node.
These assumptions are quite general and allow for any routing or scheduling algorithm, possibly one that uses packet replication.
However, the option of network coding or cooperative power enhancement is not part of the control options considered here.Let (λ (c) n ) represent the matrix of exogenous input rates to the system, where λ (c) n is the rate of commodity c data entering source node n, in units of packets/slot.
It is assumed throughout that λ (n) n = 0 for all n ∈ {1, . . . , N }.
Let X (c) n (t) represent the total number of commodity c packets that arrived from source node n up to slot t, and let Y (c) n (t) represent the number of these packets that have been successfully delivered to the destination up to slot t (so that Y n (t) ≤ X (c)n (t) for all t).
A control algorithm is defined to be rate stable if: 3lim t→∞ Y (c) n (t) t = λ (c)n with prob.
1 for all (n, c)The network layer capacity region Λ is defined as the closure of all input rate matrices (λ (c) n ) that can be stabilized by the network according to some control algorithm that conforms to the above structure, perhaps an algorithm that uses redundant packet forwarding.Suppose that the network topology state process S(t) takes values on a finite state space S, and has well defined time average probabilities π s for each s ∈ S. For each node n, let H n denote the set of all subsets Ω n of {1, . . . , N } − {n}.
For each subset Ω n , recall thatˆqthatˆ thatˆq n,Ωn (s) is the probability that Ω n is exactly the set of all successful receivers of a packet transmitted by node n, given such a packet is transmitted when the topology state is S(t) = s.Theorem 1: (Network Capacity and Minimum Cost) The network capacity region Λ consists of all rate matrices (λ (c) n ) for which there exist multi-commodity flow variables {f(c) nk } together with probabilities α (c) n (s), θ (c)nk (Ω n ) for all n, k, c, all topology states s ∈ S, and all subsets Ω n ∈ H n , such that:f (c) ab ≥ 0 , f (c) cb = 0 , f (c) aa = 0 (1) a f (c) an + λ (c) n ≤ b f (c) nb for all n = c (2) c f (c) nk ≤ c s∈S π s α (c) n (s) Ωn∈Hnˆq Ωn∈Hnˆ Ωn∈Hnˆq n,Ωn (s)θ (c) nk (Ω n ) (3)where (1) holds for all a, b, c ∈ {1, . . . , N }, (3) holds for all links (n, k), and where the probabilities θ(c) nk (Ω n ) satisfy for all Ω n ∈ H n : θ (c) nk (Ω n ) = 0 if k / ∈ Ω n , N k=1 θ (c) nk (Ω n ) ≤ 1 and for all s ∈ S the α (c)n (s) probabilities satisfy:N c=1 α (c) n (s) ≤ 1 , α (c) n (s) = 0 ifˆχifˆ ifˆχ n (s) = 0Furthermore, the minimum average power cost required for network stability is given by the value h * that minimizes the following metric:h * = s∈S π s N n=1 N c=1 α (c) n (s)h n (P tran )(4)over all {f(c) nk }, α (c) n (s), θ (c) nk (Ω n ) variables that satisfy (1)-(3).
Proof:The theorem is proven by first showing that the given constraints are necessary for network stability, and that the constant h * is less than or equal to the time average power expenditure of any stabilizing policy.
This is shown in Appendix A, and is related to similar proofs of capacity and minimum energy in [21] [35].
The proof of sufficiency is proven in the next section by constructing a stabilizing policy for any rate matrix (λ(c)n ) that is interior to the capacity region, and showing that average power can be pushed arbitrarily close to h * .
Note that the θ (c) nk (Ω n ) probabilities are defined for each link (n, k), each commodity c, and each of the 2 N −1 subsets Ω n .
In particular, the above theorem describes an optimization problem with geometric complexity.
The theorem is similar in spirit to the capacity theorem of [21] [25], where the constraints (1) represent non-negativity and flow efficiency constraints for the flow variables {f n (s) value can be interpreted as the conditional probability that node n transmits a commodity c packet given that S(t) = s. Each θ (c) nk (Ω n ) value can be interpreted as the conditional probability that node n shifts packet forwarding responsibilities to node k, given that node n transmits a commodity c packet that is heard exactly by the subset Ω n of receivers.With this interpretation, Theorem 1 says that network capacity and minimum average power can be defined in terms of an optimization over the class of all stationary randomized policies for routing and scheduling that use only single-copy routing (so that redundant packet transfers are not used).
Thus, for any rate matrix (λ (c) n ) ∈ Λ, there exists a stationary randomized algorithm (with probabilities precisely matched to the network traffic rates and topology state probabilities) that can achieve a multi-commodity flow that supports the input rate matrix by routing all data to its proper destination, and that incurs an average power cost exactly given by h * .
However, even if all topology state probabilities π s were fully known, the geometric complexity of the optimization problem in Theorem 1 demonstrates the extreme difficulty of directly solving for the parameters required to implement such a policy.We overcome this difficulty in the next section with a simple online algorithm that yields performance that is arbitrarily close to optimal, with a corresponding delay tradeoff.IV.
THE DYNAMIC CONTROL ALGORITHM To construct a dynamic policy that achieves the bound specified in Theorem 1, we first define decision variables that specify a specific structure for packet routing, scheduling, and queueing.
Without loss of optimality, the structure considers only single-copy routing, so that there is no packet replication.
For each node n, let µ n (t) represent the number of packets node n decides to transmit on slot t. For each commodity c, let µ (c) n (t) represent the number of commodity c packets that node n decides to transmit.
For all slots t, the µ n (t) and µ (c) n (t) decision variables are subject to the following constraints:µ n (t) ∈ {0, 1} , µ n (t) ≤ χ n (t) (5) µ (c) n (t) ∈ {0, 1} , µ (c) c (t) = 0 (6) N c=1 µ (c) n (t) ≤ µ n (t)(7)That is, µ n (t) = 1 only if χ n (t) = 1, and µ (c) n (t) = 1 only for a single commodity c, and only when µ n (t) = 1 (because at most one packet can be transmitted on any slot).
The constraint µ c (t) = 0 ensures we do not retransmit a packet that has already reached its destination.
We note that node n spends P tran units of power on any slot for which µ n (t) = 1.
It is clear that a practical algorithm should only set µ n (t) = 1 if there is a packet available for transmission.
However, the analysis of our practical algorithm will be performed by comparing to a queue-length independent algorithm.
Hence, it is useful to view the transmission decisions µ n (t) and µ (c) n (t) as being constrained only by (5)- (7), and in particular they can potentially be chosen independently of queue backlog.
Thus, µ (c) n (t) can be 1 even if there is no commodity c data available in node n.
In this case, node n actually sends nothing, but is viewed as still expending P tran units of power (equivalently, the node can send a dummy packet with idle fill bits).
We let H nk (t) represent the random variable that is 1 if a packet transmitted from node n was successfully received by receiver k, and zero otherwise.
After receiving ACK/NACK feedback that reveals the H nk (t) variables, node n selects a new node to take responsibility for the packet (possibly choosing itself), and informs its receivers of the choice.
This is done according to control decision variables β (c) nk (t), representing the number of commodity c packets whose responsibility can be shifted from node n to node k during slot t.
The β β (c) nk (t) ∈ {0, 1} , β (c) nk (t) ≤ µ (c) n (t)H nk (t) (8) β (c) nn (t) = 0 , N k=1 β (c) nk (t) ≤ 1 (9)That is, the β (c) nk (t) variables are either 0 or 1, can be 1 only if a commodity c transmission opportunity occurs on slot t and H nk (t) = 1, and can be 1 for at most one receiver node k (where such a node k is necessarily in the set of potential receivers K n (t)).
If β (8)-(9).
In particular, they can also be chosen independently of queue backlog, so that β (c) nk (t) can potentially equal 1 even if node n does not have a commodity c packet that it actually transmitted.
In this case, the H nk (t) value is viewed as a random variable that is distributed the same as if a packet had actually been transmitted.
The decision variable β (c) nk (t) in this case does not affect the system queue states.Packets are stored at every node according to their commodity, and we define U U (c) n (t + 1) ≤ max U (c) n (t) − N k=1 β (c) nk (t), 0 + N a=1 β (c) an (t) + A (c) n (t)(10)The expression above is an inequality rather than an equality because the actual endogenous arrivals to node n may be less thanN a=1 β (c)an (t) if there are no actual commodity c packets transmitted from the other nodes a = n. Note also that the max [·, 0] operation ensures that (10) is correct even when U n (t) = 0 but β (c) nk (t) = 1.
We formally define U (n)n (t) to be zero for all n and all t.
We emphasize that the β n (t) have been made and ACK/NACK feedback (in the form of the random H nk (t) variables) have been received.
Note also that the above queueing model assumes a single-copy routing framework, as any packet that has its responsibility shifted to another node is erased from the queue buffer at the previous node.
We have the following dynamic control algorithm, defined in terms of a non-negative control parameter V that determines the degree to which we emphasize power cost minimization.Diversity Backpressure Routing (DIVBAR): Every timeslot t, each network node n observes the queue backlogs in each of its potential receiver nodes k ∈ K n (t), and observes the current link channel probabilities associated with its receivers.Each node n determines if χ n (t) = 1 (i.e., it determines if a transmission opportunity is available on the current slot).
If so, node n performs the following operations:1) For each commodity c and each receiver k ∈ K n (t), the differential backlog weights W (c) nk (t) are computed as follows:W (c) nk (t) = max[U (c) n (t) − U (c) k (t), 0](11)That is, the weight W (c) nk (t) is equal to the difference between the commodity c backlog in node n and the commodity c backlog in node k (maxed with zero).
2) For each commodity c, the potential receivers k ∈ K n (t)are priority ranked at node n according to the W (c) nk (t) weights, so that receivers with larger weights are ordered with higher priority (breaking ties arbitrarily).
We define R (c) nk (t) as the set of all receivers b ∈ K n (t) with higher priority rank than receiver k. Thus:W (c) nb (t) ≥ W (c) nk (t) for all b ∈ R (c) nk (t)3) Define φ (c) nk (t) as the probability that a packet transmission from node n is correctly received by node k, but is not received by any other nodes within R nk (t).
That is, the packet is not received by any nodes that are ranked with higher priority than node k according to the commodity c rank ordering of the previous step.
4) Define the optimal commodity c * n (t) as the commodity c ∈ {1, . . . , N } that maximizes (breaking ties arbitrarily):k∈Kn(t) W (c) nk (t)φ (c) nk (t)(12)Define W * n (t) as the resulting maximum value:W * n (t) = k∈Kn(t) W (c * n (t)) nk (t)φ (c * n (t)) nk (t) 5) If W * n (t) − V h n (P tran ) > 0,node n transmits a packet of commodity c * n (t).
Else, node n remains idle for slot t. 6) After receiving ACK/NACK feedback about the successful recipients of the transmission, node n shifts responsibility of packet forwarding to the successful receiver k with the largest positive differential backlog W(c * n (t)) nk (t).
If no successful receivers have positive differential backlog, node n retains responsibility of the packet.
The above algorithm is fully distributed, in that each node only requires queue backlog and link probability values for each of its neighboring nodes (i.e., each node within K n (t)).
The queue backlogs can be passed during the control information phase of the timeslot, or can be based on backlog updates received in the headers of previous packets.
4 The link error probabilities can be obtained based on control information exchanged at the beginning of the timeslot (such as a pilot signal and a corresponding SIN R measurement, as in [21]), or can be estimated based on previous ACK/NACK history.
The above algorithm considers the general case where link error events can be correlated.
However, computation of the φ (c) nk (t) probabilities can be greatly simplified under the assumption that error events are independent over each link.
In this case, φ (c) nk (t) is obtained from a simple multiplication of the appropriate success or error probabilities of the corresponding links.
Specifically, independent link errors would yield φ nk (t) = q nk (t) · b∈R (c) nk (t) [1 − q nb (t)] Consider the example scenario shown in Fig. 3 with one transmitter and two potential receivers.
The transmitter has packets of two commodities to transmit and the figure shows the values of the queue backlogs in all the nodes in a given slot t.
The success probabilities on the two links are also shown and are assumed to be independent for this example.
We now carry out the first 4 steps of the DIVBAR algorithm to illustrate the optimal commodity selection procedure.1) The differential backlog weights W T R1 (t) = max[5 − 1, 0] = 4 W (1) T R2 (t) = max[5 − 4, 0] = 1 W (2) T R1 (t) = max[2 − 3, 0] = 0 W (2) T R2 (t) = max[2 − 0, 0] = 22) The rank orderings for the commodities at the transmitter are given by:commodity 1 : R 1 > R 2 commodity 2 : R 2 > R 13) Using the rank ordering and independence of success probabilities on the two links, we get:φ (1) T R1 (t) = p φ (1) T R2 (t) = (1 − p)q φ (2) T R1 (t) = (1 − q)p φ (2)T R2 (t) = q 4) The weighted sum for each commodity can now be evaluated:commodity 1 : 4p + (1 − p)q commodity 2 : 2qThus, the DIVBAR algorithm would select a packet of commodity 1 to transmit if 4p + (1 − p)q > 2q.
Else, it would select a packet of commodity 2.
The above algorithm uses the backpressure concept of [13] [25] to route data in the direction of maximum differential backlog.
To understand how the φ (12), suppose that a particular node n transmits a packet of commodity c, so that µ Step 6 of DIVBAR implies that node n must find the successful receiver k ∈ K n (t) that maximizes the differential backlog metric W (c) nk (t).
Thus, each node n must compute:max k∈Kn(t) H nk (t)W (c) nk (t)This value is a backpressure index that measures the effectiveness of transmitting a packet of commodity c, and can be written according to the rank ordering:max k∈Kn(t) H nk (t)W (c) nk (t) = k∈Kn(t) W (c) nk (t)1 (c) nk (t)where 1(c) nk (t)is an indicator function that is 1 if and only if H nk (t) = 1 and H nb (t) = 0 for all receivers b ∈ R (c) nk (t) (i.e., all receivers with a rank ordering that is higher than the rank of receiver k).
This indicator function can be one for at most one term in the sum on the right hand side, and is 1 only for the term with the largest H nk (t)W (c) nk (t) value.
This value cannot be known before transmission, as it depends on the random success/failure events on each of the outgoing links.
Its conditional expectation given the current queue backlog is:E max k∈Kn(t) H nk (t)W (c) nk (t) | U (t), µ (c) n (t) = 1 = k∈Kn(t) W (c) nk (t)φ (c) nk (t) ≤ W * n (t)(13)whereU (t) = (U (c)n (t)) represents the matrix of current queue backlogs during slot t.Step 4 of the DIVBAR algorithm thus selects the commodity c * n (t) with the largest expected backpressure index.
The inequality (13) shall also be important in the analysis of DIVBAR presented in Section V.It is interesting to note a qualitative connection between this DIVBAR policy and the backpressure-based network coding policies of [30] [31].
These policies act to minimize the drift of a queue-based Lyapunov function, but the physical actions required for this are quite different from traditional link-based networks.
The actions of [30] [31] include network coding operations that can produce desirable queue states on the next slot, while the DIVBAR policy considers the probabilistic structure of the wireless broadcast and includes ACK/NACK and final instruction signaling in its set of control actions.
To facilitate mathematical analysis, we assume the network topology state S(t) is i.i.d. over timeslots.
5 Note that this also includes the case when the topology state does not change over time.
Define the constant µ in max to be the largest number of endogenous packet arrivals that any single node can receive during a timeslot.
Further, define A 2 max as an upper bound on the second moment of the total exogenous arrivals to any node during a timeslot, so that:max n E N c=1 A (c) n (t) 2 ≤ A maxWe assume the input rate matrix is interior to the capacity region Λ (so that stability is possible), and define max as the largest scalar such that (λ(c) n + max 1 (c) n ) ∈ Λ, where 1 (c)n is an indicator function that is 1 whenever n = c and zero else.Theorem 2: (Algorithm Performance) If topology state variations S(t) are i.i.d. over timeslots, and if the input rate matrix is strictly interior to the capacity region Λ, then the DIVBAR algorithm yields the following average network congestion and average power cost:lim sup t→∞ 1 t t−1 τ =0 n,c E U (c) n (τ ) ≤ N B + V h max max lim sup t→∞ 1 t t−1 τ =0 n E {h n (µ n (τ )P tran )} ≤ h * + N B/Vwhere h * is the minimum power cost (defined in (4)),h max = n h n (P tran ), and where B is defined:B = 1 2 (µ in max + A max ) 2 + 1(14)The finite bound on expected queue length in the above theorem implies that lim t→∞ E Y (c)n (t)/t = λ (c)n for all (n, c) (see [24]), so that the network is mean rate stable.
Further, because the system evolves according to an irreducible Markov chain with a countably infinite state space, the finite queue averages imply that time average probabilities and limits are well defined, so that the network is also rate stable (and hence yields maximum throughput).
Note that choosing the control parameter V to be zero leads to the best congestion bound but does not lead to any power efficiency guarantees.
The parameter V can be increased to drive average power cost arbitrarily close to the minimum cost h * required for network stability, with a corresponding linear increase in average network congestion (and hence, by Little's Theorem, average delay).
We prove Theorem 2 in Section V.
In the special case when power optimization is neglected (so that V = 0) and there is a single destination for all packets, the DIVBAR algorithm can be significantly simplified to allow for blind packet transmissions.
Specifically, because there is just a single commodity, the steps 1 -5 of DIVBAR can be avoided.
The algorithm thus reduces to having node n transmit a packet whenever possible (i.e., whenever χ n (t) = 1).
It then receives ACK/NACK feedback from the various receivers, and chooses the receiver k with the largest positive differential backlog U n (t)−U k (t), breaking ties arbitrarily and retaining the packet if no receiver has a positive differential backlog.
Note that the backlog of each receiver can simply be included in the ACK/NACK signal.
The algorithm thus achieves throughput optimality without requiring channel probability information.
This is a remarkable property, and enables perfect throughput optimality to be achieved even when channel probabilities are rapidly changing due to dramatic node mobility.
No effort is needed to estimate or track these success probabilities.Note that this single commodity scenario also applies in cases when the data can be delivered to any one of a set of sink nodes, as these sinks can be viewed collectively as a single virtual destination.
This is important, for example, in a sensor network with multiple data recovery points, or in a wireless network with multiple base stations that provide access to a larger wireline system.If there are K commodities (where K ≥ 1), the decision of which commodity to transmit can be trivialized by the (suboptimal) strategy of randomly choosing a commodity every transmission opportunity, independently and uniformly over all commodities c ∈ {1, . . . , K}.
When V = 0, this random commodity selection can be implemented without knowledge of channel probabilities, and stabilizes the network whenever input rates are within Λ/K (the capacity region that is reduced by a factor of K).
This fact is proven in Section VI-C for a generalized version of DIVBAR that supports multiple rate and power options.
Here we prove Theorem 2.
The proof uses our previous result from [24] [25] [22] concerning performance optimal Lyapunov scheduling, which is a simple but important extension of classical Lyapunov stability results of [13]- [21].
Let U (t) = (U (c) n (t)) represent the matrix of queue backlog values, and assume these backlogs evolve according to a given probability law and are affected by a control process P (t) = (P 1 (t), . . . , P N (t)).
Let h(P ) be any function of P that satisfies h(P ) ≥ h min for all P , for some finite lower bound h min (possibly zero or negative).
Let h * represent a target value for the time average of h(P (t)).
Let L(U ) = 1 2 n,c (U (c)n ) 2 represent a quadratic Lyapunov function, and define the one step Lyapunov drift ∆(U (t)) as follows:∆(U (t)) = E {L(U (t + 1)) − L(U (t)) | U (t)}Theorem 3: (Lyapunov Optimization [24] [25] [22]) If there exist constants B > 0, > 0, V ≥ 0 such that for all timeslots t and for all queue backlogs U (t), the Lyapunov drift satisfies:∆(U (t)) + V E {h(P (t)) | U (t)} ≤ B − n,c U (c) n (t) + V h * thentime average congestion and network cost satisfy:n,c U (c) n ≤ B + V (h * − h min ) h ≤ h * + B/V where n,c U (c) n = lim sup t→∞ 1 t t−1 τ =0 n,c E U (c) n (τ ) h = lim sup t→∞ 1 t t−1 τ =0 E {h(P (τ ))}The above theorem suggests the strategy of minimizing the expression ∆(U (t)) + V E {h(P (t)) | U (t)} every timeslot t, which is the motivation behind DIVBAR.
The conditional Lyapunov drift can be computed from the queue backlog expression (10) according to standard drift techniques (see [25]), and is given by:∆(U (t)) ≤ N B − n,c U (c) n (t)E b β (c) nb (t) − a β (c) an (t) − λ (c) n | U (t)where B is defined in (14).
Adding the cost metric to both sides (where P (t) = P tran · (µ 1 (t), . . . , µ N (t))), we have:∆(U (t)) + V E {h(P (t)) | U (t)} ≤ N B + V E {h(P (t)) | U (t)} − n,c U (c) n (t)E b β (c) nb (t) − a β (c) an (t) − λ (c) n | U (t)(15)The DIVBAR algorithm is designed to choose control actions that greedily minimize the right hand side of the above inequality.
Specifically, we have the following important lemma: Lemma 1: Given the current queue backlogs U (t), the algorithm DIVBAR chooses control variables µ n (t), µ (c) n (t), and β (c) nk (t) that minimize the right hand side of (15) over all feasible control choices that satisfy the constraints (5)-(9).
Proof: (Lemma 1) See Appendix B. Lemma 1 implies that the right hand side of (15) under the DIVBAR algorithm is less than or equal to the corresponding expression when the control decisions µ n (t), µ nk (t) that satisfy (5)-(9).
We now present an important corollary to the capacity theorem (Theorem 1).
For each input rate matrix λ = (λ (c) n ) ∈ Λ, we define Φ(λ) as the minimum power cost h * required to stabilize the system, defined in Theorem 1.
It is not difficult to show that Φ(λ) is continuous and convex in the rate vector λ [24].
Suppose that the input rate matrix is interior to the capacity region, so that there exists a positive value such that (λ n ) is in the capacity region Λ if and only if there exists a stationary randomized algorithm that chooses control decision variables µ * n (t), µ * (c) n (t) and β * (c) nk (t) subject to the constraints (5)-(9) and based only on the current topology state S(t) (and hence independent of current queue backlog), to yield:E b β * (c) nb (t) − a β * (c) an (t) − λ (c) n ≥ ∀n = c (16) E {h(P * (t))} = Φ(λ + )(17)where = (1 (c) n ) and P (t) = P tran · (µ 1 (t), . . . , µ N (t)).
The expectations in (16) and (17) are taken with respect to the random topology state S(t) and the random control decisions based on this topology state.Proof: (Corollary 1) The result is an immediate consequence of Theorem 1, and the proof is omitted for brevity.
Intuitively, one can understand the E{β * (c)nb } values as representing the f (17) are the same when conditioned on the current queue backlog U (t) (as the topology state S(t) is i.i.d. over slots and the control variables µ * n (t), µ * (c) n (t) and β * (c) nk (t) are backlog-independent).
Plugging (16) and (17) directly into the right hand side of (15) thus preserves the inequality and yields:∆(U (t)) + V E {h(P (t)) | U (t)} ≤ N B + V Φ(λ + ) − n,c U (c) n (t)The above inequality is in the exact form for application of the Lyapunov Optimization Theorem (Theorem 3), and we thus have (noting that h min = 0 and Φ(λ + ) ≤ h max ):n,c U (c) n ≤ (N B + V h max )// (18) h ≤ Φ(λ + ) + N B/V(19)The above performance bounds hold for any value > 0 such that (λn +1(c) n ) ∈ Λ, and hence the bounds can be optimized separately over all such .
Letting → max in (18) yields the congestion bound of Theorem 2.
Letting → 0 in (19) and noting that continuity of the Φ(λ) function implies Φ(λ+) → Φ(λ) = h * yields the power cost bound of Theorem 2.
Consider now a system with variable rate and power control options, so that every timeslot the transmission rates µ(t) = (µ 1 (t), . . . , µ N (t)) can be chosen such that µ n (t) ∈ {0, 1, . . . , µ out max } for all t (for some pre-specified integer µ out max ), and transmission power to support these rates is chosen according a power vector P (t) = (P 1 (t), . . . , P N (t)), where 0 ≤ P n (t) ≤ P peak for all t and all n (for some peak transmission power P peak ).
Note that the µ n (t) variable is still integer valued, but there is no longer any multiple access process χ n (t) that places further restrictions on µ n (t).
Define I(t) = (µ(t); P (t)) as the collective transmission control decisions of all network nodes during slot t, and define I as the set of all possible options for I(t).
We assume that I is such that if (µ, P ) ∈ I, then setting any rate or power entry of (µ, P ) to zero yields another vector within I.
We assume that error probabilities are functions of I(t) and the current topology state S(t), so that: q n,Ωn (t) = ˆ q n,Ωn (I(t), S(t))Note that this model allows for general inter-channel interference characteristics, as the success probabilities depend on the full I(t) decision variable, which includes transmission power decisions over all network nodes.
For example, the topology state S(t) might represent a matrix of current attenuation coefficients, and the success probability at a given receiver might depend on the signal-to-interference ratio (SINR) at that receiver.If m packets are transmitted by node n on slot t, then each of them is assumed to have the same q n,Ωn (t) probability.
Correlations in the error events of different packets within the batch of m are arbitrary and do not affect capacity or optimal control decisions.The control objective of stabilizing the network and minimizing h is the same as before.
Using similar reasoning, it can again be shown that it is possible to restrict to algorithms that do not allow redundant forwarding, without loss of optimality.
We construct an optimal policy using a similar Lyapunov drift argument.
Define µ µ (c) n (t) ∈ {0, 1, . . . , µ n (t)} , c µ (c) n (t) ≤ µ n (t) , µ (c) c (t) = 0 Define H (c)nk,i (t) ∈ {0, 1} as the random variable representing the reception outcome at receiver k for the ith commodity c packet transmitted from node n (so that H nk,i (t) ∈ {0, 1} as the packet forwarding decision, being 1 if node n plans to forward this packet to node k, and zero else.
The β β (c) nk,i (t) ≤ H (c) nk,i (t) , k β (c) nk,i (t) ≤ 1 , β (c) nn,i (t) = 0The first inequality states that we can only transfer responsibility of a packet to node k if node k has correctly received the packet.
The second inequality states that we can only transfer responsibility of a given packet to a single receiver.If k β (c)nk,i (t) = 0, then node n retains responsibility of this packet.
Note that these constraints generalize the constraints (5)-(9) for the basic DIVBAR algorithm, and the decision variables can similarly be chosen independently of queue backlog.
The queueing dynamics thus satisfy:U (c) n (t + 1) ≤ max   U (c) n (t) − N k=1 µ out max i=1 β (c) nk,i (t), 0   + N a=1 µ out max j=1 β (c) an,j (t) + A (c) n (t) (20)This is an inequality due to the fact that there may not be enough commodity c packets available at node a to transfer the fullµ out max j=1 β (c)an,j (t) packets to node n. Suppose the topology state process S(t) is i.i.d. over slots, and suppose exogenous arrivals are i.i.d. over slots with rate matrix λ = (λ(c) n ).
As before, define L(U ) = 1 2 n,c (U (c)n (t)) 2 , and define ∆(U (t)) as the one step Lyapunov drift.
The drift can be computed from (20) and satisfies (compare with (15)):∆(U (t)) + V E {h(P (t)) | U (t)} ≤ N B + n,c U (c) n (t)λ (c) n + E {Q(Θ(t)) | U (t)} (21)where we define Θ(t) = [I(t); {β (c) nk (t)}] as the collective control decision at time t, and we define Q(Θ(t)) as the portion of the drift bound that depends on Θ(t), given by:Q(Θ(t)) = V h(P (t)) − n,c U (c) n (t)   b,i β (c) nb,i (t) − a,i β (c) an,i (t)  (22) The following generalized DIVBAR algorithm observes the topology state S(t) and the queue backlogs U (t) and makes decisions on each slot t that minimize E {Q(Θ(t)) | U (t)}.
It uses a parameter V ≥ 0 to affect an energy-delay tradeoff.1) Compute W (c)nk (t) = max[U (c) n (t) − U (c) k (t), 0] as before.
For each node n and each commodity c, we again rank order the receivers k ∈ K n (t) with priority given by the largest values of W (c) nk (t), and define R (c) nk (t) as the set of receivers b ∈ K n (t) with higher rank ordering than receiver k.
We definê φ (c) nk (I(t), S(t)) as the probability that a packet transmission from node n during slot t is correctly received by node k, but not received by any other nodes b ∈ R (c) nk (t) that are ranked with higher priority than node k according to the commodity c ordering.
2) Define:G (c) nk (I(t), S(t)) = µ n (t)W (c) nk (t) ˆ φ (c)nk (I(t), S(t)) Choose a network-collaborative control action I * (t) = (µ * (t), P * (t)) ∈ I and a collection of optimal commodities c * n (t) ∈ {1, . . . , N } (for all nodes n) that jointly maximizes the function M (I * (t), c * (t), S(t)), where:M (I * (t), c * (t), S(t)) = n     k∈Kn(t) G (c * n (t)) nk (I * (t), S(t))   − V h n (P * n (t))   3) If k∈Kn(t) G (c * n (t)) nk (I * (t), S(t))> V h n (P * n (t)), node n transmits µ * n (t) commodity c * n (t) packets (using idle fill if there are not enough such packets).
4) After receiving ACK/NACK feedback from each receiver about each of the µ * n (t) transmitted packets, node n shifts responsibility of each packet to the successful receiver with the largest positive differential backlog W (c * n (t)) nk (t).
If no receivers of a given packet have positive differential backlog, node n retains responsibility of the packet.Note that the above algorithm sends only one commodity per node per slot.
If there are not enough packets of that commodity to send, null packets can be transmitted.
Alternatively, one can send packets of other commodities for which there are potential receivers with a positive differential backlog.
6 Choosing the appropriate control action I(t) = (µ(t); P (t)) effectively optimizes over all multiple access decisions, but yields an optimization problem in step 2 that can be quite difficult to solve and may require full centralized coordination.
In particular, we emphasize that the power allocation must be done jointly with the combinatorial commodity selection.
This is quite different than the max-weight backpressure strategies for networks without multi-reciever diversity (see [13] [25] [21]), where commodity selection is trivial.
However, distributed implementation is possible if all nodes transmit with orthogonal signals.
Further, for interference networks, constant factor throughput optimality results can be achieved if the resource allocation optimization in step 2 is achieved to within a constant factor by some lower complexity scheme.
Specifically, for a fixed constant γ such that 0 < γ ≤ 1, define γΛ as a γ-scaled version of the capacity region [22] [36] [25], so that λ ∈ γΛ if and only if there exists a vectorˆλvectorˆ vectorˆλ ∈ Λ such that λ = γ ˆ λ.
Suppose now that exogenous arrivals are i.i.d. over timeslots with arrival rate matrix λ = (λ (c) n ) that is interior to γΛ.
Theorem 4: (Generalized DIVBAR) Suppose that the above generalized DIVBAR algorithm is carried out, with the exception that every timeslot a (potentially sub-optimal) control actioñ I(t) = ( ˜ µ(t), ˜ P (t)) ∈ I and commodities˜ccommodities˜ commodities˜c(t) = (˜ c 1 (t), . . . , ˜ c n (t)) are used and satisfy for all t:E M ( ˜ I(t), ˜ c(t), S(t)) | U (t), S(t) ≥ γM (I * (t), c * (t), S(t)) − Cwhere γ and C are constants such that 0 < γ ≤ 1 and C ≥ 0, and I * (t), c * (t) are the optimal solutions for step 2.
The above expectation is with respect to possible randomized choices of˜I of˜ of˜I(t) and˜cand˜ and˜c(t).
If there is a positive value max such that (λ(c) n + max 1 (c) n ) ∈ γΛ, then: lim sup t→∞ 1 t t−1 τ =0 n,c E U (c) n (τ ) ≤ N B + C + γV h max max lim sup t→∞ 1 t t−1 τ =0 E {h(P (τ ))} ≤ γΦ(λ/γ) + N B + C Vwhere Φ(λ/γ) is the minimum average power required to stabilize a rate matrix λ/γ, and B is defined:B = (µ in max + A max ) 2 + (µ out max ) 2 2Proof: See Appendix C.
The case γ = 1, C = 0 corresponds to a resource and scheduling action that optimizes the metric M (·) in step 2, and yields stability for any rate matrix in the interior to the capacity region Λ.
Below we describe two sub-optimal schemes with reduced complexity that yield performance within a constant factor of optimality.
Suppose there are K commodities in the network, and that V = 0 (so that average power optimality is neglected).
Rather than carrying out the complex computations required to select the optimal commodity to transmit, every timeslot each node randomly chooses a commodity, independently and uniformly over all commodities c ∈ {1, . . . , K}.
Let˜cLet˜ Let˜c(t) represent the resulting random commodity selections on slot t.
The topology state S(t) is then observed, and a control actioñ I(t) is taken, where˜Iwhere˜ where˜I(t) maximizes M (I(t), ˜ c(t), S(t)) over all I(t) ∈ I.
That is, it optimizes the M (·) function, but with respect to the (possibly sub-optimal) commodities˜ccommodities˜ commodities˜c(t).
It is shown in Appendix D that this algorithm yields:E M ( ˜ I(t), ˜ c(t), S(t)) | U (t), S(t) ≥ 1 K M (I * (t), c * (t), S(t))It follows that this random commodity selection algorithm satisfies the condition of Theorem 4 with γ = 1/K, C = 0.
Thus, the algorithm stabilizes the network whenever input rates are within a K-reduced factor of capacity.
Consider a network where a node cannot transmit and receive on the same timeslot, and where all transmissions take place with power P tran .
Furthermore, assume a simple collision model, where every timeslot each node within reception range of a given transmitter has at most J other nodes that can act as interferers of this transmission.
The reception probability of a node is zero during any timeslot when it is transmitting or when it is attempting to receive while an interferer is also transmitting.
Otherwise, the reception probability is either constant or determined by a topology state process S(t).
Similar models are used for networks without multi-reciever diversity in [36] [37] [38].
An important special case is when J = 0, where the only constraint is that nodes cannot transmit and receive simultaneously, but can simultaneously receive from multiple transmitters that send over orthogonal channels.For simplicity, again let V = 0 so that optimizing average power cost is neglected.
Let I * (t) = (µ * (t), P * (t)) represent the control action that optimizes step 2 of the generalized DIVBAR algorithm.
This would require extensive coordination to compute.
Consider instead the following sub-optimal algorithm: Every timeslot, each node independently enters transmission mode with probability q, and enters reception mode with probability 1 − q. Define˜IDefine˜ Define˜I n (t) and˜cand˜ and˜c n (t) as the greedy control action and commodity choices at node n, which maximize:M n (I(t), c, S(t)) = k∈Kn(t) µ n (t)W (c) n,k (t) ˆ φ (c) n,k (I(t), S(t))(23)over all commodities c ∈ {1, . . . , K} and all control actions I(t) = (µ(t), P (t)) ∈ I that satisfy the additional restriction that µ m (t) = 0, P m (t) = 0 for all nodes m = n.
If a node n is in transmission mode during slot t, it sets˜Psets˜ sets˜P n (t) = P tran , and chooses commodity˜ccommodity˜ commodity˜c n (t) and rate˜µrate˜ rate˜µ n (t) that corresponds to this greedy control actioñ I n (t).
Thus, each transmitting node greedily selects a commodity and rate using the local differential backlog and link success probabilities associated with neighboring nodes, under the assumption that these other nodes are all in receive mode and that there are no other interferers.
In Appendix D, we show this algorithm satisfies:E M ( ˜ I(t), ˜ c(t), S(t)) | U (t), S(t) ≥ q(1 − q) J+1 M (I * (t), c * (t), S(t))Therefore, this random transmitter selection algorithm satisfies the condition of Theorem 4 with γ = q(1−q) J+1 , C = 0.
The value of q that yields the largest γ is given by q = 1/(J + 2), resulting in:γ = (1 − 1/(J + 2)) J+1 J + 2If J = 0, then we have q = 1/2, γ = 1/4.
If J is large then we have γ ≈ 1/((J + 2)e).
Suppose that instead of using the actual queue backlog values U n (t) satisfies for all n, c and all t:˜ U (c) n (t) − U (c) n (t) ≤ D 1(24)for some finite constant D 1 .
This would occur, for example, when the DIVBAR algorithm uses out-of-date queue backlog information due to delayed feedback.
Let˜ILet˜ Let˜I(t), ˜ c(t) represent the control action and commodity choices of a modified DIVBAR that uses these alternative backlogs, and let I * (t) and c * (t) represent the choices that minimize M (I(t), c(t), S(t)) (where M (·) is defined according to the true backlogs U (c) n (t)).
It is not difficult to see that:M ( ˜ I, ˜ c(t), S(t)) ≥ M (I * (t), c * (t), S(t)) − D 2where D 2 is a constant, and hence using the alternative weights ensures that the conditions of Theorem 4 are satisfied with γ = 1, C = D 2 .
Therefore, these modified weights create only a (potential) increase in network congestion and delay while maintaining full throughput optimality and energy efficiency.The inequality (24) also arises when DIVBAR is implemented with delayed ACK/NACK feedback.
Specifically, each transmitting node can wait for T slots to receive feedback about a packet transmission (treating the absence of feedback within T slots as a NACK).
The node buffers the packet during this time and sends a final instruction only after all feedback has been received or T slots have expired.
This approach can be used to achieve full throughput in cases when feedback delay is bounded by a constant.
The DIVBAR algorithm uses backpressure to learn efficient routes, where incoming data "pushes" old data in directions of least resistance.
However, when the network is lightly loaded, many packets may be routed in inappropriate directions before enough backlog builds up to suggest alternative routes.
An extreme example is the case when a single packet arrives to an empty network.
This packet could be routed randomly back and forth and might never reach its destination.
One approach that potentially reduces delay in these situations is to impose an additional constraint that restricts routing options to directions that make progress toward the destination.
However, such additional constraints might reduce network capacity, and can restrict adaptation in cases of link failures.An alternative is to apply the Enhanced Dynamic Routing and Power Control (EDRPC) approach developed for linkbased networks in [22] [21] to this multi-receiver diversity context.
Specifically, for each actual queue backlog U ˜ U (c) n (t) = U (c) n (t) + Z (c) n (t)(25)where Z nk (t) = max[ ˜ U (c) n (t) − ˜ U (c) k (t), 0] Clearly these modified weights satisfy (24), and hence throughput optimality and energy efficiency is unaffected.
While the analytical congestion bound increases under these modified weights, in practice it is possible to choose Z n (t) can be chosen to be proportional to the estimated number of hops from node n to destination c along a shortest path.
The˜WThe˜ The˜W (c) nk (t) values then include the estimated hop count differential associated with sending from node n to node k, so that data tends to be routed in the direction of the shortest path, and only deviates from this when backlog starts to build up along the path.
Alternatively, one can define Z (c) n (t) as an estimated geographic distance between node n and destination c, so that routing decisions tend to move data closer to the destination.
Simulation results that illustrate the improvements of this Enhanced DIVBAR (E-DIVBAR) scheme are given in the next section.
We now present simulation results on the performance of DIVBAR on two example networks.
We first consider a static network with independent noninterfering links and success probabilities as shown in Fig.4.
There are two sessions in the network: Source node A desires to send data to destination A , and source node B desires to send data to destination B .
We consider a time-slotted system in which new packets arrive at the two sources every slot according to independent Bernoulli processes, both of rate λ.
These need to be routed to their respective destinations.
Each node can broadcast at most one packet per slot to its neighbors.
Packet receptions are independent over each link, with link success probabilities as shown in the figure.
We simulate DIVBAR and E-DIVBAR on this network, and compare to the ExOR strategy of [8].
The ExOR algorithm labels each node n with a "shortest path" estimate Z (c) n , representing a "distance" estimate between node n and destination c based on link distances given by the inverse of the link success probability.
The E-DIVBAR algorithm adds this Z (c) n value to the differential backlog metric according to (25).
For DIVBAR and E-DIVBAR, the control parameter V is set to 0.
Simulations were conducted for all algorithms for different λ values ranging from 0 to 0.5, and each simulation was run for 1 million timeslots.
The resulting average congestion is shown for each experiment in Fig. 5.
Under ExOR, it can be shown that packets only traverse routes involving nodes 0, 1, 3, 5, 9.
The maximum rate λ that can be stably supported by both sessions using the ExOR policy can be calculated to be 0.255 packets/slot (see vertical asymptote in Fig. 5).
However, DIVBAR and E-DIVBAR can support a higher rate (in fact, they achieve the maximum possible rate over all diversity algorithms that satisfy the structural properties described in Section II).
This maximum throughput can be calculated to be 0.455 packets/slot.
It should also be noted that while the average total occupancy of DIVBAR exceeds that of ExOR under light loadings, E-DIVBAR has the best performance across all input rates.We next simulate DIVBAR on this network for increasing values of the control parameter V after fixing the input rate at λ = 0.3 packets/slot.
Note that this rate cannot be supported by ExOR.
Fig. 6(a) shows that the average power converges to about 0.399 as V increases.
Example static network used to compare ExOR, DIVBAR and E-DIVBAR.
The number on a link is the probability of successful packet reception on that link.
suggested by the performance bounds of Theorem 2.
We next consider a network with cell-partitioned structure as shown in Fig. 7.
There are 9 source nodes: 3 stationary, 3 locally mobile and 3 fully mobile.
The locally mobile nodes are restricted to move in the shaded cells while the fully mobile nodes can move anywhere in the network.
There are 2 stationary sinks and packets can be delivered to either of them (thus, this is a single commodity scenario).
Time is slotted and new packets arrive at the source nodes every slot according to a Bernoulli process of rate λ.
The mobile nodes perform a Markovian random walk over their respective regions, with equal probability of moving either North, South, East, or West (if a node decides to move in an infeasible region, it stays in its same cell).
The steady state location distribution of each mobile node is thus uniform over its feasible cell locations.Similar to the previous example, each node can broadcast at most one packet per slot on its outgoing links, and a packet transmitted on a link is successfully received by a node with probability equal to the success probability of that link.
This value is taken to be 0.9 for links in the same cell and 0.5 for links between adjacent cells (defined as cells that are either horizontal, vertical, or diagonal neighbors).
We assume multi-user reception is possible.
However, we impose the additional constraint that nodes cannot simultaneously transmit and receive (as in the case J = 0 of Section VI-D).
We consider a randomized algorithm where each node with packets to send decides to enter transmission mode with probability q = 1/2, which ensures capacity is achieved to within a factor of 4 (see Section VI-D).
We simulate DIVBAR on this network.
n ), where λ (n) n = 0 for all n ∈ {1, . . . , N }.
Suppose there exists a stabilizing control strategy (possibly one that uses redundant packet transfers).
Let h represent the lim inf of the average power cost of this strategy:h = lim inf t→∞ 1 t t−1 τ =0 N n=1 h n (P n (τ ))(26)We show that there exist multi-commodity flow variables {f nk (Ω n ) that satisfy (1)- (3), and further that h is greater than or equal to the value h * defined in Theorem 1.
This proves that the constraints (1)-(3) are necessary for network stability, and that no stabilizing algorithm can achieve an average power cost less than h * .
Let X (c) n (t) represent the number of commodity c packets that exogenously arrive to network node n during the first t timeslots.
Define a unit as a packet or a replicated copy of a packet (replicated units are also considered to be units).
Two units are said to be distinct if they are copies of distinct original packets.
When a unit is successfully transmitted from one node to another, we say that the original unit is retained in the transmitting node while a copy of the unit is created in the new node.
In this case, we say that the unit in the transmitter is the parent of the new unit in the receiver.
If a single node receives multiple successful non-distinct units on the same slot, only a single parent is selected (arbitrarily from the set of all successful transmitters of that unit).
Thus, each unit that is not the original packet has a distinct parent.
The commodity of a unit is defined as the commodity of its original packet and is the same as the destination node of the unit.
The source node of a unit is the source node of its original packet.Let Y (c) n (t) represent the number of distinct units with source node n and commodity c that have been successfully delivered to their destination during the first t timeslots.
Because the algorithm is assumed to be rate stable, with probability 1 and for all (n, c), the delivery rate is equal to the input rate:lim t→∞ Y (c) n (t) t = lim t→∞ X (c) n (t) t = λ (c) n(27)Let U (c) n (t) be the set of distinct units that were the first to reach their destination by time t (if two non-distinct units reach their destination at the same time, we arbitrarily assign only one of them to U n (t).
Define the ancestors of a given unit u to be the set consisting of the parent of u, the parent of the parent, etc., all the way up to the original packet.
For each successfully delivered unit u, define path(u) as the sequence of nodes {n 1 , n 2 , . . . , n k } associated with transmission of its ancestors, where n 1 is the source and n k is the destination (for some finite integer k that depends on the number of transmissions).
The path might repeat one or more nodes several times.
However, if a unit u was successfully delivered to its destination, then for any node n along its path, the number of times an ancestor of u is endogenously transmitted into node n must be exactly the same as the number of times an ancestor of u is transmitted out of node n (provided that node n is not the destination).
Defining F (c) ab (t) to be the total number of times that ancestors of distinct commodity c units within the set ∪ m U (c) m (t) have been transmitted from node a to node b, we thus have for each node n and commodity c:Y (c) n (t) + a F (c) an (t) = b F (c) nb (t) whenever n = c (28) Note that c F (c) ab (t)is the total number of ancestors of delivered units within ∪ m,c U (c) m (t) that successfully traverse link (a, b).
Now define for all channel states s, all nodes a, b and commodities c, and all subsets Ω a :• T s (t): the number of times the channel state is equal to s during the first t slots.
• α (c)a (s, t): the number of times a commodity c unit attempts transmission at node a while the channel state is s (during the first t slots).
• q (c) a,Ωa (s, t): the number of times a transmission of a commodity c unit in node a is correctly received exactly by the subset Ω a when the channel state is s (during the first t slots).
• θ (c) ab (Ω a , s, t): the number of times a commodity c unit within the set ∪ m U (c) m (t) is created at node b by a parent at node a when the topology state is s and the set of correctly received packets is equal to Ω a (during the first t slots).
It follows that:c F (c) ab (t) t = c,s,Ωa T s (t) t α (c) a (s, t) T s (t) q (c) a,Ωa (s, t) α (c) a (s, t) θ (c) ab (Ω a , s, t) q (c) a,Ωa (s, t)(29)where we formally define 0/0 = 0 for terms on the right hand side of (29).
7 Note that for all t we have:0 ≤ α (c) a (s, t) T s (t) ≤ 1 , 0 ≤ θ (c) ab (Ω a , s, t) q (c) a,Ωa (s, t) ≤ 1(30)Further, because the control strategy conforms to the system constraints, we have:c α (c) a (s,t) Ts(t) ≤ 1 , α (c) a (s,t) Ts(t) = 0 ifˆχifˆ ifˆχ a (s) = 0 (31) θ (c) ab (Ωa,s,t) q (c) a,Ωa (s,t) = 0 if b / ∈ Ω a (32) N k=1 θ (c) ak (Ωa,t) q (c) a,Ωa (s,t) ≤ 1(33)Because channel states have well defined time averages: a (s, t) → ∞ as t → ∞.
Now define f (c) ab (t) = F (c)ab (t)/t, and note that:0 ≤ f (c) ab (t) ≤ 1 , f (c) cb = f (c) aa = 0(34)Let t i represent a sequence of time slots over which the time average power cost achieves its liminf h. Because the constraints in (30)-(34) define a closed and bounded region with finite dimension, there must exist an infinite subsequence˜t subsequence˜ subsequence˜t i over which the time average power cost also achieves its liminf, and the individual terms converge to points α(c) a (s), θ (c) ab (Ω a , s), f (c)ab that also satisfy the inequalities (30)- (34):lim˜ti→∞ lim˜ lim˜ti→∞ 1 ˜ t i ˜ ti−1 τ =0 N n=1 h n (P n (τ )) = h (35) lim˜ti→∞ lim˜ lim˜ti→∞ α (c) a (s, ˜ t i ) T s ( ˜ t i ) = α (c) a (s) lim˜ti→∞ lim˜ lim˜ti→∞ θ (c) ab (Ω a , s, ˜ t i ) q (c) a,Ωa (s, ˜ t i ) = θ (c) ab (Ω a , s) lim˜ti→∞ lim˜ lim˜ti→∞ f (c) ab ( ˜ t i ) = f (c) abFurthermore, using (27) in (28) and taking˜ttaking˜ taking˜t i → ∞ yields:λ (c) n + a f (c) an = b f (c) nb whenever n = cLikewise, using the above limits in (29) as˜tas˜ as˜t i → ∞ yields:c f (c) ab = c,s,Ωa π s α (c) a (s)ˆ q a,Ωa (s)θ (c) ab (Ω a , s) for all (a, b)Now define:θ (c) ab (Ω a ) = s π s α (c) a (s)ˆ q a,Ωa (s)θ (c) ab (Ω a , s) s π s α (c) a (s)ˆ q a,Ωa (s)assuming the denominator is non-zero (define θ π s α (c) a (s)ˆ q a,Ωa (s)θ (c) ab (Ω a ) for all (a, b)This proves that there exist suitable multi-commodity flow variables and probability variables for which the rate matrix (λ (c) n ) satisfies the constraints of Theorem 1.
Finally, note that the time average power cost satisfies:1 ˜ t i ˜ ti−1 τ =0 n h n (P n (τ )) = s T s (t) t n,c α (c) n (s, t) T s (t) h n (P tran )Using (35) in the above equality and taking˜ttaking˜ taking˜t i → ∞ yields:h = s π s n,c α (c) n (s)h n (P tran )Thus, the value h corresponds to particular variables f(c) ab , α (c) a (s), θ (c)ab (Ω a ) that satisfy the constraints of Theorem 1.
It follows that h ≥ h * , where h * is defined as the minimum value of h for which such variables can be found that satisfy the constraints.
This proves the result.
Proof: (Lemma 1) To show that the DIVBAR control actions minimize the right hand side of (15), define f (t) as the sum of all terms on the right hand side that involve control decision variables:f (t) = V E {h(P (t)) | U (t)} − g(t)(36)where g(t) is defined as follows:g(t) = n,c U (c) n (t)E b β (c) nb (t) − a β (c) an (t) | U (t)Switching the sums yields:g(t) = n,k,c E β (c) nk (t) | U (t) U (c) n (t) − U (c) k (t) ≤ n,k,c E β (c) nk (t) | U (t) W (c) nk (t)where the final inequality follows by definition of W (c) = n E {V h n (P n (t)) − W * n (t)µ n (t) | U (t)} Furthermore, this lower bound on f (t) is both minimized and achieved by the DIVBAR algorithm that allocates power P tran for transmission from node n whenever V h n (P tran ) < W * n (t), and that chooses the commodity and receiver node as described.
This proves that DIVBAR minimizes f (t) over all possible control actions, proving the lemma.
Claim 1: The generalized DIVBAR algorithm in Section VI that uses the sub-optimal control decisions specified in Theorem 4 makes control decisions I(t) = (µ(t), P (t)) and β (c) nk,i (t) that satisfy:E {Q(Θ(t)) | U (t)} ≤ C + γE Q(Θ opt (t)) | U (t)(39)where Θ opt (t) are the control decisions that minimize E {Q(Θ(t)) | U (t)} over all feasible controls.
Proof: It suffices to prove that the optimal resource allocation decisions of the generalized DIVBAR algorithm minimize Q(Θ(t)) over all alternative controls.
The proof of this fact is similar to the proof of Lemma 1 in Section V-A, and is omitted for brevity.Define Λ as the closure of all stabilizable rate matrices, and suppose the exogenous input rate matrix λ is within Λ.Claim 2: If λ ∈ Λ, then there exists a stationary randomized control algorithm that makes decisions Θ * (t) = [I * (t); {β * (c) nk,i (t)}] according to the system constraints and that satisfies for all slots t:a,i E β * (c) an,i (t) + λ (c) n ≤ b,i E β * (c)nb,i (t) ∀n = c E {h(P * (t))} = Φ(λ)The proof of Claim 2 is similar to that of Theorem 1 and Corollary 1 (compare with (16) and (17)), and is omitted for brevity.
Suppose now that there is a positive value max such that (λ (c) n + max 1 (c) n ) ∈ γΛ, where γ is the constant in (39) and satisfies 0 < γ ≤ 1.
Below we prove Theorem 4.
Proof: (Theorem 4) From Claim 1, we know that the drift bound in (21) satisfies:∆(U (t)) + V E {h(P (t)) | U (t)} ≤ N B + n,c U (c) n (t)λ (c) n + C + γE Q(Θ opt (t)) | U (t)(40)Define = (1 (c)n ) (for a given > 0).
We know that λ+ ∈ γΛ whenever ≤ max , and hence (1/γ)(λ + ) ∈ Λ.
Therefore, we know by Claim 2 that there exists a stationary randomized control action Θ * (t) that makes decisions independent of queue backlog, and that yields (using (22)):E {Q(Θ * (t)) | U (t)} ≤ V Φ( 1 γ (λ + )) − n,c U (c) n (t) (λ (c) n + ) γ(41)(note that U (c) n (t) = 0 whenever 1 (c) n = 0).
Because Θ opt (t) minimizes E {Q(Θ(t)) | U (t)} over all alternative controls, we have that:E Q(Θ opt (t)) | U (t) ≤ E {Q(Θ * (t)) | U (t)}Using this fact in (40) and (41) E {h(P (τ ))} ≤ γΦ(1 γ (λ + )) + N B + C V lim sup t→∞ 1 t t−1 τ =0 n,c E U (c) n (t) ≤ N B + C + γV h maxThe above inequalities hold for any such that 0 < ≤ max .
Taking a limit as → 0 and using continuity of Φ(·) yields the power cost bound of Theorem 4, and setting = max yields the congestion bound.
To analyze the randomized commodity selection algorithm, define functions M n (·): M n (I(t), c n (t), S(t)) = k∈Kn(t) G (cn(t)) nk (I(t), S(t)) and note that, because V = 0, for any I(t), c(t), S(t) we have:M (I(t), c(t), S(t)) = n M n (I(t), c n (t), S(t))Let I * (t) represent the optimal control action corresponding to the optimal commodities c * (t).
Because I * (t) ∈ I, by definition of˜Iof˜ of˜I(t) we have for all t:M ( ˜ I(t), ˜ c(t), S(t)) ≥ M (I * (t), ˜ c(t), S(t))Taking expectations of (42) with respect to the distribution of the random commodities˜ccommodities˜ commodities˜c(t) yields:E M ( ˜ I(t), ˜ c(t), S(t)) | U (t), S(t) ≥ E {M (I * (t), ˜ c(t), S(t)) | U (t), S(t)} = n E {M n (I * (t), ˜ c n (t), S(t)) | U (t), S(t)}= n 1 K K k=1 M n (I * (t), k, S(t)) (43) ≥ n 1 K M n (I * (t), c * n (t), S(t)) (44) = 1 K M (I * (t), c * (t), S(t))where (43) follows because each commodity˜ccommodity˜ commodity˜c n (t) is chosen independently and uniformly over k ∈ {1, . . . , K}, and (44) holds because M n (·) ≥ 0 and hence the sum over all commodities is greater than or equal to the single term associated with commodity c * n (t).
To analyze the randomized transmitter selection algorithm, note that by definition of˜Iof˜ of˜I n (t) and˜cand˜ and˜c n (t) we have for all t: M n ( ˜ I n (t), ˜ c n (t), S(t)) ≥ M n (I * (t), c * n (t), S(t))Define˜cDefine˜ Define˜c(t) = (˜ c 1 (t), . . . , ˜ c N (t)), and define˜Idefine˜ define˜I(t) as the collective greedy control actions of all nodes:˜ I(t)= [(˜ µ 1 (t), . . . , ˜ µ N (t)); ( ˜ P 1 (t), . . . , ˜ P n (t))]Note that˜Ithat˜ that˜I(t) includes the randomized transmitter actions and is different from˜Ifrom˜ from˜I n (t) (where˜Iwhere˜ where˜I n (t) transmits at node n with˜µ with˜ with˜µ n (t), ˜ P n (t), and does not transmit at any other node).
The random transmitter selection ensures: E M n ( ˜ I(t), ˜ c n (t), S(t)) | U (t), S(t) ≥ q(1 − q) J+1 M n ( ˜ I n (t), ˜ c n (t), S(t))This inequality can be understood as follows: The value M n ( ˜ I n (t), ˜ c n (t), S(t)) is achieved exactly in the case when only node n transmits, all other nodes are in receive mode, and the reception events and corresponding ACK/NACK feedback takes place according to the reception probabilities associated with the network channels (not including collision effects).
Let k be the node that would be selected in this no-collision scenario (possibly being node n itself).
Then conditional on these same channel events in the actual experiment, this node k would be chosen with probability at least q(1 − q) J+1 , where q is the probability that node n indeed enters transmission mode, and (1 − q) J+1 bounds the probability that node k and all of the (at most J) nodes that can interfere with the n-to-k channel are in receiver mode.
Therefore, the lower bound in (46) holds.Note by definition that for any I(t), c(t), S(t):M (I(t), c(t), S(t)) = n M n (I(t), c n (t), S(t))Therefore:E M ( ˜ I(t), ˜ c(t), S(t)) | U (t), S(t) = n E M n ( ˜ I(t), ˜ c n (t), S(t)) | U (t), S(t) ≥ n q(1 − q) J+1 M n ( ˜ I n (t), ˜ c n (t), S(t)) (47)≥ q(1 − q) J+1 n M n (I * (t), c * n (t), S(t)) (48) = q(1 − q) J+1 M (I * (t), c * (t), S(t))where (47) follows by (46) and (48) follows by (45).
