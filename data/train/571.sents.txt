Recent developments in mobile code and embedded systems have led to an increased interest in open platforms, i.e. platforms which enable different applications to interact in a dynamic environment.
However , the flexibility of open platforms presents major difficulties for the (formal) verification of secure interaction between the different applications.
To overcome these difficulties, compositional verification techniques are required.
This paper presents a compositional approach to the specification and verification of secure applet interactions.
This approach involves a com-positional model of the interface behavior of applet interactions, a temporal logic property specification language, and a proof system for proving correctness of property decompositions.
The usability of the approach is demonstrated on a realistic smartcard case study.
Verification Techniques for Open Platforms.
Open platforms allow different software components, possibly originating from different issuers, to interact easily in a single environment.
Thanks to their flexibility, such open platforms are becoming pervasive in modern software for mobile code, but also for embedded devices such as smartcards.Quite unsurprisingly, the flexibility of open platforms raises major difficulties when it comes to establishing global properties of their applications.
Such properties, which capture the interface behavior of the platform's components, include many common security properties such as "Component B can only access resource R after being authorized by Component A", or "Component A cannot perform action α between Component B performing action β and Component C performing action γ".
Two problems arise with the verification of such global properties:-the complexity of the platform.
In order to reason about the system, one needs to specify the communication mechanisms supported by the platform.
These can be intrinsic (e.g. in Java 1 with privileged instructions and visibil-ity modifiers; in JavaCard 2 , with firewalls and secure object sharing mechanisms) and can complicate reasoning substantially; -the availability of the software.
In the case of platforms supporting dynamic loading of software, one often would like to establish properties that are preserved when new software is loaded.
In particular, this is true for security properties such as confidentiality and integrity.These problems can be tackled by enforcing the desired properties through strict local security checks, as is done e.g. in bytecode verification, see e.g. [13], or in type systems for information flow, see e.g. [17].
However, this requires focusing on a very restricted set of properties, that excludes many useful global properties.Open Platforms for Smartcards.
New generation smartcards such as JavaCards are open platforms that support multiple applications on a single card and postissuance loading of applets (i.e. applications can be loaded on the card after being issued to users).
As smartcards are typically used as identity documents and money devices, security issues are particularly at stake, and the need for formal verification is widely recognized, as testified e.g. by Common Criteria 3 .
Despite the advent of on-card bytecode verification [14], current technology prevents complex verifications to be performed on-card, thus applet verification needs to be performed off-card, presumably prior to loading the applet on the card.
In this setting, one needs to analyze the possible interactions between the applet being loaded and the applets already on the card without having access to the code of the latter.Compositional Verification.
One possible verification strategy for programs operating on open platforms consists of:1.
reducing global properties of programs to local properties about their components, using compositional verification techniques; 2.
verifying local properties of components by standard means, such as modelchecking.Such a strategy can be used to control state-space explosion and has been employed to good effect to establish the correctness of realistic, industrial-size open distributed telecom systems [9].
The main goal of this paper is to show that such a strategy is also applicable to open platforms such as smartcards.
To this end, we develop a framework which allows to reduce global properties to local properties about components.
The problem of verifying the local properties is not addressed here, since there are standard algorithmic techniques for this (see e.g. [4]).
Our framework for compositional verification consists of:-a model of applet interactions that captures, in a language-independent setting, control flow within applets and procedure calls between applets.
This model is inspired by [11], and was motivated and presented informally by the present authors in [2].
-a specification language based on the modal µ-calculus [12,8], together with a set of specification patterns, inspired from Bandera [1], that allows higherlevel specifications and reasoning; -a compositional proof system in the style of [16,7,9] that is used for proving correctness of property decompositions.
This proof system has been proved sound w.r.t. the underlying model in PVS [15].
To illustrate the benefits of our method, we also detail an example of property decomposition in the setting of an industrial smartcard case study [3].
Contents.
The remainder of the paper is organized as follows.
The model, specification language and proof system are introduced in Sections 2, 3 and 5 respectively, whereas Section 4 provides a brief overview of the language of patterns.
The case study is detailed in Section 6.
Finally, Section 7 concludes with related and future work.
We focus on the control flow in platforms in which procedure or method calls are the primary means for interaction between components.
For proving validity of property decompositions we need a model of program behavior which captures the interaction behavior of programs and program components, and over which the formulae of property specification languages can be interpreted.
Standard models of this kind are provided by labeled transition systems (LTS), where the transition labels denote method invocations and returns.
Interaction behavior can then be defined in an abstract and language independent fashion, following the approach by Jensen et al. [11], as being induced by a transfer/call graph through a set of transition rules.
Composition of behaviors is obtained in process algebraic style by using imperfect actions which handshake to produce perfect communications.
The program model and its operational semantics have been motivated and described in greater detail (but less formally) in [2].
Model.
We formalize the program model we presented in [2].
M ∆ = (A, V ; app, ret; → T , → C )where A is a set of applet names; V is a set of vertices called program points; app : V V A is a partial function mapping program points to applet names; ret : V → bool is a program point predicate identifying the program's return points; Intuitively, an applet state represents the unfinished calls that have been made from and to an applet.
As method calls can cross applet boundaries, both the source and the destination of a call are remembered, to ensure "proper" returning (i.e. to the appropriate callee) from a method call.
If intra-procedural execution takes place within an applet, i.e. by following the transfer relation, the changing of the active program point is reflected by changing the last element in the call stack.
This is described by the operational semantics below.
→ T ⊆ V × V is a transfer relation respecting applet boundaries, i.e. app(v) = a and v → T v implies app(v ) = a; → C ⊆ V ×VOperational Semantics.
The behavior of programs is given in terms of labeled transition systems.
T M ∆ = (S M , L M ; → M) in a straightforward fashion: S M is the set of wellformed program states of M; L M is the set of transition labels consisting of τ and the triples of the shape v l v , v l?
v , and v l!
v , where v, v ∈ V and l ∈ {call, ret}; and → M ⊆ S M × L M × S M is the least transition relation on S M closed under the transition rules of [2] (see Appendix A).
[send call] v 1 → C v 2 loc a v 1 ¬loc a v 2 a.π · ·v, v 1 v1 call!
v2 − −−−−− → a.π · ·v, v 1 · v 1 , v 2which describes under which conditions an applet can invoke a method in another applet.
This rule specifies that if applet a is in a state where v 1 is the active program point, and if there is an outgoing call edge v 1 → C v 2 to an external program point v 2 , then sending a call over applet boundaries is enabled.
The local state of the applet will be extended with a pair v 1 , v 2 , to reflect this call.Notice that this implicitly makes a inactive, because the last program point in the applet state is now no longer local to a.
An example of a transition rule for composite states is the rule[synchro] A 1 v1 l?
v2 −−−−→ A 1 A 2 v1 l!
v2 −−−−→ A 2 l ∈ call, ret A 1 | A 2 v1 l v2 − −−− → A 1 | A 2which describes how two applets synchronize if one sends out a message call or return, which is received by the other applet.
It is said that the imperfectly labeled transitions v 1 l?
v 2 and v 1 l!
v 2 synchronize into one perfectly labeled transition v 1 l v 2 .
Properties of component interaction can be conveniently expressed in a modal logic with recursion, such as Kozen's modal µ-calculus [12], extended with modelspecific atomic formulae, where the modalities are indexed by transition labels.In addition, such a logic is suitable for compositional reasoning (cf. [16,8,9]).
Let a range over applet name variables 4 , v over program point variables, π over applet call stack variables, Π over applet call stack terms generated by Π ::= π Π · ·v, v , X and Y over program state variables, A over program state terms generated by A ::= a.Π A | A, and α over transition labels, all of these possibly indexed or primed.Definition 4 (Syntax).
Atomic formulae σ and formulae φ are generated by the following grammar, where x ranges over program point variables and applet call stack variables, t over program point variables and applet call stack terms, α over transition labels, and X over propositional variables:σ ::= t = t return v local A v φ ::= σ active ¬φ φ ∧ φ ∀x.φ [α] φ X νX.φWe write local a v for local a.π v.An occurrence of a subformula ψ in φ is positive, if ψ appears in the scope of an even number of negation symbols; otherwise the occurrence is negative.
The formation of fixed point formulae is subject to the usual formal monotonicity condition that occurrences of X in φ are positive.
A formula φ is propositionally closed if φ does not have free occurrences of propositional variables.
Standard abbreviations apply, like for instance ∃x.φ∆ = ¬∀x.¬φ, α φ ∆ = ¬ [α] ¬φ, and µX.φ ∆ = ¬νX.
¬(φ[¬X/X]).
The semantics of formulae is given relative to a program model M, its induced LTS T M , and an environment ρ mapping variables to members of their 4 By abuse of notation we use the same letters for the variables of the logic and for arbitrary constants of the respective domain in the model.
respective domains, lifted to expressions Π and A in the natural way.
The semantic interpretation [[σ]] M ρ of an atomic formula σ maps σ to a boolean, while the semantics φ M ρ of a formula φ is described as the set of program states satisfying formula φ.Definition 5 (Semantics).
Let M be a program model, T M be its induced LTS, and let ρ be an environment.
The semantics of atomic formulae is defined by:[[t 1 = t 2 ]] M ρ ∆ = t 1 ρ = t 2 ρ [[return v]] M ρ ∆ = ret(vρ) [[local A v]] M ρ ∆ = app( The semantics of formulae is standard [12], except for:σ M ρ ∆ = if [[σ]] M ρ then S M else ∅ active M ρ ∆ = {s ∈ S M | s is active} The property specification language presented above is rather low-level.
To facilitate high-level formal reasoning, we introduce a collection of specification patterns, following the approach of the Bandera project [6].
In the context of the present work, the use of specification patterns has an additional purpose: as explained in the introduction, we have two different kind of verification tasks in our framework, namely model-checking the local properties of the individual applets, and proving property decompositions correct.
The use of general temporal logic patterns allows us to use different verification techniques (based on different logics) for the different tasks.
For example, we can model check the local applet properties by translating, as appropriate, the specifications into CTL (e.g. as input for NuSMV [5]) or LTL (e.g. as input for SPIN [10]), while we can use the modal µ-calculus to prove the correctness of the property decomposition, as this is more suitable for the task.A typical specification pattern used to express invariant properties is:Always φ ∆ = νX.
φ ∧ [τ ] X ∧ ∀v 1 .
∀v 2 .
[v 1 call v 2 ] X ∧ [v 1 call?
v 2 ] X ∧ [v 1 call!
v 2 ] X ∧ [v 1 ret v 2 ] X ∧ [v 1 ret?
v 2 ] X ∧ [v 1 ret!
v 2 ] XWhen components communicate via procedure or method calls one frequently needs to specify that some property φ holds within a call, i.e. from the point of invocation to the point of return.
For these purposes we propose the following pattern:Within v φ ∆ = ∀v 1 .
[v 1 call v] Always −ret v1 φ ∧ [v 1 call?
v] Always −ret!
v1 φwhere Always −λ v φ is defined as Always φ, but with the corresponding con-junct [v 1 λ v 2 ] X replaced by [v 1 λ v 2 ] ((v 2 = v) ∨ X).
In the example of Section 6 we also use the abbreviations:CallsExtOnly V ∆ = ∀v 1 .
∀v 2 .
[v 1 call!
v 2 ] v 2 ∈ V CannotCall a V ∆ = ∀v 1 .
∀v 2 .
[v 1 call v 2 ] ¬ (local a v 1 ∧ v 2 ∈ V ) ∧ [v 1 call!
v 2 ] ¬ (local a v 1 ∧ v 2 ∈ V )where V denotes an explicit enumeration v 1 , . . . , v n of vertices and v ∈ V is syntactic sugar for v = v 1 ∨ · · · ∨ v = v n .
For proving correctness of property decompositions, we develop a Gentzen-style proof system based on the compositional approach advocated by Simpson [16].
This approach has been successfully used for the compositional verification of CCS programs [7], and even of complex telecommunications software written in the Erlang programming language [9].
The proof system uses Gentzen style sequents, i.e. proof judgments of the form φ 1 , . . . , φ n ψ 1 , . . . , ψ n .
The intuitive interpretation of such a sequent is that the conjunction of the antecedents implies the disjunction of the consequents, i.e. φ 1 ∧ . . . ∧ φ n ⇒ ψ 1 ∨ . . . ∨ ψ n .
Formally, we define the building blocks of our proof system as follows.
(i) An assertion γ is either a satisfaction assertion A : φ, where φ is a propositionally closed formula, a transition assertion A 1 α − → A 2 , an atomic formula assertion σ, a transfer-edge assertion v → T v , a call-edge assertion v → C v , or a wellformedness assertion wf(A).
Note that wellformedness of program states does not lift to program-state terms in a way which can be captured purely syntactically, and therefore has to be dealt with explicitly in the proof system.
We now present, in groups, the proof rules of our proof system.
Since many of these are standard, we only show the most interesting ones here; the remaining rules can be found in Appendix B.
The side condition "fresh x" appearing in some of the rules means "x does not appear free in the conclusion of the rule".
(ii) Assertion A : φ is valid for program model M and environment ρ if Aρ ∈ φ M ρ .
A 1 α − → A 2 is valid for M and ρ if A 1 ρ αρ −→ M A 2 ρ.
σ is valid for M and ρ if [[σ]] M ρ .
v → T v is valid for M and ρ if vρ → T v ρ in M. v → C v is valid for M and ρ if vρ → C v ρ in M. wf(A) is valid for M and ρ if Aρ is wellformed in M. (iii) AStructural and Logical Rules.
As structural rules, we assume the standard identity, cut and weakening rules of Gentzen-style proof systems.
We have rules for the various atomic formula constructs.
Equality is handled through standard congruence rules, plus standard rules for freely generated datatypes (for dealing with equality on program stack terms).
The rules for local A v proceed by decomposing the program state terms; in addition we have:(LocInt) · Γ, localA 1 v, localA 2 v intersect(A1, A2), ∆ (LocTransf) · Γ, localA v, v → T v localA v , ∆where intersect(A 1 , A 2 ) is an auxiliary assertion used to capture program state intersection.Most of the logical rules (dealing with satisfaction assertions A : φ) are standard.
Not so are the proof rules for active:(ActComL) Γ, A 1 : active ∆ Γ, A 2 : active ∆ Γ, A 1 |A 2 : active ∆ (ActComR) Γ A 1 : active, A 2 : active, ∆ Γ A 1 |A 2 : active, ∆ (ActL) Γ, Π = π · ·v 1 , v 2 , local a v 2 ∆ fresh π, v 1 , v 2 Γ, a.Π : active ∆ (ActR) Γ Π = Π · ·v 1 , v 2 , ∆ Γ local a v 2 , ∆ Γ a.Π : active, ∆Fixed-point formulae are handled as in [8] through fixed-point approximation by using explicit ordinal variables κ to represent approximation ordinals:(NuL) Γ, A : φ[νX.φ/X] ∆ Γ, A : νX.φ ∆ (NuR) Γ A : (νX.φ) κ , ∆ fresh κ Γ A : νX.φ, ∆ (ApproxR) Γ, κ < κ A : φ[(νX.φ) κ /X], ∆ fresh κ Γ A : (νX.φ) κ , ∆These ordinal variables are examined by a global discharge rule, which checks whether the proof tree constitutes a valid well-founded induction scheme.
Informally, the discharge rule applies if (1) every non-axiom leaf of the proof tree is an instance (up to a substitution) of some ancestor sequent in the proof tree, (2) for each such sequent, this substitution maps some ordinal variable approximating a fixed-point formula to an ordinal variable which is assumed to be smaller, and (3) these separate induction schemes are consistent with each other.
For the technical details the interested reader is referred to [8,7,9].
Transition Rules.
These rules deal with transition assertionsA 1 α − → A 2 .
We first consider the case where A is a composite state.
The r.h.s. rules follow directly from the transition rules for program states (see Appendix A), after making the wellformedness conditions explicit.
(ComTauR) Γ A1 − → A 1 , ∆ Γ wf(A1 | A2), ∆ Γ wf(A 1 | A2), ∆ Γ A1 | A2 − → A 1 | A2, ∆ (ComSyncR) Γ A1 v 1 l!
v 2 −−−−→ A 1 , ∆ Γ wf(A1 | A2), ∆ Γ A2 v 1 l?
v 2 − −−−− → A 2 , ∆ Γ wf(A 1 | A 2 ), ∆ Γ A1 | A2 v 1 l v 2 − −−− → A 1 | A 2 , ∆ (ComPropR) Γ, localA 2 v1 ∆ Γ wf(A1 | A2), ∆ Γ A1 v 1 λ v 2 −−−−→ A 1 , ∆ Γ, localA 2 v2 ∆ Γ wf(A 1 | A2), ∆ Γ A1 | A2 v 1 λ v 2 −−−−→ A 1 | A2, ∆where l is call or ret and λ is l, l?
or l!
.
All three rules have symmetric counterparts which we omit.
Notice that in each rule two proof obligations arise on the wellformedness of the state.
This may seem a heavy proof burden, but almost all these proof obligations can be discharged immediately.
It is future work to derive optimized proof rules which result in less proof obligations.The l.h.s. rules apply when we assume that a certain transition is possible.
By the closure condition of the transition semantics, the possible transitions are exactly those inferable by the transition rules, thus these proof rules have to capture the conditions under which we can assume that this transition is possible.For example, a transition A 1 |A 2 −−−−−→ X is possible, one of these rules must have been applied, and thus for one of these rules all conditions must have been satisfied.
This is exactly captured by the proof rule (ComPerfL), with explicit wellformedness conditions added.v1 call v2 −−−−−→ X(ComTauL) Γ [(Y |A2)/X ], A1 − → Y, wf(A1 | A2), wf(Y |A2) ∆[(Y |A2)/X ] Γ [(A1 | Y)/X ], A2 − → Y, wf(A1 | A2), wf(A1 | Y) ∆[(A1 | Y)/X ] fresh Y Γ, A1 | A2 − → X ∆ (ComImpL) Γ [(Y | A 2 )/X ], A 1 v 1 l?!
v 2 − − − − − − → Y, wf(A 1 | A 2 ), wf(Y | A 2 ) local A 2 v 1 , local A 2 v 2 , ∆[(Y | A 2 )/X ] Γ [(A 1 | Y)/X ], A 2 v 1 l?!
v 2 − − − − − − → Y, wf(A 1 | A 2 ), wf(A 1 | Y) local A 1 v 1 , local A 1 v 2 , ∆[(A 1 | Y)/X ] Γ, A 1 | A 2 v 1 l?!
v 2 − − − − − − → X ∆ fresh Y (ComPerfL) Γ [(Y | A 2 )/X ], A 1 v 1 lv 2 − − − − − → Y, wf(A 1 | A 2 ), wf(Y | A 2 ) local A 2 v 1 , local A 2 v 2 , ∆[(Y | A 2 )/X ] Γ [(A 1 | Y)/X ], A 2 v 1 lv 2 − − − − − → Y, wf(A 1 | A 2 ), wf(A 1 | Y) local A 1 v 1 , local A 1 v 2 , ∆[(A 1 | Y)/X ] Γ [(X 1 | X 2 )/X ], A 1 v 1 l!v 2 − − − − − → X 1 , A 2 v 1 l?v 2 − − − − − − → X 2 , wf(A 1 | A 2 ), wf(X 1 | X 2 ) ∆[(X 1 | X 2 )/X ] Γ [(X 1 | X 2 )/X ], A 1 v 1 l?v 2 − − − − − − → X 1 , A 2 v 1 l!v 2 − − − − − → X 2 , wf(A 1 | A 2 ), wf(X 1 | X 2 ) ∆[(X 1 | X 2 )/X ] Γ, A 1 | A 2 v 1 lv 2 − − − − − → X ∆ fresh X 1 , X 2 , YIn rule (ComImpL), l?!
stands for either l?
or l!
.
We now turn to the case when A is a singleton set, i.e. an applet state.
Again, the r.h.s. rules follow immediately from the transition rules.
However, in many transition rules there is an implicit condition on the form of the applet state, e.g. to be able to apply the rule [send call], the call stack has to be of the form Π · ·v 1 , v 2 .
These conditions are made explicit in the proof rules.
(LocCallR) Γ v1 → C v2, ∆ Γ locala v1, ∆ Γ Π = Π · ·v, v1 , ∆ Γ locala v2, ∆ Γ a.Π v 1 call v 2 − −−−−→ a.(Π · ·v1, v2), ∆ (LocRetR) Γ v 1 → T v 2 , ∆ Γ locala v 1 , ∆ Γ Π = Π · ·v, v 1 · v 1 , v 3 , ∆ Γ locala v 3 , ∆ Γ return v 3 , ∆ Γ a.Π v 3 ret v 1 − − − − − − − → a.(Π · ·v, v 2 ), ∆ (LocTransfR) Γ v1 → T v2, ∆ Γ locala v1, ∆ Γ, v1 → C v3 ∆ Γ Π = Π · ·v, v1 , ∆ fresh v3 Γ a.Π − → a.(Π · ·v, v2), ∆ (SendCallR) Γ v1 → C v2, ∆ Γ locala v1, ∆ Γ Π = Π · ·v, v1 , ∆ Γ, locala v2 ∆ Γ a.Π v 1 call!
v 2 − −−−−− → a.(Π · ·v1, v2), ∆ (RecCallR) Γ v1 → C v2, ∆ Γ, locala v1 ∆ Γ, a.Π : active ∆ Γ locala v2, ∆ Γ a.Π v 1 call?
v 2 − −−−−− → a.(Π · ·v1, v2), ∆ (SendRetR) Γ, locala v1 ∆ Γ locala v2, ∆ Γ Π = Π · ·v1, v2 , ∆ Γ return v2, ∆ Γ a.Π v 2 ret!
v 1 −−−−−→ a.Π , ∆ (RecRetR) Γ v 1 → T v 2 , ∆ Γ, locala v 3 ∆ Γ Π = Π · ·v, v 1 · v 1 , v 3 , ∆ Γ, locala v 4 ∆ Γ locala v 1 , ∆ Γ a.Π v 4 ret?
v 1 − − − − − − − → a.(Π · ·v, v 2 ), ∆The l.h.s. rules are constructed from the transition rules in the same way as the l.h.s. rules for composite states above.
(LocCallL) Γ [a.(Π · ·v1, v2)/X ], Π = π · ·v, v1 , v1 → C v2, locala v1, locala v2 ∆[a.(Π · ·v1, v2)/X ] fresh v, π Γ, a.Π v 1 call v 2 − −−−−− → X ∆ (LocRetL) Γ [a.(π · ·v, v 2 )/X ], Π = π · ·v, v 1 · v 1 , v 3 , v 1 → T v 2 , locala v 1 , locala v 3 , return v 3 ∆[a.(π · ·v, v 2 )/X ] Γ, a.Π v 3 ret v 1 − − − − − − − → X ∆ fresh v, v 2 , π (LocTransfL) Γ [a.(π · ·v, v2)/X ], Π = π · ·v, v1 , v1 → T v2, locala v1 v1 → C v3, ∆[a.(π · ·v, v2)/X ] fresh v, v1, v2, π Γ, a.Π − → X ∆ (SendCallL) Γ [a.(Π · ·v1, v2)/X ], Π = π · ·v, v1 , v1 → C v2, locala v1 locala v2, ∆[a.(Π · ·v1, v2)/X ] Γ, a.Π v 1 call!
v 2 − −−−−− → X ∆ fresh v, π (RecCallL) Γ [a.(Π · ·v1, v2)/X ], v1 → C v2, locala v2 locala v1, a.Π : active, ∆[a.(Π · ·v1, v2)/X ] Γ, a.Π v 1 call?
v 2 − −−−−− → X ∆ (SendRetL) Γ [a.π/X ], Π = π · ·v1, v2 , locala v2, return v2 locala v1, ∆[a.π/X ] fresh π Γ, a.Π v 2 ret!
v 1 −−−−−→ X ∆ (RecRetL) Γ [a.(π · ·v, v2)/X ], Π = π · ·v, v1 · v1, v3 , v1 → T v2, locala v1 locala v3, locala v4, ∆[a.(π · ·v, v2)/X ] Γ, a.Π v 4 ret?
v 1 − −−−−− → X ∆ fresh v, v 2 , v 3 , πWellformedness Rules.
These rules reflect Definition 2, which states that a composed state A 1 |A 2 is wellformed iff its components are wellformed, at most one of the components is active, and the applet names in the components do not intersect.
(WfAppletR) · Γ wf(a.Π), ∆ (WfComR) Γ wf(A1), ∆ Γ, intersect(A1, A2) ∆ Γ wf(A2), ∆ Γ, A1 : active, A2 : active ∆ Γ wf(A1 | A2), ∆ (WfComL) Γ, wf(A1), wf(A2), A1 : active intersect(A1, A2), A2 : active, ∆ Γ, wf(A1), wf(A2), A2 : active intersect(A1, A2), A1 : active, ∆ Γ, wf(A1), wf(A2) intersect(A1, A2), A1 : active, A2 : active, ∆ Γ, wf(A1 | A2) ∆Soundness.
The program model has been formalized and the proof rules have been proven sound w.r.t. the underlying model in PVS [15].
To illustrate the working of the proof system, we take the electronic purse smartcard example of [3], which we discussed in greater detail (by providing the program model) in [2], and we outline the correctness proof of the decomposition of its specification.
In this example an electronic purse is presented, which contains three applets: a Purse applet, and two loyalty applets: AirFrance and RentACar, with the standard functionalities.
Besides, the Purse keeps a log table of bounded size of all transactions.
Loyalties can subscribe to a (paying) logFull service, which signals that the log table is full and entries will be overridden.
In the example, AirFrance is subscribed to this service.
If it gets a logFull message, it will update its local balance, by asking the entries of the log table of the Purse, and by asking the balances of loyalty partners (RentACar in this example).
In this way, RentACar can implicitly deduce that the log table is full, because it receives a getBalance message from AirFrance.
A malicious implementation of RentACar can therefore request the information stored in the log table, before returning the value of its local balance.
This is unwanted, because RentACar has not paid for the logFull service.Thus, an invocation of logFull in the AirFrance applet by the Purse should not trigger a call from RentACar to getTrs (to ask the transactions) in the Purse.
Using the macro definitions from Section 4 we can formally specify this as:Spec ∆ = Within AirFrance.logFull Spec Spec ∆ = CannotCall RentACar Purse.getTrsThe individual applets are specified as follows: To show that this property decomposition is correct, we have to parameterize these specifications by replacing the concrete applet names Purse, AirFrance and RentACar by the applet variables a P , a AF and a RaC , and the concrete method names Purse.getTrs, AirFrance.logFull and RentACar.getBalance by the program point variables v GT , v LF and v GB , respectively.
We employ the proof system presented above to prove validity of the following sequent:a P .
π P : Spec P , a AF .
π AF : Spec AF , a RaC .
π RaC : Spec RaC a P .
π P | a AF .
π AF | a RaC .
π RaC : SpecThere is a systematic method of proving validity of such sequents based on stepwise symbolic execution and loop detection.
Symbolic execution refers to the process of computing the symbolic next-states of a program-state term (here a P .
π P | a AF .
π AF | a RaC .
π RaC ) guided by the modalities of the formula (here Spec).
In this process some parameter terms of the program-state term might change.
This requires the assumptions on these parameter terms to be updated.
Some of the resulting symbolic next-states might be impossible, for example due to the accumulation of contradicting assumptions about the locality of program points, or because they violate the wellformedness restrictions on program states.
Loop detection refers to detecting when a sequent is an instance of some ancestor sequent in the proof tree.
This is necessary for checking the discharge condition.We exemplify the method on the sequent above.
First, we unfold the pattern and apply logical rules based on the outermost logical connectives of Spec until reaching a box-formula.
In this way two subgoals are obtained; we focus on the first (the correctness proof of the second subgoal will follow the same structure):local aP v GT , local aAF v LF , local aRaC v GB , a P .
π P : Spec P , a AF .
π AF : Spec AF , a RaC .
π RaC : Spec RaC a P .
π P | a AF .
π AF | a RaC .
π RaC : [v 1 call v LF ] Always −ret v1 SpecSecond, we apply rule BoxR followed by left transition rules for composite states until possible; this yields nine sequents corresponding to the nine different ways in which a perfect call action can come about in a system composed of three applets.
Of these, four subgoals consider the cases where a AF is not involved in the communication, and these can immediately be discarded (by applying the Id rule) due to contradicting assumptions about locality of v LF .
Two other sequents contain an assumption a AF .
π AF v1 call!
vLF −−−−−−→ X , i.e. a AF sends a call to an external v LF , and these can be discarded immediately by applying SendCallL and Id.
The remaining three subgoals consider the three possible ways of producing a perfect call to vertex v LF which is local to a AF : by making a local call from within a AF , or by calling from a P or a RaC .
Here, we focus on the case that v LF is invoked by a local call from within a AF .
Verification of the other two cases continues along the same lines.local aP v GT , local aAF v LF , local aRaC v GB , a P .
π P : Spec P , a AF .
π AF : Spec AF , a RaC .
π RaC : Spec RaC , wf(a P .
π P | a AF .
π AF | a RaC .
π RaC ), wf(a P .
π P |X |a RaC .
π RaC ), a AF .
π AF v1 call vLF − −−−−− → X a P .
π P |X |a RaC .
π RaC : Always −ret v1 SpecNext, we derive from the assumption(s) about a AF .
π AF assumptions about X .
We do this by applying l.h.s. logical rules (including NuL), until we obtain a box-formula with label v 1 call v LF .
To this formula we apply BoxL (taking X for A ), which results in two subgoals.
The first subgoals requires to show the transition assertion a AF .
π AF v1 call vLF − −−−−− → X , and can immediately be discarded (by Id).
The other sequent looks as follows (after weakening):local aP v GT , local aAF v LF , local aRaC v GB , a P .
π P : Spec P , X : Always −ret v1 Spec AF , a RaC .
π RaC : Spec RaC , a AF .
π AF v1 call vLF − −−−−− → X , wf(a P .
π P | a AF .
π AF | a RaC .
π RaC ), wf(a P .
π P |X |a RaC .
π RaC ) a P .
π P |X |a RaC .
π RaC : Always −ret v1 SpecAnd fourth, the transition assertion on the left is eliminated by applying the appropriate l.h.s. local transition rule, here LocCallL: We consider all possible next states of a P .
π P | a AF .
π AF · ·v 1 , v LF |a RaC .
π RaC within the call.
In most cases, we detect a loop and immediately can apply the discharge condition, but in the case that the next state is reached because a AF has sent out an external call, we cannot do this.
Here we have to use the assumption on a AF , which says that such a call can only be to v GT or v GB .
Thus there are two possible symbolic next states and for both these states we have to show that Always −ret v1 Spec holds.
This is done by showing that in this state Spec holds (either because a P is active, thus a RaC cannot send a message, or because of the specification on a RaC , which says that it does not make outgoing calls from within v GB ), and that in all possible next states again Always −ret v1 Spec holds.
Thus, proof search continues in the same way from these states, considering all possible computations, until all branches of the proof tree can be discharged, therewith concluding our proof.local aP v GT , local aAF v LF , local aAF v 1 , local aRaC v GB , a P .
π P : Spec P , a AF .
π AF · ·v 1 , v LF : Always −ret v1 Spec AF , a RaC .
π RaC : Spec RaC , π AF = π · ·v, v 1 , v 1 → C v LF , wf(a P .
π P | a AF .
π AF | a RaC .
π RaC ), wf(a P .
π P | a AF .
π AF · ·v 1 , v LF |a RaC .
π RaC ) a P .
π P | a AF .
π AF · ·v 1 , vNotice that the construction of the proof is exactly prescribed by the structure of the formula.
Therefore we believe that having a tailored proof tool and well-developed proof strategies will help us to achieve a sufficiently high degree of automation in constructing the decomposition correctness proofs.
This paper introduces a language-independent framework for the specification and verification of secure applet interactions in open platforms.
It is shown that the framework can be instantiated to JavaCard and that it allows the decomposition of global properties about applet interactions into local properties of applets, as shown on a realistic case study.Related Work.
Our program models can alternatively be cast in terms of contextfree processes; for these there exist algorithmic verification techniques w.r.t. modal µ-calculus specifications [4].
The development of our program model follows earlier work by Jensen et al. [11] which addresses security properties expressible as stack invariants.
These form a strict subset of the properties which can be expressed in our framework, but allow for more efficient model checking procedures.Future Work.
Our primary objective is to complete our work on the proof system by studying completeness and decidability issues for suitable fragments of the logic.
This is crucial for providing adequate automated tools for property decomposition.
Further, we intend to combine such tools with off-the-shelf model checkers, so that local properties of applets can be checked automatically.
We believe that such a combination will provide an effective environment to address further, more challenging, case studies.In a different line of work, it would be of interest to enhance our model with data -so as to capture properties such as "Action Credit increases the balance of the Purse Component" -and with multi-threading, but the theoretical underpinnings of such extensions remain to be unveiled.
(EqSymL) Γ, t2 = t1 ∆ Γ, t1 = t2 ∆ (EqReflR)· Γ t = t, ∆ (EqSubstL) Γ [t/x] ∆[t/x] Γ, x = t ∆ (EqNilL) · Γ, = Π · ·v1, v2 ∆ (EqConsL) Γ, Π = Π , v1 = v 1 , v2 = v 2 ∆ Γ, Π · ·v1, v2 = Π · v 1 , v 2 ∆ (EqConsR) Γ Π = Π , ∆ Γ v1 = v 1 , ∆ Γ v2 = v 2 , ∆ Γ Π · ·v1, v2 = Π · v 1 , v 2 , ∆ (LocComL) Γ, localA 1 v ∆ Γ, localA 2 v ∆ Γ, local A 1 |A 2 v ∆ (LocComR) Γ localA 1 v, localA 2 v, ∆ Γ local A 1 |A 2 v, ∆Logical Rules.
(with symmetric counterparts).
The authors would like to thank Christoph Sprenger at SICS and the anonymous referees for many useful remarks on the manuscript.
sWe use loc a v as abbreviation for app v = a. Transition Rules for Composite States (With Symmetric Counterparts).
[tau] A1Applet Transition Rules.a.π · ·v, v1a.π · ·v, v1a.π · ·v1, v2 B Remaining Proof Rules of the Proof SystemStructural Rules.
We use loc a v as abbreviation for app v = a. [tau] A1Applet Transition Rules.a.π · ·v, v1a.π · ·v, v1a.π · ·v1, v2 Structural Rules.
