There is a growing need to explicitly represent the behavioral semantics of Modeling Languages in a precise way, something especially important in industrial environments in which simulation and verification are critical issues.
Graph transformation provides one way to specify the semantics of Domain Specific Visual Languages (DSVLs), with the advantage of being intuitive and easy to use for the system designer.
Even though its theory has been extensively developed during the last 30 years, it has some limitations concerning specific analysis capabilities.
On the contrary, Maude is a rewriting logic-based language with very good formal analysis support, but which requires specialized knowledge.
In this paper we show how a mapping between graph transformation-based specifications of DSVL semantics and Maude is possible.
This allows performing simulation, reachability and model-checking analysis on the models, using the tools and techniques that Maude provides.
Modeling languages play a cornerstone role in Model-Driven Engineering (MDE) for representing models and metamodels.
Modeling languages are normally defined in terms of their abstract and concrete syntax.
The abstract syntax is defined by a metamodel, which describes the concepts of the language, the relationships between them, and the structuring rules that constrain the model elements and combinations in order to respect the domain rules.
The concrete syntax defines how the metamodel concepts are represented.
This metamodeling approach allows the rapid and effective development of languages and their associated tools (e.g., editors).
In the case of Domain-Specific Visual Languages (DSVLs), the concrete syntax is given by assigning graphical representations to the different elements in the metamodel.
By using DSVLs, designers are provided with high-level, intuitive notations which allow building models with concepts from the domain, and not from the solution space or target platforms.
This kind of modeling languages greatly facilitates modeling in specialized application areas, having the potential to increase quality and productivity.In addition to describing the syntactic (i.e., structural) aspects of DSVLs, there is the growing need to explicitly represent their behavioral semantics in a precise, intuitive, yet formal way.
This is especially important in certain industrial environments in which simulation and verification are critical issues.One way of specifying behavioral semantics is in terms of visual rules, which prescribe the preconditions of the actions to be triggered and the effects of such actions.
Graph Transformation [1,2] is a declarative, rule-based technique that can be effectively used for expressing behavioral semantics.
It is gaining increasing popularity due to its graphical form (making rules intuitive) and formal nature (making rules and grammars amenable to formal analysis).
It has already been employed to describe the operational semantics of DSVLs [3], taking the advantage that it is possible to use the concrete syntax of the DSVL in the rules, which then become more intuitive to the designer.
The most common formalization of graph transformation is using category theory, but current tool support offers limited analysis capabilities: basically detecting rule dependencies and conflicts [1,4].
Moreover, the analysis is further constrained if dealing with attributes.The need for other kinds of analysis, such as reachability analysis or model checking, has encouraged some authors to define semantic mappings [5] between graph transformation and other semantic domains (see, e.g., [3,4,6,7,8,9,10]).
This possibility allows one to use the techniques specific to the target semantic domain for analyzing the source models.In this sense, Maude [11] is a high-level language and a high-performance interpreter and compiler in the OBJ algebraic specification family, which supports rewriting logic specification and programming of systems.
The fact that rewriting logic specifications are executable allows to apply a wide range of formal analysis methods and tools [11].
Maude also offers a comprehensive toolkit for automating such specification analysis, efficient enough to be of practical use, and easy to integrate with software development environments such as Eclipse.
Maude has already been proposed as a formal notation and environment for specifying and effectively analyzing models and metamodels [12,13,14].
However, one of its drawbacks is that it requires specialized knowledge and expertise, something that may hinder its usability by the average DSVL designer.To take advantage of both formalisms, in this paper we define a mapping from graph transformation-based specifications of DSVL semantics to the Maude semantic domain.
In this approach, graph transformation rules are translated into Maude rewriting rules.
This allows to conduct reachability and model-checking analysis using the tools and techniques already available for Maude.
Moreover, properties to be fulfilled by reachable models can be visually specified using graph constraints [1,15], which also use the concrete syntax of the DSVL, and translated into Maude to perform the analysis.
In addition, the proposal presented here can also serve to provide the Maude specifications of models with a visual notation that can express its rewriting rules in a graphical and more intuitive way.Paper organization.
First, Section 2 introduces graph transformation and graph constraints using a production system example, and Section 3 gives an overview of rewriting logic and Maude.
Then, Section 4 presents our encoding of graph transformation rules in Maude and Section 5 shows how to analyse them using the Maude toolkit.
Section 6 discusses tool support.
Finally, Sections 7 and 8 compare our work with other related proposals and present some conclusions and lines for future work.
In this section we give an intuition on graph transformation and graph constraints by presenting some rules that belong to a simulator of a DSVL for production systems, and some constraints expressing reachability and invariant properties to be analyzed for such systems.
Fig. 1 shows the DSVL metamodel.
It defines three kinds of machines: assemblers, containers, and generators of different parts.
Each generator can produce a certain number of parts, given by its attribute counter.
Machines can be connected through trays, which in turn can be interconnected and store parts.
The number of parts they actually hold is stored in attribute nelems up to its maximum capacity, which must be greater than zero (see second OCL constraint to the right of the figure).
The last two OCL constraints guarantee that the number of elements on a tray is equal to the number of parts that it contains, and never exceeds its capacity.
Finally, human operators are needed to transfer parts between interconnected trays, as the first OCL constraint states.
Fig. 2 shows a production model example using a visual concrete syntax.
It contains four machines (one of each type), four trays and one operator.
Machines are represented as decorated boxes, except generators, which are depicted as semi-circles with an icon showing the kind of part they generate.
Operators are shown as circles.
The model consists of two generators connected to two trays, which are connected to a third one.
An operator transfers parts between two of the trays.
From the third tray, parts are assembled, deposited in a fourth tray, Fig. 2.
initModel example production system and finally stored in a container.
Although some associations in the metamodel are bidirectional, we have assigned arrows in the concrete syntax, but of course this does not affect navigability.
We use graph transformation systems for the specification of the DSVL behavioral semantics.
A graph grammar is made of a set of rules and an initial graph to which the rules are applied.
Each rule is made of a left and a right hand side (LHS and RHS) graphs.
The LHS expresses pre-conditions for the rule to be applied, whereas the RHS contains the rule's post-conditions.
In order to apply a rule to a host graph, a morphism (an occurrence or match) of the LHS has to be found in it.
If several are found, one is selected randomly.
Then, the rule is applied by substituting the match by the RHS.
The grammar execution proceeds by applying the rules in non-deterministic order, until none is applicable.
Fig. 3 shows one of the rules describing the DSVL behavioral semantics.
The rule specifies the behavior of an assembler machine, which converts one handle and one head into a hammer.
The rule is shown in concrete syntax to the left, and in abstract syntax to the right.
It can be applied if an occurrence of the LHS is found in the model.
Then, the elements in the LHS that do not appear in the RHS are deleted, whereas the elements in the RHS that do not appear in the LHS are created.
Our rules may include attribute conditions (which must be satisfied by the match) and attribute computations.There are two main formalizations of algebraic graph transformation: Double Pushout (DPO) and Single Pushout (SPO).
From a practical point of view, their difference is that in DPO, deletion has no side effects.
When a node in the host graph is deleted by a rule, it can only be connected with those edges explicitly deleted by the rule.
For example, if we try applying rule assemble, and "h1" is matched to a handle connected to more than one tray (should it be allowed by the metamodel), then the rule cannot be applied at such match as otherwise some edges would become dangling in the host graph.
This condition is called dangling edge condition.
In SPO, dangling edges are removed by the rewriting step.
Therefore in DPO, in addition to positive pre-conditions, a LHS also imposes implicit negative pre-conditions in case the rule deletes some node.A match can be non-injective, which means that two (or more) elements with compatible type in the rule may be matched to a single element in the host graph.
If the rule specifies that one of them is deleted and the other one preserved, DPO forbids applying the rule to such a match, while SPO allows its application and deletes both elements.
In DPO, this is called the identification condition.
Fig. 4 shows further rules for the DSVL simulator.
Rule transferPart describes the movement of parts through trays, for which the presence of an operator is necessary.
This rule uses abstract nodes: part p has an abstract type, what is graphically represented with an asterisk.
Of course, no node with an abstract type can be found in the models, but the abstract node in the rule can get instantiated to nodes of any concrete subtype [16].
In this way, rule transferPart is equivalent to the three rules resulting from the substitution of part by its children concrete classes.Rule moveOperator models an operator changing to a different pair of connected trays whose source tray has some part waiting to be processed and it is unattended.
This last condition is specified by using a negative application condition (NAC) that forbids applying the rule if some operator is already present between the final trays.
Note how the match for this rule will be non-injective when applied to the model in Fig. 2 (once the trays have enough pieces), as trays t2 and t4 in the rule's LHS will be identified to the same one in the model.Altogether, graph transformation is an intuitive technique for specifying the behavioral semantics of a DSVL.
It also counts with some interesting analysis possibilities.
For example, there are results for checking when two rules are conflicting (applying one disables the other) or independent (both can be applied in any order yielding the same result), and to design terminating transformations [1].
However, these analysis techniques are limited as soon as attribute computations or conditions are present in the rules.
In this paper we propose an automatic mapping into rewriting logic, which allows us to perform different kinds of analysis with Maude.
In this way, the designer will have the advantage of a visual and intuitive specification, and an efficient and powerful means for analysis.From the user perspective, there is a need for an intuitive means of expressing not only the rules but also the model properties to be analyzed.
We use graph constraints for such purpose, as they allow employing the concrete syntax of the DSVL.
Graph constraints [1,15] constitute a graphical and formal way to specify model properties.
Roughly, a graph constraint is made of a number of graphs related through morphisms, and demands the existence or absence of such graphs in the model.
Constraints can be used for several purposes, here we use them in reachability analysis, to select those reachable models satisfying them.As an example, Fig. 5 shows two graph constraints.
The one on the left is made of two graphs, and asks for a positive occurrence of the left graph ∃ Container for which there is no occurrence of the related right graph ¬∃ Parts.
That is, the constraint checks whether the model has an empty container.
For simplicity we restrict to injective morphisms from the constraint to the model.
Similar to rules, constraints may contain objects with abstract typing.The constraint on the right of the figure is made of one graph (∃ PartOverflow), with an attribute condition specifying that the number of elements in the tray should be bigger than the tray capacity.
Thus, the constraint demands the existence of a tray with a number of parts exceeding its capacity.
Note how the model in Fig. 2 satisfies the first constraint but not the second.
These two constraints will be used later for the specification of properties for reachable states and invariants.Technically, the constraints we use follow the approach of [15], where atomic constraints are defined by quantification of injective morphisms of the form a : X → C.
This means that a constraint ∃(a : X → C) is satisfied by a model G, if for each occurrence of X in G (i.e. ∀p i : X → G) there is some occurrence of C related to the ocurrence ofX (∃c i : C → G s.t. p i = c i • a).
We consider nested constraints [15], i.e. constraints with an extra condition∃(a : X → C, ∃(b : C → C i )), which can be either positive (∃(b : C → C i )) or negative (¬∃(b : C → C i )).
Note that the outer-most constraint a has to be positively satisfied, and we emulate the existential quantification of the graph C by taking the graph X to be empty.
Thus, for example, the left constraint in Fig. 5 is theoretically depicted as ∃(a : ∅ → Container, ¬∃(b : Container → P arts)).
In this paper, the X graph of the constraint a : X → C is always empty, and we visually show the quantifications as if applied to graphs (instead of to morphisms).
Maude [11] is a high-level language and a high-performance system in the OBJ algebraic specification family.
It supports membership equational logic and rewriting logic specification and programming of systems.
Thus, Maude integrates an equational style of functional programming with rewriting logic computation.
Because of its efficient rewriting engine, able to execute more than 3 million rewriting steps per second on standard PCs, and because of its metalanguage capabilities, Maude turns out to be an excellent tool to create executable environments for different logics, models of computation, theorem provers, or even programming languages.
Maude has already been successfully used in software engineering tools and several applications [17].
This section introduces those Maude's features necessary for understanding the paper; the interested reader is referred to [11] for further details.Rewriting logic is a logic of change that can naturally deal with states and nondeterministic concurrent computations.
A distributed system is axiomatized by an equational theory describing its set of states and a collection of rewrite rules.
Computation in a functional module is accomplished by using the equations as simplification rules from left to right until a canonical form is found.Maude objects are structures of the form < o : c | a 1 :v 1 , ..., a n :v n >, where o is the object identifier (of Sort Oid), c is the class the object belongs to, a i are attribute identifiers and v i their corresponding current values.While functional modules specify membership equational theories, rewrite theories are specified by system modules.
A system module may have the same declarations of a functional module plus rules of the form t → t 񮽙 , where t and t 񮽙 are terms.
These rules specify the dynamics of a system in rewriting logic.
They describe the local, concurrent transitions that are possible in the system, i.e., when a part of the system state fits the pattern t then it can change to a new local state fitting pattern t 񮽙 .
The guards of conditional rules act as blocking preconditions, in the sense that a conditional rule can only be fired if the condition is satisfied.The syntax for conditional rules is crl [l] : t => t 񮽙 if Cond, with l the rule label and Cond its condition.
To illustrate this, the following BANK system module defines two classes and a rule.
The rule specifies the system behavior when a Deposit object that refers to an existing Account is found: the Deposit object disappears (i.e., it is "consumed" by the rule) and the balance of the Account object is increased.
The rewrite command can be used to execute the system, which applies the rules until no further rule can be applied.
In this section, we show how models and their dynamic behavior (given by graph grammars rules) can be encoded into their corresponding Maude specifications.
Nodes are represented as Maude objects, and node attributes as object attributes.
Edges are represented by object attributes too, each one representing the reference (by means of object identifiers) to the target node of the edge.
Thus, models are structures of the form mm{obj 1 obj 2 ... obj N }, where mm is the name of the metamodel, and obj i are the objects that represent the nodes.
For instance, the following Maude specification describes the hammers production model depicted in Fig Metamodels are encoded using a sort for every metamodel element: sort @Class for classes, sort @Attribute for attributes, sort @Reference for references, etc.
Thus, a metamodel is represented by declaring a constant of the corresponding sort for each metamodel element [18].
In addition, other sorts have been defined to represent model elements, such as @Object and @Structural-FeatureInstance, which represent objects and their features, respectively.
Dynamic behavior is specified in Maude in terms of rewrite rules added to the corresponding model specification.
Thus, graph grammars rules can be naturally translated into Maude rewrite rules.
Attribute conditions are encoded as Maude rule conditions, and attribute computations are encoded as Maude computations performed in the right-hand side of the rules.
With this, rule assemble (shown in Fig. 3) is written in Maude as follows: Edges that represent bidirectional relationships are encoded as two references: one in each direction.
Attributes of LHS nodes used in conditions (such as attribute capacity of T2), or in computations (such as attribute nelems of T1 and T2), are assigned a variable value to be able to: (a) refer to them in rule conditions; and (b) perform attribute computations in the RHS of Maude rules.
Furthermore, new variables (SFS@H1, SFS@H2, etc.) are included in the object specifications to represent further attributes and edges not described in the LHS or RHS of graph grammar rules.
Operation newHammerId generates a new object identifier (using a predefined Maude counter [11]) for each created hammer.The two semantics of graph transformation, DPO and SPO, are realized in Maude by the dpo and spo operations.
Operation spo (used above) is placed in the RHS and removes all dangling references from the model when applying the rule.
Operation dpo (which is placed in the rule condition) checks that there are no more edges connected to the elements that will be deleted than those mentioned in the LHS of the graph grammar rule.Each negative application condition (NAC) is encoded as an operation placed in the rule condition that checks if an occurrence of the specified NAC pattern (together with the matched LHS) is found in the model.
If so, this operation forbids the rule application.
To illustrate the encoding of NACs, rule moveOperator (Fig. 4) is encoded in Maude as follows: Non-injective matches are realized by generating different Maude rules for each match possibility (except those for which the identification condition holds if DPO semantics is used).
Thus, rule moveOperator generates 15 Maude rules (the fourth Bell number, since we have 4 compatible elements).
For instance, the rule in which T2 and T4 represent the same tray is written as follows: Finally, graph constraints are translated into Maude in a similar way as the LHS and NACs of the rules.
For the moment, we restrict to translating constraints with two levels of nesting at most, e.g. like the one to the left of Fig. 5.
We will use these constraints in the next section to specify properties for reachability analysis.
Once the system specifications are encoded in Maude, we obtain a rewriting logic specification of the system.
As these specifications are executable, they can be used to simulate and analyze the system.In this paper we will focus on three kinds of analysis: simulation, to execute the system specifications; reachability analysis, to look for deadlocks and to prove system invariants; and LTL model checking, to analyze some liveness properties.
The analysis will be illustrated with the use of examples.
In addition, models can be further analyzed using other available tools in Maude's formal environment: the LTL satisfiability and tautology checker, the Church-Rosser checker, the coherence checker and the termination tool.
We refer the interested reader to [11] for details on these commands and tools.
Maude specifications can be executed using the rewrite and frewrite commands, which implement two different execution strategies: a top-down rule-fair strategy, and a depth-first position-fair strategy, respectively [11].
Thus, we can execute the model depicted in Fig. 2 by simply typing: "rewrite initModel ."
The output of this command shows a resulting object configuration where six hammers are created and finally stored: The rewrite and frewrite commands also allow users to specify upper bounds for the number of rule applications.
This can be very useful to simulate non-terminating systems, or to perform step-by-step executions.
Executing the system using the rewrite and frewrite commands means exploring just one of the possible behaviors of the system.
The Maude search command allows to explore (following a breadthfirst strategy up to a specified bound) the reachable state space in different ways.
The command requires specifying as input the properties that the reachable states have to satisfy, and it returns those states satisfying them.
For this purpose we use the graph constraints we introduced in Section 2.1, and then translate them into Maude, according to the procedure described in Section 4.
Reachability analysis can be used for instance to look for deadlock states (i.e., states on which no further rewrite may take place).
In our example, we can check for deadlock states in which there is a container with no parts.
This latter property is specified using the constraint to the left of Fig. 5, while the fact that we look for terminal states is specified in Maude using the search command with the option =>!
: where variable CO is of sort Oid, SFS is of sort Set{@StructuralFeatureInstance}, and OBJSET is of sort Set{@Object}.
Please note that we have started searching from the initModel shown in Fig. 2 and limited the number of solutions to 10 -otherwise we obtain hundreds of solutions.
The following is the last of the ten solutions found: It shows a deadlock situation, caused by the fact that tray 't3 is full of parts of the same type, therefore not allowing the assembler machine to proceed.In order to display the shortest sequence of rewrites followed to reach that state (state 8141) we can use the command show path n, where n is the number of the state.
If we are only interested in the labels of the applied rules, the command show path labels n can be used instead.
In this case, show path labels 8141 produces the sequence: GenHead GenHead GenHead GenHead GenHandle GenHandle GenHandle GenHandle TransferPart GenHead TransferPart GenHead TransferPart TransferPart, which is one of the possible paths leading to the undesirable deadlock state (note that the operator has not moved in this case).
Arrow =>* of search command implies searching for proofs (that fulfill the search pattern) consisting of none, one or more rewriting steps.
To enforce a rewriting proof consisting of exactly one step, arrow =>1 should be used instead; if rewriting proofs consisting of one or more steps are desired, arrow =>+ must be used.
Note that arrow =>+ can be especially useful in cases where the initial model fulfills the search pattern, for example when looking for cycles.
Finally, arrow =>!
is used to search only canonical final states, that is, states that cannot be further rewritten.
Upper bounds for the number of rule applications and solutions can also be specified in the search.
These bounds are very useful in non-terminating systems.We can also use the search command to prove safety properties.
For instance, we can check whether starting from initModel, the capacity of any tray is exceeded.
This property can be visually specified with the constraint shown to the right of Fig. 5, and using the Maude search command =>*: Since no solutions are found, we can state that (starting from initModel) the capacities of the trays are never exceeded.Invariants can be checked by looking for states that do not satisfy them.
Whenever an invariant is violated, we obtain a counterexample (up to time and memory limitations).
However, when the number of states reachable from the initial state is infinite, and the invariant holds, the search never terminates.
In these cases, bounded search is a widely used procedure that: (a) together with a big depth can greatly increase the confidence that the invariants hold, and (b) can be quite effective in finding counterexamples, where applicable.
Maude offers a linear temporal logic explicit-state model checker [19], which allows us to check whether every possible behavior starting from a given initial model satisfies a given temporal logic property.
It can be used to prove safety and liveness properties of rewriting systems when the set of states reachable from an initial state is finite.
Full verification of invariants in infinite-state systems can be accomplished by verifying the invariants on finite-state abstractions [20] of the original infinite-state system, that is, on an appropriate quotient of the original system whose set of reachable states is finite [11].
State predicates are needed to specify safety and liveness properties.
For instance, suppose that we want to check if a created hammer is eventually stored in the container.
In this case, we need two predicates: exist and stored, that will determine whether a part exists and is stored, respectively.
State predicates are defined in Maude as operators of sort Prop, and their semantics is given in terms of equations that specify when the predicates evaluate to true.For instance, predicates exist and stored, together with a predicate operated that checks whether an operator O is located between the trays T and T', can be specified as follows: With these predicates we are ready to model-check different LTL properties making use, e.g., of the eventually (<>) and henceforth ([]) connectives.
For instance, we can check whether a given hammer ('hammer1) is eventually stored:reduce modelCheck(initModel, [](exist('hammer1) -> <> stored('hammer1)).
result Bool: trueSimilarly, the corresponding formula for all possible hammers can be derived [18].
Other interesting properties to model-check are, for instance, that operators eventually move between trays; or that generated parts are eventually consumed to produce hammers:reduce modelCheck(initModel, [](operated('op, 't1, 't3) -> <> operated('op, 't2, 't3)) .
reduce modelCheck(initModel, [](exist('head1) -> <> ~ exist('head1)).
As expected, none of them are fulfilled due to deadlock states, and therefore we get the corresponding counterexamples showing why they fail.
With this information, we could very easily modify the dynamic behavior of our model to avoid deadlocks.
For example, we could add a condition to the transferPart rule so that a part (of type T ) is never put in the output tray if all the parts currently in it are of the same type T .
We have built a Maude code generator and integrated it in the AToM 3 tool [3].
This tool allows the definition of DSVLs by metamodeling and defining model manipulations by graph transformations.
Thus, AToM 3 is now provided with the analysis capabilities presented in previous section, and, on the other hand, it can be used as a visual front-end to Maude.The code generator synthesizes Maude specifications from the DSVL metamodel, the graph transformation rules describing its semantics and the models.
As in AToM 3 the transformation semantics (DPO/SPO) as well as the possibility of non-injective matches can be chosen by the user, this decision has to be made when generating the Maude specification.
In the generated environment for the DSVL, the user can visually specify properties by means of graph constraints, which are checked using reachability analysis, starting from the current model.
Fig. 6 shows the generated environment for the example DSVL, where the initModel is shown in the background.
The lower three buttons to the left allow simulating the model using the graph transformation rules, performing reachability analysis and generating plain Maude code, so that for example model checking can be performed.
The figure shows a screenshot during the specification of the reachability analysis.
On top of this window, a control dialog is presented that allows to set the graph constraint and the attribute conditions, to select the search type and the number of solutions to be found.
The right-most window shows the specification of the graphical constraint presented to the right of Fig. 5.
Once the user starts the reachability process, Maude is called, and the possible solution is presented back in the AToM 3 tool by using a parser of Maude terms.
In this way, the analysis is performed in the background and the user is presented the results in terms of the original DSVL, thus hiding the formal methods used for the analysis.
Further visual support for defining model checking predicates and showing model execution paths are left for future work.
One common way to specify the semantics of a language is to define a translation from expressions in that language to expressions in another language with well defined semantics [21].
These semantic mappings between semantic domains are very useful not only to provide precise semantics to metamodels, but also to be able to simulate, analyze or reason about them using the logical and semantical framework available in the target domain [5].
The most common formalization of graph transformation is the so-called algebraic approach, which uses category theory to express the rewriting.
This approach supports a number of interesting analysis techniques, such as detecting rule dependencies [1] or calculating critical pairs (minimal context of pairs of conflicting rules) [4] -usually with simple type graphs [16].
However, further kinds of analysis require semantic mappings between graph transformation and other semantic domains more appropriate to represent and reason about certain properties, and to conduct certain kinds of analysis, mostly when dealing with attributes.
For example, in [7] rules are translated into Alloy in order to study the applicability of sequences of rules and the reachability of models.
In [8] rules are transformed into pre-and post-conditions for rule analysis (e.g., conflict detection) using standard OCL tools, and in [6] rules are translated into Petri nets to check safety properties.
In a previous work [9] we used Petri nets to analyze reachability, place and transition invariants, boundedness, etc.
However these approaches are somehow limited: they do not allow attributes in metamodel elements, or restrict their types to finite domains, and they are only available for systems with very similar semantics to Place-Transition nets.In [22], the behavioral semantics of diagrammatic languages were specified with collaboration diagrams and formalized as graph transformation rules; however, no explicit verification mechanism was presented.Regarding model-checking of graph transformation systems, there are few approaches.
For instance, in [10], graph grammars are transformed into Abstract State Machines (ASM) and transition systems for model-checking, whereas the Groove tool [23] incorporates a built-in explicit model-checker.
Both are restricted in the kind of graphs and attributes they can handle: the former does not allow unbounded attributes in metamodel elements, and the latter works with simple graphs (i.e. no parallel edges) with edge labels.
Interestingly, in [23] a logic for graphs similar to LTL (so called Graph-Based Linear Temporal Logic) is proposed, which extends LTL with constraints similar to the graph constraints presented in section 2.1.
Using graph constraints as predicates for LTL is left for future work in our case.The use of Maude as a semantic domain in which DSVLs can be mapped has enabled the use of more powerful analysis on the source models.
Thus, with Maude we can deal with more complex semantics description (i.e., not limited to place-transition systems), and conduct reachability and model-checking analysis on the systems, supported by the Maude toolkit.
In addition, Maude offers an integrated environment and a toolkit for conducting all the different kinds of analysis, instead of having to define several semantic mappings to different semantic domains -one for each kind of analysis.Another group of related works includes those that formalize the concepts of concrete metamodeling languages in Maude, namely UML or OCL.
For example, RIVIERA [24] is a framework for the verification and simulation of UML class diagrams and statecharts.
It is based on the representation of class and state models as terms in Maude modules that specify the UML metamodel; it makes a heavy use of the reflective capabilities of Maude, defining and handling most model operations at the metalevel.
MOVA [25] is another Maude-based modeling framework for UML, which provides support for OCL constraint validation, OCL query evaluation, and OCL-based metrication.
In MOVA, both UML class and object diagrams are formalized as Maude theories.
MOMENT [26,27] is a generic model management framework which uses Maude modules to automatically serialize software artifacts.
It supports OCL queries and is also integrated in Eclipse.
When compared to our work, these approaches are focused on formalizing UML and OCL, but do not provide explicit means to represent the behavior of models, as we do using Maude rewrite rules.Finally, other authors have also made some progress formalizing the concepts of concrete metamodeling languages.
For example, di Ruscio et al. [28] have formalized KM3 using Abstract State Machines; Boronat and Meseguer [14] propose an algebraic semantics for the MOF metamodeling framework, giving an explicit formal representation for each of the different notions that may be involved in a metamodeling framework: model type, metamodel realization, and metamodel conformance; finally, Poernomo [29] uses Constructive Type Theory and a related synthesis formal method known as proofs-as-programs to formalize MOF-based metamodels and model transformations, and to develop model transformations that are provably correct with respect to a given functional specification.
These works are complementary to ours, since they aim at formalizing the concepts of metamodeling frameworks and notations, without explicit means to specify behavior, whilst our goal is to allow the explicit specification of the behavioral aspects of models using a visual language, and to provide the mappings to the corresponding Maude (behavioral) specifications in order to make them amenable to formal analysis and reasoning using the Maude toolkit.
In this paper we have presented an encoding in Maude of the graph transformation rules that define the behavioral semantics for DSVLs.
This semantic mapping has enabled the formal analysis of the source models using the capabilities of Maude for executing the specifications, and for conducting reachability and model-checking analysis.The use of Maude as a semantic domain in which to map DSVLs has opened the path to further kinds of analysis of rule-based DSVLs, such as the study of termination and confluence of the specifications [30], or the use of strategies [11] for determining the order in which the graph transformation rules are selected and executed.
These two are interesting lines of work that we can plan to address shortly, and whose findings can be applicable to other rule-based notations for modeling systems.
Scalability issues, as well as a detailed comparison of efficiency with respect to approaches like [10] and [23] are also left for future work.We are also currently working on further extending the back-annotation of results of the analysis in Maude, in order to visualize them using the DSVL native notation, i.e., making the use of Maude completely transparent to the user.
Although this is already done for reachability analysis, we are also looking at the specification of the predicates to be model-checked, using the DSVL graphical editor, as well as to show execution paths through states.
