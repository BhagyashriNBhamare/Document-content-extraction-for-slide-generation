Recently we have proposed the "almost ASAP" semantics as an alternative semantics for timed automata.
This semantics is useful when modeling real-time controllers : control strategies modeled with this semantics are robust and implementable (without making the syn-chrony hypothesis).
We show in this paper how to effectively encode this semantics using timed automata along with their classical semantics.
We have implemented a tool set that allows us to verify, using HyTech and Uppaal, the almost ASAP behavior of controllers and generate automatically provably correct code from verified models.
To illustrate the applicability of our results, we show how we have synthesized the code for the Philips Audio Control Protocol for Lego Mindstorms TM .
Timed automata are an important formal model for the specification and analysis of real-time systems.
Formalisms like timed automata and hybrid automata are central in the so-called model-based development methodology for embedded controllers.
The steps underlying that methodology can be summarized as follows: (i) construct a (timed/hybrid automaton) model Env of the environment in which the controller will be embedded; (ii) make clear what is the control objective: for example, prevent the environment to enter a set of Bad states; (iii) design a (timed automaton) model Cont of the control strategy; (iv) verify that Reach(Env Cont) ∩ Bad = ∅.
When Cont has been proven correct, it would be valuable to ensure that an implementation Impl of that model can be obtained in a systematic way in order to ensure the conservation of correctness, that is to ensure that Reach(Env Impl) ∩ Bad = ∅ is obtained by construction.Unfortunately, this is often not possible for several fundamental and/or technical reasons.
First, the notion of time used in the traditional semantics of timed automata is continuous and defines perfect clocks with infinite precision while implementations can only access time through digital and finitely precise clocks.
Second, timed automata react instantaneously to events and time-outs while implementations can only react within a given, usually small but not zero, reaction delay.
Third, timed automata may describe control strategies that are unrealistic, like zeno-strategies or strategies that ask the controller to act faster and faster [CHR02].
For one of those three reasons, a model for a digital controller that has been proven correct may not be implementable (at all) or it may not be possible to turn it systematically into an implementation that is proven correct w.r.t. this model.To overcome those problems, we recently proposed an alternative semantics to timed automata in [DDR04].
This semantics is called the Almost ASAP semantics, AASAP for short.
The AASAP semantics of a timed automaton A, noted A AAsap ∆ , is a parametric semantics that leaves as a parameter ∆, which takes value δ ∈ Q ≥0 , the reaction delay of the controller.
This semantics relaxes the classical semantics of timed automata in that it does not impose on the controller to react instantaneously but imposes on the controller to react within δ time units.
We have proven that a timed controller is implementable with a sufficiently fast hardware if there exists δ ∈ Q >0 such that Reach(Env Cont AAsapδ ) ∩ Bad = ∅.
To use the AASAP semantics in practice, we need tool support.
In [DDR04], we have shown that the AASAP semantics of a controller can be encoded using a single parameter timed automaton.
Unfortunately, this construction is exponential in all cases, which makes it useless for all but the toy examples.
In this paper, we define a new compositional construction that avoids the exponential blow-up.
The exponential behavior can still appear during the verification phase but only in the worst case.
Thanks to this new construction, we have implemented a tool set in order to manipulate the AASAP semantics on top of HyTech [HHWT95] and Uppaal [PL00].
We show the practical interest of our construction by applying our tool set to a non-trivial example: the Philips Audio Control Protocol [BPV94].
We show how the AASAP semantics can be used to produce provably correct executable code for this protocol.
The code that we have produced automatically can be run on Lego Mindstorms TM .
With this case study, we believe that we have shown that the AASAP semantics is useful when supported by computer aided verification tools and that it can be used to produce correct code for non-trivial embedded controllers without making the synchrony hypothesis.
To the best of our knowledge, this is the first time that provably correct (without making the synchrony hypothesis) real-time code is produced for a non-trivial case study.The rest of the paper is organized as follows.
In Section 2, we recall some preliminary notions.
In Section 3, we review the syntax and classical semantics of timed automata.
In Section 4, we recall the AASAP semantics and summarize its properties.
In Section 5, we present our compositional construction.
In Section 6, we present our tool set.
In Section 7, we show how to apply the AASAP semantics to synthesize provably correct code for a real-time protocol.Definition 1 [STTS] A structured timed transition system T is a tuple S, ι, Σ in , Σ out , Σ τ , →, where S is a (possibly infinite) set of states, ι ∈ S is the initial state, the set of labels is structured in three disjoint components: Σ in is the finite set of incoming labels, Σ out is the finite set of outgoing labels, Σ τ is the finite set of internal labels, and →⊆ S × Σ in ∪ Σ out ∪ Σ τ ∪ R ≥0 × S is the transition relation.A state s ∈ S of a STTS T = S, ι, Σ in , Σ out , Σ τ , → is reachable if there exists a finite sequence s 0 s 1 . . . s n of states such that s 0 = ι, s n = s and for anyi, 0 ≤ i < n, there exists σ ∈ Σ in ∪ Σ out ∪ Σ τ ∪ R ≥0 such that (s i , σ, s i+1 ) ∈→.
The set of reachable states of T is noted Reach(T ).
Some more notions.
Due to the lack of space, we only present intuitively other notions that are useful in the sequel.
The reader will find formal definitions in [DDR05].
We use a natural definition of the composition T 1 T 2 of two STTS T 1 and T 2 with synchronizations similar to the ones in the input-output automata framework [LT87]: a common label must be an output label (sending) in one of the STTS and an input label (receiving) in the other.
The composition T 1 T 2 is a STTS where synchronized labels are considered as internal.Such syncronizations is a blocking communication mechanism.
This may be problematic as on one hand we want to verify that the controller does not control the environment by refusing to synchronize on its output, and on the other hand, we do not want our controller to issue outputs that can not be accepted by the environment.
To avoid such problems we impose input enabledness of the STTS that we compose, which means that input labels have the property of being enabled in every state.
In this point, the presentation differs from [DDR04].
Finally, given two input enabled STTS T 1 (the controller) with state space S 1 , T 2 (the environment) with state space S 2 and a set B ⊆ S 2 of bad states, we say that T 1 controls T 2 to avoid B if Reach(T 1 T 2 ) ∩ S 1 ×B is empty.
Let X be a finite set of real-valued variables.
A valuation for X is a function v : X → R.
We write [X → R] for the set of all valuations for X. Let ∆ be a parameter.
Define the set of terms to be T = Q∪{+∞}, and the set of parametric terms to be PT = T ∪ {c + ∆, c − ∆ | c ∈ Q}.
A (parametric) rectangular constraint over X is a formula of the form ϕ ≡ a ∼ 1 x ∼ 2 b where x ∈ X, ∼ 1 , ∼ 2 ∈ {<, ≤} and a, b are (parametric) terms.
Let lb(ϕ) = a and rb(ϕ) = b denote the left (resp.
right) bound of ϕ.
A (parametric) rectangular predicate is a finite set of (parametric) rectangular constraints interpreted as a conjunction.
A (parametric) multirectangular predicate is a finite set of (parametric) rectangular predicates interpreted as a disjunction.
Given δ ∈ Q and a parametric term a, let a δ = a if a ∈ T and a δ = c + δ (resp.
c − δ) if a = c + ∆ (resp.
c − ∆).
For a parametric rectangular predicate p, a valuation v and a rational δ ∈ Q, we write v |= δ p iff a δ ∼ 1 v(x) ∼ 2 b δ for all "a ∼ 1 x ∼ 2 b" in p. For a parametric multirectangular predicate q, we write v |= δ q iff there exists p ∈ q such that v |= δ p. For a parametric (multi)rectangular predicate p, let p δ denote the set {v | v |= δ p}.
We sometimes write v |= p instead of v |= 0 p.We say that a rectangular predicate over X is in normal form if it contains at most one rectangular constraint for each variable x ∈ X, with the convention that the empty predicate p (such that p = ∅) is represented by {x ∈ [+∞, +∞] | x ∈ X}; any rectangular predicate can be put in that normal form.
Let g be a rectangular predicate in normal form, then g(x) denotes the rectangular constraint "a ∼ 1 x ∼ 2 b" if it is the constraint over x in g and true if there is no constraint over x in g.
We defined predicates as sets because it is useful in the sequel for manipulating the predicates that appear in timed automata.
However, some operations are easier to represent with classical boolean operations (∧, ∨, ¬).
It is easy to extend the definition of such operators to our set-predicates.
For example, for two multirectangular predicates q and r, the multirectangular predicate q ∧ r is the set p1∈q,p2∈r {p 1 ∪ p 2 }.
We note PRect(X) the set of parametric rectangular predicates, MultPRect(X) the set of parametric multirectangular predicates and Rect c (X) the set of rectangular predicates containing only closed rectangular constraints (∼ 1 , ∼ 2 ∈ {≤}).
Let v : E 1 → R be a valuation, let E 2 ⊆ E 1 , and c ∈ R, then v[E 2 := c] denotes the valuation v such that v (e) = c if e ∈ E 2 and v (e) = v(e) if e ∈ E 2 .
In the sequel, we sometimes write v[e := c] instead of v[{e} := c].
Let v : X → R be a valuation, for any t ∈ R ≥0 , v − t is a valuation such that for any x ∈ X, (v −t)(x) = v(x)−t.∈ Q ≥0 .
The semantics of A is the STTS A δ = (S, ι, Σ in , Σ out , Σ τ , →) where: (i) S = {(l, v) | l ∈ Loc ∧ v ∈ Inv(l) δ }.
(ii) ι = (l 0 , v 0 ) such that for any x ∈ Var : v 0 (x) = 0.
(iii) Σ in = Lab in , Σ out = Lab out , and Σ τ = Lab τ .
(iv) the transition relation → is defined as follows: (a) For the discrete transitions, ((l, v), σ, (l , v )) ∈→ iff there exists an edge (l, l , g, σ, R) ∈ Edg such that v |= δ g, v = v[R := 0].
(b) For the continuous transitions ((l, v), t, (l , v )) ∈→ iff: first l = l , second for any edge e = (l 1 , l 2 , g, σ, R) ∈ Edg: if l 1 = l then Asap(e) = ⊥ and third ∀x ∈ Var : v (x) = v(x) + t and ∀t ∈ [0, t] : v + t ∈ Inv(l) δFor simplicity, we often say timed automaton instead of single parametric timed automaton.
We use the classical definition of the synchronized product A 1 × A 2 of two timed automata.
For the urgency flag, an edge in the product is flagged Asap if one of the corresponding edges in A 1 or A 2 is flagged.
This is the semantics used in the HyTech tool for the Asap flag [HHWT95].
Notice that (in the final product only), the Asap flag can be replaced by a clock which is reset on every transition, and forced by an invariant to stay nil in every location with an outgoing Asap edge, showing that Asap is a feature that does not add expressive power to timed automata, but just allows us to design timed automata in a modular way.
Controllers are specified using a subclass of timed automata, called Elastic 2 , without invariants and with only closed guards.
In general, invariants are used to express urgency but in Elastic urgency is implicit : a controller shall make an action (almost) as soon as it becomes possible.
Formally, this almost urgency is defined in the AASAP semantics of the controller by allowing some delay (bounded by a parameter ∆) before forcing an enabled transition.
Elastic controller A is a tuple Loc, l 0 , Var, Lab, Edg where Loc is a finite set of locations, l 0 ∈ Loc is the initial location, Var = {x 1 , . . . , x n } is a finite set of clocks, Lab is a finite structured alphabet of labels, partitioned into input labels Lab in , output labels Lab out , and internal labels Lab τ , Edg is a set of edges of the form (l, l , g, σ, R) where l, l ∈ Loc are locations, σ ∈ Lab is a label, g ∈ Rect c (Var) is a guard and R ⊆ Var is a set of clocks to be reset.Notations.
We define the function TrueSince:[Var → R ≥0 ]×Rect c (Var) → R ≥0 ∪ {−∞}, noted TS, as follows: either v |= g and TS(v, g) = t where t is s.t. v − t |= g ∧ ∀t > t : v − t |= g, or v |= g and TS(v, g) = −∞.
Let p ≡ a ∼ 1 x ∼ 2 b be a rectangular constraint.
Given ∆ 1 , ∆ 2 ∈ PT, the symbol standing either for [ or ( and the symbol standing either for ] or ), we define the notation ∆1 p ∆2 for the parametric rectangular constraint:a − ∆ 1 ∼ 1 x ∼ 2 b + ∆ 2where ∼ 1 stands either for ≤ if is [, or for < if is (, and ∼ 2 is interpreted symetrically.
For example, let p ≡ 2 ≤ x ≤ 5, then − 13 (p] ∆ ≡ 2 + 1 3 < x ≤ 5 + ∆.
The notation is naturally extended to rectangular predicates.With those two additional notations we are now ready to define the AASAP semantics [DDR04].
Definition 5 [AASAP semantics] Given an Elastic controller A = Loc, l 0 , Var, Lab in , Lab out , Lab τ , Edg and δ ∈ Q ≥0 , the AASAP semantics of A is the STTS A AAsap δ = S, ι, Σ in , Σ out , Σ τ , → where: (A1) S is the set of tuples (l, v, I, d) where l ∈ Loc, v ∈ [Var → R ≥0 ], I ∈ [Σ in → R ≥0 ∪ {⊥}] and d ∈ R ≥0 ; (A2) ι = (l 0 , v, I, 0)where v is such that for any x ∈ Var : v(x) = 0, and I is such that for any σ ∈ Σ in , I(σ) = ⊥; (A3) Σ in = Lab in , Σ out = Lab out , and Σ τ = Lab τ ∪ Lab in ∪ {}; (A4) The transition relation is defined as follows:• for the discrete transitions, we distinguish five cases: ∈→.
(A4.1) let σ ∈ Lab out .
We have ((l, v, I, d), σ, (l , v , I, 0)) ∈→ iff there exists (l, l , g, σ, R) ∈ Edg such that v |= δ ∆ [g] ∆ and v = v[R := 0] ; (A4.2) let σ ∈ Lab in .
We have ((l, v, I, d), σ, (l, v, I , d)) ∈→ iff · either I(σ) = ⊥ and I = I[σ := 0]; · or I(σ) 񮽙 = ⊥ and I = I. (A4.3) let ¯ σ ∈ Lab in .
We have ((l, v, I, d), ¯ σ, (l , v , I , 0)) ∈→ iff there exists (l, l , g, σ, R) ∈ Edg, v |= δ ∆ [g] ∆ , I(σ) 񮽙 = ⊥, v =• for the continuous transitions: (A4.6) for any t ∈ R ≥0 , we have ((l, v, I, d), t, (l, v + t, I + t, d + t)) ∈→ iff the two following conditions are satisfied: · for any edge (l, l , g, σ, R) ∈ Edg with σ ∈ Lab out ∪ Lab τ , we have that:∀t : 0 ≤ t ≤ t : (d + t ≤ δ ∨ TS(v + t , g) ≤ δ) · for any edge (l, l , g, σ, R) ∈ Edg with σ ∈ Lab in , we have that: ∀t : 0 ≤ t ≤ t : (d + t ≤ δ ∨ TS(v + t , g) ≤ δ ∨ (I + t )(σ) ≤ δ)Comments on the AASAP semantics.
Rule (A1) defines the states that are tuples of the form l, v, I, d.
The first two components, location l and valuation v, are the same as in the classical semantics; I and d are new.
The function I records, for each input event σ, the time elapsed since its oldest "untreated"occurrence.
The treatment of an event σ happens when a transition labelled with ¯ σ is fired.
Once this oldest occurence is treated, the function returns ⊥ for σ until a new occurence of σ, forgetting about the σ's that happened between the oldest occurence and the treatment.
The time elapsed since the last location change in the controller is recorded by d. Rule (A2) and (A3) are straightforward.
Rules (A4.1 − 6) require more explanations.
Rule (A4.1) defines when it is allowed for the controller to emit an output event.
The only difference with the classical semantics is that we enlarge the guard by the parameter ∆.
Rules (A4.2) defines how inputs from the environment are received by the controller.
The controller maintains, through the function I, a list of events that have occurred and are not treated yet.
An input event σ can be received at any time, but only the age of the oldest untreated σ is stored in the I function.
Note that the rule ensures input enabledness of the controller.
Rule (A4.3) defines when inputs are treated by the controller.
An input σ is treated when a transition with an enlarged guard and labelled with ¯ σ is fired.
Once σ has been treated, the value of I(σ) goes back to ⊥.
Rule (A4.4) is similar to (A4.1).
Rule (A4.5) expresses that the event can always be emitted.
Rule (A4.6) specifies how much time can elapse.
Intuitively, time can pass as long as no transition starting from the current location is urgent.
A transition labeled with an output or an internal event is urgent in a location l when the control has been in l for more than δ time units (d + t ≥ δ) and the guard of the transition has been true for more than δ time units (TS(v + t , g) ≥ δ).
A transition labeled with an input event σ is urgent in a location l when the control has been in l for more than δ time units (d + t ≥ δ), the guard of the transition has been true for more that δ time units (TS(v + t , g) ≥ δ) and the last untreated occurrence of σ event has been emitted by the environment at least δ time units ago (I + t (σ) ≥ δ) (we define ⊥ to be smaller than any rational value).
This notion of urgency parameterized by ∆ is the main difference between the AASAP semantics and the usual ASAP semantics.Properties We informally recall the main properties of the AASAP semantics which have been established in [DDR04].
First, the AASAP semantics has the desirable property that "faster is better": if a controller with reaction time bounded by δ 1 safely controls an environment, then so does the same controller with a reaction time bounded by any δ 2 < δ 1 .
Second, we can implement a controller that has been proven correct (that is, such that for some δ > 0 its AASAP semantics safely controls the environment).
The correctness of the controller is preserved by the implementation provided the hardware is sufficiently fast and has a sufficiently precise digital clock.
This has been formally proven by showing that the AASAP semantics can simulate (in the formal sense) a program semantics which defines what is an implementation of an Elastic controller.
Intuitively, it is a procedure that repeats forever execution rounds defined as follows: (i) first, the current time is read in the clock register of the CPU and stored in a variable, say T; (ii) the list of input events to treat is updated: the input sensors are checked for new events issued by the environment; (iii) guards of the edges of the current locations are evaluated with the value stored in T.
If at least one guard evaluates to true then take nondeterministically one of the enabled transitions; (iv) the next round is started.
All we require from the hardware is to respect the following two requirements: (i) the clock register of the CPU is incremented every ∆ P time units and (ii) the time spent in one loop is bounded by a fixed value ∆ L .
We choose this semantics for its simplicity and also because it is obviously implementable.
The condition for the preservation of the correctness is that δ > 3∆ L + 4∆ P .
Third, the AASAP semantics can be encoded by a classical single parameter timed automaton, so that it can by analyzed automatically by timed automata model-checkers like HyTech or Uppaal.
However, this encoding has a limited interest in practice because its size is always exponential in |Lab in |, the number of input labels of the controller.
We solve this problem in the next section by giving a new translation which is compositional and at most quadratic in the size of the controller.
The main idea underlying our compositional construction is to treat the incoming events (issued by the environment) independently of the control structure of the Elastic controller, with a network of automata.
This leads to technical difficulties we explain and address in this section.Following the rule (A4.6) defining almost urgency of the AASAP semantics, there are essentially three reasons for allowing time to pass: (i) either the controller has been in its current location for less than ∆ time units, (ii) or all last untreated occurences of an event have been issued by the environment less than ∆ time units ago, (iii) or finally the guard of the outgoing transitions have not been enabled for more than ∆ time units.
Roughly, those conditions will be checked in our compositional construction by respectively A 2 , which is a transformation of the Elastic controller A, and two types of widgets: the event-watchers and the guard-watchers.
In timed automata, there is essentially one way for modeling urgency: invariants on locations.
Roughly, if we have a transition guarded by a lower bound constraint g, it can be forced as soon as it is enabled by adding as invariant in its source location the closure of ¬g. E.g. for a guard x ≥ 3 we can add the invariant x ≤ 3.
This way, time is blocked when the guard is satisfied and the discrete transition is forced.
If we enlarge the invariant by ∆ (x ≤ 3 + ∆), we get the almost urgency we need.
To formalize this idea, we will need to introduce some more notations:Additional notations (i) Given an Elastic controller A = Loc, l 0 , Var, Lab, Edg and a location l ∈ Loc, let G act (l) = {g | (l, l , g, σ, R) ∈ Edg ∧ σ ∈ Lab out ∪ Lab τ } be the set of guards labelling output transitions or internal transitions, and for α ∈ Lab 1 in , let G evt (l, α) = {g | (l, l , g, α, R) ∈ Edg} be the set of guards labelling event transitions.
(ii) Then define ¯ ϕ act (l) = g∈Gact(l) ¬( −∆ (g) 0 ) and ¯ ϕ evt (l, α) = g∈Gevt(l,α) ¬( −∆ (g) 0 ).
For example, let G act (l) = {2 ≤ x ≤ 5, 0 ≤ y ≤ 1}, then ¯ ϕ act (l) ≡ (x ≤ 2 + ∆ ∨ x ≥ 5) ∧ (y ≤ ∆ ∨ y ≥ 1).
Those constraints will be used as invariant to match the third part of rule (A4.6).
The constraint ¯ ϕ act (l) will be used as an invariant for location l in A 2 to force an output transition when it becomes possible.
The constraint ¯ ϕ evt (l, α) will be used in the guard-watchers, to ensure that when a guard has been true for enough time, the corresponding transition becomes urgent (as long as it is allowed by other parts of rule (A4.6) ).
Those invariants are central to our construction, but if we want a compositional construction (a product of automata), invariants are too restrictive to express urgency since urgency also depends on the current state of the other automata offering enabled synchronizations in the product.
Hence, we should not block time simply when a transition is enabled in one automaton but only when it is enabled in every automaton of the product.
Therefore, some compositional mechanism is needed to model urgency in a product: we will use the Asap flag.
Remember that this flag expresses the fact that a transition is urgent as soon as it is enabled in the whole product.
U0 U1 U2 ¯ ϕevt(l, α) U3 u = 0 ¯ α in l out l ¯ α u := 0 out l Fig. 2.
Guard-Watcher W l α ( ¯ ϕevt(l, α)).
The formal definition of our construction is given in Definition 6.
From an Elastic controller A and a parameter ∆ we construct F (A, ∆) as a product of three types of components: event-watchers, guard-watchers and A 2 directly obtained from A.
We omitt the formal definitions of event-watchers and guard watchers which should be clear from the figures and anyway can be found in [DDR05].
Event-Watcher Associated to an event α ∈ Σ in , we define W α (see Fig. 1) that records the event α.
It has a clock z α encoding the value of I(α) in the AASAP semantics.
z α records the time elapsed since the last untreated event α was issued by the environment.
When I(α) 񮽙 = ⊥, the value of the clock z α is equal to I(α).
This widget is intended to record the occurrence of the events α (as expressed by rule (A4.2) in the definition of the AASAP semantics), and then to propose a synchronization on ¯ α with an Asap flag in location W 2 .
Remember that the notation ¯ α corresponds to the detection of event α by the controller.
From the invariant of location W 1 , this synchronization will not become urgent before ∆ time units.Guard-Watchers.
We introduce Guard-Watchers (see Fig. 2) to monitor the truth value of a set of guards.
They are associated to an event α ∈ Σ in and a location l ∈ Loc.
When the controller is not in location l, the guard-watchers W l α (G) do not influence the execution, being in location U 0 and offering a selfloop synchronization on ¯ α.
When location l is reached, the synchronization on in l forces W l α (G) enter location U 1 and to become active.
The watcher get back in U 0 as soon as l is exited by out l .
Thus, it is active when it is not in U 0 .
Its role is then to prevent the label ¯ α to become urgent whenever there is no transition labeled with ¯ α that has been enabled for more than ∆ units of time.
Hence, we use W l α (G) with the set of guards G = ¯ ϕ evt (l, α).
In l d ≤ ∆ Out l d ≤ ∆ ∨ y ≤ 3 +∆ d = 0 P ostOut l,l d = 0 P ostOut l,l d = 0 P reIn l d = 0 P reIn l In l In l τ σ y ≥ 3 −∆ d := 0 ¯ α x ≥ 2 −∆ d := 0 Out l Out l In l In l, l ∈ Loc 1 , (a) Inv 2 (In l ) = {{d ≤ ∆}} (b) Inv 2 (Out l ) = {{d ≤ ∆ ∨ ¯ ϕ a (l)}} and (c) Inv 2 (P reIn l ) = Inv 2 (P ostOutl, l ) = {{d = 0}}.
In summary, F (A, ∆) = A 2 × α∈Lab 1 in W α × α∈Lab 1 in ,l∈Loc 1 W l α (G evt (l, α)).
The correctness of our compositional construction is established by the following theorem.Theorem 1 For any Elastic controller A, for any environment STTS E and a set Bad of its states, for any δ ∈ Q >0 , A AAsapδ controls E to avoid Bad iff F (A, ∆) δ controls E to avoid Bad.Since the correctness of AASAP semantics of A implies its implementability, we can verify the compositional construction with an automatic tool and generate systematically the implementation code.
In the second part of this paper, we show how we have applied this methodology in practice on a real-world protocol.
We briefly describe the tool set that we have implemented.
The structure of the tool set is depicted in Fig. 5 and it consists of three tools: (i) ELASTIC2HYTECH, (ii) HYTECH2UPPAAL, and (iii) ELASTIC2BRICK.ELASTIC2HYTECH is the main component of the tool set: it implements the compositional construction of Section 5.
Given an Elastic controller Cont (expressed in an HyTech like syntax), it produces a one-parameter HyTech specification Cont (∆) following the construction defined in the previous section.
To obtain a model of the entire system, this specification of the controller has to be composed with a model of the environment (in which the controller is embedded).
This is given as a product of rectangular automata (in HyTech syntax).
The environment is noted Env in the sequel.
We can then use HyTech to reason about the system.
The following three correctness problems can be formulated and answered with HyTech (if the analysis terminates):Parameter Value Elastic Controller HyTech spec.
Uppaal spec.BrickOs C code Fig. 5.
Structure of our tool set.
-[Fixed] Given a set of bad states Bad, a value δ ∈ Q ≥0 , does the controller, when reacting within δ, control the environment to avoid Bad, that is:Reach(Cont (∆)Env ∆ ) ∩ Bad = ∅ -[Existence]Given a set of bad states Bad, does there exist a value δ ∈ Q such that when the controller reacts within δ, it controls the environment to avoid Bad, that is:∃δ > 0 : Reach(Cont (∆)Env δ ) ∩ Bad = ∅ -[Maximization]Given a set of Bad, what is the largest value for δ ∈ Q ≥0 such that when the controller reacts within δ, it controls the environment to avoid Bad, that is:max{δ > 0 : Reach(Cont (∆)Env δ ) ∩ Bad = ∅}To tackle large examples, we also use Uppaal.
The tool HYTECH2UPPAAL translates HyTech specifications into Uppaal specifications.
As Uppaal is restricted to the analysis of timed automata (and it does that very efficiently), it is only applicable if the environment can be modeled as a product of timed automata and the parameter ∆ is fixed.
Obviously, this allows us to answer the [fixed] version of the correctness problem.
Thanks to the "faster is better" property of the AASAP semantics, by doing a binary search on the value space of the parameter δ, we can approximate the maximal value of δ for which the controller is correct up to any precision.The main purpose of the AASAP semantics is to give a way to synthesize executable code for a controller from its model and to ensure that the properties that have been proved on the model are preserved on the code (without making the synchrony hypothesis).
To obtain executable code from the Elastic model of a controller, we use the tool ELASTIC2BRICK that produces C-code from an annotated Elastic specification.
The annotations assign to each transition a piece of code that has to be executed when the transition is fired.
The translation is very simple: we assign to each edge of the Elastic controller a thread that is ran when the associated input event is perceived or when the associated output event has to be produced.
We have chosen to produce code for Lego Mindstorms TM running BrickOs 3 .
Lego Mindstorms TM are toys but the internals are a fully functional micro-computer linked with sensor and actuators.
When running BrickOs, we can use priorities to ensure real-time properties of the code that is executed on the Brick.
Details can be found in [Doy03].7 Case Study: the "Philips Audio Control Protocol" Introduction Bosscher et al study in [BPV94] "a simple protocol for the physical layer of an interface bus that connects the devices of a stereo equipment".
This protocol was proposed by Philips engineers.
The protocol is based on Manchester encoding to transmit binary sequences on a wire between a single sender and a single receiver.In our case study, we will use Lego Mindstorms TM Bricks to implement the sender and the receiver.
To connect the two Bricks, we use a wire plugged to an output gate of the sender and to an input gate of the receiver.
The difficulties here to implement the protocol are similar to the ones that the engineers in Philips were facing: (i) although the receiver knows the length of a time slot, it does not know when it begins (the two Bricks are running asynchronously); (ii) a receiver does not know the length of the bit string it is receiving; (iii) only UP signals can be reliably detected by our sensors (this constraint is taken to fit with the case study of [BPV94]); (iv) the sender and the receiver have digital clocks that have finite granularity, so there will be imprecision in both sending and receiving times; (v) in BrickOs sensors are polled periodically.
As a consequence, the moment at which a bit is perceived can be substantially later than the moment it has been sent.
The first three difficulties should be solved by the logic of the protocol.
The last two difficulties are much lower level and we would like to forget them when designing a high level version of the protocol.
This is exactly what the AASAP semantics allows us to do.Next, we present the idealized version of the protocol and how we modeled it with two Elastic controllers: one for the sender and one for the receiver.
Here, the environment is an observer that compares the sequence of bits sent by the sender with the sequence of bits decoded by the receiver.
The observer reaches the location error whenever the two sequences do not match.Afterwards, we explain how we can use the AASAP semantics during the verification process and verify the robustness of the protocol.
The verification phase allows us to generate code that is correct by construction.Elastic models.
An idealized version of the protocol uses evenly spaced time slots.
To transmit a 1, the sender must let the signal go from low voltage to high in the middle of a slot and from high to low for a 0.
To repeat a bit, the sender is thus forced between two slots to turn the signal off for a 1 or on for a 0.
The receiver is not able to detect precisely moments when the signal goes down and then only relies on the UP signals to decode the messages.
This implies that a The receiver automaton decodes its incoming UP signals by rounding its local time for when it received the signal to the nearest possible time it expects a signal.
This is what makes the protocol robust.
If no signal is received in due time, the sequence is interpreted as being complete.
The discrete variable m is used to encode parity of the received sequence.
It allows the receiver to know if it has to complete a sequence with an additional 0 to conform to the protocol restrictions.
The discrete variable r encodes the one or two bits that were last received.
This variable is checked by the observer automaton against c and leng of the sender to verify if the sent bits are the same as the received ones.
The label FINALZERO does not correspond to an event.
It is an internal action done when the receiver understands it must add a 0 to the sequence to end it.
The observer automaton then synchronizes on this label to know a new bit has been decoded.
As said before, the receiver does not synchronize on DOWN signals.8 > > > > > > > > > > < > > > > > > > > > > : (r = 0 ∧ leng = 1 ∧ c = 0) ∨ (r = 0 ∧ leng = 2 ∧ c ≤ 1) ∨ (r = 0 ∧ leng = 3 ∧ c ≤ 3) ∨ (r = 1 ∧ leng = 1 ∧ c = 1) ∨ (r = 1 ∧ leng = 2 ∧ c > 1) ∨ (r = 1 ∧ leng = 3 ∧ c > 3) ∨ (r = 2 ∧ leng = 2 ∧ c = 1) ∨ (r = 2 ∧ leng = 3 ∧ c = 2) ∨ (r = 2 ∧ leng = 3 ∧ cThis modelisation uses finite range discrete variables, which are not present in the formal definitions.
This is not a problem since all those discrete variables are bounded and thus could be encoded in locations.
For the sake of clarity, we did not do this.
Furthermore, the tools that we are using allow the use of such finite range discrete variables.Parametric verification Let us now turn to the use of the AASAP semantics during the verification phase.
We take the opportunity here to present some methodological aspects too.Using ELASTIC2HYTECH, we generate for the sender and the receiver the HyTech specification of their AASAP semantics following Definition 6.
Those two semantics are noted Sender(∆) AAsap δ1 and Receiver(∆) AAsap δ2 .
We can first check that if the protocol executed in an idealized setting, that is for δ 1 = 0 and δ 2 = 0, is correct.
This is formalized by the following question:Reach(Sender(∆) AAsap 0 Receiver(∆) AAsap 0Observer)∩Bad = ?
∅, where Bad are the states in which the observer is in location error.
With HyTech (or Uppaal), we can easily show that this test is passed successfully by our modelisation of the protocol.
If this verification had failed then we should have concluded that the protocol was flawed in its logic.To continue the study of the protocol and determine if it can be implemented, we should check its robustness.
In our context, we must determine what are the maximum values of δ 1 and δ 2 which ensure that the system Sender(∆) AAsap δ1 Observer ∩ Bad = ∅.
Those maximal value will be expressed in the unit of time U of the system that we have not fixed so far.
Remember U is a quarter of a timeslot.
By tuning this value, we can then maximize the throughput of the protocol.
We should then look for the smallest implementable U on our implementation platform.
For BrickOs, the value ∆ L U (length of the loop in the execution procedure) and ∆ P U (precision of the clocks) can be set to as low as 6 ms and 1 ms. To guarantee a correct implementation of Sender(∆) (and Receiver(∆)), we need to have ∆ > 3∆ L + 4∆ P , and so ∆U > 22ms.
So, we know that δ 1 U and δ 2 U should be srictly below 22 ms. If δ 1 ≤ δ 2 , the infimum for U is 22 ms δ1 else it is 22 ms δ2 .
Now if we increase the value of one of the parameters δ i , the correct value for the other decreases.
This is because increasing the parameter value for the AASAP semantics of a controller strictly increases its looseness, forcing the other to be more precise as compensation, which corresponds to a smaller value for its parameter.
Using this fact, we can conclude that the best U for the system will be obtained when δ 1 and δ 2 are equal.Guiding HyTech with this information, by a parametric search, we found that, for ensuring correctness, the parameters must be strictly less than 1 4 U .
In fact, we proved that a sufficient condition to avoid the error state is that δ 1 +δ 2 < 1 2 .
Execution times of different analysis are given in Fig. 9.
Note that to make HyTech terminate, we needed to give some initial constraints.
Execution times with Uppaal are very encouraging: the problems solved are simpler as the models are not parametric but this problems are those to be solved in practice as a precise parametric analysis is nice in theory but not required in practice (if the target platform is fixed).
Constraint Result Time HyTech δ1 + δ2 < 1/2 Safe 55s δ1 = δ2 = 1/5 Safe 50s δ1 = δ2 = 1/4 Unsafe 90sUppaal δ1 = δ2 = 1/5 Safe < 1s δ1 = δ2 = 1/4 Unsafe < 1s Implementation From annotated models of the sender and the receiver, we have generated, using ELASTIC2BRICK the C-code for the sender and the receiver.
The C files are about 500 lines long for each controller.
The annotations of the models are very natural.
Here are some examples of annotations.
Assume that we want to use the protocol to exchange variable length strings of bits that are stored in an array, say A in the sender and B in the receiver.
Instead of assigning the bit variable i non-deterministically, we should execute the annotation {i := A[j]; j++;}, and in the Receiver automaton, we add the code {B[k]:= α; k++;} to transitions setting r to α ∈ {0, 1}, and the code {B[k]:=0; B[k+1]:=1; k+=2;} to the transition setting r to 2.
Evaluation The code that we have obtained is correct by construction and can safely be executed on Lego Mindstorms TM Brick as an alternative communication mean with real-time guarantees.
For that, it suffices to give the highest level of priority to the protocol to ensure its real-time behavior.
This should not spoil the behavior of other applications running on the Brick as the resources needed by the protocol are very low.
Now, let us look at the performance of the protocol in our implementation.
The throughput obtained, when the length of the sequence goes to infinity, is around 2.84 bits per seconds.
This may look quite low and we could think that far better throughput could be obtained by a hand-made implementation.
But this is not the case.
Indeed, we can show using the results of Ho and Wong-Toi [HWT95] and by taking into account only the imprecision due to reading on digital clocks every time slice, that the throughput of the protocol on Lego Mindstorms TM is bounded from above by around 4.16 bits per seconds.
So, the price in term of performance loss to obtain automatically generated and correct code is not too high in our opinion.
Let us also note that we were only able to find error by testing when the throughput was set around 7 bits per seconds.
That shows the limit of testing at least when done in a naive way.
