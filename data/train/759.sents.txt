We study the problem of information brokerage in sensor networks, where information consumers (sinks, users) search for data acquired by information producers (sources).
In-network storage such as geographical hash table (GHTs) has been proposed to store data at rendezvous nodes for consumers to retrieve.
In this paper, we propose a double rulings scheme which stores data replica at a curve instead of one or multiple isolated sensors.
The consumer travels along another curve which guarantees to intersect with the producer curve.
The double rulings is a natural extension of the flat hashing scheme such as GHTs with improved query locality , i.e., consumers close to producers find the data quickly, and structured aggregate queries, i.e., a consumer following a curve is able to retrieve all the data.
Further, by the flexibility of retrieval mechanisms we have better routing ro-bustness and data robustness.
We show by simulation that the double rulings scheme provide reduced communication costs and more balanced traffic load on the sensors.
The sensor network community has envisioned a large variety of applications, from scientific data collection, to environment monitoring, to smart sensing and distributed Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page.
To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
MobiCom'06, September [23][24][25][26]2006 control.
Early applications of sensor networks for scientific data collection and habitat monitoring have mainly adopted a many-to-one traffic pattern to deliver raw sensor readings towards data loggers [1,26].
Emerging applications that combine distributed sensing and control observe more interesting traffic patterns and impose more stringent delay requirements.
In this paper we focus on the type of applications where sensor networks provide large-scale intense monitoring over the environment, and/or tracking of interesting targets, as well as delivering the relevant data to the interested parties.
Multiple nodes, with their low-level readings, may collaboratively arrive at a high-level semantic event report, e.g., 'elephant sightings', based on which corresponding authorities need to be notified for response.
Users of the sensor networks may well be embedded in the same physical space and inject queries to the network at any time searching for certain types of data.
This category of applications covers a large number of scenarios, from target detection and response, to emergency rescue, to health-care management applications.These large-scale sense-and-respond applications impose several requirements on data discovery and delivery protocols.
Data queried by users are often highly selective.
At the same time sensor nodes may detect numerous events of different types, among which each user is only interested in a much smaller subset.
Emergency response applications and distributed control systems often impose a high requirement on the access delay at users to ensure event reports or control commands being delivered on time, since information ages fast and stale data is useless.
Furthermore, the arrival of queries may be spatially and temporally distributed.
In order to serve users across time and space, in-network information storage is needed to support information aggregation and reasoning.
History data helps to maintain temporal coherence and consistency, e.g., in target tracking applications.
Data collected at spatially distributed locations may need to be integrated in order to come up with a global conclusion, e.g., the limited views from multiple spatially distributed cameras are combined to derive the semantics of an event.In this paper we formulate the problem as the problem of information brokerage which, specifies how data is collected, processed and stored as well as how queries are routed to discover relevant data.
We model the problem as the matching of information producers (also known as sources), that perform data acquisition and event detection, with information consumers (also known as sinks) who search for this information.
Naturally in a sensor network there can be multiple producers that generate a variety of data types as well as multiple consumers, possibly mobile, that search for relevant information.
We aim to develop a scheme for large-scale networks that support low-delay queries for multiple users that search selectively for data types discovered and stored in the network.
Early work on information discovery and routing follow two basic approaches: data-centric routing [11] and datacentric storage [24].
Data-centric routing takes a reactive approach, as in directed diffusion [11] and TinyDB [19].
Little collaborative preprocessing is performed.
Thus the discovery of the desired information usually relies on flooding the network.
This approach targets at infrequent queries for streaming data type so that the cost of flooding can be justified and amortized by the following long-term data delivery.
For queries from multiple consumers for the same data source, the performance deteriorates as data sources might be rediscovered separately by multiple consumers.
The delay incurred by information discovery may also be too high for real-time queries in emergency response or delivery of control demands.Data-centric storage is proposed for large-scale networks with many simultaneously detected events that are not necessarily desirable for all users [24,21], as in the applications considered in this paper.
A producer leaves data on rendezvous nodes for consumers to retrieve.
Thus data across space and time can be aggregated at rendezvous nodes.
Prior work includes geographical hash tables (GHTs) [21] where data is hashed by its data type to geographical locations.
The node closest to the hashed location is identified as the rendezvous node.
The consumer applies the same hash function and retrieves data from the same rendezvous node.
Data and query delivery to the rendezvous node is implemented by geographical routing such as GPSR [14].
GHTs have greatly reduced the communication cost and energy consumption by avoiding network-wide flooding for information discovery.
Its simplicity is also attractive.
There are a few weaknesses with GHTs though.
First, the data retrieval scheme is not distance-sensitive.
Even when the consumer is close to the producer, it may have to go to a far away rendezvous node.
Second, the rendezvous node for popular data queried by many consumers imposes a communication bottleneck.
This artifact in traffic patterns may eventually hurt the network lifetime.
Third, the rendezvous node is a single point of failure.
Structured replications on mirror nodes can be adopted to improve the system robustness but at a high cost of communication.
Fourth, the property that data is randomly scattered in the network is good for load balancing, but bad for structured data organization and subsequently bad for queries that require cross-type data aggregations.
Improvement of the flat hashing by hierarchical hashing has been investigated with hash locations aware of data correlation, i.e., similar data is stored close by, or query locality, i.e., nearby consumers should discover producers more quickly [15,16,10].
Our approach is to develop what is called double rulings scheme, an extension of the basic GHTs hashing.
The idea is to choose the rendezvous nodes along a continuous curve, instead of one or multiple isolated sensor nodes, as in the case of GHTs [21].
The motivation is two-fold.
Data delivery from data source to a rendezvous node is implemented by multi-hop routing.
Thus it is natural to leave information hints along the trail that the data travels on, at no extra communication cost.
Furthermore, data hint replication on multiple nodes provides more flexibility for a consumer to discover relevant data -it is easier to encounter a 1D curve than a 0D node.
A basic double-ruling scheme works as follows: data or pointers are stored at nodes that follow a replication curve while a data request travels along a retrieval curve.
Any retrieval curve intersects the replication curve for the desired data.
Thus successful retrieval can be guaranteed.
For an easy familiar case, assume the network is a two-dimensional grid embedded in the plane with nodes located at all the lattice points (see Figure 1).
The information storage curves follow the horizontal lines.
The information retrieval curves follow the vertical lines.
To be differentiated with the double rulings we will propose in this paper, we call this simple double rulings scheme the rectilinear double rulings.
Notice that the data retrieval curves are independent of the location of the data sources.
In fact, a consumer traveling along the vertical line through itself is guaranteed to hit all horizontal storage lines, and thus is able to find all the data stored in the network.
This double-ruling scheme is also distance sensitive -if the producer and consumer are actually near each other, they must also be near each other along the path connecting them using the horizontal and vertical lines.
By replicating data on more nodes that are not in close proximity with data sources or hashed locations as in GHTs, double rulings scheme enables better fault tolerance against geographically concentrated node failures.Despite all these good properties, the rectilinear double rulings idea is so far restricted on networks with nice graph structures, e.g., those that resemble grids [18,29,25], due to its rich geometric flavor.
Recently Fang et al. [9] has studied double rulings for general sensor field with non-trivial topology.
The idea is to combine double rulings with GHTs on a two-level routing hierarchy that partitions the sensor field into tiles with respect to the global topology [8].
GHTs is adopted on the top level of the hierarchy and a data type is hashed to a tile instead of a single node.
Inside each tile, a double rulings scheme is invented to hash data on routing paths such that retrieval paths will intersect the replication paths for sure.
At last we note that rumor routing [3] can be considered as a probabilistic double rulings scheme.
Information producer takes a walk (either a random walk or a straight trajectory) and leaves data pointers on the trail.A consumer travels along another walk hoping to encounter one of the data pointers.
Any two walks have a probability to intersect.
The consumer sends out enough retrieval walks to have a sufficiently high probability to meet with one of the event curves.
Essentially the challenge of designing good double rulings is to find data replication and retrieval paths that intersect, are not too long each (not too many replications), and are evenly spread out across the network.In this paper we further investigate double rulings schemes with a focus on the flexibility of retrieval mechanisms.
We propose a simple double rulings scheme that actually has GHTs as a subcase.
Same as in GHTs, a data item is hashed by its data type (also called key in GHTs) to a geographical location.
However, instead of traveling along the geographical greedy path to the rendezvous node, the producer travels along a circle that goes through itself and the rendezvous node and replicates data or data pointers on the way.
We show that this simple modification to GHTs suddenly allows a large variety of retrieval mechanisms.
The consumer does not necessarily travel to the hashed location to retrieve the data.
It only needs to hit the replication curve.
And we show that there are many such retrieval curves.
Thus the consumer has great flexibility to design its retrieval strategy subject to the current network load and energy level.
Among these retrieval schemes, several have special properties:• Distance-sensitive retrieval: if the consumer is of distance d from the producer, the consumer can discover the data with a cost of O(d), although neither has the knowledge of each other's location or the bound on d.
This is an attractive feature in many applications, as information will be most useful, thus queried more frequently, in the spatiotemporal locale where it was collected.
• Aggregated data retrieval: in GHTs, if a consumer is interested in multiple data types, such as detections of both vehicles and animals, the consumer has to visit multiple rendezvous nodes for these data types to collect all the data.
In our double rulings scheme, we show there is a simple rule based on which one can design a curve (actually many such curves) that will surely intersect with all replication curves of desired data types.
Thus the consumer travels along a simple curve and gather all the information.
• Double rulings retrieval: the most powerful retrieval mechanism is to travel along any double ruling curve (among many such curves) that will intersect all replication curves.
Thus a user can discover all the information discovered and stored in the network.
This has further applications in data collection by data mules.Our double rulings scheme improves the weaknesses of GHTs, with modestly increased replication.
As explained above, it supports distance-sensitive retrieval and structured data retrieval.
In addition, the double rulings scheme has substantially improved load balancing and robustness to node failures.
With the flexibility in retrieval curves, the rendezvous node is no longer a bottleneck since retrieval curves may not necessarily visit it.
We show that the data storage admits a local recovery scheme.
If the sensors in a certain region are destroyed, then all the relevant data are stored on the boundary and thus can be locally recovered.
Compared with structured replication in GHTs or hierarchical hashing that aims to improve data robustness, the double rulings scheme imposes much lower communication cost for replication, since the replicas are organized along a closed curve that are easy to visit.The next section describes the design of our double rulings mechanism.
We also compare its performance with GHTs [21] and the previous double rulings scheme [9] in the simulation section.
In this section we will use a continuous domain for the intuition and easy explanation.
In a discrete network, a continuous double ruling curve can be easily implemented by a path in the network in a greedy fashion [20].
The implementation details are presented in the next section.
As in GHTs, we assume that the sensor nodes know their geographical locations and a few parameters of the sensor field such as the diameter and the boundary.
We consider it a reasonable assumption that the sensor nodes acquire their geographical locations by localization algorithms, not only because localization is a fundamental component for network functionalities but also that location information is important for the integrity of sensor readings.
For an easy explanation, we use projective geometry to map sensor nodes onto a sphere.
There are several ways of projecting points on a sphere one-to-one to points in the plane.
One commonly used mapping is stereographic projection [5].
Specifically, we put a sphere with radius r tangent to the plane at the origin.
Denote this tangent point as the south pole and its antipodal point as the north pole.
A point h * on the plane is mapped to the intersection of the line through h * and the north pole with the sphere.
See Figure 2 (i).
This provides a one-to-one mapping of the projective plane P 2 to the sphere, with the north pole mapped to the point of infinity.
More details on projective geometry can be found at [22].
Stereographic projection preserves circularity.
Any circle on the sphere, including great circles, is mapped to a circle in the plane.
It is also a conformal mapping, i.e., one for which local (infinitesimal) angles on a sphere are mapped to the same angles in the projection.
It does not preserve distances or area, however.
The distortion around the north pole can be high.Another category of spherical mapping is called area preserving mapping, in which areas on a sphere, and the areas of any features contained on it, are mapped to the plane in such a way that two are related by a constant scaling factor.
For example, the Lambert azimuthal equal-area projection as shown in Figure 2 (ii), where the distance from a point h on the sphere to the tangent point (south pole) is equivalent to the distance from its image h * to the tangent point.
This mapping is not conformal.
In fact, it is known that no projection can be both equal-area and conformal.
We use stereographic projection in our scheme and remark that other spherical mapping can also be used.Let the sphere be defined by the equation (x−p)·(x−p) = r 2 where p is the center of the sphere, and r its radius.
The straight line from a point q to the north pole of the sphere (denoted by n), is given by l(t) = q + tv, where t is the parameter and v = n − q.
Then the intersections of the straight line with the sphere are defined by the roots of theh h * r r d h h * d (i) (ii)Figure 2: Spherical projection (i) stereographic projection; (ii) equal area projection.quadratic equationt 2 (v · v) + t(2v · (q − p)) + ((q − p) · (q − p) − r 2 ) = 0.
One root corresponds to the north pole n, and the other is the projection.
Thus, given the sphere, and a point in the plane, we can compute the mapping of the point on the sphere.Conversely, given a point h on the sphere, its projection on the plane will lie on the straight line l (t) = h+tw, where w = h − n.
We define the plane by (x − o) · z = 0 where o is the origin, and z is the unit vector perpendicular to the plane.
Then the projection of h on the plane is given byh * = ρ(h) = h + (o − h) · z w · z w.The stereographic projection maps an infinite plane onto a sphere.
For a sensor network field, the area in which the sensor nodes lie correspond to a finite region of the plane.
Let this region be called S. Thus, any point in S maps to a point h = (x, y, z) on the sphere where z ≤ k for some 0 < k < 2r.
The radius r can be adjusted for a suitable value of k in this range.
The distance from the origin to the point h * = ρ(h) is given by 2r p z/(2r − z).
Also, the distance from the origin to the point (x, y, 0) is given by p z(2r − z).
With the knowledge of the sensor field, we can place the sphere at the center of the sensor field.
Suppose the furthest sensor node is of distance D from the origin (the south pole of the sphere).
Then the parameter k, i.e., the z-value of the highest projection on the sphere, is at most 2r · D 2 4r 2 +D 2 .
At the end of this subsection we show that for a finite region, we can choose r such that the mapping gives a constant distortion on the distances.
Specifically, we choose r as D/(2 √ ε),ε > 0.
k = 2rε/(1 + ε).
Recall that circles on the sphere map to circles in the plane.
The next Lemma shows that the lengths on the circle on the sphere is not too much different from the lengths on the circle in the plane.Theorem 1.
Consider any two points p 1 and p 2 on the sphere with their projections on the plane, ρ(p 1 ) and ρ(p 2 ).
If the distance from p 1 to p 2 along a circle is d, and the distance between ρ(p1) and ρ(p2) along the projection of the circle is , then we haved ≤ 2r 2r − k = 1 + ε.Proof.
The proof simply follows from the properties of triangle similarity.When ε = 1, all the points map to the bottom half sphere.
We usually take ε as a constant larger than 1.
For any two points in S, their distance in S along a circle is within a constant factor of the distance between their mappings on the sphere along the corresponding circle.We use d(·, ·) to represent the geodesic shortest distance between two points on the sphere and | · | to represent the Euclidean distance in the plane.
Thus we have,Corollary 2.
|p * q * | ≤ (1 + ε)d(p, q).
Proof.
The shortest distance between p, q on the sphere must be along a circle.
The distance between p * and q * along the projected circle in the plane is bounded by (1 + ε)d(p, q).
Further, the Euclidean distance of two points is always smaller than the distance along any circle.
Thus|p * q * | ≤ (1 + ε)d(p, q).
With this mapping specified, we will explain our replication and retrieval schemes on a sphere.
The above theorems imply that we can focus on the distances on the sphere.
The real distances travelled in the sensor field are bounded by at most a constant multiplicative factor 1 .
For points on a sphere, there is an intuitive double ruling scheme -any two great circles of the sphere must intersect.
Thus we can use great circles as the double rulings to replace the horizontal and vertical lines in rectilinear double rulings.
There is one difference however.
In rectilinear double rulings, the replication curves and the retrieval curves purely depend on the locations of producers and consumers.
Through each node, there is a unique horizontal line and a unique vertical line.
A point on a sphere, however, stays on infinitely many great circles.
This property implies that the producer and consumer curves can have a lot of flexibilities, as we will see in the following.We design a double rulings scheme that actually includes GHTs as a special case.
Each data type is hashed to a geographical location h * as in GHTs.
When a producer routes towards the hashed location, instead of following the geographical greedy route as in GHTs, it follows the great circle defined by its own location p and the hashed location h, denoted by C(p, h).
Data from different producers with the same data type will be routed to the same hashed location where information aggregation can be performed.
All the great circles with type C( * , h) pass through the hashed location h, as well as the antipodal point ¯ h. Thus there are actually two rendezvous nodes, h and ¯ h, located far away in the network that have all the information of the same data type.
Notice that the hashed location h depends only on the data type.
Thus the location ¯ h can be derived by a simple geometric computation.
See Figure 3 for an example.
By the properties of stereographic mapping, a great circle is mapped to a circle in the plane.
In particular, the image of any great circle of the sphere encloses the tangent point of the sphere and the projected plane.
These circles, i.e., replication curves, may have different sizes and centers.
Figure 4 shows the actual routes followed by multiple producers.
The hash function picks two geographical locations h * and ¯ h * .
The rendezvous nodes are selected as those closest to these locations and can be discovered by greedy forwarding in a similar way as in GHTs [21] (more details in next section).
We abuse the notation a little bit and use h * and ¯ h * to represent the hashed rendezvous nodes as well.
The data is always replicated at the hashed rendezvous nodes h * and ¯ h * .
Data of the same type from multiple producers is aggregated at the rendezvous nodes h * and ¯ h * .
Dependent on the storage requirement, other nodes on the replication curve either store the real data or simply a pointer to where the real data is stored.
¯ h * h p h * C(p , h) C(p, h) p ¯ h With this new routing strategy from producers to hashed locations, the retrieval scheme for the consumer q can be more flexible than that in GHTs.
Observe that the mapping described in section 2.1 leaves an empty region near the north pole of the sphere that projects to points outside the network, and it is possible that a curve chosen by the consumer on the sphere intersects the replication curve in this region.
However, circular curves on the sphere will have two intersections on the producer curve, and we select our retrieval curves in ways that ensure that atleast one of the intersections projects to a point inside the network.
We present a number of such retrieval rules as well as their properties.
Obviously the same retrieval rule as in GHTs can still be used, with two rendezvous nodes though.
Definition 3.
GHTs retrieval rule: the same as in GHTs, the consumer can route to the hashed location h or ¯ h, whichever is closer, to retrieve all the data of the same type.This retrieval scheme, as in GHTs, suffers from two disadvantages.
It is not distance sensitive.
Even when the consumer is actually close to producer, the hashed location might be far.
On the other hand, popular data items will create communication bottleneck around the rendezvous nodes that hold them.
With the simple modification of the replication curve, we show in this section several retrieval schemes that are distance sensitive and also alleviate traffic hot spot for popular data.
Besides, it is attractive to have the flexibility of different data retrieval schemes, simply for load balancing and routing robustness.
Assume that the distance between a producer and a consumer on the sphere is d, we would like to have a retrieval scheme where the distance traveled by the consumer is O(d).
Such a retrieval scheme is named distance-sensitive.
Notice that the consumer does not know where the producer is and vice versa.
The goal of the retrieval scheme is to travel along a curve that hits the replication curve as quickly as possible.If we rotate the sphere so that the hashed location h is at the north pole, then the replication curve is exactly a longitude curve.
The distance-sensitive retrieval scheme follows the latitude curve searching for a replication curve.
We denote by L(q, h) this latitude curve.
It is not necessarily a great circle.
There are two intersections, u, v, between the retrieval curve and the replication curve, as shown in Fig- ure 5.
Now we claim that the closer one, in this case, u, is of distance at most d · π/2 from the consumer along the latitude curve L(q, h).
Obviously, the minimum distance from a point q to a set of points C(p, h) is always smaller than the distance from q to one point in this set, for example p.
The following lemma says that the distance between q and u along the latitude curve L(q, h) is at most a factor of π/2 of this shortest distance.
The proof of the lemma appears in the appendix.L(q, h) ¯ h u v q h C(p, h) pLemma 4.
Take a longitude curve C through the north pole h and a latitude curve L(q, h) through a point q. Assume that u is the closer intersection of C and L(q, h) to q. Denote by k the distance between q and u along L(q, h) and k the shortest distance from q to C on the sphere.
Thenk /k ≤ π/2.
The consumer, however, does not know which direction to go to on L(q, h) to find the closer intersection u.
This can be easily solved by a doubling trick, where the consumer chooses a direction randomly and travels a distance 2 i , with i initially set as 0.
If the consumer has not encountered an intersection with C(p, h), it turns around, increases i by 1 and travels a distance 2 i along the opposite direction from q.
The process stops when the consumer discovers the closer intersection.
Suppose at this point we have a parameter i, then dπ/2 ≥ k > 2 i−2 , where k is the distance from q to u along L(q, h) and d = d(p, q), the shortest distance between p, q on the sphere.
The total distance traveled by the consumer is bounded by2 · i−1 X j=0 2 j + k ≤ 9k − 2 ≤ 9πd − 2.
In summary, we have Definition 5.
Distance-sensitive retrieval rule: the consumer travels along the circle on the sphere with equal distance to the hashed location h, and uses a doubling trick to discover the closer intersection with the replication curve.
The distance traveled by the consumer is at most O(d), if the distance between producer and consumer is d on the sphere.The bound on the consumer cost is for the worst case scenario.
We show by simulation later that the performance is pretty good if we just choose a random direction.
We note that here we focus on the continuous replication and retrieval curves.
In a discrete network, the curves are realized by routing paths.
When two continuous curves intersect, the corresponding routing paths may either have a common node, or have a pair of crossing links.
We remark that under a unit disk graph model, if there are two crossing links, then one node must have links to all the other three nodes.
With wireless broadcasting, all the nodes in the neighborhood can hear the message and are able to respond if they have the data.
In practice, a consumer can also explicitly check the neighbors along the retrieval path or a producer explicitly store pointers on the neighbors along the replication path.
The data replication scheme enables a number of interesting retrieval schemes for aggregated data.
If the consumer travels along the latitude curve L(q, h) with h as the north pole, it actually can discover all the data with the same data type.
In fact, any closed curve that separate the hashed location h from its antipodal point ¯ h will intersect all the replication curves with the same data type.
Thus a consumer is given great flexibility in choosing the retrieval curve according to the current network traffic load and energy consumption level.
We formalize the data retrieval rule for aggregated data of several data types {T i }, i = 1, · · · , m.Definition 6.
Aggregated data retrieval rule: the consumer searching for all the data with data type {T i }, i = 1, · · · , m, can follow a data retrieval curve that, for each data type Ti,• either goes through the hashed location h = h(T i ) or ¯ h, where the aggregates are computed and stored;• or is a closed curve that separates h from ¯ h, collects all the relevant data and computes the aggregates.We remark that the above retrieval rule does not specify a unique retrieval curve but allow infinitely many possibilities.
In fact, this is one of the advantages provided by this double rulings scheme.
The design of a retrieval curve satisfying this rule can be performed at each consumer node.
All the information needed is the data type and their hashed locations.
Thus multiple consumers searching for the same data type may choose, by their own decisions, different routes.
This flexibility of data retrieval rule enables load balanced traffic patterns and routing robustness.
The double rulings property enables a full power retrieval scheme.
A consumer q following any great circle will definitely cross all the producer curves.Definition 7.
Full power data retrieval rule: the consumer travels along any great circle and is able to retrieve all the data stored in the network.
The idea of replicating on a 1-dimensional curve, rather than a 0-dimensional point, greatly enhances the system robustness to failures.
In GHTs, geographical routing with the combination of greedy forwarding and perimeter routing is used to deliver data to the hashed node.
A planar subgraph, such as the relative neighborhood graph or the Gabriel graph, is subtracted from the connectivity graph.
When greedy forwarding can not find a neighbor closer to the destination, perimeter routing is adopted to traverse the face in the planar graph.
Specifically, the hashed geographical location, most likely, does not have a sensor node right there.
Thus perimeter routing will be adopted to tour around the face that encloses the hashed location.
The basic GHTs scheme relieves data loss at the home node, the one closest to the hashed location, by replicating the data the red paths denote producer replication curves; dashed blue paths denote retrieval curves; yellow square denotes one producer and magenta square denotes one consumer.around these perimeter nodes.
However all the perimeter nodes are still in geographical proximity thus a 'block error' that destroys the sensors in a nearby region may destroy all the replicas.
Structured replication can be used to improve the system robustness and relieve the traffic bottleneck at the home rendezvous node, in cases when too many events with the same key are detected in the network.
Producers only put data at a nearby mirror node, while consumers may need to access multiple mirror nodes until they get what they want.
The mirror nodes are chosen in a hierarchical way by using quad-tree structure.
For the 1-level replication, the sensor field is partitioned into 4 equal size quadrants.
The hashed location falls in one of them.
3 mirror nodes are chosen as those with the same relative locations inside other quadrants.
More replication can be made in a recursive way.
Such structured replication is costly since the mirror nodes are chosen to be geographically sparse.
Replication along a curve improves the robustness without paying extra communication cost.
Further we show that our replication rule supports local recovery when a group of nodes die.
In our spherical double rulings scheme, the hashed node is no long the single point of failure.
If the nodes in the neighborhood of the hashed node h are destroyed, the nodes on the boundary of the destroyed region contain all the relevant information and can be used to recover the aggregates.
This is possible as long as the destroyed region does not include both the hashed location h and its antipodal point ¯ h.
Since h and ¯ h are geographically fairly apart in the network, a local disaster is not likely to cover such a large region.
All replication curves for this data type will leave data replicas on a curve connecting h and ¯ h, thus intersect the boundary of the destroyed region.
So all the data replicated inside the destroyed region have their corresponding replica on some boundary nodes.
These boundary nodes can be detected by a local greedy sweeping as in [7], or by using a topological method as in [28].
We present a number of implementation issues of the double rulings scheme for a sensor networks, from the aspect of information stored at a sensor and the implementation of the replication and retrieval paths.
The information kept at a node is very small.
Each node stores its own location and a few parameters about the stereographic projection used in the scheme.
Every node keeps the global content-based hash function that takes a data type, e.g., types of target detections, and outputs a hashed location on the sphere.
The hash function can be either a random function or a function that is locality-sensitive, i.e., similar data is hashed to similar locations [6].
The choice of this function is dependent on the applications.
As mentioned earlier, data is either replicated on all the nodes along the replication curves; or, for the sake of saving storage, data is only replicated selectively on some nodes (say, uniformly sampled) along the curve and pointers are left on the rest of them pointing to the closest replica on the curve.
A retrieval path hits the replication curve, gets the pointer and travels to the closest replica to find the data.
More replication reduces data retrieval cost.
We evaluate this tradeoff in the simulation section.
The replication curve and retrieval curve are implemented as routing paths in the sensor field.
We use the mechanism described in [20] to allow producers and consumers to respectively replicate and retrieve data along a curve.
A node is passed a parametric equation of the curve in terms of a parameter t, and the direction along the curve for forwarding the message.
Using the coordinates of its neighbors, a node finds a neighbor that is further along the curve than itself in the required direction, and sends the message to this neighbor.
This can be done by taking a uniform sampling along the curve within a certain distance of the node, and computing the nearest such sample for every neighbor.
Further, we use the greedy version of this scheme, that is, the message is forwarded to the neighbor who advances furthest along the curve in the required direction.
This ensures that replication or retrieval is completed in the fewest number of steps.
We also require that the next hop is not too far from the virtual curve, say within 1 unit.
For example, in Fig 7 the node S, when forwarding messages along curve C in the direction indicated, can only forward messages to its neighbors in the shaded region.
In networks with relatively low density of nodes, it is possible for a message to arrive at a node that has no neighbor in this region.
When that happens, we perform a local flooding and search 2-hop neighbors.
In a network with uniformly randomly deployed sensor nodes, simulation results show that the chance of finding a greedy neighbor is high even in networks with average degree as low as 5 or 6.
It is easy to see that the feasible region for forwarding always contains a sector of angleθ 1 = π 2 − arcsin ( 1 2(c+1)), where c is the radius of the circle along which routing is done.
If we consider a 2-hop neighborhood, then the corresponding sector is given by an angle θ2 = π ).
Thus, the probability of finding a suitable neighbor within a 2-hop neighborhood is at least 1 − ( 2π−θ 2 ) n 2 where n 2 is the number of 2-hop neighbors.
Table 1 shows the average number of 2-hop neighbors for different node degrees in a poisson distribution, and the corresponding worst case probabilities of a node finding a suitable 2-hop neighbor.
For small values of c, the curve is small, and a search in a small neighborhood will always yield the results .
The values in table 1 were computed with c = 3.
For larger values of c, the probability can only be larger.
We show that simulation results confirm our assertions on the properties of double rulings.
In this section, we compare the performance of double rulings and GHTs for both retrieval quality and load balancing.
We simulated double rulings and GHTs on a network with 4225 nodes in a square field of size 35 × 35 units.
The communication radius of each node was taken to be 1 unit, hence the connectivity was that of a unit disk graph.
Average number of neighbors of each node was 9.5.
Nodes were arranged in a grid model with perturbation.
Each node deviates from its grid position by a random distance less than 0.5 units along each axis.
Producer and consumer costs were measured in the number of hops each had to take along their respective curves.
Greedy routing along a curve was used for replication as well as for retrieval.
The parameter θ in the parametric form of a circle was used as the parameter for routing.
To prevent the greedy forwarding from straying a large distance from the actual curve, forwarding was restricted to within a unit distance of the curve on the plane.
For both distance-sensitive retrieval or full power double rulings retrieval, the consumer selects the retrieval curve, chooses a random direction and tours along the circle until it hits the desired replication curve(s).
Once data is discovered, it is delivered back to the consumer in one of three ways: (i) finish up the remaining circle and get back to the consumer; (ii) turn around and follow the reversed path back to the consumer; (iii) use any routing scheme available in the system to deliver the data back to the consumer.
Producers need only to replicate data, hence the cost for a producer is that of following a great circle producer curve.
It is desirable that consumer nodes are able to access data from nearby producers at a low cost.
In GHTs, the consumer has to communicate with the same rendezvous node irrespective of the relative location of the producer.
We simulated both schemes with pairs of producers and consumers at varying distances.We also simulated the scheme of [9].
This is a scheme integrated with the Glider [8] landmark based routing protocol.
Essentially a set of landmarks is selected in a preprocessing stage and the network is partitioned into Voronoi tiles, each formed by a landmark and all the nodes nearer to it than other landmarks (in the connectivity graph sense).
This Voronoi tiling and its dual combinatorial Delaunay complex, in which two landmarks are joined by an edge if and only if their respective Voronoi tiles share common boundary, are used to aid routing.
In [9] a distributed hash table is used to hash data into a tile, data storage inside the tile is implemented by a double-ruling scheme, which ensures information retrieval within each tile.
As the producer travels to the hashed tile using Glider, and in every tile traversed, it replicates data on a "finger tree" with 3 arms.
This guarantees that any retrieval trajectory passing through the tile will intersect the one of the arms.
Thus, the consumer can find the information before reaching the hashed tile, and for a nearby producer, it is likely that the consumer will not need to travel all the way to the hash location.For a particular distance value, we randomly select 100 pairs of producer/consumer.
Figure 8 shows the simulation results averaging on 100 values for each plot.
In all schemes we assume that data is delivered back to the consumer along the reversed data discovery path.
For GHTs, in which the average cost of retrieval is not related to the distance between producer and consumer, the consumer incurs the same cost in accessing local data as that for accessing remote data.
The Glider based scheme is more distance sensitive, but the cost increases rapidly with increasing distance, and in the worst case is as bad GHTs.
With double ruling, the consumer searched for data along a latitude circle with respect to the hash location.
There are two observations, the consumer cost in double rulings scheme is consistently smaller than that in GHTs, and is smaller than the Glider based scheme in almost all cases.
The average cost and the distance between producer and consumer exhibit a linear correlation for distances up to about half the length of the field, beyond that, the average cost does not increase.
With queries involving different data types, double rulings scheme searches for data in a great circle, and can retrieve data at a fixed cost of 77.5 irrespective of the number of producers or data type.
Whereas in GHTs, the cost is proportional to the number of different data types required, if we make a round trip to the hash location for each type 2 .
2 One can also seek for the minimum tour visiting all hashed locations.
This is the traveling salesman problem and is NP-hard to solve.varying different types of data.
The value is averaged on 100 randomly selected consumers for each column.
It shows that for aggregated queries that search for more than 1 data types, it is almost always beneficial to adopt double rulings scheme instead of GHTs.
The basic GHTs scheme chooses only one hashed home node.
As we mentioned before, structured replication can be used for data replication at several hash locations.
The network is partitioned recursively by a quad-tree.
For a given hashed location and a given hierarchy depth d, we can compute 4 d − 1 mirror images, for each square in the quad-tree with depth d.
In our simulation, we set d to 1 and divide the entire network region into 4 quadrants.
Thus, for each point, there are 3 mirrors in the other 3 quadrants.
Producers replicate data at both the original hashed location and mirrors, so that consumers can retrieve data by accessing the closest location.
Double rulings, on the other hand, selects a curve, and replicates data at nodes along this curve.
We compared GHTs with and without replication against double rulings where the consumer uses a latitude curve as well as where the consumer uses a great circle to retrieve data.
All of the simulations run over 500 producer/consumer pairs.
Table 3 shows that consumer cost for double rulings is less than that of GHTs.
In GHT, producer cost is higher than that of consumer, because the producer always replicates data in perimeter mode while consumers stop as soon as they reach any perimeter node.
In a bad case, the perimeter may turn out to be the outer perimeter of the network, increasing the average producer cost by a large number.
Structured replication improves consumer cost in GHTs but at the expense of increasing producer cost several times.It was mentioned in section 2.2 that in a double ruling scheme, actual data may be stored at a few nodes, while other nodes on producer curve store pointers to these.
This saves cost of storing data, but increases communication cost for retrieval.We simulated the effect of storing data at regular intervals (one node in every R hops stores the data) along the producer curve, and at h and ¯ h with 100 pairs of randomly chosen producers and consumers.
The retrieval process, after meeting the producer curve, travels to the nearest replication point to obtain data.
Figure 9 shows the relation between storage costs and average additional communication incurred by the consumer.
When storage cost is decreased, that is, the interval of replication is increased, the additional cost of communication increases linearly with it.
Beyond a certain value that depends on the size of the field, the replication interval does not affect the communication costs.
This is because in such cases, h and ¯ h become the actual points of retrieval in almost all cases.
Figure 10 shows the effect of different replication intervals on the distance sensitiveness of retrievals.
Larger replication intervals increase consumer cost at all distances, but the scheme is still desirable compared to GHTs, and is better than the Glider based scheme except at very large intervals of replication.
However, we should note that the Glider based scheme incurs high storage cost, by replicating on all branches of the finger tree.
In a sensor network, it is important to have schemes that balance the load of operation across the nodes in the network.
This avoids bottlenecks and improves the network lifetime.
To evaluate load balancing properties of the two schemes, we simulated a scenario where there is a single producer, and 500 different consumers searching for the data.
Figure 11 (i) is a plot of loads across the network when using double rulings.
The load of each node is measured by the number of messages passing through it.
We used the distance-sensitive retrieval mechanism.
The load is seen to be well distributed across the network with no particular preference for occurrence of peaks signifying high loads.
Further, the node suffering the highest traffic has a load of only 18.
The highest load created by GHTs is an order of magnitude higher (126).
Figure 11 (ii) shows the load distributions with GHTs.
Nodes near the hashed location suffer much higher loads than the rest of the network, which is likely to result in a bottleneck slowing down the network, and also draining the batteries of these nodes rapidly.
In this paper we propose a simple replication mechanism that supports flexible retrieval mechanisms.
In the future, we would like to combine the data replication mechanism with mobile data collectors such as data mules.
Another direction is to investigate natural double rulings mechanisms in sensor field with irregular geometry.
Figure 10: Distance between producer and consumer v.s. the average cost incurred by the consumer to retrieve information in GHTs, the Glider based scheme and in double ruling with different replication intervals.
Information collection and delivery can explicitly use mobile nodes, such as data mules [12,17,27,13,23].
This is motivated by the observation that nodes around static sinks suffer from unbalanced traffic and energy consumption.
Furthermore, controlled mobility helps to get around fundamental capacity problems imposed by insufficient sensor density.
In an extreme case, such as a disconnected network, mobile nodes have to be involved to deliver information between two disconnected components.
However, designing the moving trajectory for data mule is challenging.
One obvious metric is to have the data mule travel a short distance.
Finding the shortest path that visits all the communication ranges of the nodes with data is a traveling sales man problem and is NP-hard [2].
We observe that data mules can be naturally combined with double ruling approaches to shorten the traveling distance of the data mule, with a modest in-network storage and aggregation.
A mobile node physically traveling along a consumer curve is able to retrieve all the data in the network.
This substantially decreases the distance traveled by the data mule.
If the network is uniformly deployed in a squared region of n nodes.
The shortest traveling salesman path is roughly O(n) (visiting each node), but the double ruling curve has length roughly O( √ n).
In this paper we focus on a double rulings mechanism for a nicely distributed sensor field.
In the case that sensors are deployed in an irregular shape with holes, the double ruling curves may accumulate on the hole boundaries.
Thus we will need to take the global geometry into consideration and define double ruling curves in a virtual coordinate system that adhere to the underlying network geometry [9,4].
For example, in the virtual coordinate system defined by the medial axis of the sensor field [4], there are natural double rulings curves, those that are parallel to the medial axis and those perpendicular to the medial axis.
Another approach to apply double rulings mechanism in a sensor field with complex geometry is to partition the sensor field into nicely shaped components and construct double ruling curves for each piece.
This is the approach taken in the Glider-based scheme [9], in which the double rulings scheme is in the virtual coordinate system defined by landmark distances.
In that case a data mule collecting data from the network only needs to visit each piece and pays a traveling cost proportional to the minimum spanning tree connecting all the segmented pieces.
Proof.
Suppose the longitude curve C(p, h) through p and the north pole h.
The latitude curve through q is denoted as L(q, h).
u is the closer intersection of C(p, h) and L(q, h) to q. Denote by k the distance between q and u along L(q, h) and k the shortest distance from q to C. See Figure 12.
We want to argue that k /k ≤ π/2.
We denote by o the center of the sphere and o the center of the latitude circle L(q, h).
The angle between the line oq and the horizontal line is defined as θ, 0 ≤ θ ≤ π/2.
Then the radius of L(q, h), r = r cos θ, where r is the radius of the sphere.
Suppose the angle ∠qo u = φ.
0 ≤ φ ≤ π/2.
The distance between q and u on L(q, h), k = r φ = rφ cos θ.
Take q as the mirror point of q reflected by the plane defined by C(p, h).
Since the minimum distance between two points q, q must be along the great circle defined by o, q, q , which intersects C(p, h) at point w. Thus by symmetry the minimum distance between q and C(p, h), is exactly the distance between q and w, d(q, w).
The Euclidean distance between q, q , |qq | = 2r sin φ = 2r cos θ sin φ.
Thus ∠qow = ∠qoq /2 = arcsin(|qq |/(2r)) = arcsin(cos θ sin φ).
Therefore, k = d(q, w) = r∠qow = r arcsin(cos θ sin φ) ≥ r cos θ sin φ.
The last inequality follows from the fact that sin x ≤ x.The claim then follows:k k = φ cos θ arcsin(cos θ sin φ) ≤ φ sin φ ≤ π/2.
The function φ/ sin φ achieves its maximum value when φ = π/2.
