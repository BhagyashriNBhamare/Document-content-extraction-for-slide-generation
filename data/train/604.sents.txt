This paper introduces a mechanism for combining unbounded looka-head exploration with linear time complexity in a deterministic parser.
The idea is to use a resolve parsing action in place of the classical reduce.
The construction of shift-resolve parsers is presented as a two-step algorithm, from the grammar to a finite nondeterministic automaton, and from this automaton to the deterministic parser.
Grammar classes comparisons are provided.
Common deterministic parser generators [5] provide a parser developer with two interesting static guarantees: that the input grammar is unambiguous, and that the resulting parser will process its input string in linear time.
There is however a major issue with these parser generation algorithms: they cannot provide a deterministic parser for an arbitrary context-free grammar, resulting in the infamous conflicts between possible parsing actions.
Their inability to deal with parsing decisions that need more than the pre-established k lookahead terminal symbols is to blame for a large part of it.Two different parsing techniques allow to circumvent this limitation to bounded lookaheads in bottom-up parsers, but to keep the unambiguity guarantee.
The first, called regular lookahead parsing, uses a finite state automaton to explore an unbounded right context [2,3,6].
The linear time guarantee is however lost.
The second, called noncanonical parsing, explores the right context using the parser itself.
The latter can thus perform some reductions in this right context, return to the conflict point, and use a bounded number of the newly reduced symbols to yield a deterministic decision [14,15,12].
However, the preset bound on the reduced lookahead length-in practice the bound is k = 1-hampers the power of the noncanonical methods.We want to have our cake and eat it too: we want linear time parsing, ambiguity detection, and no user defined bound on the lookahead length.
Shiftresolve parsing is a new combination of the regular and noncanonical strategies that achieves all these properties.
To this end, we make the following contributions.
• We propose a new parsing action, resolve (Section 2.1), which combines the classical reduction with a pushback, i.e. it rewinds the stack down to the point where the reduction should take place.
The exact amount of pushback is not fixed, but computed for each reduction as a minimal necessary length.
• By promoting the resolve action as a replacement for the reduce action, our parsers properly integrate noncanonical resolutions in the right context exploration (Section 2.2).
One could fear that a quadratic time complexity would stem from this combination.
We avoid it by ensuring that the pushback lengths remain bounded.
• We present the construction of shift-resolve parsers as the determinization of a phrase recognizer (Section 4).
The algorithm generalizes similar constructions for LR parsers.
The choice of the approximations used in order to have a finite recognizer is left open, and we use a lattice of possible approximations (Section 3.2).
Hence, our method is highly generic and allows for tradeoffs between descriptional complexity and classes of accepted grammars.
A bottom-up parser operates by reverting the derivations that led from the axiom of the grammar to the input string.
Each of these reversions is the reduction of a phrase α to a nonterminal A, where A→α is a rule of P .
A canonical parser always reduces the leftmost phrase in a given sentential form, called the handle of the sentential form, but a noncanonical parser partially ignores this ordering.
It is able to reduce a phrase further right from a handle, and to use the additional information provided by the newly reduced nonterminals to infer its parsing decisions.
Indeed, a single nonterminal symbol describes a complete context-free language, and, using only a few nonterminals as lookahead, a noncanonical parser has an impressive amount of right context information at its disposal.
We make here the simplifying choice of always using completely reduced lookahead symbols: symbols as they appear in the grammar rule we are exploring, $ a b c S A B C D q0 s4 s5 s1 s2 s3 q1 r1'0 q2 s8 s6 s7 q3 s8 s9 s10 q4 s8 and cannot be reduced without reducing the entire rule.r5'0 r5'0 q5 s8 r7'0 r7'0 q6 s11 s8 q7 s8 r4'0 r4'0 q8 r8'0 r9'0 s8 s12 s13 q9 s8 r6'0 r6'0 q10 s14 s8 q11 r2'0 q12 r9'1 s8 r8'1 r8'1 q13 r8'1 s8 r9'1 r9'1 q14 r3'0As usual in noncanonical parsing [1], a deterministic two-stack model is used to hold the current sentential form.
The parsing (or left) stack corresponds to the traditional LR stack, while the input (or right) stack initially contains the input string.
Two operations allow to move symbols from the top of one stack to the top of the other: a shift of a symbol from the input stack to the parsing stack, and a pushback of a bounded number of symbols the other way around.
A reduction using rule A→α removes the topmost |α| symbols from the parsing stack and pushes A on top of the input stack.We compute, for each reduction, the minimal bounded reduced lookahead length needed to discriminate it from other parsing actions.
This lookahead exploration is properly integrated in the parser.
Once the parser succeeds in telling which action should have been done, we either keep parsing if it was a shift, or need to reduce at an earlier point.
The pushback brings the parser back at this point; we call the combination of a pushback and a reduction a resolution.No cost is paid in terms of computational complexity, since shift-resolve parsers are linear in the length of the input text.
A simple proof is that the only re-explored symbols are those pushed back.
Since pushback lengths are bounded, and since each reduction gives place to a single pushback, the time linearity is clear if the number of reductions is linear with the input length.
This last point stems from the fact that our method detects and rejects cyclic grammars.
Let us consider the extended grammar with rulesS ′ 1 −→S, S 2 −→ACa, S 3 −→BDb, A 4 −→AD, A 5 −→a, B 6 −→BC, B 7 −→b, C 8 −→c, D 9 −→c. (G 1 )Grammar G 1 can require an unbounded lookahead if we consider approximated parsing methods, like for instance a LR(0) approximation, which provides the basis for most practical parsing methods.
We have here a non-null pushback: the resolve action r 9 '1, which would have needed an unbounded terminal lookahead, is solved using the stacked C and the lookahead a.
The pushback of length 1 emulates a reduced lookahead inspection of length 2.
Table 2: The parse of the string acca by the shift-resolve parser for G 1 .
q 0 aq 4 DCa$ r 5 '0 q 0 ADCa$ s 2 q 0 Aq 2 DCa$ s 7 q 0 Aq 2 Dq 7 Ca$ r 4 '0 q 0 AC$ s 2 q 0 Aq 2 Ca$ s 6 q 0 Aq 2 Cq 6 a$ s 11 q 0 Aq 2 Cq 6 aq 11 $ r 2 '0 q 0 S$ s 1 q 0 Sq 1 $ r 1 '0, acceptreading Ac, the lookahead for the reduction to C is a, while the one for the reduction to D is c + a.
After reading Bc, the lookaheads are c + b and b respectively.
Thus, if we use a LR(0) approximation, we need an unbounded terminal lookahead length in order to choose between the reduction to C or D, when seeing the last input symbol a or b after a sequence c + .
Grammar G 1 is not LALR(1).
If we try to use more advanced parsers, G 1 is not NSLR(1) [15]-it is NSLR(2)-, and the time complexity of XLR(∞) parsing [2] -LR-Regular using a LR(0) approximation-according to G 1 is quadratic.
Table 1 contains the parse table for shift-resolve parsing according to G 1 .
The table is quite similar to a LR(1) table, with the additional pushback length information, but describes a parser with much more lookahead information.
States are denoted by q i ; shift entries are denoted as s i where i is the new state of the parser; resolve entries are denoted as r i 'j where i is the number of the rule for the reduction and j the pushback length.
The reduction according to rule S ′ 1 −→S indicates that the input is successfully parsed.
Table 2 details the parsing steps on the valid input acca.
Symbols are interleaved with states in the parsing stack in order to ease the reading, and are not actually used.The originality of shift-resolve parsing resides in that Table 1 is not the result of a very precise computation; in fact, we used the worst approximation we tolerate.
Still, the parsing time is linear and no preset lookahead length was S ′ → · S$ S ′ →S · $ S S→AC · a S→ACa · S→ · ACa S→A · Ca a A C A→ · AD A→AD · A→A · D A D A→AD · A→ · AD A→A · D A D A→ · a A→a · a D→ · c D→c · c D→ · c D→c · c C→ · c C→c · c d2 r2 r8 d8 r9 d9 r5 d9 r9 d5 d4 d4 r4 r4 $ (b) Position graphFigure 1: Representing the derivation of string accca in G 1 .
necessary.
The shift-resolve parsing table presented in Table 1 is the result of a two-steps process: the first step builds a finite nondeterministic automaton from the grammar, and the second generates the deterministic shift-resolve parser from it.
We consider here a graph representation of a context-free grammar.
This graph can be seen as the set of all left to right walks in all possible derivation trees for the grammar.
The nodes of this graph are positions to the immediate left or immediate right of a derivation tree node.
The vertices tell which other positions are reachable.
We label each position with a dotted rule giving its local context.
For instance, with G 1 , any tree node ν A with symbol A can nondeterministically derive a node ν a with symbol a from A→a, or two nodes ν ′ A and ν D with symbols A and D from A→AD.
Following this idea, we find that the local context of ν ′ A provides us with more information than the mere symbol A: the symbol A in question is in front of a dot in the position A→ · AD.If we make this local context explicit in the labels of the positions, then the relations between these positions become visible.
These transitions are of three types: symbol transitions Figure 2: Nondeterministic automaton for Grammar G 1 using κ 0 .
(G) = h(L(b(G))).
· C · A · D A · D · S · S→AC · a S→A · Ca S→ · ACa S→ · BDb S→B · Db S→BD · b ε ε ε ε ε ε ε ε ε C→ · c c C→c · C · S→BDb · ε ε A→ · a A→a · A→ · AD A→A · D D→ · c D→c · A→AD · ε ε ε a C A B D b A a · S S→ACa · ε D B→ · BC B→B · C B B→BC · B→ · b b B→b · · B B · C ε c d9 d2 d3 r6 d6 d8 d7 r4 d4 d5 r3 r5 r9 r8 r7 r2 S ′ → · S$ S ′ → · S$ S ε ε $In order to uniquely identify a single position in the position graph, we define valid positions for a grammar G as triplesδd i [A i −→α · α ′ ]r i y such that S⇒ rm * δAy⇒ rm δd i αα ′ r i y in b(G).
(1)For instance, the position labeled by C→ · c in Figure 1b δ[A i −→α · Xα ′ ]y X −→ δ[A i −→αX · α ′ ]y,(2)δ[A i −→α · Bα ′ ]y dj −→ δαd j [B j −→ · β]r j uy if α ′ ⇒ * u in b(G), and (3) δαd j [B j −→β · ]r j uy rj −→ δ[A i −→αB · α ′ ]y if α ′ ⇒ * u in b(G).
(4) We are eager to put explicit labels on our positions because we intend to collapse the position graph into a finite graph.
The equivalence relations defined to this end will preserve the local context, and thus use the position labels.
[p] κ χ −→ κ [q] κ iff ∃p ′ ∈ [p] κ , q ′ ∈ [q] κ , p ′ χ −→ q ′ .
(5)Simple Equivalence Relation Figure 2 is not a Rorschach test but the collapsed position graph Γ κ0 for G 1 using a simple equivalence relation κ 0 between positions.Definition 3 Two positions are simply equivalent if and only if they have the same dotted rule as label, i.e.δ[A→α · α ′ ]y κ 0 γ[B→β · β ′ ]z iff A→α · α ′ = B→β · β ′ .
(6)While very basic, this equivalence relation is fine enough to yield a working shift-resolve parser for G 1 .
It is the simplest equivalence relation we will use for shift-resolve parsing.Base Positions The addition of base positions to N as in Figure 2 is straightforward.
We identify them as δ[ · A]y or δ[A · ]y whenever S⇒ rm * δAy in G; Equations (3) and (4) are then replaced byδ[A i −→α · Bα ′ ]y ε −→ δα[ · B]uy if α ′ ⇒ * u in b(G),(7)δα[ · B]uy dj −→ δαd j [B j −→ · β]r j uy,(8)δαd j [B j −→β · ]r j uy rj −→ δα[B · ]uy, and(9)δα[B · ]uy ε −→ δ[A i −→αB · α ′ ]y if α ′ ⇒ * u in b(G).
(10)When the number |N | of nonterminals is small compared to the number |P | of rules of G, as quite often in practical grammars, base positions allow to significantly diminish the size of Γ κ0 .
The usual partial order on Eq(N )-the complete lattice of all equivalence relations on N -is the inclusion relation ⊆.
For any two elements κ a and κ b of Eq(N ), κ a ∧ κ b is the greatest lower bound or meet, defined asκ a ∧ κ b = κ a ∩ κ b .
(11)Finer equivalence relations are obtained when using the meet of two equivalence relations; they result in larger collapsed position graphs.
Let K be the set of all equivalence relations that are included in κ 0 ; K is an obvious interval sublattice of Eq(N ), ordered by the inclusion relation.
We will only make use of equivalence relations in K: if κ is in K, then κ = κ 0 ∧ κ ′ for some κ ′ in Eq(N ).
Equivalence relations in K abound: for instance, a relation κ k with LR(k) precision could be written as κ 0 ∧ l k withδ[A→α · α ′ ]y l k γ[B→β · β ′ ]z iff k : h(y) = k : h(z);(12)the set of equivalence classes using l k is [N ] l k = T ′k -the set of different sequences of k terminals.
An experimental parser generator with a much finer equivalence relation is currently available from the Internet at the following address: http://serdis.dis.ulpgc.es/ ∼ ii-pl/ftp/dr.
If κ = κ 0 ∧ κ ′ , we can still optimize the size of Γ κ with base positions.
If p is a position in N , then we only have to identify [p] κ as a pair ([p] where [p] κ0 can be a base position.κ0 , [p] κ ′ ), We call a collapsed position graph Γ κ using an equivalence relation κ in K a nondeterministic automaton.
Theorem 1 If S⇒ * δAρ⇒δr i αα ′ d i ρ = γα ′ d i ρ = γσ holds in b(G), then ν 0 γ −→ * κ [δr i [A i −→α · α ′ ]d i x] κ σ −→ * κ ν 1 with ρ⇒ * x holds in Γ κ .
Proof We now describe how to extract a deterministic shift-resolve parser from a nondeterministic automaton Γ κ .
The algorithm is based on a subset construction.
The states of the shift-resolve parser are sets of items [ν, sr , d], where ν is an equivalence class on N using κ-i.e. a state in Γ κ -, sr a parsing action-either a production number or 0 to code a shift-, and d is a nonnegative integer to code the distance to the resolution point.
By convention, we assume that d is null whenever sr denotes a shift.
Initial state's item set is computed asI q0 = C({[ν 0 , 0, 0]}),where the closure C of an item set I is the minimal set such that C(I) = I ∪ {[ν ′ , 0, 0] | [ν, sr , d] ∈ C(I), ν di −→ κ ν ′ } ∪ {ι | [ν, sr , d] ∈ C(I), ν ri −→ κ ν ′ , ¬(= [ν ′ , sr , d]))},where, by noting L the terminal language produced by a sequence of symbols, we discard superfluous ε-reductions with the help of the conditionsnull (i) iff A i −→α, L(α) = {ε} null (I) iff [[δ[A→αX · β]y] κ , sr, d] ∈ I, L(X) = {ε}.
Transition from state item set I with symbol X is defined as follows.
Figure 3 presents the details of the item sets computations for states q 8 and q 12 of the shift-resolve parser presented in Table 1.
Lemma 1 states that two positions reachable from ν 0 by the same language will appear in a single item set of the shift resolve parser.
· , r8, 1 S→AC · a, r9, 1 B→B · C, r8, 1 S→B · Db, r8, 1 C→ · c D→ · c c C c C→c · D→c · S→AC · a, r8, 0 B→B · C, r8, 0 S→B · Db, r8, 0 S→BD · b, r9, 0 A→A · D, r9, 0 S→A · Ca, r9, 0 C→ · c D→ · c∆(I, X) = C({[ν ′ , sr , d ′ ] | [ν, sr , d] ∈ I, ν X −→ κ ν ′ , ((sr = 0 and d ′ = 0) or (sr 񮽙 = 0 and d ′ = d + 1))})Lemma 1 Let z be a terminal string in T * , u and v two strings in(T ∪ {d i | i ≤ |P |} ∪ {r i | i ≤ |P |}) * such that h(u) = h(v) = z, ν 0 u −→ * κ ν, ν 0 v −→ * κ ν ′ in Γ k and ν 񮽙 = ν ′ .
Then there exists a cover string ϕ inV * for (u, v) such that {[ν, sr , d], [ν ′ , sr ′ , d ′ ]} is included in the item set ∆(I q0 , ϕ).
Proof.
We outline the proof by induction on the length |u| + |v|.
If u = v = ε, then z = ε and ϕ = ε is a cover for (ε, ε).
There are three possible atomic steps that allow to increase |u| + |v|: append a single d i or r i to either u or v, or append a terminal symbol a to both.If u = u ′ d i and ϕ is a cover for (u ′ , v), then ϕ is also a cover for (u, v).
If u = u ′ a, v = v ′ a and ϕ is a cover for (u ′ , v ′ ), then ϕa is clearly a cover for (u, v).
If u = u ′ r i and ϕ is a cover for (u ′ , v), then two different cases arise.
The first case occurs when null (i), ϕ = ϕ ′ γ, L(γ) = ε, ϕ ′ = δX with L(X) 񮽙 = ε or ϕ ′ = ε.
Then ϕ ′ is a cover for (u, v).
The second case occurs otherwise, and then ϕ is clearly a cover for (u, v). 񮽙
Parser Table Parser table entries, i.e., shifts and resolves, are computed from the item set I q of each state q as follows.T (q, X) = if ∀ι = [[δ[A→α · Xβ]x] κ , sr , d] ∈ I q ,sr = r: resolve r with pushback d (if r = 1 and d = 0, accept) otherwise: shift to q ′ such that I q ′ = ∆(I q , X) Rejection Condition A grammar is inadequate if and only if two different state item sets are built with identical item sets except for some pushback length(s); otherwise, we write it is a ShRe(κ) grammar.
It follows that the worst-case space complexity of the shift-reduce parser for G is O(2 |Γκ||P | ).
More powerful shift-resolve parsers can be obtained at the price of descriptional complexity if we add to the condition that one such state should be ∆-reachable from the other.Theorem 2 If G is ambiguous, then it is not ShRe(κ) for any κ in K. Proof.
We merely outline the proof.Since G is an ambiguous context-free grammar, we can find two leftmost derivations S ⇒ lm * xAρ ⇒ lm xαα ′ ρ = xασ and S ⇒ lm * yBσ ⇒ lm yβσ in G, with Aαα ′ 񮽙 = Bβ, and such that there is a z in T * with xα⇒ * z and yβ⇒ * z.Such derivations are mirrored in the nondeterministic automaton Γ κ by twopositions ν = [δ[A→α · α ′ ]s] κ and ν ′ = [γ[B→β · ]t] κ such that ν 0 u −→ * κ ν χ −→ * κ ν 1 and ν 0 u ′ −→ * κ ν ′ χ ′ −→ * κ ν 1 , with h(u) = h(u ′ ) = z (13) h(χ) = h(χ ′ ) = σ.
(14)In such a situation, there is a prefix ϕ in V * such that some items [ν, sr , d] and [ν ′ , sr ′ , d ′ ] are included in the item set of ∆(I q0 , ϕ).
The right context of this shift-resolve parser state is σ$ * , an infinite regular language.
Since ν 񮽙 = ν ′ (Aαα ′ 񮽙 = Bβ and κ = κ 0 ∧ κ ′ ), we are bound to find two item sets only differing on the pushback lengths, and therefore G is found inadequate. 񮽙
The classes of ShRe(κ k )-κ k is defined as the meet of k 0 and l k from Equation (12)-grammars are not comparable with the classes of LR(k) grammars.
For instance, we can produce a shift-resolve parser for the grammar with rulesS→AC | BCb, A→d, B→d, C→aCb | c (G 2 )using κ 0 , but G 2 is not LR(k) for any value of k-as a matter of fact, it is not LR-Regular either.
Conversely, for k > 0, we can put an unbounded number of null nonterminals between a conflict and its resolution.
For instance, the grammar with rulesS→Aa | Bb, A→cAE | c, B→cBE | c, E→ε (G 3 )is LR(1) but not ShRe(κ) for any κ: once we reach the a or b symbol allowing to resolve, we would need to pushback an unbounded number of E symbols in order to have the c we intend to reduce on top of the parsing stack.
A simplification we made in the shift-resolve construction makes it possible for a LR(0) to be inadequate using κ k .
This is the case for the grammar with rules S→Sa | B, A→a, B→dBA | b.(G 4 ) Figure 4 shows how the resolution in a shift-resolve state with a single possible reduction (here B→b) can be tricked into an useless exploration of the right context caused by the κ k approximations.
The issue can be tackled on the nondeterministic automaton level by choosing a finer equivalence relation, for instance κ = κ 0 ∧ c 1 whereB→b · , 0, 0 S→B · , r7, 0 S→S · a, r7, 0 S ′ →S · $, r7, 0 B→dB · A, r7, 0 A→ · a, 0, 0 b q0 S→Sa · , r7, 1 A→a · , 0, 0 S→S · a, r7, 1 S ′ →S · $, r7, 1 B→dbA · , r5, 0 S→B · , r5, 0 S→S · a, r5, 0 S ′ →S · $, r5, 0 B→db · A, r5, 0 A→ · a, 0, 0 a S→Sa · , r7, 2 A→a · , 0, 0 S→S · a, r7, 2 S ′ →S · $, r7, 2 B→dbA · , r5, 0 S→B · , r5, 0 S→S · a, r5, 0 S ′ →S · $, r5, 0 B→db · A, r5, 0 A→ · a,δ[A→α · α ′ ]y c 1 γ[B→β · β ′ ]z iff h(δ) : 1 = h(γ) : 1.
(15)The issue can also be tackled on the subset construction level if we test whether following r i transitions in the nondeterministic automaton is necessary for a resolution, and if not, fill the entire parser table line with this resolution.
Shift-resolve parsing is related to two areas: parsing techniques and nondeterministic grammatical representations.
The presence of conflicts in deterministic parsers is a widely acknowledged issue.
Transforming an input grammar until no more conflicts can be found is a tedious task, can obfuscate the grammar, and may result in convoluted semantic actions.
It is therefore tempting for a parser developer to trade the two static guarantees-unambiguity and linear time recognition-for his confidence in his own skill in the handling of ambiguities and a reasonable chance of having a linear time parser [16].
Another line of research is to see how far one can go without sacrificing the static guarantees.This line has given birth to the LR-Regular [4] and noncanonical [14] parser families.
To the best of our knowledge, the only other combination of the two families [7] is an extension to DR(k) parsing [8].
It suffers from a worst-case quadratic parsing time complexity inherent to DR(k) parsing with non LR(k) grammars.Using only completely reduced symbols in noncanonical parsing was already investigated with the Leftmost SLR(1) parsers [15], and discarded as less powerful than Noncanonical SLR(1) parsing.
We improve on LSLR(1) parsers by allowing a non-predefined lookahead length and more powerful approximations in our grammatical representations.Finally, to the extent of our knowledge, Grammar G 1 is the first published instance of a quadratic parsing time complexity with a regular lookahead parser.Nondeterministic Grammatical Representations Before becoming a classical presentation [9] and a classical implementation [5] for LR(k) parser constructions, nondeterministic grammatical representations were used for efficient LR(k) testing [11].
Item grammars are a very similar representation [10].
They have also been used as a unifying framework for parsing methods [13].
Our idea of using the lattice of equivalence relations for the various possible approximations seems to be new.
Shift-resolve parsing is a novel parsing method with an attractive combination of properties: the produced parsers are deterministic, they can use an unbounded lookahead, and they run in linear time.
Their generation is the result of a highly generic algorithm working on a nondeterministic automaton.
It is easy to design new approximations for the automaton in order to improve the grammatical coverage.The next logical step is the investigation of which conditions would yield shift-resolve parsers that keep running in linear time even if we allow unbounded pushback lengths.
