During this decade, it has been observed that many real-world graphs, like the web and some social and metabolic networks, have a scale-free structure.
These graphs are characterized by a big variability in the arity of nodes, that seems to follow a power-law distribution.
This came as a big surprise to researchers steeped in the tradition of classical random networks.
SAT instances can also be seen as (bi-partite) graphs.
In this paper we study many families of industrial SAT instances used in SAT competitions , and show that most of them also present this scale-free structure.
On the contrary, random SAT instances, viewed as graphs, are closer to the classical random graph model, where arity of nodes follows a Pois-son distribution with small variability.
This would explain their distinct nature.
We also analyze what happens when we instantiate a fraction of the variables, at random or using some heuristics, and how the scale-free structure is modified by these instantiations.
Finally, we study how the structure is modified during the execution of a SAT solver, concluding that the scale-free structure is preserved.
The Satisfiability problem (SAT) is central in Computer Science.
It was the first problem to be proven NP-Complete, and it is used extensively to encode many other problems into it.
Therefore, finding good algorithms to solve SAT is of practical use in many areas of Computer Science.
Even though the general SAT problem is NP-Complete, many very large industrial instances can be solved efficiently by modern solvers.
The aim of this work is to study the body of industrial instances to detect general properties that are shared by the majority of instances.
We focus on the structure of the instances viewed as bi-partite graphs, where nodes represent variables and clauses, and edges represent the presence of a variable in a clause.
In particular, we try to detect the distribution on the frequencies of the variables and of the sizes of the clauses, in SAT instances used in the latest SAT Competitions and SAT Races.
Our work was inspired by [BDIS05], where they suggest that industrial instances, as many other realworld graphs could have a scale-free structure.
of the 10 challenge problems in SAT [SKM97, Sel00, KS03, KS07].
Recently, in [ABL09], we have proposed some random SAT instance generators that produce formulas with variable frequencies following a power-law distribution.
We show that solvers specialized on industrial instances perform better in these random industrial-like instances than solvers specialized on random formulas.Another application of the study could be to evaluate which is the best family of solvers to use on a particular instance, by analyzing the distribution of variable frequencies or clause sizes.
In particular, this could be use as one more selection criteria in a portfolio approach [XHHLB08].
The paper proceeds as follows.
In Section 2, we present the study of the distributions that best represent the frequencies of variable occurrences and clause sizes.
Also we describe the statistical techniques we use in our work.
In Section 3, we study whether the scale-free nature is preserved under partial instantiations of variables.
In Section 4, we analyze the structure of the formulas during the execution of complete SAT solver of different nature.
We conclude in Section 5.
Every SAT instance can be seen as a bi-partite graph, with a set of nodes V ∪ C, where V represents the variables and C represents the clauses.
The edges are the pairs (v, c) ∈ V × C such that variable v appears in clause c.
In what follows, n = |V | and m = |C|.
In order to analyze if a bi-partite graph is scale-free, we have to study the arity of the nodes.
Notice that the arity of a node v ∈ V is the number of occurrences of the variable v, and the arity of c ∈ C is the size of the clause c.For every bi-partite graph we can compute f real v (k) as the number of variables that have a number of occurrences equal to k, divided by n, and similarly, f real c (k) is the number of clauses of size k divided by m.
We add the label real to emphasize that these functions come from empirical data.
We can also define the accumulative versions of these functions asF real v (k) = i≥k f real v (i) and F real c (k) = i≥k f real c (i).
Notice that, assuming that there are no empty clauses and all variables occur somewhere,F real v (1) = F real c (1) = 1.
In the scale-free model, the arity of nodes is characterized by a random variable K that follows a power-law distribution f pow (k) = P (K =k) = c k −α .
The exponent α has typically values inside [2,3].
This distribution diverges at zero, and there is a lower bound k min for the values of k from where we get the power-law behavior or heavy tail.
In the discrete case (the one that concerns us), the normalizing constant is c = 1/ζ(α, , and the cumulative function isk min ) = 1/ ∞ i=0 (i + k min ) −α ,F pow (k) = k kmin −α+1 .
There is not a proper (formal) definition of what a scale-free graph is, but one of their basic properties -usually taken as a definition-is that the arity of nodes seems to follow a power-law distribution.
Therefore, we must check if, for some values of α v and α c , we have f realv (k) ≈ c k −αv and f real c (k) ≈ c k −αc .
Notice that, applying logarithms to both sides, we get log f (k) = log c − α log k. Therefore, if f real v (k) and f real c (k) are power-law, representing them as a function of k with double-logarithmic axes, we should get closed to a straight line with slope −α.In some papers, the value α is calculated by linear regression of log f (k) as a function of log k.
In [LADW05, section 2.1.3] there is a discussion of why it is better to plot the cumulative logarithm log F (k), instead of log f (k), to compute the regression.
But, in this case, the slope is −α + 1.
Following this argument, in Figure 1 we represent F v (k) and F c (k) versus k with double-logarithmic axes, for some families of industrial formulas.We will follow the maximum likelihood method for computing an estimation of α, as described in [CSN07].
To estimate the value of α for a collection of empirical data k 1 , . . . , k n , we compute the value of α that maximizes the probability that the data were drawn from the model:P (k 1 , . . . , k n | α) = n i=1 α − 1 k min k i k min −αWe take logarithms, since the maximum will be in the same place, then we take derivatives and make the function equal to zero:∂ ∂α log P (x 1 , . . . , x n | α) = = ∂ ∂α n log α − 1 k min − α n i=1 log k i k min = = n α − 1 − n i=1 log k i k min = 0we getˆα getˆ getˆα = 1 + n n i=1 log(k i /k min ) For the discrete case, a good approximation for big values of k min isˆ α = 1 + n n i=1 log ki kmin−1/2Notice that the estimated α depends on k min .
To compute the value ofˆkofˆ ofˆk min , we try to minimize the distance between the (experimental) cumulative distribution function F real (x) and the (theoretical) cumulative distribution function F pow (x; α, k min ).
The distance between both distributions is calculated as the maximal difference between both functions.
Then, we compute the value of k min that minimizes this distance:d = min kmin≥1 max k≥kmin F real (k) F real (k min ) − F pow (k; ˆ α, k min )We get so the value of k min and of d.
The value of this distance d is an indicator of the fitness of the estimation.
When we say that arity of nodes seems to follow a power-law distribution, we emphasize the seems because it is obvious that SAT formulas, as well as the WWW and other scale-free graphs, are not randomly generated.
Therefore, we do not expect the arity of nodes to follow exactly any distribution.
However, we want to check if some distribution fits the data better than others.
In particular, we have tried to fit, apart from a power-law distribution, an exponential distribution.The probability density function for an exponential distribution has the form c e −β x .
Calculating the constant, for the discrete case, we getf exp (k; β, k min ) = (1−e −β ) e −β (k−kmin) and its cumulative function F exp (k) = e −β(k−kmin).
In this case the estimation of the β parameter by the method of maximum likelihood gives:∂ ∂β log P (k 1 , . . . , k n | β) = = ∂ ∂β n log(1 − e −β ) − β n i=1 (k i − k min ) = = n e −β 1 − e −β − n i=1 (k i − k min ) = 0Hence,ˆ β = log n n i=1 (k i − k min ) + 1The value of k min is calculated as in the case of the power-law distribution.For distinct families of industrial formulas, we have calculated f real v (k)and f real c (k), as well as their cumulative functions.
First, we have studied instances independently in each family, observing that they all have the same nature.
Thus, we decide to group them by families, assuming that all formulas of the same family follow the same probability distribution.
Therefore, for a family, f real v (k) is the sum for every formula of the number of variables that have k occurrences, and similarly for f real c (k).
Notice that, under this assumption, the arity of a variable, independently of in which formula of the family it occurs, is an independent realization of the same random variable.
Therefore, we can do this addition.
Later, we have fitted a power-law distribution and an exponential distribution, and we have calculated the distance d pow between F real v (k) and the estimated F pow v (k; α, k min ), and the distance d exp between F real v (k) and the estimated F exp v (k; β, k min ).
When d pow < d exp , we say that the power-law distribution fits better than the exponential distribution.
We use this criteria to state that a family of formulas has a scale-free structure.
It is also important to compare the value of k min obtained in each estimation, noted k pow min and k exp min .
A big value of k min means that we need to discard a lot of values of F real (k) to fit the distribution, and it must be taken as a point against the fitted distribution.
Also a value of α far away from the interval [2,3] must be read as a point against the scale-free structure.
Most likelihood values of α and β estimated for a power-low and an exponential distribution.
In bold we remark the smallest distance between the real and the fitted distributions.
We also report the total number of variable occurrences n, mean E[V ] and variance Var [V ], and the respective values for clause sizes.
Power We have selected a set of families of formulas from the industrial category of the 2002-2005 and 2007 SAT Competitions, and the 2006 and 2008 SAT Races.
For these families, Table 1 presents the estimations of the parameters of the distributions power-law and exponential for variables occurrences and clause sizes.
We have also extended the study to a family of 40 random 3-CNF instances of 10 4 variables in the phase transition point; and to the heterogeneous family composed by the 100 instances used in the latest SAT Race 2008 competition.
In Table 1 we also include information about the sum of the number of variables and clauses of all formulas of the family, and the average number of occurrences of variables and sizes of clauses, as well as their variance.
For the computation of k min (the value where the data starts to fit the distribution) we impose a limit value of 100.
We consider that, if the distance d between the observed data and the distribution is smaller than 0.1, then it is plausible that the data follows that distribution.
To conclude that the family follows a power-law distribution we also require that d pow < d exp and the value of k min to be small.
For the families where all clauses have size at most 3, we obviate the study for the distribution of clause size.In Figure 1 we plot the distributions of some families, as well as the estimated power-law and exponential distributions that best fit them.
In Figure 2 we also plot the distributions for the heterogeneous family of the SAT Race 2008, and the random 3-CNF formulas.We can conclude that for the families: CMU, EEN, FUHS, GOLDB, IBM, SIMON and VELEV, the number of variable occurrences follow a power-law distribution.
In the case of clause size, only the families EEN, IBM and NARAI seem to follow a power-law distribution.
Therefore, in general, the variable occurrences follows a power-law distribution in more families than the clause size.
The value of α for variables is also smaller than the α for clauses, that tends to fall out of the interval [2,3].
We think that the explanation for this phenomena is that, when the formulas are encoded, people try to avoid the use of very big clauses, since they weak the propagation power in SAT solvers.
We also observe that some families, like MANOL, do not seem to follow a particular distribution.In the random 3-CNF formulas, the exponential distribution fits better than the power-law, although the distance d pow is surprisingly small.
If we plot the distribution for each formula of the family, we see that it is very homogeneous, without the typical peeks that we find in industrial data.
Moreover, the value of α = 18.65 is big enough to discard a power-law distribution.Looking at the plot of the SAT Race'08 heterogeneous family, we see that the data fits better the power-law distribution than other homogeneous families.
In this case, we have to take into account that the addition of so many instances, by a kind of law of the big numbers, tends to make distributions smoother.
The values of α that we get are α = 2.29 for variable occurrence and α = 3.03 for clause size.
As in some homogeneous families, we observe that the value of α in the case of clause size is bigger than the value of α for variable occurrence, and falls in the limit of the interval [2,3].
Albert, Jeong & Barabási [AJB00] studied the effect of failure and attack actions in the diameter of an Erdös-Rényi graph and of a scale-free graph.
The diameter is the average minimum distance between two nodes, failure consists in removing a certain percentage of randomly selected nodes, and attack consists in removing the nodes following a certain heuristic (e.g. those nodes with higher arity).
They observed that failure and attack have the same effect on Erdös-Rényi graphs (after removing 5% of the nodes, the diameter increases in the same way independently of how nodes are chosen).
However, while failure almost does not change the diameter of scale-free graphs, attack increases the diameter even more than in the case of an Erdös-Rényi graphs.
Considering that Internet is a scale-free graph, they conclude that it is robust against random failures of the servers, but it is specially susceptible to terrorism attacks.In the case of SAT solvers, the instantiation of variables removes nodes in the bi-partite graph representing the formula (e.g. the instantiation v = true removes the variable-node v, and all those clause-nodes c, where c contains the literal v).
Since classical random SAT instances are similar to Erdös-Rényi graphs, we can expect the same behavior on random formulas, when we instantiate variables randomly, as when we use some heuristics.
However, in scale-free industrial instances, we expect a very different effect.We have conducted a series of experiments where we instantiate up to 10% of the variables of some families of formulas, and we analyze the decrease in size of the formula.
Notice that we only instantiate variables, i.e., we do not apply any local inference like unit propagation, and we do not discard the obtained subformula, even if it contains the empty clause.
In Section 4 we perform a similar experiment using real SAT solvers.
We experiment with the IBM and the EEN families -the ones with a more clear scale-free structure-, with the MANOL family -that does not seem to follow a neat distribution-, and with the random 3CNF set -that we know have an absolutely different structure-.
Apart from the random selection of variables, we have analyzed the use of the most-frequent variable 2 and of the Jeroslow-Wang heuristics [JW90].
Results are shown in Figure 3.
We observe that instantiating randomly selected variables has the same effect in all families: after instantiating 10% of the variables, the size of the formula decreases between 16% and 19%.
The size-decrement seems to be proportional to the percentage of instantiated variables, i.e. the slope seems to be constant and the same in all families.For the other two heuristics (most-frequent variable and Jeroslow-Wang), the size-decrease in random formulas is bigger, but not so much as in the industrial formulas: in random formulas, after instantiating 10% of the variables, the decrease is around 30%, whereas in industrial formulas the decrease is around 50%.
Moreover, the size-decrease seems to be constant in the case of random formulas, whereas in industrial formulas, the use of these heuristics speeds up the size-decrease, but at a certain point, when we have instantiated around 1% or 2% of the variables, the slope decreases substantially.
Both heuristics seem to have the same effect, although the most-frequent heuristic is always a little better (bigger decrease) than the Jeroslow-Wang heuristic.The natural question is now: after instantiating a significant part of the variables, is the formula still scale-free?
We have studied the formulas that we get after instantiating some variables of the IBM formulas following the three IBM orig. random 10% Jeroslaw 1% Most freq.
1% Jeroslaw 2% Most freq.
2% Jeroslaw 5% Most freq.
5% Jeroslaw 10% Most freq.
10% Fig. 4.
Function Fv(k) for IBM formulas where 1%, 2%, 5% and 10% of the variables have been instantiated using the random, Jeroslow-Wang and most-frequent strategies heuristics.
Results are shown in Figure 4.
As we can see, the random instantiation of variables has almost no effect on the probability distribution of variable occurrences f v (k).
However, heuristics tend to remove variables with high number of occurrences.
As a consequence, after partially instantiating around 5% of the variables, the formula looses its scale-free property, and seems to follow an exponential distribution (see Table 2).
We want to answer the question of what kind of formula a state-of-the-art SAT solver sees during the search.
The question is important because, if we implement solvers specialized in industrial instances (assuming that they are scale-free) during the execution of the solver, when some variables are already instantiated, we can be dealing with a not scale-free formula anymore.
This means that, when a significant part of the variables are instantiated, the solver would do better changing its strategy.
Any complete SAT solver will backtrack immediately once it checks the current partial assignment is not consistent (in contrast to the setting in section 3), and second, state-of-the-art SAT solvers specialized on industrial instances augment the formula during search by adding new clauses, due to the learning mechanism they incorporate.We have modified two very different SAT solvers, minisat [ES03]and satz [LA97].
Apart from the different heuristics and data structures these solvers incorporate, minisat applies a learning mechanism while satz does not.We conducted experiments to answer the previous stated question, executing the solvers on each instance of the IBM family.
We selected this family as the representative of scale-free formulas and random formulas as non scale-free formulas.
The results reflect the average behavior of the family.First, we study the formula under the longest partial assignment after 1000 seconds of search.
Second we study, both the formula under the current partial assignment and the complete formula (original formula plus learned clauses) after 200000 decisions.
Figure 5 (left), shows the results of our experimentation on the IBM instances with minisat.
As we can see, the scale-free structure is preserved in all cases.
At maximal depth the distribution of frequencies is almost the same as in the original formulas.
This seems to contradict the effect of partial assignments described in previous section but we have to remark that here the partial assignment is consistent.
Moreover, it seems that the effect of the learned clauses makes the α exponent decrease.We have repeated the same experiment with the same IBM formulas but after at most one hour of execution time of satz.
Recall that here apart from applying a different heuristic we have not learned clauses.
In Figure 5 (right), we can see that at the deepest assignments the formulas are still scale-free, although the exponent has been increased.
RANDOM orig. β=0.566 max depth β=0.571 orig. + learned α=1.70 orig. + learned instant.α=3.09 Therefore, very different SAT solvers seem to preserve the scale-free nature of formulas during their execution.
Now the question is, what happens if we start with a random formula?
For our experiment we have generated 50 random 3-CNF formulas of 500 variables at the phase transition point.
Figure 6 shows the results.
At the deepest decisions, after 1000 seconds, we see that the formulas still show an exponential decay with the same β as in the original formulas.
However, after 2 · 10 6 decisions the formulas show a clear scale-free structure due to the addition of the learned clauses.
As in the first experiment with the IBM family, the exponent α is smaller for the uninstantiated formula.
To explain this phenomenon recall that the solvers like minisat, decide on the most active variables in learned clauses and learn clauses that contain decided variables.
This creates an effect of rich get richer that has been proposed as a mechanism for creation of scale-free networks [BA99].
We have shown that most of the industrial formulas have a scale-free structure whereas random formulas have an Erdös-Rényi graph structure.
This difference makes heuristics to perform better in industrial formulas than in random formulas.We have observed that heuristically guided partial assignments (without guaranteeing consistency) make frequency distributions decay faster, destroying the power-law tail after instantiating 5% of the variables.
However, if the assignments are consistent, as during the search in a SAT solver, we can instantiate up to 70% variables preserving the power-law tail (although increasing the exponent).
Finally, we have observed that the learning mechanism incorporated in modern SAT solvers tends to preserve the power-law distribution and even decrease its exponent.
