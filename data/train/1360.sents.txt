We show that fragmented IPv4 and IPv6 traffic is vulnerable to DoS, interception and modification attacks by a blind (spoofing-only) attacker.
We demonstrated a weak attacker causing over 94% loss rate and intercepting more than 80% of data between peers.
All attacks are practical, and validated experimentally on popular industrial and open-source products, with realistic network setups (involving NAT or tunneling).
The interception attack requires a zombie behind the same NAT or tunnel-gateway as the victim destination; the other attacks only require a puppet (adversarial applet/script in sandbox).
The complexity of our attacks depends on the predictability of the IP Identifier (ID) field and are simpler for implementations, e.g. Windows, which use globally-incrementing IP IDs.
Most of our effort went into extending the attacks for implementations, e.g. Linux, which use per-destination-incrementing IP IDs.
The Internet Protocol (IP) is the primary protocol that establishes the Internet.
It is one of the most basic, widely deployed and used protocols, as well as one of the oldest (dated back to 1974), simplest and most well known and studied.
There are many implementations of IP, including many embedded and other systems still using ancient implementations, and new implementations are developed constantly, esp.
with the advance of mobile, ubiquitous internetworking.
Naturally, over the years there were many abuses of vulnerabilities in the IP specifications (IPv4 [15] and IPv6 [6]).
There was also an impressive effort to identify and fix such vulnerabilities; see [8].
It is therefore rather disturbing that in this paper we present significant, exploitable vulnerabilities in both IPv4 and IPv6.
The vulnerabilities result from problems in the specifications; the severity of the exploits we found depends on implementation details, e.g., we found Windows platforms to be more vulnerable than Linux systems; however, Linux systems are also vulnerable, in practical scenarios, with a more sophisticated attack.Our adversary model is a blind (i.e., non eavesdropping) attacker who is capable of spoofing.
The vulnerabilities we present allow such attackers to perform devastating Denial of Service attacks on legitimate IP traffic in standard network settings, as well as to intercept (expose) and hijack (modify) traffic in common network topologies, where Network Address port Translators (NAT) devices are used.Like many or most previous attacks on IP [8], our attacks exploit weaknesses in IP's fragmentation mechanisms.
While conceptually simple, fragmentation involves some subtle issues and several related vulnerabilities.
Probably the most significant vulnerabilities so far were implementation bugs, which were exploited for very effective DoS attacks: Teardrop [1], Rose [2], and Ping of Death [13] (see survey in [3]).
However, these critical implementation bugs were long ago fixed and may still exist only in few relic systems.
Furthermore, our work exploits specification vulnerabilities, not an implementation bug.We are aware of only three known specification vulnerabilities related to fragmentation.
The first uses specially-crafted fragments to bypass filtering by firewalls and intrusion-detection systems; this is discussed and addressed in [19,14].
The two others are DoS vulnerabilities: fragment cache overflow [10] and fragment mis-association [9]; however, both of these have a very small impact -the maximal loss rate we were able to cause (or found reported) was less than 0.1%.
In contrast, we present highly-effective attacks against fragmented traffic.
Like previous attacks, the attacks do not assume MitM capabilities, and can be launched by a mere spoofing (blind) adversary; and like [10,9], they exploit a specification problem and not (just) an implementation bug.Our attacks are based on predicting the IP-ID value used in packets between the victim source and destination, and then exploiting the predicted IP-ID to cause packet loss, interception or modification (for fragmented packets); Zalewski's note [18] provided an early hint of this attack vector.
Indeed, once we can predict the IP-ID, it is easy to cause fragment loss: the attacker sends one tiny spoofed fragment with the expected IP-ID (and the victim source and destination addresses).
Once the legitimate fragments arrive, the attacker's fragment will match some of them, resulting in wrong reassembly and packet loss.
Modification (of only part of the packet) works similarly, except that the attacker has to carefully construct his fragment so that its content will replace the desired parts of the original payload.
In certain (common) scenarios, interception is also easy: when the attacker controls a zombie machine behind the same Network Address Translator (NAT) as the destination, as illustrated in Figure 1, he can intercept a packet by changing the destination port specified in the first fragment.
Details of these attacks are in Section 2.
Figure 1: One scenario where obtaining the IP-ID is 'easy'.
Alice uses one (per destination) identifier for all hosts behind the NAT.
Zombie observes a packet he receives from Alice and obtains the current per-destination identifier that Alice also uses for Bob.
Mal is a blind adversary that controls Zombie.The main remaining challenge is prediction of the IP-ID value.
In the popular family of Windows R operating systems, this is not much of a challenge.
These systems use a single, global IP-ID counter for all destinations, so the attacker can simply predict the IP-ID of a sender by receiving any packet from him (including common responses such as ICMP echo/error or TCP RST/SYN-ACK).
Hence, these systems are vulnerable to loss, interception and modification attacks as outlined above (and described in Section 2).
Most of our effort went to efficiently predict the IP-ID for other operating systems, e.g. Linux, which use per-destination IP-ID counters.
In the (common) NAT scenario of Figure 1, the prediction is still easy (and described in Section 2): since Alice uses the same destination IP address (of the NAT) to send packets to both Zombie and Bob, then Zombie receives the current value of the relevant IP-ID counter whenever he receives a packet from Alice.
The harder challenge is to predict the IP-ID when the victim (Bob) is not behind a NAT at all, or when the attacker does not control a zombie behind such NAT.
This is what we do in the rest of the paper.In Section 3 we show how to expose the IP-ID using only a puppet PuZo, i.e., code restricted within sandbox (e.g., applet, script), rather than a 'real zombie'.
Furthermore, these attacks work not only when Bob is 'behind' a NAT, but also in two other common scenarios: when PuZo runs on Bob's machine, and when Alice and Bob are connected by a tunnel and PuZo is also connected via the tunnel (with Alice), as illustrated in Figure 2.
Note that in the tunnel scenario, since Alice uses perdestination IP-ID counters, then packets sent to PuZo will use a separate counter than the one used for packets to Bob.
However, we show that PuZo can help the attacker expose the IP-ID used by GW A to send packets to GW B , hence communication over the tunnel is vulnerable to the loss, interception and modification attacks as outlined above (and described in Section 2).
Of course, if the communication is cryptographically-protected (e.g., IPsec tunneling), then interception and modification may be meaningless.In Section 3 we assume that there is no legitimate traffic during the ID-exposing process.
In Section 4, we present an attack that requires initial knowledge of the IP-ID (e.g., by applying previous attack during period of no traffic), and then 'maintains' this knowledge, while also discarding most of the legitimate traffic.
This is a very efficient attack, but since most legitimate traffic is lost, it is mainly useful for DoS.
In the full version of this paper [7] we present two improvements to the IDexposing attack (presented in Section 3) to handle concurrent legitimate traffic; this attack has higher overhead and complexity.Our attacks apply only to fragmented traffic.
Is there (still) lots of fragmented traffic?
There is significant effort to avoid fragmentation; in particular, IPv6 supports only source fragmentation (and avoids fragmentation by routers as in IPv4).
This follows the seminal work of Kent and Mogul [11] which mainly presented performance and reliability concerns.
However, avoiding fragmentation is not trivial.
Indeed, fragmentation is still a widely used, esp.
for UDP and tunneled traffic; e.g., see [16].
In fact, source fragmentation is used even in IPv6 (and is vulnerable to our attacks).
CONTRIBUTIONS.We identify critical DoS and exposure vulnerabilities which result from specific flaws in the IPv4 and IPv6 specifications.
Specifically, with high probability, we can intercept or block fragmented packets, provided the destination is connected via a NAT device or a tunnel, or when the source uses globallyincrementing IP-ID field (e.g., running any Windows OS).
These vulnerabilities are very practical, and were validated on widely-deployed systems in realistic environments, e.g., with concurrent legitimate communication.
Vendors were informed.Our work exploits packet losses and delays as a sidechannel, allowing powerful attacks on confidentiality, integrity and availability.
So far, side-channels were mostly used in cryptographic attacks; we show they can be used for critical network security attacks.
We believe that there is a significant potential for other vulnerabilities using such side channels.
ORGANIZATION.
Section 2 describes different approaches for choosing IP identifiers, considers practical scenarios where an IP identifier can be easily obtained by non eavesdropping adversaries and presents new related attacks.
Most notably, we show a scenario of a NAT connected network that allows a spoofing-only adversary to intercept fragments of a packet.
Section 3 presents a technique to obtain the IP identifier between two tunnel gateways and Section 4 presents a complementary denial of service attack as well as presents empirical impact measurements on popular IPsec tunnels.
Lastly, Section 5 presents our conclusions.
The IP identifier field (IP-ID) is used to uniquely identify the set of fragments belonging to a specific packet.
The IPv4 standard [15] does not specify how to choose the (16-bit) identifier; two methods appear most common 1 , per-destination IP-ID counter, where the identifier i(d) of destination d is initialized randomly and incremented whenever sending packet to d (e.g., in Linux), or a global IP-ID counter, incremented whenever sending packet to any destination (e.g., in Windows).
The IPv6 standard 1 The trivial, intuitively-appealing use of a randomly-chosen identifier, is not recommended, at least for IPv4; by the birthday paradox, in roughly 1.2 · 2 8 = 307 packets there will be a repetition, which would cripple performance.
[6] uses a (32-bit) identifier field and specifically recommends using a counter to update it, explicitly allowing either a per-destination or a global IP-ID counter.An attacker can usually learn the value of a global IP-ID counter simply by receiving some packet from the sender.
Receiving such packet is often possible, e.g., as a response to a packet sent by attacker (e.g., SYN to public web server), or by causing the client to open a connection to the attacker (e.g., by image embedded in some web page).
It is sometimes also easy to learn the value of a perdestination IP-ID counter; specifically, when the attacker can receive packets sent to the same IP as the destination, e.g., in scenarios as in Figure 1.
Here, the recipient, Bob, and another host who is controlled by the attacker, Zombie, are behind a typical many-to-one Network Address Translator (NAT) device [17] and therefore, have the same Internet IP address.
If Alice uses per-destination IP-ID counters, then she uses the same counter for packets sent to Zombie and to Bob.
Although the NAT device makes some modifications to the IP header, it normally does not change the IP-ID field.
Thus, any destination behind the NAT would receive the IP-ID field exactly as sent by Alice.
This allows Zombie to obtain the current value of the identifier and report to the attacker, Mal.In this section we show how to exploit such 'known IP-ID' scenarios for fragment interception and DoS attacks.
The next section deals with the more challenging case of per-destination incrementing IP-ID counter, and avoids the zombie requirement.We next discuss how Mal can use the exposed identifier.
One obvious and trivial use is to dramatically improve the (quite weak) results of the mis-association attack of [9], namely send fragments with the expected identifier and some ('random') data, resulting in failure in the defragmentation process.
In the next subsection, we show that the exposed identifier also allows the attacker to intercept (expose) information sent to others.
Consider the network topology illustrated in Figure 1, and assume that Mal obtains the identifier of the next (fragmented) packet that Alice would send Bob, and the IP addresses of the NAT and of Alice.
The knowledge of the identifier allows Mal to inject his own data into the reassembled packet.
Specifically, Mal sends a forged fragment that overwrites the transport header of a fragmented packet (in reassembly).
In case of a NAT destination, the packet is forwarded to a host according to the destination port of the transport layer header.
Thus, modifying the port would result in a different destination (behind the NAT).
Specifically, by changing the destina-tion port to one the NAT assigns Zombie, Mal is able to obtain Alice's fragments.
We now explain how this is done.
Replacing Alice's first fragment entirely, thereby rewriting the transport layer header and changing the destination of following fragments, is relatively easy: say that the size of the IP data in Alice's packet fragments is l bytes except the last fragment which may be shorter.In the initial step of the attack Mal sends to the NAT a forged fragment that matches Alice's packet four reassembly parameters (source address, destination address, transport protocol, IP-ID); we assume he does this step before Alice sends the corresponding packet.
The fragment specifies offset = l + 1 and MF = 0, i.e., it appears as the second and last fragment of a packet; lower offsets are also suitable as long as the forged fragment does not entirely overlap the first fragment of Alice's packet.Next, Mal waits for Alice's packet fragments to arrive; we present the usual case where they arrive in order (when they arrive in reverse order, the attack is even simpler!)
.
When Alice's first fragment arrives at the cache, then it is immediately reassembled with the existing forged fragment that Mal had sent and they both are removed from the cache.
As a result, the rest of the fragments of the packet will be cached.
When Mal assumes that all of Alice's fragments arrived at the NAT, he sends a forged 'first' fragment (i.e., offset = 0, MF = 1) that specifies a new transport layer header, and in it, a new destination port.
This fragment is then reassembled with all other fragments of the packet; thereby, changing the destination of the reassembled packet to another host behind the NAT, e.g., to Zombie.The first fragment (which Mal will not obtain) often includes critical information, e.g., cookies, user name or other credentials.
In the full version [7] we present a simple variant of the attack, that allows to capture the first fragment as well.
We implemented the fragment interception attack, and tested it on two scenarios using the popular IP tables NAT; the scenarios differed in the number of forged fragments cached at the NAT at the same time (in Linux, depending whether ipfrag max dist enforces such limitation, see [12]).
The network topology for the experiment was as in Figure 1, the LAN consisted of one switch and Mal was connected directly to the 'Internet' interface of the NAT.
Our results, illustrated in Figure 3, show that Mal is able to intercept a significant amount of traffic, even with relatively low bandwidth.
Furthermore, some traffic not intercepted was denied; only less than 5% of Alice's packets actually reached Bob's application layer in most measurements.
80 In this section we present an attack that exposes the IP-ID, when the simple techniques mentioned in the previous section fail, i.e., where the sender uses perdestination incrementing identifiers, e.g., using Linux, and where the attacker cannot receive the identifier directly (no Zombie behind NAT).
We design a more elaborate attack, that exposes the identifier, for common network scenarios, even in this case.
Our attack requires that the attacker, Mal, would receive some feedback on lost packets which allows him to efficiently learn the identifier.
To provide this feedback, the attack requires an adversarial agent PuZo; in contrast to the previous section which required a zombie, PuZo can be merely a puppet [4], i.e., malicious code running in sandbox (e.g., script, applet).
Furthermore, while the attack works in the NAT scenario as in Figure 1, like the attack in the previous section, the new attack also works in two additional common scenarios: when the puppet runs on Bob's machine, and when Alice and Bob are connected via a tunnel as in Figure 2.
For simplicity, we now describe only the tunneling scenario, and furthermore assume that PuZo is a zombie (not a puppet), and that there is no legitimate traffic during the attack, and no (benign) packet losses.
In Subsection 3.3 below, we show how to modify the attack such that PuZo may be just puppet; and in Section 4 we show a simple, effective method to continually expose the ID and drop most packets (once we have the initial IP-ID using attack in this section).
In the full version [7] we present further extensions to allow traffic also during ID-exposing, and to deal with benign packet loss.We note that the attack presented in Section 2 for networks behind a NAT (see Figure 1) will not succeed in the tunnel scenario: PuZo in Figure 2 may be able to obtain a packet from Alice, but, even if he is a zombie, he will not be able to observe the identifier of encapsulated (i.e., Internet) traffic between the two gateways since such traffic carries a different IP header.We present two versions of the ID-Exposing attack.
In Subsection 3.1, we show a naive and rather inefficient attack that requires a total of O(n) packets, where n is the number of possible identifiers (n = 2 16 for IPv4).
In Subsection 3.2, we refine the ID-exposing attack using a meet in the middle technique, sending only O( √ n) packets; this also makes ID-exposing feasible for IPv6, where the identifier field is 32 bits long.The ID-exposing attack is based on the following observation: if Mal sends to GW B (see Figure 2) a forged fragment with source IP of GW A and IP-ID i, then PuZo will not receive legitimate (fragmented) packets sent via the tunnel (i.e., from GW A to GW B ), if they use the same IP-ID i.
This happens since Mal's fragment will be misassociated with the legitimate fragments and produce a corrupted packet, which will be discarded at the gateway (GW B ) upon decapsulation.We assume that PuZo is able to send requests and receive responses from a server, S, at the other side of the tunnel.
We assume that S's response packets are long, and fragmented after encapsulation, i.e., between GW A and GW B .
Furthermore, we assume that PuZo is able to identify the order by which the packets that he receives were sent (by S), and a packet loss (when it occurs).
There are a number of methods for PuZo to conduct the these tasks: sequential IP identifiers, TCP sequence numbers and possibly application layer data.
For simplicity, in following discussions we assume that PuZo uses perdestination sequential IP identifiers for this purpose; in Subsection 3.3 we present a more elaborate technique for the case that PuZo is merely a puppet (and therefore, can only use application layer data).
Let n be the number of possible identifiers (i.e., 2 16 for IPv4, 2 32 for IPv6).
The basic technique we present obtains the identifier by the following attack, illustrated in Figure 4, where the adversary, Mal, caches-in one forged fragment at GW B that PuZo 'looks for' by receiving O(n) packets from the other end of the network (e.g., from S), until he identifies that one of them was lost (misassociated with Mal's forged fragment).
The attack begins by an initialization phase (step 1 in Figure 4) where Mal clears existing fragments from the victim gateway (GW B ) fragment cache.
During the initiation phase, Mal sends large spoofed fragments, that specify a source different than GW A .
These suppress the current fragments in the table.
Under default Linux configuration (kernel version 2.6.39) the initiation phase requires Mal to send 256KB of data.
This technique is similar to the fragment cache overflow attack presented in [10].
We denote this step by Clean-Frag-Cache and will also use it later in Subsection 3.2.
When the initiation phase completes, Mal sends one small forged fragment of an encapsulated packet to PuZo's gateway, GW B in Figure 2, where it is cached until reassembly (or timeout which is 30 seconds by default for Linux machines).
The fragment specifies GW A as source (i.e., is spoofed), offset = MTU, MF = 0, DF = 0 with an arbitrary IP-ID value, i (in step 2 of Figure 4, i = 2222).
Thereafter, Mal orders PuZo to send a request to a server, S, at other end of the tunnel, for some data, e.g., a large file (step 3 in Figure 4), persuading S to send at least n packets.
S's packets, before encapsulation, have sequential IP identifiers (since they are all sent to the same entity, Zombie), 1111, 1112, 1113, . . . in Figure 2.
The server's packets reach its gateway, GW A , where they are encapsulated.
Upon encapsulation, the gateway attaches a new IP header that specifies GW A and GW B as source and destination (i.e., gateway to gateway tunnel), and includes a new IP identifier.
Since all the encapsulated packets are sent from GW A to GW B (i.e., same source and destination), they too have sequential identifiers, 2221, 2222, 2223, . . . .
We assume that the encapsulated packets sent to PuZo exceed the tunnel MTU and are fragmented after encapsulation (see Figure 4).
Under the assumption that no other traffic takes place, and no loss on network channels, exactly one packet of the first n packets that were sent to PuZo will be lost, since it will be mis-associated with Mal's (forged) fragment.
PuZo receives all other packets, which specify sequential IP identifiers (that differ from the identifiers of encapsulated packets).
Thus, PuZo is able to detect x, the IP identifier of the packet that was lost.Let˜xLet˜ Let˜x be the IP identifier of the last packet that PuZo had received.
PuZo computes˜icomputes˜computes˜i = ˜x − x (mod n), the total number of packets that where sent from the server to PuZo after the lost packet.
PuZo then sends˜isends˜sends˜i back to Mal (step 4 in Figure 4) who concludes that the next identifier is i + ˜ i + 1 (mod n).
We now revise the attack presented in the previous Subsection to generate only O( √ n) packets.
The revised version of the ID-exposing attack is composed of two phases: first, a meet in the middle attack that narrows down the number of possible IP identifiers to √ n. Sec-Step S GWA Mal GWB PuZo 1Clean Table: Notice that since S sends n packets to PuZo, the identifier (counter) wraps around.
Assume no traffic is sent between other entities and no network loss/corruption while the attack takes place (see our technical report [7] for extensions to handle these issues).
MTU marks the maximal packet length that Mal can send to GW B in a single packet.
ESP is an example of a tunneling protocol (i.e., IPsec).
ond, an exhaustive search over the remaining possible identifiers to discover the correct one.In the meet in the middle phase, illustrated in Figure 5, Mal sends √ n fragments.
Each fragment specifies an identifier that is √ n apart from the previous one 2 .
For simplicity, we start at identifier 0, i.e., send identifiers 0, √ n, . . . , ( √ n − 1) √ n.
In this version of the attack, the server S only sends PuZo √ n packets.
As in the previous version, one of these packets would specify an IP identifier that was also sent by Mal and therefore, will not reach PuZo.
PuZo will then compute˜icompute˜compute˜i and send it to Mal.
Since Mal had sent √ n forged fragments (i.e., √ n 'traps'), at the end of the meet in the middle phase 2 In recent IPv4 Linux stacks, Mal may only be able to cache in up to ip frag max dist different forged fragments at a time (see [12]), under default settings this value is 64.
In this case the difference between two sequential identifiers that Mal sends is 2 16 = 1024, which is also the number of packets S sends to PuZo.
No such limitation exists for IPv6.
he obtains a list of √ n possible identifiers.
Algorithm 1 (in Appendix A) summarizes Mal's logic above.
Figure 5: Meet in the Middle ID-Exposing Attack.
Mal sends √ n forged fragments that are √ n apart; thereby, laying √ n 'traps'.
In this example, when the attack begins the current identifier value GW A uses for packets to GW B is 3 √ n + k for some k < √ n.
During the meet in the middle phase the identifier is incremented √ n times, once for every packet sent to PuZo.
When GW A encapsulates a packet for PuZo with an identifier 4 √ n, a multiple of √ n, it will be lost and PuZo will detect this event.Next begins the exhaustive search phase, where Mal searches for the correct identifier in a divide and conquer methodology.
Namely, at round r, Mal sends √ n 2 r forged fragments that match √ n 2 r possible identifiers.
These fragments are saved at the recipient's fragments cache (GW B in Figure 2).
Thereafter, PuZo sends a request to S who sends (at least) one packet in response, which is fragmented after encapsulation.
If the packet does not reach PuZo, then the current identifier is one of those sent by Mal at this round of the search.
Otherwise, it is one of the other identifiers.
Mal continues this process, that eliminates half the possible identifiers in each round, until he obtains the current identifier.
Algorithm 2 summarizes the exhaustive search phase.Before the meet in the middle phase and any round of the exhaustive search phase, Mal cleans the victim gateway's (GW B ) cache, as described in the initiation phase of the previous version of the attack (see Section 3.1).
We tested the meet in the middle ID-exposing technique on two widely used Linux IPsec gateways that use fragmentation to cope with oversized encapsulated packets.
See discussion of the implementations and setup in Section 4.2.
We conducted 100 iterations of the ID-exposing attack for IPv4, and obtained the current identifier in each iteration within less than 20 seconds.
We now briefly outline how the attack can be modified, s.t. PuZo may be a puppet, i.e., code running within sandbox [4].
The challenge is that a puppet PuZo needs to identify the offset of a lost packet, but can only use TCP socket services, and in particular PuZo cannot read data from TCP and IP headers.The solution is quite simple: first, Mal sends his forged fragment or fragments to GW A , S's gateway (cf. to PuZo's gateway).
Second, PuZo opens multiple separate connections to S, and on each of these connections he sends a long request, such that the request itself will be fragmented after encapsulation.
A request that has the same IP-ID as of Mal's fragments will be discarded and therefore, PuZo will not receive a response in that connection.
Say that the requests that PuZo sends are numbered 1, . . . , x, and˜xand˜ and˜x is the index of the lost request, PuZo's feedback to Mal is˜iis˜is˜i = x − ˜ x, and the attack continues as before.
Section 3 introduced a method to obtain the current identifier attached to encapsulated traffic by a (Linux) tunnel gateway, GW A (see Figure 2).
Trivially, given the identifier, it is possible to execute a fragment mis-association attack (see [9]) to deny fragmented traffic from GW A to GW B , the two tunnel gateways.
Most notably, this includes fragmented encapsulated traffic from LAN A to LAN B .
However, it is difficult for Mal to maintain long term synchronization with the current value of the identifier since it is incremented for every packet sent from GW A to GW B .
In this section we present an attack that causes GW B to discard fragmented traffic sent from GW A given an initial value for the corresponding IP identifier; we assume that GW A uses a per destination counter, e.g., a Linux machine.
We also assume the topology in Fig- ure 2, and the existence of a zombie/puppet PuZo behind GW B ; for simplicity, our description will assume zombie.
We present empirical measurements of our attack on two extensively deployed (commercial and open source) Linux based IPsec implementations that fragment encapsulated traffic.
Mal begins the continual deny and expose attack after the ID-exposing process (see Section 3) where he obtained i, the IP identifier of the next packet sent by GW A to PuZo's gateway, GW B .
We use the identifier's counter property to maintain a small interval of possible IP-ID values at any given time.During the attack, Mal always keeps two sequences of consecutive identifiers cached at GW B , between these sequences a small gap of identifiers that Mal did not send, see Figure 6.
Packets sent from Alice to Bob, two hosts in Figure 2, that arrive fragmented at GW B for decapsulation would reach Bob only if they specify an IP identifier not within one of Mal's sequences.
The small gap between the two sequences allows PuZo to monitor the progress of the identifier value by testing whether he can receive (fragmented) packets via the tunnel.
Furthermore, the devision into two sequences provides Mal early notifications to update his cached fragments.
Namely, Mal has time to send a new sequence of fragments until the second sequence, already cached at GW B , becomes obsolete.
These two characteristics allow even attackers with relatively small bandwidths to cause high loss rates for fragmented traffic, as we validate by experiments described in the next subsection.
The attack includes an initialization phase, where Mal sends PuZo's gateway, GW B , the first two sequences of forged fragments.
Let m be the maximal number of fragmented packets from a single source address that may be cached simultaneously at GW B .
m is usually either 64, in case a specific limitation exists (via ipfrag max dist, see [12]) or several thousand fragments otherwise.im/2−1 i imc−1 im/ 2cEach of the two sequences that Mal sends is composed of m 2 (spoofed) fragments with consecutive identifiers.
The fragments in the first and second sequences specify the identifiers within the intervals[i, i + m 2 − 1], [i + m 2 + c, i + m + c − 1]respectively, where c is some small positive integer.
Namely, between the two sequences there is a small gap of c identifiers that were not sent by Mal, see Figure 6.
Thereafter, Mal updates: i ← i + m + 2c, and orders PuZo to begin his role in the attack.
This completes the initiation phase and begins the attack itself.When PuZo receives Mal's message, he begins sending requests to a server, S, at the other end of the tunnel (see Figure 2), who sends in response a single or few long packets which will be fragmented after encapsulation.
This process is similar to the one described in the ID-exposing attack in Section 3.
PuZo sends such requests periodically every τ seconds (see Algorithm 3).
The length of the gap, c, must be sufficiently large to allow PuZo to receive a packet given the request interval τ .
However, c should be small such that only few legitimate packets will pass through during the 'in-gap' period.When one of S's packets reaches PuZo, he concludes that the current identifier is within the gap between the two sequences, and notifies Mal, who then sends the next sequence of identifiers (see Algorithm 3); i.e., identifiers in the interval [i, i + m 2 − 1], and updates the current index: i ← i + m 2 + c.
The new sequence of fragments that Mal sends supersedes the first of the two sequences that he had previously sent and are currently cached at GW B since the LRU cache management paradigm (see [5]).
When the identifier is within the gap, legitimate traffic is not disrupted.
Thus, PuZo makes frequent requests and generates response traffic from S to himself (without waiting between requests).
Each response packet advances the identifier counter until eventually it is after the gap.
At this time the identifier within the tunnel equals to that of a forged fragment within the second sequence cached by Mal in GW B .
PuZo identifies this event when a response packet is lost, i.e., assumes that mis-association had occurred and goes back to sending a request every τ seconds 3 .
Algorithms 3, 4 summarize Mal and PuZo's logic above.
We tested the continual deny and expose attack on two of the most popular, well-known IPsec implementations: an open-source implementation and a commercial implementation 4 .
Both implementations cope with oversize encapsulated packets by IP fragmentation, and are vulnerable to our attacks.We performed the continual deny and expose attack on both implementations and measured its impact on TCP and UDP traffic as a function of Mal's bandwidth.
Fig- ure 7 illustrates the loss rate of packets sent from Alice to Bob (see network topology in Figure 2).
For most attacker bandwidths, TCP data communication was completely blocked; thus, Figure 7 omits these results.
The figure shows that with reasonable bandwidths, Mal is able to cause significant packet loss.
Not surprisingly, the lesser the number of forged fragments that Mal can cache in, the more (legitimate) packets that reach Bob and the greater the bandwidth Mal needs in order to perform the attack (compare consecutive and dashed lines).
The dashed lines in Figure 7 also indicate that for particularly low bandwidths Mal cannot keep the attack 'alive', and quickly looses synchronization with the current IP identifier value within the tunnel.3 PuZo also quits the 'frequent request' mode when he assumes that he had caused S to send c or more packets since sending the 'responded' request.
4 Product names are hidden to allow vendors time to patch, these details are available from authors.
We presented critical attacks against both IPv4 and IPv6.
The attacks can be deployed by a blind (spoofing) attacker, and result in packet interception, modification and loss.
Our main conclusion is the need to improve the specifications and validation of common networking protocols such as IP, following (and motivating) [8].
As a more immediate conclusion, we believe implementations of IPv4, IPv6, IPsec and other tunnels, should be carefully tested against the vulnerabilities described within and in particular modify their 'IP-ID choosing' paradigm.
Furthermore, it is advisable that erratas be issued for the relevant specifications, esp.
considering that recently, with the adoption of mobile TCP/IP devices, there may be many new implementations.
Finally, since many implementations may be impractical to fix in timely fashion, appropriate defenses should be added to firewalls and IDS/IPS devices.
Input: n -the number of possible IP identifiers.
Output: A -an array of √ n possible values of the current identifier.
Clean-Frag-Cache(); for i = 0 to √ n − 1 do Send-Forged-Fragment(i √ n); end / * PuZo requests √ n packets from S and identifies the number of packets sent after a loss ( ˜ i) * / Order-PuZo('ID-Exposing, meet in the middle'); Input: i -next identifier specified in a packet sent from GW A to GW B .
m -maximal number of IP fragments that specify GW A 's source address and can be kept simultaneously in GW B 's cache.
c -small integer that represents the identifier gap size between sequences that Mal sends.
for j = 1 to 2 do Send-Forged-Sequence(i, m 2 ); i ← i + m 2 + c; end Order-PuZo('DoS'); while True do Wait-For-PuZo-Notification(); Send-Forged-Sequence(i, m 2 ); i ← i + m 2 + c; end Algorithm 3: Mal's attack logic for 'continual deny and expose' as presented in Section 4.1.
Denies fragmented encapsulated traffic from reaching its destination, a host behind PuZo's gateway.Input: τ -time in seconds between requests.
Wait-For-DoS-Request(); while True do repeat Send-Request(); Sleep(τ ); until Response-Arrives; Notify-Mal(); repeat Send-Request(); until Response-Does-Not-Arrive; end Algorithm 4: PuZo's attack logic for 'continual deny and expose' as presented in Section 4.1.
PuZo requests for packets and notifies Mal when a packet (response) is received after each series of packet loss.
This work is based on preliminary research by Roman Yakirevich, who identified (other) problems in handling of fragmentation in TCP and IPsec implementations; many thanks to Roman for his assistance, also in helping to test our attacks.
Amit Klein and Charlie Kaufman gave us invaluable comments and encouragement; many thanks!
Thanks also to the anonymous referees for their comments and suggestions.
