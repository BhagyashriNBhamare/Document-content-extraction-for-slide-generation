Censors of the Internet must continually discover and block new circumvention proxy servers.
We seek to understand this process; specifically, the length of the delay between when a proxy first becomes discoverable and when it is actually blocked.
We measure this delay in the case of obfuscated Tor bridges, by testing their reachabil-ity before and after their introduction into Tor Browser.
We test from sites in the U.S., China, and Iran, over a period of five months.
China's national firewall blocked new bridges after a varying delay of between 2 and 36 days.
Blocking occurred only after end-user software releases, despite bridges being potentially discoverable earlier through other channels.
While the firewall eventually discovered the bridges of Tor Browser, those that appeared only in Orbot, a version of Tor for mobile devices , remained unblocked.
Our findings highlight the fact that censors can behave in ways that defy intuition, presenting difficulties for threat modeling but also opportunities for evasion.
Censors of the Internet must seek out and block proxy servers that can be used to evade their information controls.
Here we explore the mechanics of this process as it applies to the blocking of default Tor bridges after they are published in Tor Browser.
It is known that these default bridges are eventually blocked; what is not known is exactly how long it takes.
We measure the "delay" or "lag" of proxy blocking, by testing the reachability of bridges before and after their first public disclosure from sites in the U.S., China, and Iran.There is prior work on distribution strategies that prevent the censor from discovering secret proxy addresses in the first place; examples are Proximax [10] and * Authors are listed in alphabetical order.rBridge [17].
Our work is different: we study how censors block proxies that are not secret, but are (in principle) easily discoverable by anyone.
In typical censorship threat models, such unprotected proxies would be considered to be immediately blocked.
That they are not, in practice, shows that practical considerations may prevent censors from exercising all their assumed capabilities.Zhu et al. [19] in 2013 explored a related idea.
They measured how long it took for posts to be censored on the Chinese microblogging service Sina Weibo.
They found that 30% of posts are deleted within 30 minutes and 90% are deleted within 24 hours, though some posts survived for weeks or months.
They used their results to hypothesize about the reasons for and mechanisms of microblog censorship.In 2014, developers of OONI, the Open Observatory of Network Interference, a censorship measurement platform, implemented a new test to check the reachability of Tor bridges and prepared visualizations [8].
The tests have not run continually since then.
In 2015, a one-off calculation [7] based on user reports found loose time bounds for the delay of a single bridge-blocking event in China: somewhere between 15 and 76 days.Knowing the proxy blocking delay gives insight into how censors work: where they look for new bridges, and whether their blacklist updates are automatic or manual.
It advances our understanding the operational costs incurred by censors, and therefore their potential weaknesses.
We think of censors as complex systems, consisting of interacting human and machine components, whose goals and motivations are sometimes in conflict.
Tor [5] is an anonymity network that is also widely used to circumvent censorship.
In its natural form, Tor is poorly suited to circumvention.
Its nodes' IP addresses are public, and the protocol itself is fairly distinctive.
But Tor combined with bridges and pluggable transports is much harder to block.
Bridges are special, unlisted nodes whose addresses are not easily discoverable in bulkusers must acquire a few at a time through an online database called BridgeDB [13].
Pluggable transports are obfuscation protocols that encapsulate the Tor protocol, making it difficult to detect.
A censored user uses a pluggable transport in order to reach a secret bridge, foiling both deep packet inspection and IP address blacklisting.Tor Browser [11] is a modified version of Firefox that features a built-in always-on Tor client.
It is the recommended way of accessing the Tor network for most users.
The browser has a graphical interface for the configuration of bridges and pluggable transports.
The intended use case has users acquiring a bridge address through a side channel, such as email or word of mouth, and pasting it into the configuration interface.
However, in practice, circumvention is often even easier, requiring no outof-band information.
For many users, it suffices to select a pluggable transport name from a menu, causing Tor to connect to one of a handful of built-in, default bridges included with the browser.The concept of a default bridge needs some explanation.
Bridges are supposed to be secret, so including them with the browser seems to be self-defeating.
The default bridges are in fact open to the world in the Tor Browser source code-the file housing them is called bridge prefs.js [15].
Any censor that can block Tor ought to be able to block the default bridges as well, but the strange truth of the matter is that many simply do not.
We can only guess as to why: it could be that censors are negligent or incompetent; perhaps Tor traffic is, from their point of view, too inconsequential to bother with; or maybe they set more stock in deep packet inspection and dynamic protocol detection than in static IP address blacklists.
Whatever the reason, Tor Browser continues to ship default bridges for the simple reason that they work for many people.
In fact, the Great Firewall of China is the only state censor we are aware of that makes some effort to block Tor's default bridges.
This is what we study in this work: the time delay in blocking a bridge after it is first made public in a Tor Browser release.
Tor Browser releases follow two tracks: stable and alpha.
The stable track changes slowly, its minor releases typically including only bugfixes.
The alpha track has new and experimental features.
The alpha track matures until it becomes the basis of the next major release of the stable track.
(There are also special "hardened" releases that track the alphas-we do not consider them separately.)
In addition to formal major and minor releases, there are nightly builds that have the latest of everything.The ter "a" in the version number; for example, the stable release 5.5.5 appeared at about the same time as the alpha release 6.0a5.
During the roughly five-month period of our experiments, there were ten stable releases (two major, eight minor), and seven alpha releases (one major, six minor) [14].
Each releases was an opportunity to deploy and measure new bridges.
There is no single moment when a new bridge becomes public.
The process of adding a bridge involves multiple stages, each of which potentially reveals it, depending on how closely the censor pays attention.1.
Ticket filed.
New default bridges are proposed for inclusion by the filing of a ticket in Tor's online bug tracker.
A censor paying attention to the bug tracker would learn of bridges at this stage.2.
Ticket merged.
When the ticket is merged, the new bridge is added to Tor Browser's source code.
From there, it will automatically be incorporated into nightly builds.
This is the first time that the code containing the new bridge is available in executable form.
A censor paying attention to the source code repository, or following nightly builds, would learn of bridges at this stage.3.
Testing release.
When it is time for a new release, Tor Browser developers prepare candidate packages and send them to a quality assurance mailing list for testing.
A censor paying attention to the mailing list would learn of bridges at this stage.4.
Public release.
After testing, new packages are announced on the Tor blog, and already installed Tor Browsers will automatically update themselves.
This is the stage at which the new bridge will start to be used by real users.
A censor paying attention to the blog, or black-box testing an auto-updating installation, would learn of bridges at this stage.From ticket filing to public release, the process usually takes a few weeks.
Sometimes the testing release stage is skipped if the new version only fixes a small error in the previous version, like a packaging or localization bug.
The releases of the stable and alpha tracks are separate; they are, however, usually close in time.New default bridges are sometimes discussed in private mailing lists even before a ticket is filed.
A censor could conceivably infiltrate an internal mailing list and learn about new bridges very early.
We have assumed that this does not happen, that censors must use the same public channels as everyone else.
Though Tor Browser supports several pluggable transports, we concern ourselves only with obfs4 [3], an advanced transport offering several security features.
We rely critically on these features; they enable us to limit the means of learning about new bridges to the ones we control.
The use of obfs4 gives us confidence that the censor learns of our bridges only in the ways we intend, namely their inclusion in Tor Browser.obfs4 resists deep packet inspection by re-encrypting a Tor stream so that it appears as a stream of random bytes.
More than that, obfs4 resists active probing attacks in which the censor scans suspected proxies in order to discover what protocols they support.
Every obfs4 server has a per-bridge secret, which the client must prove knowledge of in its initial message.
The Great Firewall is known to employ active probing against the predecessor protocols obfs2 and obfs3 [6], but the same attack is ineffective against obfs4.
The censor must have the same out-of-band information as a legitimate client; merely knowing the IP address of a bridge is insufficient to confirm that it is, in fact, a bridge.In addition to its useful properties, obfs4 is relevant to real-world users.
It is marked "recommended" in Tor Browser and has the more users than any other transport, about 20,000 concurrent on average as of June 2016 [16].
obfs4 has experimental support for obfuscating packet size and timing, but none of the default bridges have deployed that feature, so we did not investigate it.
We established probe sites in three countries, using dedicated servers or cloud services: one in the U.S., two in China, and one in Iran.
The two sites in China were in different autonomous systems.
At each site, we ran a script that tested the TCP reachability of a variety of destinations every 20 minutes.
For each destination, the script attempted to establish a TCP connection and then recorded the current time, IP address, port number, status, and error message if any.
We ran probes for about five months, from December 12, 2015 to June 4, 2016.
The destinations we tested, a mixture of fresh obfs4 bridges and other control destinations, appear in Table 1.
The probe site in the U.S. was a control that enabled us to distinguish cases of censorship from a bridge's tem- porarily being down.
Owing to the difficulty of accessing network services in China and Iran, the time periods during which we had access to each site differ, though they overlap.
In one of the China sites, we lost access to our probing host partway through the experiment; however, before that happened we got access to another in the same autonomous system.
The data in Figure 1 and Table 2, which show the results from this site, are spliced together from the two series.
We were fortunate to run this experiment at a time when Tor Browser was ramping up its obfs4 capacity, with new bridges being added in nearly every release.
In some cases these were new ports on existing IP addresses; in others they were entirely new IP addresses.
We began measurements of each new bridge as soon as we became aware of it.
In some cases we received advance notice of a new bridge before its ticket was filed, but in others we started measurements shortly after the ticket.
We coordinated with the Tor Browser developers to ensure that newly created bridges were not present in BridgeDB [13], where they might have been discovered by censors and ordinary users.
We tried, as far as pos-sible, to limit the possible avenues of discovery to bug tracker tickets and the Tor Browser source code.We also measured four bridges that appeared only in Orbot [12], the port of Tor to Android.
Orbot and Tor Browser have most of their default bridges in common, but a few appear in Orbot only.
They are the ones with port number 1984 in Table 1.
The Orbot-only bridges remained accessible, even as the Tor Browser bridges were blocked.
We recorded over 1.5 million individual probe results over a period of approximately five months.
The results from our two China sites were the same in most respects, with blocking occurring at the same time in both.
We found no blocking at all of the default bridges from our site in Iran.
As the two China sites were similar and the Iran site did not show any blocking, we will mainly present the results from the China site that had more data (called "China 1" in figures).
A graphical summary of the results appears in Figure 1 and a textual timeline in Table 2.
Figure 2 compares the three sites across a subset of destinations.We have batched Tor Browser releases according to what new, unblocked bridges they contained.
For example, all the releases in the 5.0.5/5.0.6/5.5a5 batch contained the same new bridge, ndnop3:24215, while the releases in the 5.5/6.0a1 batch appeared after ndnop3:24215 was blocked but added six fresh bridges.
There are five of these release batches (we omitted releases that did not have any new bridges).
Blocking of new bridges was delayed, but abrupt.
When a batch contained more than one bridge, all were blocked at once (within our probing period of 20 minutes).
Across the five batches, we observed blocking delays of 7, 2, 18, 11, and 36 days after the first public release, and up to 57 days after the filing of the first ticket, when bridges were potentially first discoverable.
This fact suggests, to us, that new default bridges are loaded into the firewall in groups, and are not, for example, detected and blocked one at a time.We found that blocking in China was keyed on both IP address and port, consistent with an observation of Winter and Lindskog in 2012 [18].
For example, many of the bridges happened to have port 22 (SSH) open, and it remained accessible even as other ports on the same IP address were blocked.
(See riemann:22 in Figure 1 for an example.)
Per-port blocking is what enabled us to run multiple bridges on the same IP address.We never saw a case of a bridge being blocked before a public release of Tor Browser, despite their being potentially discoverable at an earlier stage.
The four bridges that were included only in Orbot, not in Tor Browser, were never blocked.
From these facts, we infer that the censors in China probably learn of bridges not from the bug tracker (which would have revealed Orbot's bridges), nor from source code inspection (which might have gotten the bridges blocked before release), but only from public releases.
The 5.5.1/5.5.2/6.0a2 batch is an interesting case because there was an unusually large gap (about 10 days) between stable and alpha releases: there were stable releases 18 and 11 days, and an alpha release 8 days, before JonbesheSabz:80 and Azadi:443 were blocked.
The bridge ndnop4:27668 did not appear in a release, but only in BridgeDB, and was not blocked.
There is a conspicuous on-off pattern in the reachability of certain bridges from China, for example ndnop3:24215 in China 1 and Mosaddegh:41835 in China 2.
The pattern is roughly periodic with a period of 24 hours.
Figure 3 averages many 24-hours periods to show the reachability against time of day of two bridges.
The presence of the diurnal pattern appears to depend on both the bridge and the probing site, perhaps depending on the network path, as the same bridges do not show the pattern at both sites.
The pattern can come and go, for example in riemann:443 in China 1.
The China sites also display what are apparently temporary failures of censorship, stretches of a few hours during which otherwise blocked bridges were reachable.
Intriguingly, one of these corresponds to a known failure of the Great Firewall that was documented in the press [9].
On March 27, Google services-usually blocked in China-were reachable from about 15:30 to 17:15 UTC.
This time period is a subset of one in which our bridges were reachable, which went from about 10:00 to 18:00 UTC on that day.
Table 3: Day and time of blocking events in China.
Times signify the end of an initial period of continual or near-continual reachability of all bridges in a batch of releases.
All bridges in a batch ceased their initial reachability within 20 minutes after the time shown.
We wondered whether blocking always occurs on the same day of the week.
It turns out not to be the case, as our five blocking events happened on Tuesday (×3), Wednesday (×1), and Friday (×1)-see Table 3.
However, there may be a pattern in the time of day.
In two cases, the last successful probe happened within the 20 minutes following 02:40 UTC, and in another two cases, it was just after 06:00 UTC, The remaining event happened at 09:00 UTC.
It is hard to make inferences from these limited data, but they, along with the variable delay in blocking, suggest a blocking procedure that is part manual and part automatic: a manual process discovers bridges after an unpredictable delay; then a periodic, automatic process causes the blocks to take effect.
The data present interesting questions that call for additional experiments.
Orbot's bridges were blocked only as a side effect of their being blocked in Tor Browserbridges exclusive to Orbot remained reachable.
This suggests a further test to see whether the censor treats stable and alpha releases differently: include different sets of bridges in each, and see whether both or only one of the sets gets blocked.
(This idea has the privacy disadvantage that a network eavesdropper could infer whether someone is running a stable or an alpha release by watching the IP addresses they connect to.)
Once in possession of a software release, how does the censor extract the bridge addresses?
There are several possibilities.
They may have a program automatically parse the file containing bridges; or a person may have to read the file and enter the bridge addresses manually.
They could simply run the browser in a black-box fashion and note what addresses it connects to.
In order to distinguish these cases, one could include commentedout or invalid bridge addresses in the list.
Table 3 shows that our bridges got blocked only on weekdays during daylight hours (China Standard Time).
The five blocking events occurred at three apparently dis-crete times of day.
It will be interesting to observe more blocking events and see whether these patterns continue to hold.We were surprised not to find any blocking of the default bridges in Iran.
The censorship system in Iran has been documented to effect blocking through means such as bandwidth throttling [1,4] and blocking the IP addresses of the Tor directory authorities [2].
Throttling would affect obfs4 users but blocking the directory authorities would not, as bridges serve Tor directory information in-band.
Iran's censors do not seem to rely on blocking the default bridges, at least those we tested.It would be useful to augment our reachability tests with traceroutes, so we could see where all the routers are between the probe site and the bridge, and where packets are dropped when bridges are blocked.
Differences in routing might explain why some bridges were periodically reachable from one China site but not from the other.The fact that proxy blocking delay is on the order of days suggests an obvious circumvention strategy: if the censor blocks new bridges after n days, introduce new ones every n − 1 days.
This could be accomplished through more frequent releases, or obfs4 could be modified to try different destination ports according to some schedule that depends on the time since release.
The interesting question then becomes the meta-delay: how long does the censor take to catch on to this new pattern?
We express our thanks to those who helped us by running bridges or providing us with probe sites, including Percy Alpha, Nima Fatemi, Linus Nordberg, Henry de Valence, and others who remain anonymous.
We thank the developers of Tor Browser and Orbot for their timeliness in adding new bridges.
We appreciate our discussions with censorship researchers at the University of California, Berkeley and the International Computer Science Institute.
Our code and data are available from the supporting web page: https://www.bamsoftware.com/proxy-probe/.
