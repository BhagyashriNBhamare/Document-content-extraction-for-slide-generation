University courses on project work are common at computer science departments all around the world.
A standard goal of the course is to initiate students into the requirements specification, design, implementation, and testing of software within the context of a genuine project, as well as familiarizing with teamwork.
In many universities, this kind of course is compulsory, belongs to BSc studies and is recommended for third year students.
In this paper, we describe how software projects and software quality issues related are taught in two Finnish universities.
Nowadays probably all universities where information technology is lectured have a compulsory project course on software engineering [1,2].
In this course, students work in project groups and construct relatively large software, starting from the preliminary analysis (feasibility study) and ending in testing or even the maintenance phase.
Important learning goals in this kind of course include making students familiar with project work in general, but also to integrate the knowledge and skills that students have learned in various earlier courses.
Students also come to realize the purpose of documentation and testing.
ACM and IEEE [3] describe software quality as follows:Software quality is a pervasive concept that affects, and is affected by all aspects of software development, support, revision, and maintenance.
It encompasses the quality of work products developed and/or modified (both immediate and deliverable work products) and the quality of the work processes used to develop and/or modify the work products.
Quality work attributes include functionality, usability, reliability, safety, security, maintenance, portability, efficiency, performance, and availability.Quality issues are often taught from a theoretical point of view in first and second year basic software engineering courses [4].
Yet another important aspect of the software project course is to teach students to understand the concept of software quality as a whole and software process quality issues in practice.In this paper we describe how quality issues are taught in the Software Engineering Project course at the Institute of Software Systems of Tampere University of Technology (TUT) [5,6] and in the Department of Computer Sciences at the University of Tampere (UTA) [7].
These are the only universities in Tampere.The rest of this paper is organized as follows: In Section 2, we describe Software Engineering Project Work Course and introduce how material from earlier courses are applied in practice in the project work.
Section 3 lists and describes quality issues in a more detailed level and, Section 4 concludes our work.
Curricula guide recommends students to take the Project Work course in their third year of studies, just before receiving their BSc degree.
The description of the course at UTA is given in Table 1.
Table 1: Description of the Project Work course at UTA [8].
Teaching: 16 h of lectures and seminars, group instructions if needed.
It is possible to take this course in English if the student has the prerequisites.
Recommended year of study: 3rd year, periods 1-4.
Objective: The goal of the course is to initiate students into the design, implementation and organisation of software within the context of a genuine project.
Duration: 30 working weeks.Requirements: Students have to participate actively in the project, write a final report, and present it.
Prerequisites: A minimum of 50 ECTS of studies in computer sciences, including the basic study module P1 in computer sciences, the courses Introduction to Object Oriented Programming and Software Engineering.
In addition, Programming Technique is recommended for students in computer science, and the course Graphical User Interface Design Project is recommended for students in interactive technology.
Literature: Pressman, R, Software Engineering, A Practitioner's Approach, 6/e, McGraw-Hill, 2005.
Related courses: Software Project Management, Theory of Software Project Management (a preliminary course for project managers).
In the academic year [2005][2006], there were 7 two-hour lectures on the following topics: course arrangements and reviews, project plan, requirements specification, test plan, implementation plan and project finishing.
One guest lecturer also visited on the course and gave a presentation about project contracts and rights.
Teaching also included the following meetings with the project groups: the first meeting with the lecturer and group, where the preliminary analysis is checked together, inspections for the project plan, requirements specification, test plan and implementation plan, and the final meeting where the final report of the project is discussed.
Lectures are mainly given in Finnish, and the language of group supervision and inspections depends on the working language of the group.In the previous academic year roughly 100 students participated in the Project Work course at UTA, and 17 of them came from countries other than Finland.
There were also 7 project managers from a Software Project Management course.
From these students, the course lecturer formed 19 project groups and one usability team [9].
The idea of the usability team is that these students work as usability experts for the other projects [10].
Earlier all students who majored in interactive technology did the course on project work with the other computer science students.
The usability team experiment started two years ago, and it is possible that in the future all interactive technology students study the course in the usability team.Seven projects had English as their working language.
On average, there were 5 students and a half project manager in each group (that is, each project manager managed two projects, and one project had no official manager at all), depending on the project's estimated size.
More than half of the projects had to do wwwbased applications with a database, and the rest involved C++ or java stand-alone applications or mobile phone applications.At UTA, the arrangements for the course starts on September, when the course supervisor starts to seek suitable project topics, and students register for the course.
In [2005][2006], eight projects had clients from various departments at the university, two projects were general purpose projects were the client was a non-profit organisation, and nine projects were commercial.
The distribution of the clients was similar in [2006][2007].
See course homepage [7] for the more detailed project descriptions.After initiation, projects followed the standard waterfall model, and deadlines for the compulsory deliverables were in November for the project plan, December for the requirements specification, and February for the test and implementation plans.
The software was expected to be ready by the end of April, and the groups finished the final documentation by the middle of May.
During the course, students give two public presentations on the status of their project: one in December when the requirements specification was ready, and one in May when all functionalities had been implemented.The students are awarded 6-12 ECTS credits from the Project Work depending on the amount of work.
The number of credits can vary between team members.
The main criterion for the grade is how well the software has been done.
Naturally, good documentation is a positive sign, but there must be at least some requirements implemented before students can pass the course.
It is quite normal that the requirements specification contains more features than the group has realistic resources to implement, and this is acceptable.
As a matter of fact, it is really hard to estimate the amount of work needed, especially when exact skills of the team members are unknown and the overall requirements are not clear.
Other issues that have an effect on the grade are the deliverables of the team (documents and code), inspection arrangements, reporting, communication with the client, supervisor, and other stakeholders, presentations, and two personal essay-type reports during the project.For the 2006-2007 semester, 90 students started the Project Work course and 39 students took the Software Project Management course.
This exceptionally high number of project managers was due to the large number of exchange students who had already finished their BSc degrees at their home university (they had already done Project Work or equivalent) and therefore they came directly to this advanced level course.
We also did some changes to the project arrangements by allowing projects to select their own development models.Sometimes other university organisations co-operate in the course.
This year students of the Technical Communication Programme of the School of Modern Languages and Translation Studies created online helps for three projects.
The project manager supervised the writing work and a review was organized with an English language teacher.
This year we also had an international project where students co-operated with the Budapest University of Technology and Economics in a mobile phone programming project.At UTA there is one teacher who is in charge on all course duties.
This kind of arrangement is based on the organisation structure; all project managers take main responsibility of their projects.
Curricula guide recommends the TUT Project course to be taken in the fourth year of studies, just after receiving the BSc degree.
Description of the course at TUT is given in Table 2.
Lectures describe the software project, from feasibility study through negotiation and meeting arrangements to acceptance test, deployment and maintenance.
For two years now, after the curricula reorganisation and shortening the course from six to five calendar months, there have not been any quest lectures anymore (previously there were four).
In the academic year 2007-08, there will be three weekly lectures instead of two, with two guest lectures.
Four special lectures were given during two past courses; one on version control tools, one on bug reporting tools, one on contracts and agreements, and one on establishing an own company.
Table 2: Description of the Project Work course at TUT [5].
Two weeks from the start of the academic year, the students are expected to have formed groups, and selected a project work subject from the ones available.
The same subject may be selected by more than one student group, if the client allows that.
Students can also suggest their own ideas for project work, in which case the course supervisor decides whether the subject is suitable for the course.
At this phase (mid-September), the groups deliver a feasibility study (preliminary analysis) document, and a first group meeting with course personnel is held.
A week after that a first version of the project plan is to be submitted, and it is inspected within two weeks.There are usually 20-25 project groups every year in the course, in the latest course there were 143 students (and PM seminar 11).
In addition, almost every year there are some exchange students taking part in the course, from one to seven foreigners.
Groups with Finnish participants only can write their documentation either partly or totally in English.
That depends on what the customer wants, and also if the group e.g. plans to distribute their work as open source.The topics for the projects in 2005-06 and 2006-07 have been initiated at the Institute/TUT (in 2005-06, 6 projects, and in 2006-07, 1 project) or they have been the student's own ideas (3 and 4 projects, respectively).
The vast majority have been made for industry companies or non-profit organisations (12 and 21 projects).
The course personnel consists nowadays of three group supervisors (of which one is a full-timer), three usability assistants, one special task document assistant, and three code inspectors.Several examples of well-known software projects (failures or triumphs) are presented at course lectures, as well as informative project histories from previous courses.
Table 3 presents some course statistics starting from 1997.
For each academic year, we list the average project size in hours and the number of projects at TUT and UTA.
At TUT the same lecturer has supervised the course whole time, but at UTA there has been four different lecturers and therefore the UTA statistics are not complete.
In the last column "+1" or "+2" refers to the number of usability teams.
In UTA columns "-" means that course data is not available, although the project course has been taught.
Management Seminar, which consists of students who have already passed OHJ-3500 in the previous year.
Those seminar attendees act as "advisors" for the project groups.
They do not get involved with the work itself, but can give advices if they see project is not going well.The course does not require the students to use any specific development model, although the traditional waterfall model is used by most groups.
In the latest course, five groups used some kind of incremental model.
In the future, more emphasis will be given to evolutionary/incremental life-cycle models.The sizes of the projects have been around 8400 and 34900 SLOC in 2005-06, and between 3000 and 24700 SLOC in 2006-07.
Naturally the "lines of code" does not tell much and it depends on the development language, but it is at least a rough measurement and an indication of the project size.
The number of classes or screens would be another countable indicator.
Typically the number of classes is less than 120 for student projects.
Typically the amount of reused code in projects is very low, only around 5 % of the total amount of code.At least four companies have been established by the students around the Project course work in previous years.
This year one more company has been established.
At TUT and UTA the main educational goals are: working in a software project in several tasks, weeding out the requirements and breeding them into system's features, writing technical documentation, learning inspections, and finally getting experience to give short presentations about the project work.
The Project course gathers knowledge and skills learnt in previous courses.The other aims of the course are to improve group working skills of the students, to give good skills in documentation, reporting and meeting practices.
Also, after the project the students should understand why and when different documents are needed in software projects, how to plan a complete project, how to collect requirements and communicate with the client, how to make an architectural and a more detailed design for the software, how to design repeatable tests, and how to use modern programming tools.
We think that one of the most important success factors in project work and management is experience.
Those who are doing their first project with an unfamiliar group and new tools, have to proceed very carefully in order to perform well.Most of the students in the project courses students have not taken part in a complete project earlier (i.e. have not been involved in a project from the feasibility analysis to deployment).
Thus for most of the students the project course is the first complete software project they participate in.It would be a great help if the newcomers could learn from the earlier projects, or at least read the most important parts of them.
At TUT this has been a long tradition (thanks to the same lecturer it has had); every year the course web page with statistics is updated with five sections of information.
First, statistics from inspections [11], e.g. average number of pages scanned through in an hour, and error rates per one page in different documents.
Second, useful items taken from documents (such paragraphs that could be used as an example of good documentation).
Third, selected matters from weekly reports, arranged as one group by one (this describes e.g. the changing state of a project).
The fourth part is the most important: text taken from groups' final reports.
The text is taken from five chapters: risks, project management, tools, productivity, and comments from the group members.
The last section includes matters taken from the final meetings, mostly comments and suggestions for further development of the course.However, the text on the web pages is in plain text, without any hypertext crosslinks.
We know it is not very usable in that way (the best way is to use the web browser's search function with a keyword), but at least the large amount of data is there available for everyone.
Writing the data usually takes two to three full weeks of working time, and it very often has to be done during vacation in the summer.At UTA, the current lecturer began to collect statistics about working hours and the project outcome systematically in 2005.
The statistics are published in the department's report series [9] electronically.
The report also contains project descriptions and other useful information.
New students are encouraged to read the report at the beginning of the course.
In this section we list important quality factors related on software project teaching, according to our perceptions.
At UTA, students register to the course by filling a form with questions on their master's programme, native language (English or Finnish) and software licence (Commercial, GPL) choices, in addition to special wishes they may have as regards the project topic.
The students also send copy of their study register to the course supervisor, so it is easy to check that all prerequisites are fulfilled and the technical suitability of the students for different projects can be verified.
After all registrations and project topic suggestions have been submitted to the supervisor, the project groups are formed.
Students' wishes are taken into account at this stage.
The study register is needed to find suitable students to different projects (for instance, in a mobile phone programming project it is essential that at least one or two students have some knowledge on mobile programming).
At TUT, the course personnel do not get involved in the forming of the groups.
Students have two weeks time to form groups and select a subject for their work.
Since 2006, UTA students can choose which development model they will apply in their project.
In the first and second year software engineering courses students are familiarized with the classic waterfall model, and incremental and evolutionary models.
Agile development methods are also introduced to students before the course.
When the course begins, these four models are once more presented to the students in a lecture to make it easier for the students to choose between models.
Basically, all widely recognised development models are acceptable.
The development model chosen by the students is confirmed with the lecturer and the client in the project plan inspection.Before this academic year, only the waterfall model was used in the course, but our negative experiences, especially with projects that had unclear requirements, showed the problems of the waterfall model concretely by expanding the implementation phase much beyond what was estimated.
One more reason to encourage students to choose other development models is their weak programming skills.
Usually only one or two students in a group are good in programming, and this is really not enough for large projects with the available amount of time.
The team should start producing functioning versions quite early to avoid a situation where they notice too late that they do not have enough programming skills.
Incremental delivery was the most popular choice at UTA this year.At TUT, the main milestones in the course schedule are the document inspections.
That makes students often believe that the waterfall model is required, although it is emphasized in the starting lectures that the course does not force students to use any specific development life-cycle model or methodology.
It is characteristic for especially research and development projects that implementation must be started early to find out new tools and try out the design architecture.The free grouping and selection of project subject at TUT have been considered a slight motivational advantage among students.
The groups must produce the following documents in both UTA and TUT courses:• Preliminary analysis (feasibility study)• Project plan • Requirements specification • Design plan • Test plan • Test report• Final report and its short version.In addition the above mentioned documents, all project groups in the TUT course also produce a user's manual and a maintenance guide.
In early years an offer was also written, but it has now been removed from the course requirements.Depending on the project's content, at UTA e.g. the following documents might be required (projects define their deliverables in the project plan): usability analysis, draft of the user interface (usually a kind of paper prototype), a prototype plan and a prototype, user interface specification, maintenance document, user's guide, online help, installation plan, and data dictionary.
At TUT, the groups have sometimes written several additional documents, e.g. a style guide and a unit test plan.In those projects that apply the incremental development model, the project team also writes the design and test plans incrementally.
For each increment, the design plan contains a chapter that describes the corresponding implementation details.
Similarly, the test plan also contains one chapter for the tests of the increment.For drawing diagrams in the documentation at UTA, UML is a recommendation.
Most used diagrams are Gantt diagrams in the project plan, ER diagrams and sequence diagrams in the requirements specification, screen hierarchy and state diagrams in the user interface specification, and class, component, and sequence diagrams in the design plan.
At TUT, there is no specific diagramming style required; students can draw the diagrams and figures they find useful at their project.
UML is taught at preceding Methods course.
At UTA, testing is based on the system test plan which should be written before or at the same time as the design plan.
After tests, a test report is written.
It is possible to outsource testing to other groups, but this has not been very popular; only two projects (2006-07) decided to test the other projects' software.
If testing is outsourced, a well written test plan is essential, and the groups should also follow schedules very carefully so that they do not cause time problems for the other group.It has been observed that automated unit testing is getting increasingly popular in the course.
Clients of the commercial projects sometimes even require that the developers write unit tests to the code, and that they can follow the progress of the coding and testing online.At TUT, the testing phase is similar; only one test plan document is required.
Students may write extra testing documents if they want to, or if the client requires such.
Unit test tools are used, as well as www stress tools.
Only few clients deliver software tools to the project group, or require a certain tool to be used.
In this section, we list the software tools that have been found useful in the courses.
Project groups use Microsoft Office, OpenOffice or LaTeX to write documents in both universities.
The incompatibility of different tools or different versions of the same tool has sometimes caused some distress among students.
It is required that all groups publish at least a minimal homepage of the project that contains the name of the project with a short description.
A working hour table should also be found on the homepage (see Section 3.8, Table 4).
At UTA, the Moodle course management system is used as a discussion forum for the project managers, and some project groups also used Moodle as their own forum.
Sometimes groups also use wikis, like pbWiki and Confluence for writing their documentation and discussions.
Google spreadsheet has been used for sharing numerical data in some projects.At UTA, the most popular project management software among projects is Microsoft Project, but also GantProject and TaskJuggler have been used.
At TUT, the use of PM software is not encouraged, as students must first learn how to estimate projects.
According to several case projects, using PM software only takes some weekly working time, without providing any answers to the group's scheduling problems.
As students are not accustomed to using PM software, and this is typically their first whole project, using PM software does not have many advantages.
Programming: Eclipse is the most praised development environment, Subversion, MySQL, JUnit, CPPUnit, Atlassian Jira, CVS, Spring, Hibernate, S80 SDK, Visual Studio, SMS Server Tools, Sharp Develop, JBuilder, Maemo, KoodiTakomo (at TUT), Doxygen, JavaDoc, J2ME, J2EE, Maven, Clover.At TUT, version control is required for code.
Version control with documentation is up to the group itself (there are still difficulties with binary or XML document files).
Both Subversion and CVS are used, RCS not much anymore.
Using bug reporting database is optional, Mantis and Bugzilla have been the most popular ones.Databases: MySQL, PostgreSQL, Creole, Propel, DBSchema plug-in for Fujaba, phpMyAdmin.Modelling tools: Fujaba, Rational Rose, Visio, MetaEdit+, Dia, MagicDraw, Gimp, Poseidon.Testing and debugging: Log4j, JUnit, CPPUnit, HttpUnit, WAPT.
Quartz (a component for job scheduling in JAVA applications), Apache Ant, and Cactus (reporting tool).
ICQ, skype and irc are very popular in remote communication.
There are four compulsory inspections in the UTA and six in the TUT courses.
In the projects that follow the waterfall model, documents to be inspected are the project plan, requirements specification, design plan and test plan, and at TUT also the user manual and code (only 500-1000 lines).
In the inspection, students have at least the following roles: chairman and secretary.
At UTA, a presenter is also used.
It is encouraged that students try different roles during the course.
The number of errors and other action points are written down to an inspection diary (form) and finally the chairman signs the form.
If there are too many rigorous errors found during the inspection, it is possible to arrange a new inspection for the same document.At UTA, code inspections are voluntary, but they are compulsory at TUT.
Even though the amount of code inspected is relatively small, inspections have been mostly useful.
At UTA, project managers are usually fourth or fifth year students, and before the Software Project Management (SPM) course, they have passed the Project Work course earlier and they have also finished the Theory of Software Project Management course.
The theory course involves reading relevant literature: students read two books on project management, write two essays, and take an exam to pass the course.
At the beginning of the SPM, there are several lectures for the course related issues, but most of the work is done when the students manage their own projects.
The number of students in the SPM course has varied highly recently: two years ago we had only 7 project managers for 19 projects, and this year we have 39 managers for 19 projects.
The main tasks of the managers are reporting and planning and they are expected to handle all management related issues in their projects.At TUT, the project manager is one of the students from the project group.
It is advised that the project manager should be the one who has the most time to devote to the project.
A technical specialist or somebody who is working full-time in the client's organisation is not recommended to be the project manager.At TUT, a demo is a one-hour meeting where groups present their product to the course personnel just after the course has ended.
In the demo the test report and maintenance guide are commented shortly, and questions can be asked about them.The groups also show their version control system, and several code files are reviewed to make sure they have used good programming style and comments.
All projects in both universities write weekly reports (via e-mail to course personnel) in which they describe what they have done and what they are going to do next.
The groups also report on how many hours they have worked, whether they have met any problems, and how they solved them.Projects also maintain a working hours table (see Table 4), where work is divided relating to different tasks and project phases.
At UTA, during the course in 2006-7 the working hour table had a similar structure as used by Benediktsson et al. [12].
The overall work was divided into the following categories: project planning, project management, requirements specification, (software) design, code, integration and testing, review repair and other.
The working hour table is published on the project's home page, so all the other project groups, project managers and course supervisors can easily follow the distribution of work in the projects.
Table 4: An example of the working hours reporting matrix from the TUT course.The working hours in Table 4 are taken from a typical TUT course project.For all projects at UTA, there is a steering group that follows the progress of the project and helps in big decisions.
The steering group contains one or two representatives from the client's organisation, project managers and course supervisor.
Meetings are organised only when needed, and quite often all issues can be handled via e-mail.
Common reasons for meetings are big technical or social problems.
If one or more students decide to quit the course, then it is good to have a formal meeting to handle the situation and revise the project plan together.At both universities the course personnel read weekly reports and if necessary (e.g. groups have problems), send e-mail to the group, or in serious matters arrange an emergency meeting with the group.
Such quick meetings have been made for e.g. difficult contract negotiations, or because of severe schedule problems.
To introduce software ethics to the students, ACM/IEEE's code of ethics [13], including The Finnish Information Processing Association's [14] ethical recommendations are discussed at TUT.
Students have found that proto implementation should be started as early as possible.
This is especially important when there are new tools and/or unfamiliar application areas involved in the project.
They have also noticed that writing good documentation takes time, and that good documentation is useful even within the same project.
Even obvious matters can be misunderstood between the groups and the clients or within group members if communication is made via e-mail.
Everything that seems unclear should be solved quickly.
The project schedule is difficult to make, as well as estimating the amount of time needed for the work, if you don't have any previous experiences of projects.
Students have been reminded about the importance of version control system in software projects at TUT.Statistics on the TUT course can be found on the web at www.cs.tut.fi/kurssit/OHJ-3500/tilastolinkit.html (text is in Finnish).
At UTA, a questionnaire is sent to all clients after the projects, requesting feedback on the course arrangement, project success, team members and other organisational issues.
This feedback is used to improve the course.
The project group similarly gives feedback in their final report and individual comments are gathered from the students' personal reports.
According to our experiences, the main failure factors in the course projects have been working life (too much work outside the university at the same time -about half of the courses' students work part-time or full-time while studying), clients who do not take the project seriously enough (and fail to help the team to solve requirements early enough), inexperienced team members and project managers, and too large and complex project topics.
Motivational problems surface e.g. when project schedule slips (for any reason), or a project member or client quits.
The software project courses belong to the body of knowledge in the computer sciences.
The course improves students' working skills and makes it possible for them to understand the whole software construction process from the feasibility study to deployment.
The course is also a way to promote some good practices and working habits to the industry [15] (e.g. formal inspections), as well as spread information about good and useful software tools and documentation.
In addition, good practices learnt from the industrial projects can be subsequently incorporated into the teaching of the course.The main differences between the UTA and TUT courses were: group forming and project work subject selection, the duration of the course (30 vs. 20 weeks), the role of the project manager (senior vs. same course), the number of inspections (four vs. six) and the number of the course personnel (1 vs. 3+7).
Both courses have good practices: extensive use of document inspections, usability issues from a third party source, weekly reporting, the working hours reporting matrix enables statistics and metrics, the final report and presentations, abbreviated final reports are copied or given electronically to all students so that they can read the groups' lessons learnt and statistics.
Also both courses have a final meeting with project group and course supervisor, which can be also considered as an "after action review".
Courses are continuously and systematically developed, on which process students' final reports and meetings play an important role.
Students have considered these project courses demanding, but very instructive and informative.At TUT, the OHJ-3500 Project Course has been considered the second most useful course at TUT, according to a questionnaire made among graduated MSc students of Information Technology.
Every year so far, the feedback from the students in both universities has included highly positive remarks about the many important practical software project skills that the students have learnt during the course.
