Markov logic networks (MLNs) combine logic and probability by attaching weights to first-order clauses, and viewing these as templates for features of Markov networks.
Learning MLN structure from a relational database involves learning the clauses and weights.
The state-of-the-art MLN structure learners all involve some element of greedily generating candidate clauses, and are susceptible to local optima.
To address this problem , we present an approach that directly utilizes the data in constructing candidates.
A relational database can be viewed as a hypergraph with constants as nodes and relations as hyperedges.
We find paths of true ground atoms in the hyper-graph that are connected via their arguments.
To make this tractable (there are exponentially many paths in the hypergraph), we lift the hypergraph by jointly clustering the constants to form higher-level concepts, and find paths in it.
We variabilize the ground atoms in each path, and use them to form clauses, which are evaluated using a pseudo-likelihood measure.
In our experiments on three real-world datasets, we find that our algorithm outperforms the state-of-the-art approaches.
In recent years, there has been a surge of interest in combining statistical and relational learning approaches (Getoor & Taskar, 2007), driven by the realization that many applications require both.
Recently, Richardson and Domingos (2006) introduced Markov logic networks (MLNs), a statistical relational language combining first-order logic and Markov networks.
An MLN consists of weighted first-order logic formulas, viewed as templates for Markov network features.
Learning MLN structure is an important but challenging task, and to date only a few approaches have been proposed (Kok & Domingos, 2005;Mi- halkova & Mooney, 2007;Biba et al., 2008b;etc.).
Most of these approaches systematically enumerate candidate clauses by starting from an empty clause, greedily adding literals to it, and testing the resulting clause's empirical fit to training data.
Such a strategy has two shortcomings: searching the large space of clauses is computationally expensive; and it is susceptible to converging to a local optimum, missing potentially useful clauses.
These shortcomings can be ameliorated by using the data to a priori constrain the space of candidates.
This is the basic idea in relational pathfinding (Richards & Mooney, 1992), which finds paths of true ground atoms that are linked via their arguments and then generalizes them into firstorder rules.
Each path corresponds to a conjunction that is true at least once in the data.
Since most conjunctions are false, this helps to concentrate the search on regions with promising rules.
However, pathfinding potentially amounts to exhaustive search over an exponential number of paths.
Hence, systems using relational pathfinding (e.g., BUSL (Mihalkova & Mooney, 2007)) typically restrict themselves to very short paths, creating short clauses from them and greedily joining them into longer ones.In this paper, we present LHL, an approach that uses relational pathfinding to a fuller extent than previous ones.
It mitigates the exponential search problem by first inducing a more compact representation of data, in the form of a hypergraph over clusters of constants.
Pathfinding on this 'lifted' hypergraph is typically at least an order of magnitude faster than on the ground training data, and produces MLNs that are more accurate than previous state-of-the-art approaches.
LHL is short for Learning via Hypergraph Lifting.We begin by reviewing Markov logic in the next section.
We then describe our structure learning algorithm (Section 3) and report our experiments with it (Section 4).
Finally, we discuss related work (Section 5) and future work (Section 6).
In first-order logic (Genesereth & Nilsson, 1987), formulas are constructed using four types of symbols: constants, variables, functions, and predicates.
(In this paper we use only function-free logic.)
Constants represent objects in a domain of discourse (e.g., people: Anna, Bob, etc.).
Variables (e.g., x, y) range over the objects.
Predicates represent relations among objects (e.g., Advises), or attributes of objects (e.g., Student).
(In this paper, we use predicate and relation interchangeably.)
Variables and constants may be typed.
An atom is a predicate symbol applied to a list of arguments, which may be variables or constants (e.g., Advises(x, Bob)).
A ground atom is an atom all of whose arguments are constants.
A world is an assignment of truth values to all possible ground atoms.
A database is a partial specification of a world; each atom in it is true, false or (implicitly) unknown.
In this paper, we make a closed-world assumption: a ground atom not in the database is assumed to be false.
A clause is a disjunction of non-negated/negated atoms.
A Markov network (Pearl, 1988) represents the joint distribution of a set of variables X = (X 1 , . . . , X n ) ∈ X as a product of factors:P (X = x) = 1 Z k f k (x k ), where each factor f k is a non-negative function of a subset of the variables x k , and Z is a normalization constant.
As long as P (X = x) > 0 for all x, the distribution can be equivalently represented as a log-linear model:P (X = x) = 1 Z exp ( i w i g i (x)), where the features g i (x) are arbitrary functions of (a subset of) the variables' state.
A Markov logic network (MLN) is a set of weighted first-order formulas.
Together with a set of constants representing objects in the domain, it defines a Markov network with one variable per ground atom and one feature per ground formula.
The probability distribution over possible worlds x is given byP (X = x) = 1 Z exp( i∈F j∈Gi w i g j (x))where Z is the partition function, F is the set of all first-order formulas in the MLN, G i is the set of groundings of the ith first-order formula, and g j (x) = 1 if the jth ground formula is true and g j (x) = 0 otherwise.
Markov logic enables us to compactly represent complex models in non-i.i.d. domains.
General algorithms for inference and learning in Markov logic are discussed in Richardson and Domingos (2006).
We call our algorithm LHL, for Learning via Hypergraph Lifting.
In LHL, we make use of hypergraphs.
A hypergraph is a straightforward generalization of a graph in which an edge can link any number of nodes, rather than just two.
More formally, we define a hypergraph as a pair (V, E) where V is a set of nodes, and E is a multiset of labeled non-empty ordered subsets of V called hyperedges.
In LHL, we find paths in a hypergraph.
A path is defined as a set of hyperedges such that for any two hyperedges e 0 and e n in the set, there exists an ordering of (a subset of) hyperedges in the set e 0 , e 1 , . . . , e n−1 , e n such that e i and e i+1 share at least one node.A database can be viewed as a hypergraph with constants as nodes, and true ground atoms as hyperedges.
Each hyperedge is labeled with a predicate symbol.
Nodes (constants) are linked by a hyperedge (true ground atom) if and only if they appear as arguments in the hyperedge.
(Henceforth we use node and constant interchangeably, and likewise for hyperedge and true ground atom.)
A path of hyperedges can be generalized into a first-order clause by variabilizing their arguments.
To avoid tracing the exponential number of paths in the hypergraph, LHL first jointly clusters the nodes into higher-level concepts, and by doing so it also clusters the hyperedges (i.e., the ground atoms containing the clustered nodes).
The 'lifted' hypergraph has fewer nodes and hyperedges, and therefore fewer paths, reducing the cost of finding them.
Figure 1 provides an example.
We have a database describing an academic department where professors tend to have students whom they are advising as teaching assistants (TAs) in the classes the professors are teaching.
The left graph is created from the database, and after lifting, results in the right graph.
Observe that the lifted graph is simpler and the clustered constants correspond to the high-level concepts of Professor, Student, and Course.Algorithm 1 gives the pseudocode for LHL.
LHL begins by lifting a hypergraph (Algorithm 2).
Then it finds paths in the lifted hypergraph (Algorithm 3).
Finally it creates candidate clauses from the paths, and learn their weights to create an MLN (Algorithm 4).
We call our hypergraph lifting algorithm LiftGraph.
LiftGraph is similar to the MRC and SNE algorithms (Kok & Domingos, 2007;Kok & Domingos, 2008).
It differs from them in the following ways.
LiftGraph can handle relations of arbitrary arity, whereasAlgorithm 1 LHL(D, T, ω, µ, ν, π, π , σ) input: D, a relational databaseT , a set of types, where a type is a set of constants ω, maximum number of hyperedges in a path µ, minimum number of ground atoms per hyperedge in a path in order for it to be selected ν, maximum number of ground atoms to sample in a path π, π , length penalties on clauses σ, fraction of atoms to sample from D output: (Clauses, W eights), an MLN containing a set of learned clauses and their weights note: Index H maps from each node γi to the set of hyperedges r(γ1, . . . , γi, . . . , γn) containing γi E is a set of hyperedges in a lifted hypergraph P aths is a set of paths, each path being a set of hyperedges (H, E) ← Lif tGraph(D, T ) P aths ← ∅ for each r(γ1, . . . , γn) ∈ E P aths ← P aths ∪ F indP aths({r(γ1, . . . , γn)}, {γ1, . . . , γn}, ω, H)(Clauses, W eights) ← CreateM LN (P aths, D, µ, ν, π, π , σ) return (Clauses, W eights) Algorithm 2 Lif tGraph(D, T )note: The inputs and output are as described in Algorithm 1for each t ∈ T Γt ← ∅ for each x ∈ t Γt ← Γt ∪ {γx} (γx is a unit cluster containing x) H[γx] ← ∅ (H maps from nodes to hyperedges) E ← ∅ (E contains hyperedges) for each true ground atom r(x1, . . . , xn) ∈ D E ← E ∪ {r(γx 1 , . . . , γx n )} for each xi ∈ {x1, . . . , xn} H[γx i ] ← H[γx i ] ∪ {r(γx 1 , . . . , γx n )} repeat for each t ∈ T (γ best , γ best ) ← ClusterP airW ithBestGain(Γt) if {(γ best , γ best )} = ∅ γnew ← γ best ∪ γ best Γt ← (Γt \ {γ best , γ best }) ∪ γnew H[γnew] ← ∅ for each γ ∈ {γ best , γ best } for each r(γ1, . . . , γ, . . . , γn) ∈ H[γ] H[γnew] ← H[γnew] ∪ {r(γ1, . . . , γnew, . . . , γn)} E ← E \ {r(γ1, . . . , γ, . . . , γn)} E ← E ∪ {r(γ1, . . . , γnew, . . . , γn)} H[γ] ← ∅ until no clusters are merged for all t return (H, E)SNE can only handle binary relations.
Unlike MRC, LiftGraph finds a single clustering of constant symbols rather than multiple clusterings.
While both SNE and MRC can cluster predicate symbols, in this paper, for simplicity, we do not cluster predicates.
(However, it is straightforward to extend LiftGraph to do so.)
Most domains contain many fewer predicates than objects, and structure learning alone suffices to capture the dependencies among them, which is what LHL does.
(Because SNE and MRC do not have a structure learning component, it is essential for them to cluster predicates in order to learn the dependencies among them.)
LiftGraph works by jointly clustering the constants in a hypergraph in a bottom-up agglomerative manner, allowing information to propagate from one cluster to another as they are formed.
The number of clusters need not be pre-specified.
As a consequence of clus- P aths ∪ {CurP ath} V ← ∅ for each γj ∈ {γ1, . . . , γn} if γj ∈ V V ← V ∪ {γj } V ← V ∪ {γj } P aths ← P aths ∪ F indP ath(CurP ath, V, ω, H) CurP ath ← CurP ath \ {r(γ1, . . . , γn)} V ← V \ V return P athstering the constants, the ground atoms in which the constants appear are also clustered.
Each hyperedge in the lifted hypergraph contains at least one true ground atom.LiftGraph is defined using Markov logic.
We use the variable r to represent a predicate, x i for the ith argument of a predicate, γ i for a cluster of ith arguments of a predicate (i.e., a set of constant symbols), and Γ t for a clustering of constant symbols of type t (i.e., a set of clusters or, equivalently, a partitioning of a set of symbols).
If x i is in γ i , we say that (x 1 , . . . , x n ) is in the cluster combination (γ 1 , . . . , γ n ), and that (γ 1 , . . . , γ n ) contains the atom r(x 1 , . . . , x n ).
r(γ 1 , . . . , γ n ) denotes a hyperedge connecting nodes γ 1 , . . . , γ n .
A hypergraph representing the true ground atoms r(x 1 , . . . , x n ) in a database is simply (V = {{x i }}, E = { r({x 1 }, . . . , {x n }) }) with each constant x i in its own cluster, and a hyperedge for each true ground atom.The learning problem in LiftGraph consists of finding the cluster assignment {Γ} that maximizes the posterior probability P ({Γ}|D) ∝ P ({Γ})P (D|{Γ}), where D is a database of truth assignments to the observable r(x 1 , . . . , x n ) ground atoms.
The prior P ({Γ}) is simply an MLN containing two rules.
The first rule states that each symbol belongs to exactly one cluster.
This rule is hard, i.e., it has infinite weight and cannot be violated.
∀x∃ 1 γ x ∈ γThe second rule is∀γ 1 , . . . , γ n ∃x 1 , . . . , x n x 1 ∈ γ 1 ∧ . . . ∧ x n ∈ γ nwith negative weight −∞ < −λ < 0, which imposes an exponential prior on the number of cluster combinations to prevent overfitting.
The parameter λ is fixed during learning, and is the penalty in log-posterior incurred by adding a cluster combination.
Algorithm 4 CreateM LN (P aths, D, µ, ν, π, π , σ) calls: V ariabilizeP aths(P aths), replaces the nodes in each path in P aths with variables M akeClauses(P ath), creates clauses from hyperedges in P ath Sample(P ath, ν), uniformly samples ν ground atoms from P ath SampleDB(D, σ), uniformly samples a fraction σ of atoms from database D N umT rueGroundAtoms(P ath), counts the number of true ground atoms in P ath note: The inputs and output are as described in Algorithm 1 (only select paths with enough true ground atoms (heuristic 1)) P aths ← V ariabilizeP aths(P aths) SelectedP aths ← ∅ for each p ∈ P aths if (N umT rueGroundAtoms(p) >= P athLength(p) * µ) SelectedP aths ← SelectedP aths ∪ {p} (evaluate candidates with ground atoms in P ath (heuristic 2))CandidateClauses ← ∅ for each p ∈ SelectedP aths D ← Sample(p, ν) for each c ∈ M akeClauses(p) if Score(c, D ) > Score(∅, D ) CandidateClauses ← CandidateClauses ∪ {c} CandidateClauses ← SortByLength(CandidateClauses) (Evaluate candidates with ground atoms in database D) D ← SampleDB(D, σ) SelectedClauses ← ∅ for each c ∈ CandidateClauses BetterT hanSubClauses ← T rue for each c ∈ (SubClauses(c) ∩ SelectedClauses) if Score(c, D ) < Score(c , D ) BetterT hanSubClauses ← F alse break if (BetterT hanSubClauses) SelectedClauses ← SelectedClauses ∪ {c} AddClausesT oM LN (SelectedClauses) W eights ← LearnW eights(SelectedClauses) return (SelectedClauses, W eights)The main MLN for the likelihood P (D|{Γ}) contains the following rules.
For each predicate r and each cluster combination (γ 1 , . . . , γ n ) that contains a true ground atom of r, the MLN contains the rule:∀x 1 , . . . , x n x 1 ∈ γ 1 ∧ . . . ∧ x n ∈ γ n ⇒ r(x 1 , . . . , x n )We call these atom prediction rules because they state that the truth value of an atom is determined by the cluster combination it belongs to.
These rules are soft.
At most there can be one such rule for each true ground atom (i.e., when each constant is in its own cluster).
For each predicate r, we create a rule∀x 1 , . . . , x n m i=1 ¬(x 1 ∈ γ i 1 ∧ . . . ∧ x n ∈ γ i n ) ⇒ r(x 1 , . . . , x n )where (γ 1 1 , . . . , γ 1 n ), . . . , (γ m 1 , . . . , γ m n ) are cluster combinations containing true ground atoms of r.
This rule accounts for all atoms (all false) that are not in any cluster combination with true ground atoms of r.
We call such a rule a default atom prediction rule because its antecedents are analogous to a default cluster combination that contains all atoms that are not in the cluster combinations of any atom prediction rule.LiftGraph simplifies the learning problem by performing hard assignments of constant symbols to clusters (i.e., instead of computing probabilities of cluster membership, a symbol is simply assigned to its most likely cluster).
The weights and the log-posterior can now be computed in closed form.
1 LiftGraph thus simply searches over cluster assignments, evaluating each one by its posterior probability.
It begins by assigning each constant symbol x i to its own cluster {x i }, and creating a hyperedge r ({x 1 }, . . . , {x n }) for each true ground atom r(x 1 , . . . , x n ).
Next it creates candidate pairs of clusters of each type, and for each pair, it evaluates the gain in posterior probability if its clusters are merged.
It then chooses the pair that gives the largest gain to be merged.
, . . . , γ n ) must do too.
To avoid trying all possible candidate pairs of clusters, LiftGraph only tries to merge γ i and γ i if they appear in hyperedges r(γ 1 , . . . , γ i , . . . , γ n ) and r(γ 1 , . . . , γ i , . . . , γ n ).
In this manner, it incrementally merges clusters until no merges can be performed to improve posterior probability.
It then returns a lifted hypergraph whose hyperedges all contain at least one true ground atom.
FindPaths constructs paths by starting from each hyperedge in a hypergraph.
It begins by adding a hyperedge to an empty path, and then recursively adds hyperedges linked to nodes already present in the path (hyperedges already in the path are not re-added).
Its search terminates when the path reaches a maximum length or when no new hyperedge can be added.
Each time a hyperedge is added to the path, FindPaths stores the resulting path as a new one.
All the paths are passed on to the next step to create clauses.
A path in the hypergraph corresponds to a conjunction of r(γ 1 , . . . , γ n ) hyperedges, and it guarantees that the conjunction has at least one support in the hypergraph (i.e., there is at least one true ground atom in each hyperedge).
We replace each γ i in a path with a variable, thereby creating a variabilized atom for each hyperedge.
We convert the conjunction of positive literals to a clause because that is the form that is typically used by ILP (inductive logic programming) and MLN structure learning and inference algorithms.
(In Markov logic, a conjunction of positive literals with weight w is equivalent to a clause of negative literals with weight −w).
In addition, we add clauses with the signs of up to n literals flipped (where n is a user-defined parameter), since the resulting clauses may also be useful.
(Notice that if all but one of the literals are negative, this is a definite clause whose antecedent is supported by a path in the hypergraph.)
We evaluate each clause using weighted pseudolog-likelihood (WPLL) (Kok & Domingos, 2005).
WPLL is defined as:log P • w,F,D (X = x) = r∈R c r g∈G D r log P w,F (X g = x g |M B x (X g ))where F is a set of clauses, w is a set of clause weights, R is the set of first-order predicates, G D r is a set of ground atoms of predicate r in database D, and x g is the truth value (0 or 1) of ground atom g, andP w,F (X g = x g |M B x (X g )) = exp i∈F wini(x) exp i∈F wini(x [Xg=0] ) +exp i∈F wini(x [Xg=1] ).
M B x (X g ) is the state of X g 's Markov blanket in the data, n i (x) is the number of true groundings of the ith clause in x, n i (x [Xg=0] ) is the number of true groundings of the ith clause when we force X g = 0 and leave the remaining data unchanged, and similarly for n i (x [Xg=1] ).
Following Kok & Domingos, we set c r = 1/|G D r | to weight all first-order predicates equally, and penalize the WPLL with a length penalty −πd, where d is the number of atoms in a clause.
Summing over all ground atoms in WPLL is computationally expensive, so we only sum over a randomly-sampled fraction σ of them.
We define the score of a clause c as Score(c, D) = log P • w ,F ,D (X = x) − πd, where F is a set containing c and one unit clause for each predicate in R, and w is a set of optimal weights for the clauses in F .
We iterate over the clauses from shortest to longest.
For each clause, we compare its scores against those of its sub-clauses (considered separately) that have already been retained.
If the clause scores higher than all of these sub-clauses, it is retained; otherwise, it is discarded.
In this manner, we discard clauses which are unlikely to be useful.
Note that this process is efficient because the score of a clause only needs to be computed once, and can be cached for future comparisons.
(Alternatively, we could evaluate a clause against all its sub-clauses taken together, but this would require re-optimizing the weights for each combination of sub-clauses for every comparison, which is computationally expensive.)
Finally we add the retained clauses to an MLN.
We have the option of doing this in several ways.
We could greedily add the clauses one at a time in order of decreasing score.
After adding each clause, we relearn the weights, and keep the clause in the MLN if it improves the overall WPLL.
Alternatively, we could add all the clauses to the MLN, and learn weights using L1 regularization to prune away 'bad' clauses by giving them zero weights (Huynh & Mooney, 2008).
Lastly, we could use L2-regularization instead if the number of clauses is not too large, and rely on the regularization to give 'bad' clauses low weight.
Optionally, we discard clauses containing 'dangling' variables (i.e., variables which only appear once in a clause), since these are unlikely to be useful.We use two heuristics to speed up clause evaluation.
First we discard a path at the outset if it contains fewer than µ true ground atoms per hyperedge.
This cuts the time we spend evaluating clauses that are not well supported by data.
Second, before evaluating a clause's WPLL with respect to a database, we evaluate it with respect to the smaller number of ground atoms contained in the paths that gave rise to it.
(Note that a clause can be created from different paths.)
We limit the number of such ground atoms to a maximum of ν.We use a smaller structure prior π to avoid prematurely removing good clauses.
We carried out experiments to investigate whether LHL performs better than previous approaches, and to evaluate the contributions of its components.
We used three datasets publicly available at http://alchemy.cs.washington.edu.
Their details are shown in Table 1.
IMDB.
This dataset, created by Mihalkova and Mooney (2007) from the IMDB.com database, describes a movie domain.
It contains predicates describing movies, actors, directors, and their relationships (e.g, Actor(person), WorkedIn(person, movie), etc.) It is divided into 5 independent folds.
We omitted 4 equality predicates (e.g., SameMovie(movie, movie)) that are true if and only if their arguments are the same.
They are superseded by the equality operator in the systems we are comparing, and can be easily predicted with a unit clause (e.g., SameMovie(x, x)), trivially boosting the systems' performances.UW-CSE.
This dataset, prepared by Richardson and Domingos (2006), describes an academic department.Its predicates describe students, faculty, and their relationships (e.g, Professor(person), TaughtBy(course, person, quarter), etc.).
The dataset is divided into 5 independent areas/folds (AI, graphics, etc.).
We omitted 9 equality predicates for the same reasons as above.Cora.
This dataset is a collection of citations to computer science papers, created by Andrew McCallum, and later processed by Singla and Domingos (2006) into 5 folds for the task of deduplicating the citations, and their title, author, and venue fields.
Predicates include: SameCitation(cit1, cit2), TitleHasWord(title, word), etc.
We compared LHL to two state-of-the-art systems: BUSL (Mihalkova & Mooney, 2007) and MSL (Kok & Domingos, 2005).
Both systems are implemented in the Alchemy software package ( Kok et al., 2009).
BUSL.
BUSL uses a form of relational pathfinding to find a path of ground atoms in the training data, but restricts itself to very short paths (length 2) to avoid fully searching the large space of paths.
It variabilizes each ground atom in the path, and constructs a Markov network whose nodes are the paths viewed as Boolean variables (conjunctions of atoms).
It uses the Grow-Shrink Markov network learning algorithm to find the edges between the nodes.
For each node, the algorithm greedily adds and removes nodes from its Markov blanket using the χ 2 measure of dependence.
From the cliques thus created in the Markov network, BUSL creates clauses.
For each clique, it forms disjunctions of the atoms in the clique's nodes, and creates clauses with all possible negation/non-negation combinations of the atoms.
BUSL then computes the WPLL of the clauses, and adds them one at a time, in order of decreasing WPLL, to an MLN containing only unit clauses.
After adding a clause, the weights of all clauses in the MLN are relearned to compute the new WPLL.
If a clause increases the overall WPLL, it is retained in the MLN.MSL.
We used the beam search version of MSL that is implemented in Alchemy.
MSL begins by adding all possible unit clauses to an MLN.
MSL maintains a set of n clauses that give the best score improvement over the current MLN.
Initially, the set is empty.
MSL creates all possible clauses of length two, and adds the n clauses with the highest improvement in WPLL to the set.
It then repeatedly adds literals to the clauses in the set, and evaluates the WPLL of the newly formed clauses, always maintaining the n highest-scoring ones in the set.
When none can be added to the set, it adds the best performing clause in the set to the MLN.
It then restarts the search from an empty set.
MSL terminates when it cannot find a clause that improves upon the current MLN's WPLL.To investigate the importance of hypergraph lifting, we removed the LiftGraph component from LHL, and let FindPaths run on the unlifted hypergraph.
The rules it learned were pruned by CreateMLN as normal.
We call this system LHL-FindPaths.
We also investigated the contribution of hypergraph lifting alone by applying LiftGraph's MLN on the test sets.
We call this system LHL-LiftGraph.
We also investigated the effectiveness of the two heuristics in CreateMLN, by disabling them and observing the performance of the MLN thus learned by LHL.
We call this system LHLNoHeu.
Altogether we compared six systems: LHL, LHL-NoHeu, LHL-FindPaths, LHL-LiftGraph, BUSL and MSL.
All systems are implemented in C++.
The following parameter values were used for the LHL systems on all datasets: λ = 1, µ = 50, ν = 500, σ = 0.5.
The other parameters were set as follows: ω =5 (IMDB, UW-CSE) and 4 (Cora); π = 0.01 (UW-CSE, Cora) and 0.1 (IMDB); and π = 0.001 (UW-CSE, Cora) and 0.01 (IMDB).
(See Algorithm 1 for the parameter descriptions.)
For BUSL and MSL, we set their parameters corresponding to π to values we used for LHL.
We also set their minW eight parameter to zero (empirically we found that this value performed better than their defaults).
All other BUSL and MSL parameters were set to their default values.
For all LHL systems, we created clauses with all combinations of negated/non-negated atoms in a variabilized path; greedily added clauses one at a time in order of decreasing score to an MLN (initially empty); and excluded clauses with dangling variables from the final MLN.
(To ensure fairness, we also tried excluding dangling clauses in BUSL and MSL, and report the best results for each.)
The parameters were set in an ad hoc manner, and per-fold optimization using a validation set could conceivably yield better results.
All systems were run on identically configured machines (2.8GHz, 4GB RAM).
For each dataset, we performed cross-validation using the five previously defined folds.
For IMDB and UW-CSE, we performed inference over the groundings of each predicate to compute their probabilities of being true, using the groundings of all other predicates as evidence.
Exceptions are the predicates Actor and Director (IMDB), and Student and Professor (UW-CSE).
We evaluated groundings for those predicates together, using all other predicates as evidence.
This is because groundings of those predicates for the same constant are mutually exclusive and exhaustive (e.g., Actor(Bob) and Director(Bob)).
Knowing one deter- (Poon & Domingos, 2006) because it has been shown to give better results for MLNs containing deterministic rules, which LHL-LiftGraph does.
Each run of the inference algorithms drew 1 million samples, or ran for a maximum of 24 hours, whichever came earlier.
To evaluate the performance of the systems, we measured the average conditional log-likelihood of the test atoms (CLL), and the area under the precision-recall curve (AUC).
The advantage of the CLL is that it directly measures the quality of the probability estimates produced.
The advantage of the AUC is that it is insensitive to the large number of true negatives (i.e., atoms that are false and predicted to be false).
The precision-recall curve for a predicate is computed by varying the threshold CLL above which an atom is predicted to be true.
The results for MSL on UW-CSE and Cora are much worse than those reported by Kok and Domingos (2005).
They evaluated MSL by computing the probability that a ground atom is true given all other ground atoms as evidence, a much easier task than ours.
We also did not use their domain-specific declarative bias to guide clause construction.
(Notice how LHL is able to overcome the myopia of greedy search without the help of this bias.)
The results for BUSL on IMDB and UW-CSE are also worse than that reported by Mi- halkova and Mooney (2007).
Unlike them, we omitted the equality predicates (as mentioned earlier) because they are superfluous and can be easily predicted with a single unit clause.
We also infer the groundings of Actor/Director and Professor/Student simultaneously, which is a harder task than theirs.
The last two reasons also contribute to MSL's poor performance.
Huynh and Mooney (2008), and Biba et al. (2008a) proposed discriminative structure learning algorithms for MLNs.
These algorithms learn clauses that predict a single target predicate, unlike LHL, which models the full joint distribution of the predicates.
Besides relational pathfinding (Richards & Mooney, 1992), ILP approaches with bottom-up aspects include Muggle- ton & Buntine (1988), Muggleton & Feng (1992), etc.
These approaches are vulnerable to noise in the data, and also only create clauses to predict a single target predicate.
Popescul and Ungar (2004) have also used clustering to improve probabilistic rule induction.
Their approach is limited to logistic regression and SQL rules, uses a very simple clustering method (k-means), and requires pre-specifying the number of clusters.
Craven and Slattery (2001) learn first-order rules for hypertext classification using naive Bayes models as invented predicates.
The idea of lifting comes from theorem-proving in first-order logic.
In recent years, it has been extended to inference in MLNs and other probabilistic languages.
In lifted belief propagation (Singla & Domingos, 2008), the algorithm forms clusters of ground atoms and clusters of ground clauses.
It performs inference over the more compact network of clusters, thereby improving efficiency.
This is analogous to LHL's approach of forming clusters of ground atoms to create a lifted hypergraph in which the search for clauses is more efficient.
We proposed LHL, a novel algorithm for learning MLN structure.
LHL lifts the training data into a compact hypergraph over clusters of constants, and uses relational pathfinding over the hypergraph to find clauses.
Empirical comparisons with two state-of-the-art systems on three datasets show the promise of LHL.
Future work includes: more tightly integrating the components of LHL; scaling it up further; applying LHL to larger, richer domains (e.g., the Web); etc.
