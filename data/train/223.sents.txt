We propose to introduce redundant interconnects for manufacturing yield and reliability improvement.
By introducing redundant interconnects , the potential for open faults is reduced at the cost of increased potential for short faults; overall, manufacturing yield and fault tolerance can be improved.
We focus on a post-processing, tree augmentation approach which can be easily integrated in current physical design flows.
Our contributions are as follows: ¯ We formulate the problem as a variant of the classical 2-edge-connectivity augmentation problem in which we take into account such practical issues as wirelength increase budget, routing obstacles , and use of Steiner points.
¯ We show that an optimum solution can always be found on the Hanan grid defined by the terminals and the corners of the feasible routing region.
¯ We give a compact integer program formulation which, for up to 100 terminal nets, is solved in practical runtime by the commercial optimization package CPLEX.
¯ We give a well-scaling greedy algorithm which has practical run-time up to 1,000 terminals, and comes on the average within 1-2% of the optimum computed by CPLEX.
¯ We give a comprehensive experimental study comparing the solution quality and runtime of our methods with the best reported methods for 2-edge-connectivity augmentation, including a sophisticated heuristic based on minimum-weight branchings [9] and a recent genetic algorithm [14].
Experiments on randomly generated and industry testcases show that our greedy augmentation method achieves significant increase in reliability (as measured by the percentage of biconnected tree edges) with very small increase in wirelength.
For example, on 1,000 terminal nets the average percentage of biconnected tree edges is 34񮽙19% for a wire-length increase of only 1%, and 87񮽙73% for a wirelength increase of 20%.
SPICE simulations on industry routed nets show that non-tree routing has the additional benefit of reducing maximum sink delay by an average of 28񮽙26% compared to Steiner routing, and by an average of 3񮽙72% compared to timing optimized routing.
SPICE simulations further imply that non-tree routing has smaller delay variation due to process variability.
Ever-decreasing feature sizes allow integration of millions of gates on a single chip.
This integration has been enabled in part by low defect density.
However, continued reductions in defect density cannot be expected to continue in the near future.
Sensitivity of parametric (performance) £ This work was partially supported by Cadence Design Systems, Inc., the MARCO Gigascale Silicon Research Center and NSF Grant CCR-9988331.
yield to variability also increases as a result of performance optimization (sizing, etc.) design flows.
New design techniques must be applied to improve manufacturing yield of large-area chips, as yield becomes an ever-greater determinant of design viability [2].
In nanometer technologies, likelihood of back-end-of-line (BEOL) defects (i.e., high-resistance via or interconnect defects) has increased relative to that of front-end-of-line (FEOL) defects (i.e., device defects).
Interconnects are now more likely to cause circuit malfunction and/or performance or reliability degradation.
Two types of catastrophic faults arise due to BEOL defects: open circuit faults or broken interconnects due to loss of mass, and short circuit faults or unintended bridgings between interconnects due to augmentation of mass ( Fig. 1).
Manufacturing yield is directly affected by the size of the critical area, which is the union of all centers of fixed size defects that induce IC faulty behavior.
A typical figure of merit that measures the layout's robustness is obtained as the ratio of the total critical area to the layout area [3].
In this paper we propose to introduce layout level redundancy by constructing non-tree interconnect topologies for manufacturing yield and reliability improvement.
For easier integration within existing flows, we emphasize a post-processing, tree augmentation approach, rather than monolithic non-tree routing construction during global or detailed routing.
In adding redundant wiring, the extra wire creates more critical area for short faults, but the redundancy makes some wires immune to open defects and thus reduces open-fault critical area.
Overall, critical area and manufacturing yield could improve.
We observe that: ¯ The existing tradeoff between short-and open-fault critical areas in the BEOL is conducive to the approach we propose.
For current design methodologies and manufacturing processes, the probability of failure (POF) due to open defects of any given size is 񮽙 3¢ higher than the POF due to short defects of identical size [3].
¯ Previous methods that improve manufacturability or reliability by "decompaction" (see, e.g., [2]) will not be as useful in the future due to heavy restrictions on allowed spacings and pitches in nanometer-scale (񮽙100nm) processes.
On the other hand, our approach would work well even with restricted spacings and pitches (but would require incremental detailed routing capability).
In fact, it can be speculated that introduction of interconnect redundancy improves uniformity of routing resource utilization by forming "functional fill" as opposed to the present "dummy fill" methodologies.
¯ Tree augmentation schemes have been previously proposed in the context of clock routing for delay and skew reduction [16] and critical net routing for delay optimization [11].
However, previous algorithms do not work well in our context, since tree augmentation for manufacturability and reliability improvement involves different tradeoffs than tree augmentation for delay or skew optimization.
Our Manhattan Routing Tree Augmentation (MRTA) formulation resembles the classical edge connectivity augmentation problem [7], in which a given subgraph must be augmented at minimum cost into a 2-edge (or more generally k-edge) connected graph.
1 Finding a minimum open fault short fault Figure 1: An open fault is formed due to loss of mass; a short fault is formed due to augmentation of mass.cost k-edge-connected augmentation is NP-hard even for k 񮽙 2 [4], and much work has been devoted to finding good heuristics and approximation algorithms, see, e.g., [6] and the references therein.
The MRTA formulation differs from the 2-edge-connectivity augmentation (E2AUG) problem in several respects: ¯ While E2AUG is typically formulated for graphs, MRTA has a strong geometric flavor.
We consider routing trees embedded in the Manhattan plane, and allow augmenting paths between any two points on the embedded tree (however, augmenting paths must be fully contained in the feasible routing region defined by routing obstacles and design spacing rules).
In particular, we allow augmenting paths that are "parallel" to (fragments of) tree edges.
¯ To ensure the optimal balance between vulnerability to short-and open-faults, our formulation imposes a budget on the total length of augmentation paths and requires maximizing 2-edge connectivity subject to this constraint.
In contrast, E2AUG requires 100% 2-edge connectivity regardless of the wirelength increase.
¯ To enable higher quality MRTA solutions, we allow augmenting paths with one or both ends on other augmenting paths, i.e., at newly created Steiner points (see Figure 2).
The existing literature on 2-edge-connectivity augmentation focuses almost exclusively on the spanning subgraph formulation of the problem, in which the use of Steiner points is disallowed.Our main contributions are as follows: ¯ We show that an optimum MRTA solution can always be found on the Hanan grid defined by the terminals and the corners of the feasible routing region.
¯ We give integer program formulations for the MRTA problem with and without Steiner points.
The compact integer program for MRTA without Steiner points is solved in practical runtime by the commercial optimization package CPLEX for testcases with up to 100 terminals.
¯ We give a well-scaling greedy algorithm which has practical runtime up to 1,000 terminals, and comes on the average within 1-2% of the optimum computed by CPLEX.
The runtime of our algorithm is O´ND · N 2 Kµµ, where D is the runtime of Dijkstra's algorithm on the Hanan grid for the terminals and the corners of the feasible routing region, N is the number of Hanan grid vertices on the given routing tree, and K is the number of augmenting paths (typically a small fraction of N).
Without routing obstacles the running time reduces to O´N 2 Kµ.
¯ We give a comprehensive experimental study comparing the solution quality and runtime of our methods with the best reported methods for 2-edge-connectivity augmentation, including a sophisticated heuristic based on minimum-weight branchings [9] and a recent genetic algorithm [14].
Experiments on randomly generated and industry testcases show that our greedy augmentation method achieves significant increase in reliability (as measured by the percentage of biconnected tree edges) with very small increase in wirelength.
For example, on 1,000 terminal nets the average percentage of biconnected tree edges is 34񮽙19% for a wirelength increase of only 1%, and 87񮽙73% for a wirelength increase of 20%.
SPICE simulations on industry routed nets show that non-tree routing has the additional benefit of reducing maximum sink delay by an average of 28񮽙26% compared to Steiner routing, and by an average of 3񮽙72% compared to timing optimized routing.
SPICE simulations further imply that non-tree routing has smaller delay variation due to process variability.The rest of the paper is organized as follows.
Section 2 gives the defect model, notations, and the problem formulation.
Section 3 gives the reduction to a Hanan grid, integer program formulations, and the greedy MRTA algorithm.
Section 4 presents experimental results comparing the solution quality and runtime of our methods with two of the best existing methods for 2-edge-connectivity augmentation, as well as results of SPICE simulations showing that non-tree routing has improved interconnect delay and process variation robustness.
Finally, Section 5 gives directions for future research.
Our problem formulation is based on the following defect model:¯ Uniform defect distribution.
We assume that manufacturing defects are uniformly distributed across the die area.
In particular, since we are concerned with routing reliability of large global nets, the uniform defect distribution allows us to ignore defects at the nodes of the routing (which have negligible probability of occurrence), and consider only defects that affect its edges.
¯ Single-defect faults.
The occurrence probability of a fault caused by multiple defects is orders of magnitude smaller than the occurrence probability of a fault caused by a single defect.
We therefore concentrate on reducing routing vulnerability to single defect faults, and measure routing vulnerability to open faults by the total length of bridges (i.e., routing edges whose removal disconnects the net) of the routing.
¯ Open faults only.
For current design methodologies and manufacturing processes (e.g., damascene copper electroplating) the prevailing error mechanism is void formation (open faults).
As noted in [3], the probability of failure (POF) due to open defects of a given size is 񮽙 3¢ higher than the POF due to short defects of identical size.
In particular, design rule correctness guarantees that there will be no short fault induced by a defect of size smaller than the minimum spacing between interconnects and routing obstacles.
In this paper we concentrate on reducing vulnerability to open faults by adding redundant wires.
Vulnerability to short faults is maintained within desired limits by imposing an upper-bound on the amount of added wires.We use the following notations throughout the paper :1.
P 񮽙 set of terminals for the given net 2.
T ´Pµ µ given routing tree over terminals of P Manhattan Routing Tree Augmentation (MRTA) Problem Given:1.
Rectilinear feasible routing region FRR, 2.
Rectilinear Steiner routing tree T within FRR, and 3.
Wirelength budget W .
Find: Set of augmenting paths A within the FRR such that:(a) Total length of augmenting paths is at most W , i.e., l´Aµ 񮽙 W , and (b) Total length l´T µ lbridges´Gµ of edges of T which are nonbridges in G 񮽙 T 񮽙A is maximum.
We begin this section by showing that, despite the seemingly continuous solution space (due to the flexibility in choosing endpoints of augmenting paths), an optimum solution can always be found on the Hanan grid defined by the terminals and the corners of the feasible routing region.
Based on this result, in Section 3.2 we give a compact integer linear program (ILP) formulation for the MRTA problem in which Steiner points are disallowed, and an ILP with exponentially many constraints for the MRTA problem with Steiner points.
Finally, in Section 3.3 we describe an efficient greedy MRTA heuristic.
Theorem 1 There exists an optimum MRTA solution with all augmenting paths embedded on the Hanan grid defined by terminals and corners of the rectilinear feasible routing region.
(i) If the augmenting path a has the other end strictly between l and r on a horizontal edge of G, then, by optimality, it follows that a is a straight line segment.
Sliding a horizontally does not change the total length l´Gµ, and there exists a horizontal sliding direction (either sliding towards l or sliding towards r) which does not increase the bridge length lbridges´Gµ.
By sliding a in this direction we obtain another optimum solution with strictly shorter augmenting path length not embedded on the Hanan grid ( Fig. 3(i)).
(ii) Otherwise, let q be the first point, starting from p, where a crosses again l 񮽙 h 񮽙 r (such a point must exist, since every augmenting path creates a cycle with the rest of G).
The portion of a between p and q can be re-embedded as an L shape along the Hanan grid ( Fig.
3(ii)).
Again, this gives an optimum solution with strictly shorter augmenting path length not embedded on the Hanan grid.
The theorem follows by repeating the above transformations (and the symmetrical vertical transformations) until all augmenting edges are completely embedded on the grid.
Remark.
Notice that Theorem 1 does not guarantee that all augmenting path endpoints are Hanan grid vertices.
It is easy to see that, due to the wirelength budget, endpoints which are not Hanan grid vertices may be required.
However, Theorem 1 implies that this happens only when the augmenting path is parallel to an edge of the augmented tree T .
Theorem 1 implies that the optimum MRTA can be found by considering only augmenting paths which are shortest paths between arbitrary vertices on the Hanan grid H´P 񮽙 Fµ, plus, possibly, augmenting paths which are parallel to (partial) tree edges.We first give the ILP formulation for MRTA without Steiner points.
In this version of the problem augmenting paths a´u񮽙 vµ which are not parallel to tree edges connect points u񮽙 v ¾ T 񮽙HV´P񮽙Fµ.
To (4) is again enforcing the wirelength budget.Ensuring that y u񮽙v is set to 1 only if edgéu񮽙 vµ ¾ T is biconnected requires now an exponential number of constraints.
The formulation is based on the Max-Flow Min-Cut theorem, which guarantees that there exists a path between T u and T v consisting solely of edges e with x e set to 1 if every cut separating T u from T v contains at least one such edge.
Finally, augmenting paths parallel to tree edges are handled using the same method as in (3).
We note that, despite its exponential size, the fractional relaxation of (4) can be solved, e.g., using the Ellipsoid algorithm [5] with a separation oracle that runs a min-cut algorithm for each´u񮽙each´u񮽙 vµ ¾ T to check feasibility of any given solution.
In this section we propose a greedy algorithm for the MRTA problem.
Our algorithm (see Algorithm 1) iteratively adds an augmenting path a´u񮽙 vµ that maximizes the ratio lbridges G ´u񮽙 vµ񮽙l a ´u񮽙 vµ between the length of bridge edges between u and v and the length of the augmenting path.
In every step the algorithm considers only augmenting paths a´u񮽙 vµ that fit within the remaining wirelength budget and have lbridges G ´u񮽙 vµ񮽙l a ´u񮽙 vµ 񮽙 1 (since otherwise it is better to simply use augmenting paths parallel to tree edges).
In order to efficiently compute the best augmenting path in each greedy iteration, we precompute the length of all shortest augmenting paths a´u񮽙 vµ by running Dijkstra We compare our integer program and the greedy MRTA algorithm with two existing algorithms: ¯ A greedy best-drop heuristic in [9] which selects augmentation edges by finding minimum-weight branching in an appropriately defined directed graph.
The best-drop heuristic is reported to find high-quality solutions for a host of connectivity problems, including 2-edge-connectivity augmentation with no wirelength budget.
3 ¯ A genetic algorithm enhanced by using a compact edge set representation, problem specific variation operators and a stochastic local improvement algorithm to reduce solution space [14].
The integer program (3) was solved using the CPLEX 7.0 MIP optimizer, the other three algorithms were implemented in C/C++ and compiled with g++ version 2.95.
All experiments were conducted on a SUN SPARC Ultra-10 workstation with 256MB memory.
For each instance size n ¾ ¾ 5񮽙 10񮽙 50񮽙 100񮽙 500񮽙 1000񮽙 we generated 100 instances uniformly at random from a 10񮽙 000 ¢10񮽙000 grid.
For each instance, aSteiner minimum tree is constructed using the ER heuristic [1] and then augmented (assuming no routing obstacles) by the four compared algorithms.
Table 1 shows the statistics on the number of nodes (including wire turns), number of leaves, and total wirelength of the initial trees.We implement three versions of the greedy MRTA algorithm: Table 1: Initial routing statistics (averages over 100 random instances of each size).
(a) Considering all augmenting paths a´u񮽙 vµ for which u񮽙 v are either terminals, Steiner points, or corners of edges of T .
(b) Considering all augmenting paths a´u񮽙 vµ for which u񮽙 v ¾ T 񮽙 HV´PHV´P 񮽙Fµ, i.e., all paths in (a) plus paths with one or both ends at the projection of a terminal on an edge of T .
(c) Considering all augmenting paths a´u񮽙 vµ for which u񮽙 v ¾ ´T 񮽙Aµ񮽙 V H´P 񮽙Fµ, i.e., all paths in (b) plus paths with one or both ends at the projection of a terminal on an already added augmenting path.We also implemented versions (a) and (b) for the Best-Drop and ILP algorithms.
The (c) version of the greedy MRTA algorithm gives almost identical results to the (b) version in experiments with 1 20% wirelength budget and 5 20 terminals, and we omit its results.
Table 2 gives the number of augmenting paths, percentage of biconnected tree edges, and runtime for versions (a) and (b) of the greedy MRTA, Best-Drop, and ILP algorithms.
The results show that versions (b) achieve better solution quality than versions (a); for the greedy MRTA algorithm version (b) is better than version (a) by as much as 18񮽙54%.
Table 3 gives the results obtained by the greedy MRTA, BestDrop, Genetic, and ILP algorithms when there is no restriction on the added wirelength.The results show that the greedy MRTA algorithm is the fastest of the compared algorithms, scaling up to 1񮽙 000 sinks.
For 1 20% wirelength budgets the greedy MRTA algorithm is also outperforming the other heuristics in solution quality, finding solutions within 1-2% of the optimum computed by CPLEX for all wirelength budgets.
The much slower Best-Drop and Genetic heuristics outperform greedy MRTA only for unlimited wirelength budget and small number of sinks, and then by a very small amount.
As expected, MRTA biconnectivity increases with the wirelength budget, e.g., it increases from 34񮽙19% under 1% wirelength budget to 87񮽙73% under 20% wirelength budget for 1000 sink instances.
Interestingly, the biconnectivity also increases significantly with the number of sinks, e.g., from 1񮽙12% for 5 sinks to 34񮽙19% for 1000 sinks for 1% wirelength budget.
Table 4 shows statistics for the first augmenting path added by greedy MRTA.
This path has a ratio between biconnected length and wirelength increase as large as 80 for 1,000 sinks, and already achieves a significant improvement in routing reliability at a very low wirelength increase cost.The impact of non-tree augmentation on maximum delay and delay variation due to process variability was verified by running SPICE simulation on two sets of 14 instances each.
The first set consisted of non-critical nets extracted from a recent industry design and routed by Cadence WarpRouter using minimum-area optimization, while the second set consisted of randomly generated nets routed using the timingdriven P-Tree algorithm [10] with buffer insertion disabled and identical sink required-arrival times.
Each interconnect was represented by a Π model and driven by a 1񮽙8V voltage source with a ramped input signal of 150ps slew time.
50% delay from the source to each sink was simulated based on 180nm ITRS predictive technology model beta version [8] with the following parameters: unit wire resistance r 񮽙 0񮽙040Ω񮽙µm, unit wire capacitance c 񮽙 0񮽙259 f F񮽙µm, sink capacitance c t 񮽙 63񮽙358 f F and source driving resistance R b 񮽙 139񮽙434Ω.
In computing robustness to process variation we assumed 100% wire width correlation.
This models systematic variation sources such as lens aberrations which cover 5-10mm ranges [13,12], i.e., ranges that are larger than those covered today by unbuffered interconnect.
We uniformly varied wire width by dw 񮽙 6񮽙67% from the nominal value, and computed unit length wire capacitance using the formulas in [15] for parallel lines between two planes, including area, fringe, and coupling capacitances.
The maximum 50% sink delay and its variation in percents are reported for the two sets of test instances in Tables 5 and 6.
In these tables, the results under 0% wirelength budget correspond to the initial (area, respectively timing-optimized) routing trees.
Results for non-critical nets (Tables 5) show that non-tree augmentation continuously reduces maximum source-to-sink delays in most of the instances in our experiments (except net10).
An average of 28񮽙26%, and maximum of 62񮽙15% delay reduction can be achieved (for net12) with 20% wirelength budget.
Non-tree augmentation also decreases process variation effect in most non-critical instances (except net4).
An average of 13񮽙79%, and maximum of 28񮽙86% delay variation reduction is observed (for net12) when comparing nominal wire width w and w dw wire width.
Results for timing-optimized interconnect trees (Table 6) show that non-tree augmentation still decreases the maximum sourceto-sink delay by an average of 3񮽙72% and a maximum of 39񮽙04%.
However, in some instances maximum source-to-sink delay can increase by as much as 6񮽙47% due to non-tree augmentation.
Non-tree augmentation decreases process variation in all the timing-optimized instances, with an average of 3񮽙24%, maximum of 12񮽙17% and minimum of 0񮽙09%.
WL #SINK %WL %BI RATIO CPU Budget INC CONN SEC 5 0.22 0.34 1.54545 0.00 10 0.51 0.58 1.13725 0.
An explanation of the above results is that non-tree augmenting paths can decrease interconnect source-to-sink delay by forming shorter connections, but can also increase interconnect delay due to increased capacitance.
The probability for non-tree augmentation to form a shorter connection between the source and a critical sink is smaller in timingoptimized interconnect, which results in smaller improvements in maximum delay and delay variability.
In general our non-tree augmentation scheme achieves better improvements in interconnect delay and variability for non-critical, area-optimized interconnects.
Table 6: Maximum SPICE sink delays (ns) and delay variations (percents) under dw 񮽙 6񮽙67% wire width variation for 14 randomly generated nets with 15 sinks each.
Initial trees are constructed using the P-Tree algorithm [10] with identical sink required-arrival times.
- - - - - - - - - - - - - - In this paper we have proposed the introduction of redundant interconnect as a post-routing optimization for manufacturing yield, reliability, and process variation robustness improvement.
We have formulated the problem as a variant of the classic NP-hard 2-edge connectivity augmentation (in a Manhattan plane and under a given wirelength budget) and proposed both practical integer program formulations and a well-scaling greedy algorithm which comes within 1-2% of the optimum on the average.
We have presented experimental results on both randomly generated and industry testcases with up to 1,000 terminals showing that: ¯ Our methods outperform best known 2-edge connectivity augmentation algorithms in both solution quality and runtime for the practically relevant wirelength budgets.
¯ Significant increase in reliability (as measured by the percentage of biconnected tree edges) and simultaneous decreases in maximum sink delay and delay variation due to process variability can be achieved with very small increases in wirelength.
Our ongoing research efforts include algorithms for biconnectivity augmentation of buffered trees, simultaneous augmentation of multiple routed nets, and chip-level evaluation of the proposed augmentation algorithms.
