We previously developed an enhanced Role-Based Access Control (RBAC) model to support information access management in the context of team collaboration and workflow.
We report in this paper a generic system framework to implement the enhanced RBAC with three functional layers: (1) encoding of access control policies; (2) interpretation of the encoded policies; and (3) application of policies to specific cases and scenarios for information access management.
Based on this system framework, we have successfully applied the enhanced RBAC model to the New York State HIV Clinical Education Initiative (CEI) for coordination of clinical education programs.
An evaluation has shown that the enhanced RBAC can be effectively used for information access management in collaborative processes.
Future work includes extension of this system framework to support the continuous development of the enhanced RBAC and deployment of it to other domain applications for clinical education, biomedical research, and patient care.
Patient care, biomedical research, and clinical education depend on coordination and collaboration among partners from multiple disciplines in specific workflow contexts [1- 7].
Information systems can be effectively used to facilitate team collaboration and workflow management [3,[5][6][7][8][9][10][11][12][13][14][15].
To develop information systems to present the right information to the right people at the right time, information access control is a critical requirement.We previously developed an enhanced Role-Based Access Control (RBAC) model [16] to facilitate information access management in the context of team collaboration and workflow.
Once the access policies are defined for specific applications based on the enhanced RBAC, we need to implement them to ensure that these policies are correctly interpreted and applied such as to grant particular users in certain roles the appropriate scope and level of access to the right information in specific workflow context to support team collaboration.Many previous efforts on implementation of access control were based on an ad hoc approach pertinent to only specific applications [17][18][19].
In order to generalize to multiple domains, it is essential to develop a system framework for implementation of the core components of an access control model that are independent of specific applications.
This approach was used by a few research to implement some well-defined access control models [20- 22].
Since the enhanced RBAC model is unique in several aspects (for example, structures used to define the context of team collaboration and workflow) [16], its implementation needs to address these special challenges.In this paper, we report the development of a system framework for implementation of the enhanced RBAC model.
This system framework includes three functional layers: (1) encoding of information access control policies; (2) interpretation of the encoded policies; and (3) application of the policies to specific cases and scenarios for information access management.
With these functional layers, the system framework can provide a flexible platform to develop and to implement policies for information access management in collaborative processes.
To support management of information access, to simulate application of access control policies, and to present the access permissions in specific cases and scenarios, we have developed a demonstration tool with two primary functions: (1) selecting the combinations of users, roles, objects, operations, and workflow statuses; and (2) displaying the associated constraints and access permissions.
We will use the New York State HIV Clinical Education Initiative (CEI) [18] as a specific example to illustrate the use of this system framework for implementation of information access control policies to facilitate collaborative processes.The remainder of this paper is organized as follows.
We first review the enhanced RBAC model in Section 2.
We then provide an overview of the system architecture in Section 3.
We describe the use of this system framework for access control policy encoding and interpretation in Section 4 and 5.
We present a case study to apply the enhanced RBAC model to the CEI project in Section 6.
We report the development of the demonstration tool in Section 7.
We highlight the findings from an evaluation study in Section 8.
We discuss the contributions, limitations, and directions of future work in Section 9.
We conclude the paper in Section 10.
Previous research have proposed various access control models, such as Access Matrix [23], Rule-Based Access Control [24], Discretionary Access Control (DAC) [25], Mandatory Access Control (MAC) [25], Attribute-Based Access Control (ABAC) [26], Role-Based Access Control (RBAC) [27], and many others [19][20][21][22]].
Yet few of these works have addressed information access management in the context of team collaboration and workflow; neither have them been applied for coordination of clinical education programs.
To address these specific needs, we have proposed the enhanced RBAC model [16] to support information access management in collaborative processes.
The enhanced RBAC model [16] extends the core RBAC [51] through: (1) formulation of specific types of universal constraints to bind on user-role assignments, role-permission assignments, and access permissions; (2) definition of bridging entities and contributing attributes to support access management in collaborative environment; (3) extension of access permissions to include workflow context; and (4) synthesis of a role-based access delegation model targeting on specific objects to balance between flexibility and need-based access.
In particular, we use the universal constraints to bundle the bridging entities, contributing attributes, and workflow contexts.
These universal constraints are applied not only to restrict users' access but also to support team collaboration and workflow management (see [16] for details).
Figure 1, the enhanced RBAC model is comprised of six classes of elements: (1) users, (2) roles, (3) permissions, which can be further decomposed into: (4) objects, (5) operations, and (6) workflow statuses.
With the inclusion of the workflow context into the enhanced RBAC model, we can define access permissions based on individual or classes of workflow stages.
Through the introduction of universal constraints, we can define access policies to share information among collaborating parties with the bridging entities and contributing attributes.
For example, we have defined temporal constraint for the CEI project to regulate information access at specific stages of training workflow; in addition, we have defined geographical constraint, topic constraint, and format constraint to facilitate information sharing among collaborating training centers based on location, content, and format of a training session.
It is important to note that the universal constraint is an open, configurable structure.
Additional types of constraints can be included to meet certain application requirements without breaking the core RBAC structure.
Detailed descriptions of the enhanced RBAC can be found in a previous paper [16].
To implement the enhanced RBAC model, we designed a system architecture with three layers: (1) Policy Encoding Layer, where policies regarding information access control for a specific application can be defined; (2) Policy Interpretation Layer, where the encoded access policies are interpreted based on specific combinations of users, roles, objects, operations, and workflow statuses as well as the universal constraints bound on them; and (3) Access Control Application Layer, where the encoded access control policies are applied to specific cases or scenarios to make decisions on granting or denying access.As illustrated in Figure 2, these three layers are functioning independently but meanwhile closely integrated to each other through information flows.
Specifically, Layer (1) is where the system administrators specify access control policies through a policy editor.
The outputs from this process are the encoded policies that are fed to Layer (2) once they are validated.
Layer (2) is where the encoded policies are interpreted in specific application contexts.
During this process, it requires particular application contextual information that comes from Layer (3).
The results of policy interpretation in Layer (2) are then fed to Layer (3), where decisions on granting or denying access to specific cases and scenarios are made.
To support policy encoding with the continuous development of the enhanced RBAC model, we have employed a three-level encoding schema to differentiate the core RBAC model, the model extension, and the policy instances.
To interpret the encoded policies, we have leveraged a Java-based rule engine that can directly retrieve and process the encoded access policies from the policy encoding layer.
To handle the workflow management, we assume there is an external workflow engine that can be integrated with the policy interpretation layer.
Finally, the application layer implements system interfaces to retrieve application contextual information such as users, roles, objects, and operations.
We describe the details of each layer in the following sections.
To encode access control policies, we adopted an existing tool, Protégé (version 3.4.7) [52], as the editor.
Protégé provides a flexible platform and a rich technical environment for knowledge acquisition and ontology development.
We selected it as the editor mainly because of three reasons: (1) it supports a layered approach for model definition, which is helpful for continuous development of the enhanced RBAC model; (2) it differentiates ontological models from instances, which is a nice feature to support the development of the general enhanced RBAC model and the implementation of the specific access control policies when applied to particular domains and problems; and (3) it incorporates many addons, in particular, the Semantic Web Rule Language (SWRL) [53,54] and the JESS rule engine [55,56], which can be adopted for encoding and interpretation of the universal constraints.Encoding of specific access control policies is based on the enhanced RBAC model.
To build the enhanced RBAC in Protégé, we employed a two-level structure, with the core RBAC model as the basis and the extended model encoded on top of it.
The core RBAC schema defines five basic components of the RBAC model, including users, roles, permissions, operations, and objects.
The extended model integrates additional representation elements such as universal constraints, workflow statuses, and constructs that are used for access delegation and revocation.
With this two-level structure, we can easily support the continuous development of the enhanced RBAC model, for example, through defining new types of universal constraints.
Once the enhanced RBAC is built, we can encode access control policies as instances of particular model elements.
These policies can be grouped together based on individual or classes of applications.
Figure 3 is a screenshot of using the Protégé tool to encode the enhanced RBAC model and the access control policy instances for the CEI project.When defining access control policies for specific applications, we typically encode these policies as universal constraints.
In the enhanced RBAC model, the universal constraints are defined in first-order predicate logic [16].
To encode these constraints in Protégé, we adopted a Protégé add-on [57] that incorporates a SWRL editor and a JESS rule engine for rule execution.
A SWRL rule contains an antecedent part, which is referred to as the body of the rule, and a consequent part, which is referred to as the head of the rule.
An example of an access control policy from the CEI project is shown in Figure 4(a).
Translated into English, it means:For any: role (training center) r, training request req, workflow status w i , operation write, training course course, training format format, agency agency, and location loc (1) the training request req is in workflow status w i ;(2) the agency agency makes a training request req on training course course in training format format; (3) the agency agency is at location loc; (4) the role (training center) r is in charge of location loc; (5) the role (training center) r is in charge of training course course; and (6) the role (training center) r is in charge of training format format Then:The role (training center) r should have 'write' permission to training request req in workflow status w i .
Once encoded in SWRL through Protégé, this rule will be in the format shown in Figure 4(b).
Here the arguments in the rule, such as ?
req and ?
course, are directly mapped to the related classes (model elements) in Protégé and their instances can be easily retrieved by a rule engine for interpretation.
As described in Section 4, access control policies are encoded as SWRL rules.
To interpret these policies, we use the JESS engine for rule execution.
JESS is a rule engine and scripting environment written in Java programming language [55].
It is small, light-weight, and fast.
JESS is a mature system that has been used to develop a broad range of applications [58][59][60][61].
It has already been integrated with Protégé and SWRL [57].
∀r ∈ ROLE, ∀req ∈ REQUEST, ∀wi ∈ WORKFLOWSTATUSI, ∀opw ∈ OPERATIONWRITE, ∀course ∈ COURSE, ∀format ∈ FORMAT, ∀agency ∈ AGENCY, ∀loc ∈ LOCATION:role-permission (r,req,wi,opw)  status(req,wi) ⋀ (b) in SWRL For a specific SWRL rule, the JESS engine can map its arguments directly to the corresponding Protégé classes, retrieve the instances under these classes, apply the logic of the SWRL rule, and generate new instances (typically userrole assignments and role-permission assignments) as the consequence of the execution.
With these instances of user-role assignments and role-permission assignments, we can judge whether a specific user should be assigned to a particular role; we can also decide whether a specific role should have access to a particular object at certain stages of workflow with a distinctive operation.
This entire process of argument mapping, rule interpretation, and new instance generation is built together as Protégé add-ons.
A limitation of SWRL and JESS is that they only support monotonic reasoning and hence cannot delete existing instances in Protégé.
This presents a challenge to interpretation of access control policies when access revocation is required (and thus need to delete specific instances of role-permission assignments).
To address this issue, we have developed a separate Protégé add-on that is specifically used for access revocation.
This Protégé addon searches and removes all relevant instances when interpreting a rule to revoke access permissions.
The application layer is where the access control policies are applied to specific cases and scenarios to make decisions on granting or denying access.
This layer includes four major components: (1) a policy enforcement module, (2) an access portal, (3) an object portal, and (4) an object storage (see Figure 2).
The access portal provides an interface for system users in particular roles.
The policy enforcement module is linked with the policy interpretation layer to make decisions to grant or to deny access based on users, roles, objects, workflow statuses, operations, and constraints.
The object portal provides a mechanism to generate new objects and to retire old objects.
Once an object is generated, it stays in the object storage, where the policy enforcement module can search based on criteria defined in universal constraints.
It is important to note that the specific functions and procedures defined at this layer may differ from application to application.We use the CEI project [18] as an example to illustrate the functions of the components at the application layer.
Figure 5.
In terms of training workflow, the entire lifecycle of a CEI training session includes five stages: request received, arrangement pending, training scheduled, training completed, and reporting completed.The level of information access among the collaborating training centers may change at different stages of a training session.
Thus, the access control policies need to be defined based on individual or classes of workflow stages (see Figure 1).
When applying the access control policies to a specific case and scenario, we need to manage the change of access permissions along the training workflow through the underlying access control system.
Collaboration among CEI Centers To apply the enhanced RBAC model to CEI for information access management, we mapped the components of the enhanced RBAC to specific entities in the CEI program.
These mappings include: (1) training session  object, (2) training center  role, (3) employee of a training center  user, and (4) stage of a training session  workflow status.
We defined two types of operations, 'read' (reviewing training data) and 'write' (documenting training activities, inviting other centers for collaboration, etc.).
Through the access portal and object portal, we imported the CEI program data for the period between April 1, 2011 and June 30, 2011, including 409 agencies, 104 training sessions, 17 users (employees), 6 roles (training centers), and 44 user-role assignments.
These data are transformed as Protégé instances.
Through the policy enforcement module and the execution of the universal constraints encoded as SWRL rules, we can generate all role-permission assignments that define the level of access to specific training sessions by particular training centers in certain stages of training workflow.
We report the findings from an evaluation study in Section 8.
We have developed a demonstration tool for two purposes:(1) to provide a user interface to support the management of information access; and (2) to present access permissions under specific combinations of users, roles, objects, operations, and workflow statuses.
We implemented this tool as a Java application, with a screenshot shown in Figure 6.
The user interface of the demo tool includes four portions: (1) Portion A: lists of all available users, roles, objects, and workflow statuses; (2) Portion B: selections of specific users, roles, objects, and workflow statuses for examinations of information access management; (3) Portion C: execution results after applying the access control policies defined in the enhanced RBAC to the selected users, roles, objects, and workflow statuses; and (4) Portion D: execution traces and system logs.
Here items in Portion B are a subset selected from Portion A.
Once the items in Portion B are selected, we can click the "run" button to generate the results in Portion C.
These results include: (1) all validated predicates (relations among users, roles, objects, operations, workflow statuses, and other entities) defined in the system; (2) all validated user-role mappings and role-permission mappings; and (3) assignments of permissions to users under specific roles at particular workflow stages.
With these functions, the demo tool can be effectively used to examine access permissions in specific cases and scenarios.
To evaluate the effectiveness of using the enhanced RBAC model for information access management in collaborative processes, we implemented the model with the system framework described above and applied it to the CEI project.
We designed a cross-sectional study [62] with 9152 study cases and performed two sets of measurements:(1) degree of agreement between the results generated by the enhanced RBAC and those generated by a control system (CEI Admin [16]) in production use; and (2) performance of the enhanced RBAC based on a reference standard developed by a human expert panel.
With the kappa [62] value in the range of 0.80-0.89, the enhanced RBAC has demonstrated a high level of agreement with the control system.
When evaluated against the reference standard, the enhanced RBAC model has achieved sensitivities in the range of 97%-100%, specificities at the level of 100%, and accuracies in the range of 98%-100%.
Error analyses have shown the imperfect sensitivity was due to mistakes in preparing invitation data for the study cases to feed the enhanced RBAC.
Additional details of this evaluation study can be found elsewhere [63].
Using a layered approach to implement access control policies have been reported by others [8,33,45,64].
For example, implementation of the eXtensible Access Control Markup Language (XACML) [64] was based on a series of function modules/points such as Policy Administration Point (PAP), Policy Decision Point (PDP), Policy Enforcement Point (PEP), and Policy Information Point (PIP).
However, the early versions of XACML did not provide native support to RBAC.
Even the specialized XACML profiles were not able to support many relevant constraints.
To address this issue, there was a previous exploration to introduce XACML+OWL, a framework that integrates OWL ontologies and XACML policies, to support RBAC [65].
In our implementation of the enhanced RBAC, the system framework and its functional layers can be mapped to many functional modules in XACML implementation.
Specific mappings include: the Protégé environment in the enhanced RBAC is functioning as PAP; the JESS engine and revocation add-on are functioning as PDP; the policy enforcement module in Application Layer is functioning as PEP; and the Access Portal and Object Portal in Application Layer are functioning as PIP.
Beyond the standard XACML implementation, we have defined unique structures in the enhanced RBAC system framework.
These structures including: (1) an external workflow engine to manage workflow context; (2) a three-level schema for definition of access control policies to differentiate the core RBAC, the extension of RBAC, and the policy instances; and (3) specific entities and relations defined for particular applications, which are processed through the Context Handler.
The mappings between the functional components of the enhanced RBAC system framework and the standard XACML implementation are shown in Figure 7.
Here the integration with an external workflow engine in (1) can support access management in specific context of workflow, which is an enhancement of the core RBAC model.
The three-level schema for definition of access control policy in (2) can facilitate the continuous development of the enhanced RBAC model.
The application-specific entities and relations defined in (3) can custom-tailor the system framework to particular domain applications for effective implementation of access control policies.
These features define the unique contributions of this work.
To manage information access for team collaboration, we have defined bridging entities and contributing attributes [16] and incorporated these concepts as specific types of universal constraints.
From the CEI project, we have developed geographical constraints, training topic constraints, and training format constraints to model specific types of contributing attributes.
Additional types of universal constraints can and will be identified from other applications.
Many types of universal constraints (including the ones identified from the CEI project) can be generalized and applied to a group of similar applications.
As a long term goal, we plan to assemble these constraints to formulate a UNIversal Constraint ONtology (UNICON), which can be utilized as a knowledge base to drive information access management in a variety of situations [16].
Since Protégé is an ontology development tool, its incorporation into the system framework for the enhanced RBAC implementation will effectively support this long term goal.To leverage the reported system framework to implement the enhanced RBAC model, we used the CEI project as a specific example.
Since CEI has complex requirements on information access in the context of team collaboration and workflow management, it is a perfect selection to examine the feasibility of this system framework for effective implementation of the enhanced RBAC model.
Meanwhile, the generalizability of the system framework for implementation of the enhanced RBAC model needs to be tested in other applications.
Our future work includes applications of this system framework for additional domain problems in clinical education, biomedical research, and patient care.
We have successfully developed a system framework to implement the enhanced RBAC model for information access management in collaborative processes.
An initial evaluation has shown that this system framework can be effectively used for coordination of clinical education programs and to manage information access in the context of team collaboration and training workflow.
Future work includes extension of this system framework to support the continuous development of the enhanced RBAC model and deployment of it to other domain applications for clinical education, biomedical research, and patient care.
The CEI project is sponsored by the New York State Department of Health AIDS Institute.
We would like to thank the other CEI team members at the University of Rochester Medical Center (Dr. Amneris Luque, Terry Doll, Monica Barbosu, and Thomas Della Porta) for their contributions to develop the CEI Admin system and to evaluate the enhanced RBAC model.
We would also like to thank CEI program staff (Howard Lavigne, Dr. Cheryl Smith, Lyn Stevens, Dr. Bruce Agins) and colleagues from other CEI Training Centers for their support.
