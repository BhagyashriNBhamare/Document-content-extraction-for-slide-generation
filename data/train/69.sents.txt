We give an algorithm for deciding productivity of a large and natural class of recursive stream definitions.
A stream definition is called 'productive' if it can be evaluated continuously in such a way that a uniquely determined stream is obtained as the limit.
Whereas productivity is undecidable for stream definitions in general, we show that it can be decided for 'pure' stream definitions.
For every pure stream definition the process of its evaluation can be modelled by the dataflow of abstract stream elements, called 'pebbles', in a finite 'pebbleflow net(work)'.
And the production of a pebbleflow net associated with a pure stream definition , that is, the amount of pebbles the net is able to produce at its output port, can be calculated by reducing nets to trivial nets.
In functional programming, term rewriting and λ-calculus, there is a wide arsenal of methods for proving termination such as recursive path orders, dependency pairs (for term rewriting systems, [15]) and the method of computability (for λ-calculus, [13]).
All of these methods pertain to finite data only.
In the last two decades interest has grown towards infinite data, as witnessed by the application of type theory to infinite objects [2], and the emergence of coalgebraic techniques for infinite data types like streams [11].
While termination cannot be expected when infinite data are processed, infinitary notions of termination become relevant.
For example, in formal frameworks for the manipulation of infinite objects such as infinitary rewriting [7] and infinitary λ-calculus [8], basic notions are the properties WN ∞ of infinitary weak normalisation and SN ∞ of infinitary strong normalisation [9].
In the functional programming literature the notion of 'productivity' has arisen, initially in the pioneering work of Sijtsma [12], as a natural strengthening of production functions is too restrictive to capture the behaviour of commonly used stream operations like even, dup, zip and so forth.
Therefore he develops an approach allowing arbitrary production functions β f : N r → N, having the only drawback of not being automatable in full generality.
Coquand [2] defines a syntactic criterion called 'guardedness' for ensuring productivity.
This criterion is too restrictive for programming practice, because it disallows function applications to recursive calls.
Telford and Turner [14] extend the notion of guardedness with a method in the flavour of Wadge.
However, their approach does not overcome Sijtsma's criticism.
Hughes, Pareto and Sabry [5] introduce a type system using production functions with the property that β f (a·x+b) = c·x+d for some a, b, c, d ∈ N.
This class of functions is not closed under composition, leading to the need of approximations and a loss of power.
Moreover their typing system rejects definitions like M = a : b : tail(M), where ':' is the infix stream constructor, because tail is applied to the recursive call.
Buchholz [1] presents a formal type system for proving productivity, whose basic ingredients are, closely connected to [12], unrestricted production functions β f : N r → N.
In order to obtain an automatable method, Buchholz also devises a syntactic criterion to ensure productivity.
This criterion easily handles all the examples of [14], but fails to deal with functions that have a negative effect 'worse than tail'.
In this section the concepts of 'stream constant specification' (SCS) and 'stream function specification' (SFS) are introduced.
We use a two-layered set-up, which is illustrated by the well-known definition M = 0:1:zip(tail(M), inv(tail(M))) of the Thue-Morse sequence.
This corecursive definition employs separate definitions of the stream functions zip and tail, contained in Ex.
1 below, and of the definition inv(x:σ) = (1−x):inv(σ) of the stream function inv.
Stream constants are written using uppercase letters, stream and data functions are written lowercase.In order to distinguish between data terms and streams we use the framework of many-sorted term rewriting.
Let S be a finite set of sorts.
An S-sorted set A is a family of sets (A s ) s∈S .
An S-sorted signature Σ is a set of function symbols, each having a fixed arity ar(f ) ∈ S * ×S. Let X be an S-sorted set of variables.
The Ssorted set of terms Ter (Σ, X) is inductively defined by: X s ⊆ Ter (Σ, X) s for all s ∈ S and f (t 1 , . . . , t n ) ∈ Ter (Σ, X) s whenever f ∈ Σ with arity s 1 · · · s n , s and t i ∈ Ter (Σ, X) si .
An S-sorted term rewriting system (TRS) over an Ssorted signature Σ is an S-sorted set R where R s ⊆ Ter (Σ, X) s × Ter (Σ, X) s for all s ∈ S, satisfying the standard TRS requirements for rules.
An S-sorted TRS is called finite if both its signature and the set of all of its rules are finite.In the sequel let S = {d , s} where d is the sort of data terms and s is the sort of streams.
We say that a {d , s}-sorted TRS Σ, R is a stream TRS if there exists a partition of the signature Σ = Σ d Σ sf Σ sc {:} such that the arity of the symbols from Σ d is in d * , d , for Σ sf in {s, d } * , s, for Σ sc in , s and ':' has arity ds, s. Accordingly, the symbols in Σ d are referred to as the data symbols, ':' as the stream constructor symbol, the symbols in Σ sf as the stream function symbols and the symbols in Σ sc as the stream constant symbols.
Without loss of generality we assume that for all f ∈ Σ sf the stream arguments are in front.
That is, f has arity s rs d r d , s for some r s , r d ∈ N; we say that f has arity r s , r d for short.
Definition 1.
Let T = Σ, R be a finite stream TRS with Σ = Σ d Σ sf {:} and a partition R = R d R sf of its set of rules.
Then T (together with these partitions) is called a weakly guarded stream function specification (SFS) if:(i) T is orthogonal (i.e. left-linear, non-overlapping redex patterns, see [15]).
(ii) Σ d , R d is a strongly normalising TRS.
(iii) For every stream function symbol f ∈ Σ sf there is precisely one rule in R sf , denoted by ρ f , the defining rule for f. Furthermore, for all f ∈ Σ sf with arity r s , r d , the rule ρ f ∈ R sf has the form:f((x 1 : σ 1 ), . . . , (x rs : σ rs ), y 1 , . . . , y r d ) → uwhere x i :σ i stands for x i,1 :. . .:x i,ni :σ i , and u is one of the following forms:u ≡ t 1 : . . . : t m f : g(σ π f (1) , . . . , σ π f (r s ) , t 1 , . . . , t r d ),(1)u ≡ t 1 : . . . : t m f : σ i (2)Here, the terms t 1 , . . ., t m f ∈ Ter (Σ d ) are called guards of f. Furthermore, g ∈ Σ sf with arity r s , r d , π f : {1, . . . , r s } → {1, . . . , r s } is an injection used to permute stream arguments, n 1 , . . . , n rs , m f ∈ N, and 1 ≤ i ≤ r s .
In case (1) we write f g, and say f 'depends on' g. (iv) Every stream function symbol f ∈ Σ sf is weakly guarded in T , i.e. on every dependency cycle f g · · · f there is at least one guard.It is easy to show that every function symbol f ∈ Σ sf in an SFS defines a unique function that maps stream arguments and data arguments to a stream, which can be computed, for given infinite stream terms u 1 , . . . , u rs in constructor normal form (that is, being of the form s 0 :s 1 :s 2 :. . .) and data terms t 1 , . . . , t r d , by infinitary rewriting as the infinite normal form of the term f(u 1 , . . . , u rs , t 1 , . . . , t r d ).
Note that the definition covers a large class of stream functions including tail, even, odd, zip, add.
However, the function head defined by head(x : σ) = x, possibly creating 'look-ahead' as in the well-defined example S = 0 : head(tail 2 (S)) : S from [12], is not included.
Now we are ready to define the concept of 'stream constant specification'.
Definition 2.
Let T = Σ, R be a finite stream TRS with a partition Σ = Σ d Σ sf Σ sc {:} of its signature and a partition R = R d R sf R sc of its set of rules.
Then T (together with these partitions) is called a pure stream constant specification (SCS) if the following conditions hold:(i) Σ d Σ sf {:}, R d R sf is an SFS.
(ii) Σ sc = {M 1 , .
.
.
, M n } is a non-empty set of constant symbols, andR sc = {M i → rhs Mi | 1 ≤ i ≤ n, rhs Mi ∈ Ter (Σ) s }.
The rule ρ Mi := M i → rhs Mi is called the defining rule for M i in T .
Note that an SCS T is orthogonal as a consequence of (i) and (ii).
An SCS is called productive if every M ∈ Σ sc has a stream of data terms as infinite normal form (an infinite constructor normal form).
Note that orthogonality implies that infinite normal forms are unique.Example 1.
Let T D = Σ d Σ sf Σ sc {:}, R d R sf R scbe the SCS with Σ d = {s, 0, a}, Σ sf = {tail, even, odd, zip, add}, Σ sc = {D}, and R sc consists ofD → 0 : 1 : 1 : zip(add(tail(D), tail(tail(D))), even(tail(D))), R sf consists of the rules tail(x : σ) → σ even(x : σ) → x : odd(σ) odd(x : σ) → even(σ) zip(x : σ, τ ) → x : zip(τ, σ) add(x : σ, y : τ ) → a(x, y) : add(σ, τ )and R d = {a(x, s(y)) → s(a(x, y)), a(x, 0) → x}.
We introduce nets as a means to model SCSs and to visualise the flow of stream elements.
As our focus is on productivity of SCSs, we are interested in the production of such a net, that is, the number of stream elements produced by a net.
Therefore, stream elements are abstracted from in favour of occurrences of the symbol •, which we call pebble.
The nets we study are called pebbleflow nets; they are inspired by interaction nets [10], and could be implemented in the framework of interaction nets with little effort.
First we give an operational description of pebbleflow nets, explaining what the components of nets are and the way how the components process pebbles.
To ease manipulation of and reasoning about nets, we employ term representations.
Term constructs corresponding to net components, as well as the rules governing the flow of pebbles through a net, are given on the fly.
Their formal definitions are given in Subsec.
3.2.
Finally, in Subsec.
3.3, we define a production preserving translation of pure stream specifications into rational nets.We denote the set of coinductive natural numbers by N = N ∪ {∞} and the numerals representing the elements of N by n = s n (0) for n ∈ N, and ∞ = s ω .
Wires The directed edges of a net, along which pebbles travel, are called wires.
Wires are idealised in the sense that there is no upper bound on the number of pebbles they can store; arbitrarily long queues are allowed.
Wires have no counterpart on the term level; in this sense they are akin to the edges of a term tree.
Wires connect boxes, meets, fans, and sources, that we describe next.Meets A meet is waiting for a pebble at each of its input ports and only then produces one pebble at its output port, see Fig. 1.
Put differently, the number of pebbles a meet produces equals the minimum of the numbers of pebbles available at each of its input ports.
Meets enable explicit branching; they are used to model stream functions of arity > 1, as will be explained in the part "Boxes and gates" below.
A meet with an arbitrary number n ≥ 1 of input ports is implemented by using a single wire in case n = 1, and if n = k + 1 with k ≥ 1, by connecting the output port of a 'k-ary meet' to one of the input ports of a (binary) meet.N 2 N 1 N 2 N 1 Fig. 1.
(•(N1), •(N2)) → •((N1, N2)) N N Fig. 2.
µx.
•(N (x)) → •(µx.N (•(x)))Fans The behaviour of a fan is dual to that of a meet: a pebble at its input port is duplicated along its output ports.
A fan can be seen as an explicit sharing device, and thus enables the construction of cyclic nets.
More specifically, we use fans only to implement feedback when drawing nets; there is no explicit term representation for the fan in our term calculus.
In Fig. 2 a pebble is sent over the output wire of the net and at the same time is fed back to the 'recursion wire(s)'.
Turning a cyclic net into a term (tree) means to introduce a notion of binding; certain nodes need to be labelled by a name (µx) so that a wire pointing to that node is replaced by a name (x) referring to the labelled node.
Sources A source has an output port only, contains a number k ∈ N of pebbles, and can fire if k > 0.
In Sec. 4 we show how to reduce 'closed' nets to sources.
Boxes and Gates A box consumes pebbles at its input port and produces pebbles at its output port, controlled by an infinite sequence σ ∈ {+, −} ω associated with the box.
This consumption/production behaviour of the box is then also be expressed by the 'production function' β σ : N → N of the box, see Fig. 5.
For example, consider the unary stream function dup, defined as follows, and its corresponding 'I/O sequence':dup(x : σ) = x : x : dup(σ) −++−++−++ . . .which is to be thought of as: for dup to produce two outputs, it first has to consume one input, and this process repeats indefinitely.
Intuitively, the symbol − represents a requirement for an input pebble, and + represents a ready state for an output pebble.
Pebbleflow through boxes is visualised in Figs. 3 and 4.
Definition 3.
The set ± ω of I/O sequences is defined as the set of infinite sequences over the alphabet {+, −} that contain an infinite number of +'s: Further, we define the set ± ω rat ⊆ ± ω of rational I/O sequences.
A sequence σ ∈ ± ω is called rational if there exist lists α, γ ∈ {+, −} * such that σ = αγ, where γ is not the empty list and γ denotes the infinite sequence γγγ . . ..
The pair α, γ is called a rational representation of σ.
± ω := {σ ∈ {+, −} ω | ∀n. ∃m. σ(n + m) = +} N N σ +σTo model stream functions of arbitrary arity, we introduce gates.
Gates are compounded of meets and boxes, as depicted in Fig. 6.
The precise construction of a gate corresponding to a given stream function is described in Subsec.
3.3.
Definition 4.
The production function β σ : N → N of (a box containing) a sequence σ ∈ ± ω is corecursively defined, for all n ∈ N, by β σ (n) := β(σ, n):N N n σ β σ (n) σ Fig. 5.
box(σ, • n (N )) → • βσ (n) (box(σ , N )) σ rs σ 1β(+σ, n) = s(β(σ, n)) β(−σ, 0) = 0 β(−σ, s(n)) = β(σ, n)Intuitively, β σ (n) is the number of outputs of a box containing sequence σ when fed n inputs.
Note that production functions are well-defined due to our requirement on I/O sequences.
We define terms representing nets, and a rewrite system to model pebbleflow.Definition 5.
Let V be a set of variables.
The set N of terms for pebbleflow nets is generated by:N ::= src(k) | x | •(N ) | box(σ, N ) | µx.N | (N, N )where k ∈ N, x ∈ V, and σ ∈ ± ω .
Furthermore, the set N rat of terms for rational pebbleflow nets is defined by the same inductive clauses, but now with the restriction σ ∈ ± ω rat .
The importance of identifying the subset of rational nets will become evident in Sec. 4, where we introduce a rewrite system for reducing nets to trivial nets (pebble sources).
That system will be terminating for rational nets, and will enable us to determine the total production of a rational net.The rules that govern pebbleflow are listed in Def.
6.
Definition 6.
The pebbleflow rewrite relation → P is defined as the compatible closure of the union of the following rules:(•(N 1 ), •(N 2 )) → •((N 1 , N 2 )) (P1) µx.
•(N (x)) → •(µx.N (•(x))) (P2) box((+σ), N ) → •(box(σ, N )) (P3) box((−σ), •(N )) → box(σ, N ) (P4) src(s(k)) → •(src(k))(P5)The first four rewrite rules in the definition above are visualised in Figures 1, 2, 3, and 4, respectively.
In rule (P2) the feedback of pebbles along the recursion wire(s) of the net N is accomplished by substituting •(x) for all free occurrences x of N .
Observe that → P constitutes an orthogonal CRS [15], hence:Theorem 1.
The relation → P is confluent.
First we give a translation of the stream function symbols in an SFS into rational gates (gates with boxes containing rational I/O sequences) that precisely model their quantitative consumption/production behaviour.
The idea is to define, for a stream function symbol f, a rational gate by keeping track of the 'production' (sequence of guards encountered) and the 'consumption' of the rules applied, during the finite or eventually periodic dependency sequence on f.Definition 7.
Let T = Σ d Σ sf {:}, R d R sf be an SFS.Then, for each f ∈ Σ sf with arity r s , r d the translation of f is a rational gate [f] : N rs → N as defined by:[f](N 1 , . . . , N rs ) = rs (box([f] 1 , N 1 ), . . . , box([f] rs , N rs ))where [f] i ∈ ± ω rat is defined as follows.
We distinguish the two formats a rule ρ f ∈ R sf can have.
Let x i : σ i stand for x i,1 : . . . : x i,ni : σ i .
If ρ f has the form: f(x 1 : σ 1 , . . . , x rs : σ rs , y 1 , . . . , y r d ) → t 1 : . . . : t m f : u, where:(a) u ≡ g(σ π f (1) , . . . , σ π f (r s ) , t 1 , . . . , t r d ), then (b) u ≡ σ j , then [f] i = − ni + m f [g] j if π f (j) = i − ni + if ¬∃j. π f (j) = i [f] i = − ni + m f −+ if i = j − ni + if i = jIn the second step, we define a translation of the stream constants in an SCS into rational nets.
Here the idea is that the recursive definition of a stream constant M is unfolded step by step; the terms thus arising are translated according to their structure by making use of the translation of the stream function symbols encountered; whenever a stream constant is met that has been unfolded before, the translation stops after establishing a binding to a µ-binder created earlier.Definition 8.
Let T = Σ d Σ sf Σ sc {:}, R d R sf R sc be an SCS.
Then, for each M ∈ Σ sc with rule ρ M ≡ M → rhs M the translation [M] := [M] ∅ of M to apebbleflow net is recursively defined by (α a set of stream constant symbols):[M] α = µM.
[rhs M ] α∪{M} if M ∈ α M if M ∈ α [t : u] α = •([u] α ) [f(u 1 , . . . , u rs , t 1 , . . . , t r d )] α = [f]([u 1 ] α , . . . , [u rs ] α )Example 3.
Reconsider the SCS defined in Example 1.
The translation of the stream function symbols tail, zip ∈ Σ sf is carried out as follows: (Note that to obtain rational representations of the translated stream functions we use loop checking on top of Def.
7.)
Then, the stream constant D is translated to the following pebbleflow net, depicted in Fig. 7:[tail](N ) = 1 (box([tail]1, N )) [zip](N1, N2) = 2 (box([zip]1, N1), box([zip]2, N2)) = box([tail]1, N ) [zip]1 = −+[zip]2 = −++[zip]1 = −++[D] = µD.
•(•(•([zip]([add]([tail](D), [tail]([tail](D))), [even]([tail](D)))))) .
[tail] 1 The theorem below is the basis of our decision algorithm.
It states that the translation is 'production preserving', based on the following terminology: The production π(N ) of a pebbleflow net N is the supremum of the number of pebbles the net can 'produce': π(N ) := sup{n ∈ N | N P • n (N )}, where P denotes the reflexive-transitive closure of → P .
Likewise for an SCS T = Σ, R the production π T (t) of a term t ∈ Ter (Σ) is the supremum of the number of data elements t can 'produce': π T (t) := sup{n ∈ N | t s 1 : . . . : s n : t }.
[even] 1 [zip] 1 [zip] 2 [zip] [add] 1 [add] 2 [add] [tail] 1 [tail] 1 [tail] 1Theorem 2.
Let T be a pure SCS.
Then, π([M]) = π T (M) for all M ∈ Σ sc .
We define a rewriting system for pebbleflow nets that, for every net N , allows to reduce N to a single source while preserving the production of N .
Definition 9.
We define the net reduction relation → R on closed pebbleflow nets by the compatible closure of the following rule schemata:•(N ) → box((+−+), N ) (R1) box(σ, box(τ, N )) → box((σ · τ ), N ) (R2) box(σ, (N 1 , N 2 )) → (box(σ, N 1 ), box(σ, N 2 )) (R3) µx.
(N 1 , N 2 ) → (µx.N 1 , µx.N 2 ) (R4) µx.N → N if x ∈ FV(N ) (R5) µx.box(σ, x) → src(fix(σ)) (R6) (src(k 1 ), src(k 2 )) → src(min(k 1 , k 2 )) (R7) box(σ, src(k)) → src(β σ (k)) (R8) µx.x → src(0)(R9)where σ, τ ∈ ± ω , k, k 1 , k 2 ∈ N, and min(n, m), β σ (k), σ · τ (see Def.
10) and fix(σ) (see Def.
11) are term representations of operation results.Definition 10.
The operation composition · : ± ω × ± ω → ± ω , σ, τ → σ · τ of I/O sequences is defined corecursively by the following equations:(+σ) · τ = +(σ · τ ) (−σ) · (+τ ) = σ · τ (−σ) · (−τ ) = −((−σ) · τ )Composition of sequences σ · τ ∈ ± ω exhibits analogous properties as composition of functions over natural numbers: it is associative, but not commutative.
Furthermore, for all σ, τ ∈ ± ω , n ∈ N we have β σ·τ (n) = β σ (β τ (n)).
Because we formalised the I/O behaviour of boxes by sequences and because we are interested in (dis)proving productivity, for the formalisation of the pebbleflow rewrite relation in Def.
6 the choice has been made to give output priority over input.
This becomes apparent in the definition of composition above: the net box(+−+, box(−−+, x)) is able to consume an input pebble at its free input port x as well as to produce an output pebble, whereas the result box(+−−+, x) of the composition can only consume input after having fired.
The fixed point of a box is the production of the box when fed its own output.Definition 11.
The operations fixed point fix : ± ω → N and requirement removal δ : ± ω → ± ω on I/O sequences are corecursively defined as follows:fix(+σ) = s(fix(δ(σ))) δ(+σ) = +δ(σ) fix(−σ) = 0 δ(−σ) = σFor all σ ∈ ± ω , we have β σ (fix(σ)) = fix(σ).
Moreover, fix(σ) is the least fixed point of β σ .
Observe that β σ·σ·σ·... = β σ (β σ (β σ (. . .))) = fix(σ).
Therefore, the infinite self-composition box(σ, box(σ, box(σ, . . .))) is 'production equivalent' to src(fix(σ)).
Lemma 1.
The net reduction relation → R is production preserving, that is, N → R N implies π(N ) = π(N ), for all nets N, N ∈ N .
Furthermore, → R is terminating and every closed net normalises to a unique normal form, a source.Observe that net reduction employs infinitary rewriting for fixed point computation and composition (Def.
10 and 11).
To compute normal forms in finite time we make use of finite representations of rational sequences and exchange the numeral s ω with a constant ∞.
The reader may confer [4] for further details.Lemma 2.
There is an algorithm that, if N ∈ N rat and rational representations of the sequences σ ∈ ± ω rat in N are given, computes the → R -normal form of N .
Proof (Hint).
Note that composition preserves rationality, that is, σ · τ ∈ ± ω rat whenever σ, τ ∈ ± ω rat .
Similarly, it is straightforward to show that for sequences σ, τ ∈ ± ω rat with given rational representations the fixed point fix(σ) and a rational representation of the composition σ · τ can be computed in finite time.Theorem 3.
Productivity is decidable for pure stream constant specifications.Proof.
The following steps describe a decision algorithm for productivity of a stream constant M in an SCS T : First, the translation [M] of M into a pebbleflow net is built according to Def.
8.
It is easy to verify that [M] is in fact a rational net.
Second, by the algorithm stated by Lem.
2, [M] is collapsed to a source src(n) with n ∈ N. By Thm.
2 it follows that [M] has the same production as M in T , and by Lem.
1 that the production of [M] is n. Consequently, π T (M) = n. Hence the answers "T is productive for M" and "T is not productive for M" are obtained if n = ∞ and if n ∈ N, respectively.
We give three examples to show how our algorithm decides productivity of SCSs.
First we recognise our running example (Ex.
1) to be productive.
Next, we give a simple example of an SCS that is not productive.
Finally, we illustrate that productivity is sensitive to the precise definitions of the stream functions used.Example 4.
We revisit Ex.
3 where we calculated the pebbleflow net [D] for D and show the last five steps of the reduction to → R -normal form.
→ R6 ((src(∞), src(∞)), src(∞)) → R7 (src(∞), src(∞)) → R7 src(∞) .
Hence D is productive in the SCS of Ex.
1.
Example 5.
For the definition of J from Ex.
2 we get:[J] = µJ.
•(•(box(−+−, J))) → 2 R1 µJ.box(+−+, box(+−+, box(−+−, J))) → R2 µJ.box(++−+, box(−+−, J)) → R2 µJ.box(++−+−, J) → R6 src(4) ,proving that J is not productive (only 4 elements can be evaluated).
Example 6.
Let T = Σ d Σ sf Σ sc {:}, R d R sf R sc be an SCS where Σ d = {0}, Σ sf = {zip, tail, even, odd}, Σ sc = {C}, R d = ∅, R sc consists of: C → 0 : zip(C, even(tail(C))) ,and R sf consists of the rules:tail(x : σ) → σ zip(x : σ, τ ) → x : zip(τ, σ) even(x : σ) → x : odd(σ) odd(x : σ) → even(σ) .
Then, we obtain the following translations: → 2 R6 (src(∞), src(∞)) → R7 src(∞)witnessing productivity of C in T .
Note that the 'fine' definitions of zip and even are crucial in this setting.
If we replace the definition of zip in T by the 'coarser' one: zip * (x : σ, y : τ ) → x : y : zip * (σ, τ ), we obtain an SCS T * where: → 2 R6 (src(∞), src(1)) → R7 src(1) .
Hence C is not productive in T * (here it produces only one element).
Similarly, if we change the definition of even to even(x : y : σ) → x : even(σ), giving rise to the translation [even](N ) = box(−−+, N ), then only the first two elements of C can be evaluated.
We have shown that productivity is decidable for stream definitions that belong to the format of SCSs.
The class of SCSs contains definitions that cannot be recognised automatically to be productive by the methods of [16,12,2,5,14,1] (e.g. the stream constant definition in Ex.
1).
These previous approaches established criteria for productivity that are not applicable for disproving productivity; furthermore, these methods are either applicable to general stream definitions, but cannot be mechanised fully, or can be automated, but give a 'productive'/'don't know' answer only for a very restricted subclass.
Our approach combines the features of being automatable and of obtaining a definite 'productive'/'not productive' decision for a rich class of stream definitions.Note that we obtain decidability of productivity by restricting only the stream function definition part of a stream definition (formalised as an orthogonal TRS), while imposing no conditions on how the stream constant definition part makes use of the stream functions.
The restriction to weakly guarded stream function definitions in SCSs is motivated by the wish to formulate an effectively recognisable format of stream definitions for which productivity is decidable.
More general recognisable formats to which our method can be applied are possible.
If the requirement of a recognisable format is dropped, our approach allows to show decidability of productivity for stream definitions that are based on stream function specifications which can (quantitatively) faithfully be described by 'rational' I/O sequences.
Finally, also lower and upper 'rational' bounds on the production of stream functions can be considered to obtain computable criteria for productivity and its complement.
This will allow us to deal with stream functions that depend quantitatively on the value of stream elements and data parameters.
All of these extensions of the result presented here are the subject of ongoing research (see also [4]).
The reader may want to visit http://infinity.few.vu.nl/productivity/ for additional material.
There, an implementation of the decision algorithm for productivity of SCSs as well as an animation tool for pebbleflow nets can be found.
We have tested the usefulness and feasibility of the implementation of our decision algorithm on various SCSs from the literature, and so far have not encountered excessive run-times.
However, a precise analysis of the run-time complexity of our algorithm remains to be carried out.
