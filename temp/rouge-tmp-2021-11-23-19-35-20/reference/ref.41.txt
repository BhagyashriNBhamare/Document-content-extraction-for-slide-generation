Mobile deep links are URIs that point to specific locations within apps, which are instrumental to web-to-app communications. Our analysis is based on the deep links extracted from two snapshots of 160,000+ top Android apps from Google Play (2014 and 2016), and 1 million webpages from Alexa top domains. Third, we identify more hijacking cases on App links than existing scheme URLs among both apps and websites. Recently, users can even search in-app content with a web-based search engine (e.g., Google) and directly launch the target app by clicking the search result [5]. The most significant one is link hijacking, where one app can register another app's scheme and induce the mobile OS to open the wrong app. This allows the malicious apps to perform phishing attacks (e.g., displaying a fake Facebook login box) or steal sensitive data carried by the link (e.g., PII) [19,35]. More specifically, mobile OS verifies a registered link (e.g., https://facebook.com/profile) by contacting the corresponding web host (facebook.com) for verification. Our goal is to detect and measure link hijacking vulnerabilities across the web and mobile apps, and understand the effectiveness of new linking mechanisms in battling hijacking attacks.We perform extensive measurements on a large collection of mobile apps and websites. We find that not all link collisions are malicious -certain links are expected to be shared such as links for common functionality (e.g., "tel") or thirdparty libraries (e.g., "zxing"). We confirm a subset of mistakes in iOS App links too: 1,925 out of 12,570 (15%) fail the verification due to server misconfigurations, including popular apps such as Airbnb.Second, we uncover a new vulnerability in App links, which allows malicious apps to stealthily intercept HTTP/HTTPS URLs in the browser. Third, We detect more malicious hijacking attacks on App links (1,593 apps) than scheme URLs (893 apps). Case studies show that popular websites (e.g., "google.com") and apps (e.g., Facebook) are common targets for traffic hijacking. Meanwhile, among these websites, App links drastically increase the number of links that have hijacking risks compared to existing vulnerable scheme URLs To the best of our knowledge, our study is the first empirical measurement on the ecosystem of mobile deep links across web and apps. Through deep links, websites can initiate useful interactions with apps, which is instrumental to many key user experiences, for example, opening apps, sharing and bookmarking in-app pages [49], and searching in-app content using search engines [5]. Mobile deep links trigger a particular type of intent to enable communications between the web and mobile apps. Unlike app-to-app communication, mobile deep link can only launch front-end Activity in the app.Mobile deep links work in two simple steps: 1) Registration: an app "foo" should first register its URIs ("foo://" or "https://foo.com") to the mobile OS during installation. Since the link matches the URI of app "foo", mobile OS will launch this app. This allows a malicious app to hijack the request to the Facebook app to launch itself, either for phishing (e.g., displaying a fake Facebook login box), or stealing sensitive data in the request [19,35]. However, if the malicious app is installed but the victim app is not, the malicious app will automatically skip the prompting and hijack the link without user knowledge. First, the authentic app can build an association with the corresponding website, which allows the mobile OS to open the App link exclusively using the authentic app. The app's developer needs to set up an association file "assetlinks.json" beforehand under the root directory ("/. Suppose a malicious app "bar" also wants to register "http://foo.com/*", the verification will fail, assuming the attacker cannot access the root of foo.com server to modify the association file and the fingerprint.The iOS version of App links is called universal link, introduced at iOS 9.0 [9], which has the same verification process. Intent URLs prevent hijacking by changing how the deep link is called on the website. While the hijacking risk of scheme URLs has been reported by existing research [18,19,55], little is known about how prevalently this risk exists among apps, and how effective the new mechanisms (App links and Intent URLs) are in reducing this risk in practice. In this paper, we conduct the first large-scale measurement on the mobile deep link ecosystem to understand the adoption of different linking methods and their effectiveness in battling hijacking threats. If mobile OS redirects the user to the malicious app, it can lead to phishing (e.g., the malicious app displays forged UI to lure user passwords) or data leakage (e.g., the deep link may carry sensitive data in the URL parameters such as PII and session IDs) [19,35]. Intent URLs will not prompt users at all since the target app is explicitly specified.Our Goals.Our study seeks to answer key questions regarding how mobile deep links are implemented in the wild and their security impact. How much do App links and Intent URLs contribute to mitigating such links?To answer these questions, we first describe data collection ( §3), and measure the adoption of App links and scheme URLs among apps ( §4). We perform extensive security analyses to understand how effective App links can prevent hijacking ( §5), and then describe the method to detect hijacking attacks among apps ( §6). We collected data from both mobile apps and websites, including two snapshots of 160,000+ most popular Android apps in 2014 and 2016, and web pages from Alexa top 1 million domains. For each app in App2016, we also obtained the developer information, downloading count, review count and rating.Our app dataset is biased towards popular apps among the 2.2 million apps in Google Play [48]. We simulate using an Android browser (Android 6.0.1, Chrome/41/0/2272.96) to visit these web domains and load both static HTML page (index page) and the dynamic content from JavaScript. We provide an overview of deep link adoption by analyzing 1) how widely the scheme URLs are adopted among apps, and 2) whether App links are in the process of replacing scheme URLs for better security. Both Scheme URLs and App Links are declared in Intent filters as a set of matching rules, which can either be actual links (fb://login/) or a wild card (fb://profile/*). Given a manifest file, we extract deep link entries in three steps:• Step1: Detecting Open Interfaces. We capture all the Activity intent filters whose "category" field contains both BROWSABLE and DEFAULT. Note that for the apps in App2014 (Android 4.0 or lower), App Link had not been introduced to Android yet. We find that 4,545 apps in App2014 register http/https URIs, which are essentially scheme URLs with "http" or "https" as the scheme. There are still 2-3 times more apps using scheme URLs than those with App links. This suggests that scheme URLs are still heavily used, exposing users to potential hijacking threat. In addition, we find that apps with deep links have averagely 4 million downloads per app, which is orders of magnitude higher than apps without deep links (125K downloads per app). As deep links are associated with popular apps, potential vulnerabilities can affect many users. If a user clicks on an unverified App link, the mobile OS will prompt the user to choose whether he/she would like to open the link in the browser or using the app. In total, there are 8,878 apps that register App links, involving 18,561 unique web domains. We crawled two snapshots of the association files for each domain in January and May of 2017 respectively. On the server-side, 177 apps turn on the verification, but the destination domain does not host the association file; 11 apps host the file under an HTTP server instead of the required HTTPS server; 10 apps' files are in invalid JSON format; 60 apps' association files do not contain the App link (or the app) to be verified. Manual examination shows that new mistakes are introduced when the developers update the association files.Misconfigurations for iOS and Android.To show that App links verification can be easily misconfigured, we put together 1,012,844 web domains to scan their association files. A more plausible explanation is iOS developers are more motivated to perform link verification, since iOS prohibits opening unverified HTTP/HTTPS links in apps. This analysis only covers a subset of possible mistakes compared to Table 3, but still returns a large number. Recall that unverified App links still have one last security defense -the end user. We describe an over-permission vulnerability that allows malicious apps to skip prompting for stealthy hijacking.Over-Permission through Preference Setting.User prompting is there for better security, but prompting users too much can hurt usability. Exploiting this vulnerability allows malicious apps to hijack any HTTP/HTTPS URLs without alerting users.Proof-of-Concept Attack.Suppose "bar" is a malicious app that register both "https://bar.com" and "https://bank.com/transfer/*". The app can make this even stealthier by quickly terminating itself after the hijacking, and bouncing the user back to the bank website in the browser.We validate this vulnerability in both Android 6.0.1 and 7.1.1 (the latest version). However, for App links, scheme-level permission means attackers can hijack any HTTP/HTTPS links.To successfully exploit this vulnerability, a malicious app needs to trick users to set the preference (e.g., using benign functionalities). For example, an attacker may design a recipe app that allows users to open recipe web links in the app for an easy display and sharing. Thus far, our analysis shows that most apps are still vulnerable to link hijacking. In 2016, out of all 23,830 apps that adopt deep links, 23,636 apps either use scheme URLs or unverified App links. For a given app, how likely would other apps register the same URIs (a.k.a., link collision)? If not, how can we classify malicious hijacking from benign collisions?To answer these questions, we first measure how likely it is for different apps to register the same URIs. To identify link collision, we first group apps based on the scheme (scheme URL) or web host (App links). The corresponding numbers for 2016 are higher: 697 schemes and 3,272 web hosts from 8,961 apps.Our result is a lower bound of actual collisions, biased towards popular apps. These schemes are expected to be registered • Third-party scheme/host (T) is used by thirdparty libraries, which often leads to (unintentional) link collision. "x-oauthflow-twitter" is a callback URL for Twitter OAuth. Apps use this service to redirect user RSS requests to their apps (benign collision). Our The high-level intuition is: 1) third-party schemes/hosts often have official documentations to teach developers how to use the library, which are searchable online; 2) functional schemes are well-documented in public URI standard. We manually filter them out and get 175 standard functional schemes. Matching this list with our dataset returns 30 functional schemes with link collisions. In total, we identify 197 third-party schemes, and the rest 149 schemes are per-app schemes (also manually checked). We observe that 1633 hosts are jointly registered by 5 apps, and 347 subdomains of "google.com" are registered by 2 apps. As a feasibility test, we classify per-app schemes from third-party schemes using 10 features such as unique developers per scheme, and apps per scheme (feature list in Appendix). Intuitively, there are not many restrictions on how developers register their URIs, and thus it is possible that the patterns of per-app schemes are not that strong.Since fully automated classification is not yet feasible, we then explore useful heuristics to help app market admins to conduct collision auditing. In total, we identify 149 per-app schemes and 2,314 perapp hosts that are involved in link collisions. For example, "google.com" is registered by 480 apps from 305 non-Google developers.The scheme "google.navigation" from Google Maps is hijacked by 79 apps from 32 developers. For example, URLLander (com.chestnutcorp.android.urlander) and AppRedirect (com.nevoxo.tapatalk.redirect) each has registered HTTPS links from 36 and 75 web domains respectively (unverified) and has over 10,000 installs. This MITM threat applies to all the popular websites that Redirector apps registered such as facebook.com, instagram.com, and ebay.com. Redirection (and MITM) can be automated without prompting users by exploiting the over-permission vulnerability (see §5.2) -if the user once sets a preference for just one of those links.Hijacking a Competitor's App.Many apps are competitors in the same business, and we find targeted hijacking cases between competing apps. QatarTaxi (10K downloads) registers to receive all "careem://*" deep links.After code analysis, we find all these links redirect users to the QatarTaxi app's home screen, as an attempt to draw customers.Bad Scheme Names. Next, we move to the web-side to examine how mobile deep links are distributed on the web, and estimate the likelihood of users encountering hijacked links. We seek to estimate the impact of Intent URLs to mitigating hijacking threats.In the following, we first measure the prevalence of Intent URLs on the web, and compare it with scheme URLs and App links. The key observation is Intent URLs are rarely used. This extremely low adoption rate indicates that Intent URLs have little impact to mitigating hijacking risks in practice.Challenges to Intent URL Adoption.Since Android still supports scheme URLs, it is possible that developers are not motivated to use Intent URLs to replace the stillfunctional scheme URLs. We find that most apps have their Intent URLs on a single website (90%). It is challenging to remove or upgrade scheme URLs across all these sites.Insecure Usage of Intent URL.Among the 1,203 Intent URLs, we find 25 Intent URLs did not specify the package name of the target app (only the host or scheme). We extract links from Alexa1M that are registered by multiple apps, which returns 408,455 scheme URLs and 2,741,817 App links. Among them, 7,242 scheme URLs and 2,619,565 App links contain per-app schemes/hosts (i.e., hijacked links). First, scheme URL was designed for mixed purposes, including invoking a generic function (functional/thirdparty schemes) and launching a target app (per-app schemes). A more practical solution should prohibit per-app schemes, while not crippling the widely deployed functional/third-party schemes on the web.Second, App links and Intent URLs were designed with security in mind. As a result, App links not only fail to provide better security, but worsen the situation significantly by introducing more hijackable links.Finally, the insecurity of deep links leads to a tough trade-off between security and usability. The current solution for Android (and iOS) takes a middle ground, by letting users set "preference" for certain apps to disable prompting. Disabling scheme links altogether would inevitably affect users' web browsing experience (e.g., causing broken links [8]). Android may also whitelist a set of well-defined functional schemes to avoid massively breaking functional links. This threat would also go away if Android strictly enforces App link verifications. As of June 2017, we have established a case and submitted the second round of materials including the proof-of-concept app and a demo of the attack. Second, our measurement scope is still limited comparing to the size of Android app market and the whole web. Third, we only focus on the link hijacking threat, because this is the security issue that App links and Intent URLs were designed to address. Unlike web URLs whose uniqueness is guaranteed by the DNS, mobile deep links lack a similar, centralized entity for link registration and addressing. Our work is complementary to existing work since we focus on large-scale empirical measurements, providing new understandings to how the risks are mitigated in practice.Other recent works on mobile deep links focus on improving usability instead of security. The threat also applies to customized in-app browsers (called WebView) [20,37,40,51]. In this paper, we conducted the first large-scale measurement study on mobile deep links across popular Android apps and websites. These features are selected based on the intuition that third-party schemes are likely to be used by a larger variety of apps and developers, but are used for similar components in the third-party library Sensitive Mobile Deep Link Parameters . Table 9 is a list of sensitive parameters identified in the mobile deep links from Alexa top 1 million websites. These parameter names are used in §7 to match hijacked deep links that carry sensitive data.