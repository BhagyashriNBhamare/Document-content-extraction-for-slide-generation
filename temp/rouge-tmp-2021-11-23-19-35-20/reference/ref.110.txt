By applying our framework , which generates a comprehensive set of test cases covering various web mechanisms, we identify several flaws in the policy implementations of the 7 browsers and 46 browser extensions that were evaluated. Finally, we analyze the origin of the identified bypass techniques, and find that these are due to a variety of implementation, configuration and design flaws. Through so-called cross-site attacks, adversaries can abuse the implicit authentication to perform malicious actions through cross-site request forgery attacks [6,54], or extract personal and sensitive information through cross-site script inclusion [24] and cross-site timing attacks [9,16,48]. These trackers leverage this aggregated information for the purpose of content personalization, e.g. on social networks, displaying targeted advertisements, or simply as an asset that is monetized by selling access to the accumulated data.As a direct response to the privacy threat imposed by third-party trackers and associated intrusive advertisements, a wide variety of efforts have been made. These extensions make use of a designated browser API [39] to intercept requests and either block them or strip sensitive information such as headers and cookies. In this paper, we show that in the current state, built-in anti-tracking protection mechanisms as well as virtually every popular browser extension that relies on blocking third-party requests to either prevent user tracking or disable intrusive advertisements, can be bypassed by at least one technique.Next to tracking protections, we also evaluate a recently introduced and promising feature aimed at defending against cross-site attacks, namely same-site cookies [51]. As part of our evaluation, we discovered several instances in which the same-site cookie policy was not correctly applied, thus allowing an adversary to send authenticated requests regardless of the lax or strict mode applied to the samesite cookie. Although this bypass could only be used to trigger GET requests, thereby making the exploitation of CSRF vulnerabilities in websites that follow common best-practices more difficult, it does underline the importance of a systematic evaluation to test whether browser implementations consistently follow the policies proposed in the specification.In this paper, we present the first extensive evaluation of policies applied to third-party cookies, whether for the purpose of thwarting cross-site attacks or preventing third-party tracking. The sources for these bypasses can be traced back to a variety of implementation, configuration and design flaws. Further, our crawl on the Alexa top 10,000 did not identify any use of the discovered bypasses in the wild, indicating that these are novel.Our main contributions are the following:• We developed a framework with the intent to automatically detect bypasses of third-party request and cookie policies. • We performed a crawl on the Alexa top 10,000, visiting 160,059 web pages, to inspect if any of these bypasses were already being used on the Web. The web page of first-party.com contains a reference to an image that is hosted on third-party.com. This will initiate a request to the web page http://first-party.com/, and a subsequent response will be received by the browser (1). While parsing the web page, the user's browser comes across the reference to https://third-party.com and fetches the associated resource by sending a separate request (2). Through these so-called cross-site attacks, attackers can trigger state changes on vulnerable websites or extract sensitive information.One of the most well-known cross-site attacks is crosssite request forgery (CSRF). XSSI attacks bypass the Same-Origin Policy (SOP) in an attempt to obtain information linked to the authenticated user account [24]. Same-site cookies are generic cookies with an additional attribute named SameSite. When the attribute value is set to strict, the cookie may never be included in any cross-site requests.At the time of writing, same-site cookies are supported by Chrome, Opera, Firefox and Edge [8,27,50]. One way of employing online tracking is through embedded advertisements, which include tracking scripts to learn more about the user's interests and personalize the advertisements based on this information. Because the resource containing embedded functionality is requested upon each page visit, the social platform can track which websites their users visit.The main technique that is used to track users across different websites is by means of third-party cookies. Despite prior efforts to verify these guarantees [22,25], the real-world prevalence of inconsistencies remains hard to measure as modern browsers consist of millions of lines of code, or may be proprietary, preventing researchers access to their source code. 1 The goal of our framework is to detect techniques that can be used to circumvent policies that strip cookies from cross-site requests, or that try to block these requests completely. Browsers that do not have Selenium support, are controlled by manually configuring a browser profile and are then launched through the command-line. More specifically, on the target domain, i.e. the domain for which the test cases will try to initiate an illegitimate cross-site request, we install several cookies. Furthermore, for browsers that support it, we installed two cookies with the SameSite attribute: one with the value set to lax, and one set to strict. What follows is a Figure 2: Design of the framework that we used to detect bypasses of imposed cross-site request policies.summary of the mechanisms we used, subdivided into seven different categories.HTML tags The first group of request mechanisms consists of HTML elements that can refer to an external resource, such as <img>, <iframe> or <script> tags. In most cases, the browser will request the referenced resources through a GET request.The other class of response headers that initiate new requests are related to Content Security Policy (CSP) [1]. Nevertheless, they are a prominent example of the continuously evolving browser ecosystem, and highlight the importance of analyzing the unexpected changes new features might bring along.Redirects Top-level redirects are often not regarded as cross-site requests, because stripping cookies from them would cause breakage of many existing websites. In our framework, we evaluate redirection mechanisms through the Location response header, via the <meta> tag, setting the location.href property and automatically submitting forms.JavaScript Browsers offer various JavaScript APIs that can be used to send requests. Also, the EventSource API can be used to open a unidirectional persistent connection to a web server, allowing the server to send updates to the user [34]. The viewer used by Chrome and Opera, PDFium [18], is implemented as a browser extension and does support sending requests. To our knowledge, this is not the case for Firefox' PDF.js library [17], as we did not manage to simulate this, nor did we find any source to confirm this.AppCache API Although the AppCache API has been deprecated, it is still supported by most browsers [35]. After the registration process, all requests will pass through the worker, which can respond with a newly fetched resource or serve one from the cache. Next to fetching the requested resources, service workers can also leverage most 6 browser APIs to initiate additional requests. For instance, Tor Browser makes use of double-keyed cookies: instead of associating a cookie with a single domain, the cookies are associated with both the domain of the top-level document as well as domain that set the cookie. For example, when siteA.com includes a resource from siteB.com that sets a cookie, this cookie will not be included when siteC.com would include a resource from siteB.com. For instance, Opera offers a builtin ad blocker that is based on blacklists. Next to built-in tracking prevention, users may also resort to extensions to prevent their browsing behavior and personal information from leaking to third parties. In total, we evaluated 46 different extensions for the 4 most popular browsers (Chrome, Opera, Firefox and Edge). An overview of all extensions that were evaluated can be found in Appendix B.Most browsers' anti-tracking and ad blocking extensions share a common functionality. By leveraging our framework that was introduced in Section 3, we evaluated whether it was possible to bypass the policies imposed on third-party requests by either browsers or one of their extensions. The results are summarized in Table 1, Table 2, and Table 3, and will be discussed in more detail in the remainder of this section. We will discuss this further in Section 4.1.3 with the other evaluated built-in options.Besides Safari, the privacy-oriented browsers also generally perform better in this regard: with a few exceptions, both Cliqz and Tor Browser manage to exclude cookies from all third-party requests. Most likely because redirects are not considered as cross-site (as the 7 https://WhoLeftOpenTheCookieJar.com domain of the document changes to that of the page it is redirected to), cookies are not excluded for redirects. An example of such a mechanism is shown in Listing 1. One of the most surprising results is that the browsers that use the PDFium reader to render PDFs directly in the browser (Google Chrome and Opera), would still include cookies for third-party requests that are initiated from JavaScript embedded within PDFs [bug1]. As such, XSSI and cross-site timing attacks are currently not possible. This problem was solved in Safari 11 by deleting all cookies upon enabling the option to block all cookies.For Edge, we found that, surprisingly, the option to block third-party cookies had no effect: all cookies that were sent in the instance with default settings, were also sent in the instance with custom settings [bug3]. These 6 bypass techniques spanned different browser mechanisms (CSS, SVG, <input> and video), so it is unclear why these are treated differently.For Firefox, we observed comparable results: although many requests were blocked (e.g. for the HTML category, 46 out of 51 requests were blocked), for each applicable category there was at least one technique that could circumvent the tracking protection [bug5]. As Table 1: Results from the analysis of browsers and their built-in security and privacy countermeasures. An overview of all browser extensions that were considered can be found in Appendix B. Guided by the resulting data, we found several common causes for the discovered bypasses.Considering the results of all Chrome-and Operabased extensions, it is clear that none of these managed to block the cookie-bearing third-party request when the request is initiated by JavaScript code embedded within a PDF. However, another issue arises when a browser extension wants to block these requests: the WebExtension API does not allow an extension to intercept traffic from another extension. Only few browser extensions correctly block cross-site requests initiated through the AppCache API. Although the listener for the onBeforeRequest event was always able to intercept the request, the extensions verified the provided tab identifier. In to-tal, we found that 26 browser extension policies could be bypassed with the AppCache technique, and 20 through service workers.Contrasting to extensions of other browsers, almost every Firefox-based extension could be bypassed in the HTML category. Although abusing this bug may not be straightforward, as it is only sent when a web page is visited for the first time, it does indicate that browsers exhibit small inconsistencies, which may often lead to unintended behavior.In the JavaScript category, we found that most extensions could be bypassed with at least one technique: for the tracking extensions, only a single extension managed to block requests initiated by JavaScript. No bugs were found for Firefox' implementation of this policy.For Chrome and Opera, the incorrect behavior was caused by the prerendering functionality [46]. This bypasses the same-site cookie policy as defined by the Internet Draft; only samesite cookies in lax mode are allowed to be included.For Edge (versions 16 and 17, which support samesite cookies), we detected similar incorrect behaviors, although caused by different functionalities [bug10]. 9 Only when support for intercepting WebSocket connections was added to the WebExtension API, browser extensions managed to prevent Pornhub's bypasses. For each website, we visited up to 20 pages with a Headless Chrome instance (version 64.0.3282.119, on Ubuntu 16.04), and analyzed all requests that were initiated by one of the new bypass techniques we reported in Section 4. To this Edge SET A19 (1/4) N/A SET A20 (1/4) N/A SET A21 (1/4) N/A SET A22 (1/4) N/A: request with cookies : request without cookies : no request Table 2: Results from the analysis of ad blocking extensions per browser.purpose, we used the EasyList and EasyPrivacy lists 10 which contain regular expressions used by various popular browser extensions to determine whether requests should be blocked. In order to evaluate whether any bypass technique was used that was not detected by our framework, we com-10 https://easylist.to/ pared the DNS traffic generated by every of the 160,059 visited web pages with the requests that we could detect from each visit. More precisely, we ran every browser instance in a separate Linux namespace and used tcpdump to capture all DNS requests the browser generated. <link rel=apple-touch-icon 0 2<img srcset="url"> 0 3 Table 4: Unique number of tracking or advertising domains that make use of one of the potential bypass techniques As we have shown in Section 4, through our framework, which evaluated several browsers and browser extensions in various configurations, we uncovered numerous instances where an authenticated third-party request could circumvent the imposed restrictions. We believe that this is due to an oversight from the browser developers or a regression bug introduced when new functionality was added.For the Chromium-based browsers (Google Chrome and Opera), we found that because of the built-in PDF reader, an adversary or tracker can still initiate authenticated requests to third-parties. As this may interfere with the operations of certain extensions, exclusions should be made possible, for instance by defining a list of cookie-enabled domains in the extension manifest.Next to blocking third-party cookies, we also analyzed the built-in tracking protection for Firefox. While Mozilla is already aware 12 of some of the bypasses we uncovered and is working to mitigate these, we believe that our framework will assist in identifying bypass techniques, even when these are difficult to detect from the millions of lines of code. For instance, support for intercepting WebSockets in browser exceptions was only added years after the feature became available, and after it had actively been exploited to circumvent ad blockers [11]. This shows that adding new features to a browser may have unforeseen side-effects on the extensions that rely on the provided APIs.When new browser features are proposed and implemented, test cases that include the new functionality can be added to our framework, allowing browser vendors and extension developers to automatically detect and possibly mitigate unforeseen side-effects. Policy implementation inconsistencies Multiple studies have shown that browser implementations often exhibit inconsistencies concerning security or privacy policies. Singh et al. [43] pointed out the incoherencies in web browser access control policies. In this work, we introduce a framework that is able to perform an automated and comprehensive evaluation of cross-site countermeasures and anti-tracking policy implementations. For instance, we found that same-site cookies could still be attached to cross-site requests by levering the prerendering functionality, which did not take these policies correctly into account.Furthermore, a design flaw in Chromium-based browsers enabled a bypass for both the built-in thirdparty cookie blocking option and tracking protection provided by extensions. That is why we think that, as future research, the framework could be extended to evaluate other policy implementations (e.g. LocalStorage API [28], Content Security Policy [1]). Note that bug threads mights still be private when visiting the associated link. [bug1] The bug that can be leveraged to bypass Chrome's and Opera's third-party cookie policy has been confirmed and is scheduled to be fixed at the time of writing. [bug5] In the bug thread that we have started for bypasses concerning Firefox' tracking protection, references have been made to previously reported similar bugs that are related to Firefox' Safe Browsing feature [37]. In the same bug report, we also explained the difficulties for extensions to distinct between requests initiated through the AppCache or ServiceWorker API, and requests initiated by browser functionality. [bug8] In addition to the aforementioned bugs caused through the AppCache and WebSocket API, we identified a wide variety of bugs inherent to the implementation of ad blocking and privacy protection extensions.18 https://bugzilla.mozilla.org/show_bug.cgi?id= 1447933Because of the large number of affected extensions, many without a dedicated bug tracker, we only contacted a selection of them. 20 We would like to thank the reviewers for their insightful comments.