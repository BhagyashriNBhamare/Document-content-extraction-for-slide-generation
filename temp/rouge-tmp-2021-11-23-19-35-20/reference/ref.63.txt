A subset of these SOP rules controls the interaction between the host document and an embedded document, and this subset is the target of our research (SOP-DOM). Thus, we restricted our attention to the following research questions:How is SOP for DOM access (SOP-DOM) implemented in modern browsers?Which parts of the HTML markup influences SOP-DOM? How does the detected behavior match known access control policies?More precisely, we concentrate on a subset of SOP rules according to the following criteria:Web Origins. Although this means [8], [10] HTTP Cookies This subset, with an extension of the Web Origin concept (path), defines to which URLs HTTP cookies will be sent. [12], [13], [14] Table 1: Different subsets of SOP rules.that most researches are familiar with many edge cases in SOP-DOM, especially those relating to attacks and countermeasures, it is likely that some of those edge cases will not be covered in this paper. For example, it is well known that JavaScript code from a different web origin has full read and write access to the host document; nevertheless, recently Lekies et al. [5] pointed our that there is also read access from the host document to JavaScript code, which may constitute a privacy problem. For instance, the term "authority" used in RFC 6454 [18] may not be sufficient any more if we compare the power of SVG images [19] with the following quote from RFC 6454: "an image is passive content and, therefore, carries no authority, meaning the image has no access to the objects and resources available to its origin". We also do not restrict the test set to full DOM read or write access (which easily could have been automated to cover more test cases) but instead, also concentrate on the more interesting cases of partial read and write access.Our tests thus cover only a representative sample of SOP-DOM, but this sample was chosen to cover each known edge case of SOP-DOM. We show the applicability of our test methodology for SOP implementations in current web browsers by providing a testbed at www.your-sop.com, where proof-of-concept HTML, JavaScript, and CSS code is given for each test case. Combining each EE with all possible attributes would lead to errors; for example, neither <img data=".."> nor <object src="..."> are semantically correct. In addition, there is no universal access from HD to ED and vice versa; for example, accessing the SVG ED can be achieved with a dedicated getSVGDocument() method.Limitations. We make the following contributions:We systematically test edge cases of the SOP that have not been previously documented like the influence of the embedding element, and the CORS and sandbox attributes.We provide a testbed where the SOP implementation of a browser can be automatically tested and visualized.We used this testbed to extensively evaluate our model in 544 test cases on 10 modern browsers.More than 23% of the test cases revealed different SOP-DOM access rights implemented in at least one of the tested browsers. Our ABAC model provides a systematic way to describe these differences.We prove that a better understanding of SOP-DOM is useful by describing a novel CSS-based login oracle attack for IE and Edge, which we found using the ABAC rules for cross-origin access to CSS.We critically discuss the applicability of standard access control models like DAC, RBAC, and ABAC to SOP-DOM. Although the <iframe> element from Figure 2 is a child element of the HTML document, there is no property document.frames [0]; instead, there is only window.frames [0]. The <script> element will then be parsed and the (second) alert function will be executed.1 <html><head><title>a.html</title></head> 2 <body><iframe src="b.html" /> 3 <script>alert(document.location)</script> 4 </body></html>Listing 1: Code of http://a.org/a.htmlThe two alert pop-up windows, triggered by the two script elements, will display different URLs because they are acting in different DOMs. The alert window called in Listing 1 will display the URL http://a.org/a.html, whereas the alert window in Listing 2 will display the URL http://a.org/b.html. It works as follows: a) in a preflight request, 3 the browser sends an origin header (Origin: http://a.com) to the target web service requesting CORS privileges. b) the target server may now answer with an error message (access denied) or with a CORS header, such as Access-Control-Allow-Origin: http://a.com, to grant the access. However, in HTML5 some elements (e.g., <img>) may have crossorigin attributes which invoke CORS and subsequently modify the SOP access controls.1 <html><head><title>b.html</title></head> 2 <body><script>alert(document.location)</ script> 3 </body></html> The Same-Origin Policy for DOM Access (SOP-DOM) controls the access of a subject -typically JavaScript code -to a web object (e.g., an HTML form). The Web Origin of ED is defined by src or similar attributes of EE (e.g, dynsrc, lowsrc, and srcset). In reality, SOP-DOM is more complex; some EEs like <img> block almost all access even in the same-origin case, some EEs like <script> allow full read and write access (in one direction) even in the case of different origins, and some EEs like <iframe> (in the cross-origin case) only grant partial access. S denotes subject attributes, O object attributes, and E denotes attributes which may also be set independent of the markup (e.g., through a HTTP security policy like Content Security Policy (CSP)). By systematically analyzing the provided list of the W3C [20] and the WHATWG [21], we picked the representative HTML elements <script>, <img>, <canvas>, <link>, <iframe>, <object >, <embed>, and <link>. Other web objects do not have a DOM structure (e.g., JPEG and PNG images). We define partial access as only being able to read, or only being able to write some specific properties (e.g., window.top.location). contentDocument; 6 HD2ED=ED.getElementById("ID2"); 7 read_success = (HD2ED.textContent == "Text in ED"); 8 </script> 9 <element id="ID1">Text in HD</element> 10 <EE id="EE" src="ED.org/ED.mime"></EE> 11 </body> 12 </html> Listing 3: Host document (HD) verifying full read access.1 <html> 2 <head>ED from ED.org</head> 3 <body> 4 <ED><element id="ID2">Text in ED</element ></ED> 5 <script> 6 var ED2HD; 7 ED2HD=parent.getElementById("ID1"); 8 read_success = (ED2HD.textContent == " Text in HD"); 9 </script> 10 </body> 11 </html> Listing 4: Embedded Document (ED) for verifying full read access.Partial Access. This illustrates clearly that we have partial read access.As an edge case example for partial read access, CSS in combination with browser features like plain HTML and inactive SVG files can be used to extract some values from the SOP-DOM [23]. We implemented a testbed as a web application which automatically evaluates the SOP implementation of the currently used browsers. For each attribute, we created a test that receives an HTTP response header Access -Control-Cross-Origin (1.) The immense number of combinations lead to a significant number of test cases if CORS is supported.Each test loads an external resource (ED), first from the same domain (your-sop.com), and then from a different one (other-domain.org). This behavior holds for both the same-origin and cross-origin case.If we use <canvas> as the embedding element EE 5 , we can get read access to pixels in JPG, PNG and SVG images if loaded from the same origin. 6 SVG files are basically XML-based vector graphics. Cross-origin loaded JavaScript code via < script src="..."> is a well-known special case in the SOP; it is treated as if it had been loaded from the same origin. Technically, a script loaded by the src attribute is appended to the document.scripts array in the HD's DOM, independent of the domain on which the script is hosted. Since this is the desired behavior, write access from the ED to the HD is independent of the web origin.Frames. We limited our evaluation to the attribute values that directly affect our read, write, and execute results: allow-scripts, allow-same-origin, allow-top-navigation. 8 We identified three subsets of different browser behaviors.First, more than 35% of the identified differences could be attributed to <canvas> and PNG/SVG. In contrast to the other seven browser tests that allow partial read access with the help CORS from HD to ED 8 http://www.your-sop.com/stats.php cross-origin, FF, IE, and Edge do not allow read access in the following CORS cases of <canvas> with SVG and PNG: Access-Control-Allow-Origin : your-sop.com (ED sets the domain of HD) and Use-Credentials: true. The attribute type=" image/svg+xml" is no more required.Third, over 51% of the test cases show different behaviors because of <link>. By using the difference that was detected in case of <link>, we show that dynamically generated CSS files can be abused to attack the user's privacy. This allows us to build a novel login oracle:Suppose a webserver delivers different CSS files, depending on whether the user is logged in or not.The attacker's website consists of the EE <link> loading the victim's CSS code (ED). By comparing the CSS code with CSS code of a logged out user, the attacker can determine the logged in state.We verified our login oracle with the startpage service start.me (ED); an attacker is clearly able to decide whether a user is logged in or not. Microsoft (Research Center, MSRC) acknowledged this bug (Case 32703) and the fix will be incorporated into a future version of IE/Edge. We have 15 HTML elements with src attributes, and several more with a similar functionality (e.g. <canvas>). There are many different ways how to embed a document of a given MIME type into a webpage (e.g., SVG via <img> or <iframe>), and there are many different MIME types with and without a DOM structure to consider. One technical limitation of our evaluation framework is that we used the <link> element only to load CSS. We did not consider, for example, HTML imports via <link rel="import"href="data. It is also possible, to use <svg> as a HD; for example, an external JavaScript can be loaded by using <svg>< script xlink:href=". The same holds for the window.name property, which is well-known to be writable across origins.A design decision for our testbed was to be able to easily execute all test simultaneously. We excluded pseudo protocols (e.g., about:, chrome:) and Data and JavaScript-URIs from our tests, because in a (possibly outdated) overview, Zalewski [28] already pointed out that there are different Web Origin assignments in different browser implementations. However, extending the testbed to selected pseudoprotocols is future work.Different SOP Contexts. Singh et al. [7] analyzed in-coherencies in web browser access control policies by showing that there are different definitions of Web Origins; there are web-origins for DOM objects, localStorage, and XMLHttpRequest, as well as other definitions for cookies (domain, path) and the clipboard (user). SOP Enhancements. Lekies et al. [5] are using dynamically generated JavaScript files to attack the privacy of a victim. Jain [37] states that Safari v6.0.2 does not have SOP restrictions in case the file protocol is used. There are also SOP bypasses via Java applets [41], Adobe Reader [42], Adobe Flash [11], and inter alia Microsoft Silverlight [10]. In the following, we discuss how well the three main classes fit our findings.SOP-DOM is a global access control policy regulating access between websites throughout the Internet; however, decisions through the SOP-DOM can only be made on that which is locally available. This data includes the web origins of the different subjects and objects, the HTML markup (elements and attributes), and more recently, security policies communicated through HTTP headers like CORS, CSP, X-Frame-Options, and others.In SOP-DOM, the set O of objects may contain any element or property of the local DOM of the web page. DAC access control is well-known from operating systems (OSs); each user has a login name and the OS decides if this particular user has access to a certain resource (e.g., a data file or network printer). Another example is email encryption in which read access is granted on the basis of the RFC 822 email addresses of the recipients.Definition 1 In DAC, access rights are directly assigned to subjects: the policy set P is a subset of S × O, and subject s has access to object o if (s, o) ∈ P.In the WWW, each subject from S and each object from O can be assigned a unique name, which is the URL at which it can be found. This is problematic for SOP-DOM, since access policies must be created automatically. In enhanced RBAC (eRBAC), subjects are assigned subject roles from a set R S , objects are assigned object roles from a set R O , i.e. P S ⊆ S × R S , P O ⊆ O × R O . So we could define a role ro so r with the following equation:(o, ro so r ) ∈ P O ⇐⇒ EE(o) / ∈ { < img >, ...}(2)Web origins could be taken into account in P by stating that for all values X, (rs so X , ro so X ) ∈ P (subject role has same-origin access to object role), (rs co X , ro co X ) ∈ P (subject role has cross-origin access to object role), and (rs co X , ro so X ) ∈ P (if subject role has cross-origin access to object role, then it also has same-origin access). This complexity will be increased if we extend the scope to HTTP security policies such as CSP and pseudo-URIs like data:, which are not covered by our current analysis. The assignment of random Web Origins to sandboxed iFrames can be specified by stating that origin(o) = $RAND if sandbox(o) = T RUE.Embedding Element. In contrast to previous descriptions of the interaction of Web Origins and the document.domain declaration, the novel ABAC based concept of extended Web Origin is both simpler ans less error-prone. Different browser data sets can be used to identify inconsistencies across implementations, which can lead to security vulnerabilities. We strongly believe that a more formal SOP-DOM definition will help the scientific as well as the pentesting community to find more severe vulnerabilities. To extend the coverage, future work may address the following areas: (1.) local storage/session storage or even new data types like Flash or PDF; (2.)