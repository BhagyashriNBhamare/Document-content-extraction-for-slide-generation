To demonstrate the security implications of DCVs, we devise several novel concrete attacks. We show an untrusted web iframe/popup inside WebView becomes dangerous that it can launch these attacks to open holes on existing defense solutions, and obtain risky privileges and abilities, such as breaking web messaging integrity, stealthily accessing sensitive mobile functionalities, and performing phishing attacks. In past years, in regular browsers, their behaviors have been well studied, and a variety of mature iframe/popup protection solutions (e.g., Same Origin Policy (SOP) [6], HTML5 iframe sandbox [4], and navigation policies [11]) have been deployed.Inconsistencies Between Browsers and WebView. However, in WebView, a totally different working environment is provided for iframes/popups, due to WebView's own programming and UI features. Therefore, if an iframe/popup has abilities to secretly navigate the main frame (the top frame) or put their own WUI to the foremost position for overlaying the original WUI, phishing attacks occur and may cause serious consequences. The Huntington banking app (one million+ downloads) uses WebView to help users reset passwords (Fig- ure 3-a,b). We show through these attacks, remote adversaries (e.g., web or network attackers on iframes/popups) can obtain several unexpected and risky privileges and abilities: 1) Origin-Hiding: hiding the origin when• breaking the integrity of web messaging (i.e., postMessage) [8], which allows the communication between mutually distrusted web frames; and • secretly accessing web-mobile bridges [21], which link the web layer with the mobile or native layer (e.g., Java for Android) ( Figure 1); Existing work has shown that postMessage's message receivers [44,47] and web-mobile bridges [21,49,53] often carry sensitive functionalities. As a result, sensitive information (e.g., GPS location) may be stolen, and important hardware (e.g., microphone) may be unauthorizedly accessed.2) WebView UI Redressing: performing phishing attacks by overlapping the foremost benign WUI with an untrusted WUI; 3) (Privileged) Main-Frame Navigation: freely redirecting the main frame to a fake website. 3) For main-frame navigation attacks, one related solution is the iframe sandbox security mechanism, which can effectively limit the navigation capability of an arbitrary iframe. For convenience, considering the root reason of this new type of vulnerability (i.e., the inconsistencies between the contexts of regular browsers and WebView), we refer to the vulnerabilities as Differential Context Vulnerabilities or DCVs, and the associated attacks as DCV attacks.DCV-Hunter & Findings. We also manually verify that many high-profile apps are vulnerable (a list of video demos of our attacks can be found online [2]), including Facebook, Instagram, Facebook Messenger, Google News, Skype, Uber, Yelp, WeChat, Kayak, ESPN, McDonald's, Kakao Talk, and Samsung Mobile Print. Several special sensitive categories of apps are affected including leading password management apps (such as dashlane, lastpass, and 1password), and popular banking apps (such as U.S. bank, Huntington bank, and Chime mobile bank). By combining a couple of DCV attacks, untrusted iframes/popups can still launch phishing attacks ( Figure 5-d). To mitigate the problem, we propose a multi-level protection solution by enhancing the security of WebView programming and UI features. The result shows our solution is available in many major popular Android versions (5.0+), and covers almost 90% of Android devices in use.Contributions. Iframes/popups are frequently used in web apps, for example, to view files in various formats (e.g., images, videos and PDFs), or load third-party untrusted web content (e.g., ads). To create an iframe, developers can 1) either use the HTML element <iframe>; 2) or run JavaScript code to dynamically build an iframe DOM node. • Navigation policies: As studied in existing work [11], in regular browsers, the main frame is often exempt from strict navigation policies, which means any sub-frame can directly navigate the main frame by using "<a>" or "window.open()". First, this type of navigation is frequently used by benign web apps, for example, for preventing framing attacks [43]. Android WebView is equipped with the newest kernel of the regular browser "Chrome/Chromium", and performs as powerful as regular browsers.As discussed in Section 1, there are several inconsistencies between regular browsers and WebView. Compared to regular browsers, which allow users to manually type the address of a website, WebView initializes web content through programming APIs (Figure 1), including• loadUrl(URL/file/JS): loading content in the main frame;• loadData(HTML, ...): loading code with the "null" origin;• loadDataWithBaseURL(origin,HTML,...): loading HTML code with a specified origin. Generally, the bridges include 1) event handlers, which let mobile code handle web events that occur inside WebView; and 2) JavaScript bridges, which can allow JavaScript code to directly access mobile methods.Furthermore, as shown in Table 2, several programming features can impact iframe/popup behaviors. To enable the creation of a popup, the setting SupportMultipleWindows should be set as true, and the event handler onCreateWindow() is also required to be implemented and return true. In our threat model, we assume the native or mobile code (e.g., Java code), and the main frame loaded in its WebView are secure and trusted.The main frame usually loads web content from the first-party benign domains (e.g., developer.com). For the embedded untrusted sub-frames, we mainly consider two possible attack scenarios: Network attacks. If the loaded web content embeds iframes/popups using unsafe network channels (e.g., HTTP), attackers may inject malicious code into the iframes/popups and launch attacks. Our empirical study on a set of popular hybrid apps and mobile websites shows iframes/popups are frequently used to load third-party content, especially third-party advertising and tracking content. Guided by the inconsistencies between regular browsers and WebView (Section 2.2), our security study of iframe/popup behaviors is mainly concerned with the following three dimensions:The application of common origins. For example, the invocationWebView.loadurl('file:///android _ asset/index.html')can load a local file with the origin "file://", while WebView.loadData() and WebView.loadDataWithBaseURL() may create a main frame to load web data with the "null" origin.However, these common origins are not unique for the main frame, and may be reproduced by untrusted iframes/popups in their inside sub-frames for launching attacks. As discussed in Section 1, WebView's UI design causes security risks that untrusted iframes/popups may perform phishing attacks, if they have the abilities of 1) manipulating the rendering order of multiple WUIs; 2) navigating the main frame. To verify the former potential ability, we first conduct an empirical study on a set of popular hybrid apps. Our study also shows when a popup is created, Android place its WUI behind current WUI at default.This WUI management strategy seems safe. Our study also shows that even when Android's default WUI management strategy is adopted, it is still possible for untrusted iframes/popups to change the WUI rendering order by combining WUI creation and closure operations (Section 3.3.2). Due to the lack of the address bar, the navigation based attack is stealthier and more powerful in the context of WebView (Section 3.4.1). By leveraging this conflict, untrusted iframes/popups can perform privileged main-frame navigation attacks, even when this sub-frame's navigation capability is disabled by iframe sandbox (Section 3.4.2). As introduced in Section 3.1, in the context of WebView, security risks are introduced that untrusted iframes/popups may leverage the "null" origin (created through the data scheme URL) to hide their own origins while making stealthy risky actions. In this section, we introduce two extended attacks: attacking web messaging integrity (Section 3.2.1) and stealthily accessing web-mobile bridges (Section 3.2.2). In addition to the above origin validation based protection, the above attack cannot also be prevented by other defense solutions, such as [11,44,47,52], because it is challenging for them to distinguish between the main frame and F nested . Figure 7, the security risks are also posed that untrusted iframes/popups can also secretly access webmobile bridges by leveraging the "null" origin (Listing 2), but without being blocked by existing defense solutions. In this section, we illustrate two extended attacks: the WUI overlap attack (Figure 8-a), and the WUI closure attack (Figure 8-b). When a popup is created, the event handler is triggered and may select to put the new WUI in the front of current benign WUI by calling "ViewGroup.addView(new WebView)" (Line 8). As a result, untrusted iframes/popups obtain the ability of performing phishing attacks by simply triggering a popupcreation event, and letting the created WUI load fake web content and overlap the benign WUI. Listing 4: Exploit Code of the WUI overlap attack and the privileged navigation attack We note that the key API name "addView" also appears in existing work on Android UI redressing attacks such as [35]. Due to the lack of URL indicators (e.g., the address bar), the attack is stealthier and may be hardly noticed by users.1 // Using HTML Code 2 <a href="https://attacker.com" target=" _ top" ... 3 // Or Calling JavaScript code 4 window.open("https://attacker.com", _ top, ... Even when the navigation capability is disabled by iframe sandbox (which prevents the above traditional navigationbased attack directly), it is still possible for untrusted iframes/popups to launch privilege escalation attacks and obtain the ability of performing navigation attacks. This is mainly caused by the inconsistencies between the WebView programming features and web regular navigation actions. Otherwise, the WUI redressing attack may be available. Compared to existing Android attacks (such as Trojan attacks [5]), DCV attacks do not require declaring permissions, or carrying payload. More importantly, DCV attacks are more powerful that attackers may obtain abilities to not only access web-mobile bridges, but also directly leverage critical web features.Furthermore, different from existing MITM attacks on a sub-frame inside WebView, DCV attacks cannot be prevented by existing web protections (e.g., SOP). We demonstrate several critical and frequently used web features and behaviors are harmless and safe in the context of regular browsers, but they become risky in the context of WebView.In addition, we also find the design of the event handler features is also flawed. This event handler provides the information of the URL that is being accessed, which may be used as a complement of other event handlers to prevent DCV attacks (e.g., allow the victim app to deny untrusted URLs). For example, our empirical study shows some hybrid apps do not even per-form any check, and some of them only check the domain of the URL but ignore the scheme (e.g., "HTTP" or "HTTPS"). For example, as shown in Figure 5, to trigger WebView inside the Facebook Messenger app, the analysis tools need to automatically log in and open a URL link.We propose a novel static detection tool, DCV-Hunter, that utilizes program analysis to automatically vet apps. To mitigate this issue, we patch the target app during CG construction by inserting extra instructions, which provide necessary type and semantic information of WebView. For example, when an event handler class that contains the implementation of event handlers is configured through the API "setWebChromeClient(...)", DCV-Hunter can check the points-to information of the API's parameter, and retrieve the parameter's actual class name.However, points-to analysis does not scale well, especially when the target app is complex. Note that different from WebView settings and event handlers, which are often class instances, the URL source may have several different formats, such as 1) HTML code or URL string; 2) Intent messages (inter-component communication in Android). For example, as shown in Figure 5, in Facebook Messenger, when a link is clicked, an Intent message that includes the link is sent out to an activity (Andrioid UI) to start WebView and show that link. Given a WebView instance, the web content loaded in WebView is analyzed based on its formats:• HTML code: This format is usually used by the content loading APIs "loadData()" and "loadDataWithBaseURL()" (for origin-hiding attacks). 2) We also check the app information that is provided by developers in Google Play. For each collected web page, its sub-frame is checked based on our threat model (Section 2.3). If URL is a local file link (e.g., "file://..."), DCV-Hunter first dumps the corresponding local file from the target app, and then handles it like above regular HTML code. More specifically, based on the CG and control-flow graph of the event handler, we first find all the possible paths to the key instruction "returning false". To determine each vulnerability, DCV-Hunter checks its conditions respectively:• Origin-hiding: DCV-Hunter first verifies whether the origin of the main frame is "null". • WUI redressing: DCV-Hunter first verifies WebView's settings and event handlers to check whether WUI creation and closure are enabled. To assess DCVs's security impacts on real-world popular apps, we collected 17K most popular free apps from Google Play. Among them, 4,358 apps (38.4%) were potentially vulnerable, including 13,384 potentially vulnerable WebView instances and 27,754 potential vulnerabilities (Table 5). This indicates DCVs widely impact real-world apps.We evaluated the accuracy of DCV-Hunter by measuring its false positives. Last, based on the web content shown in WebView and the logs printed by Android, we determine if the attack code works and the app is vulnerable.Please note that different from prior work, we do not use proxy for code injection. Up to now, the potentially vulnerable apps have been downloaded more than 19.5 Billion times (the fourth column of Table 5). Furthermore, these also include many manually verified popular apps (some examples are shown in Table 6) such as Facebook, Instagram, Facebook Messenger, Google News, Skype, Uber, Yelp, U.S. Bank.Almost all categories of apps are affected. For example, the Google News app (one billion+ downloads) provides the news collections to users. However, after the web pages are fully loaded, these apps run extra JavaScript code through the API "WebView.evaluateJavascript()" to created and embedded new iframes/popups for loading ads content, which introduces security risks.Furthermore, we find the events and news apps are more likely to suffer from WUI redressing attacks. However, as described in Section 3.6, due to the design flaws of the event handler system, such a WUI management strategy is also exposed to untrusted iframes/popups, and cause security issues.Traditional and privileged navigation attacks impact more apps than other DCV attacks. We have successfully manually launched DCV attacks in many popular apps (some examples are shown in Table 6). In this section, we present two example apps (Skype and Kayak) in detail, and also briefly discuss other examples listed in Table 6. An attacker sends the victim user a message containing a benign but vulnerable link (e.g., ebay.com). It is a leading app (ten million+ downloads) for providing traveling-relevant searching services, which are aimed to help users find better prices of flights, hotels, rental cars, and so on. The user clicks one of the searching results (Figure 12-a), such as the AA flight, and then clicks the "View" button to get more details (Figure 12-b). • Facebook Mobile Browser, Facebook, Instagram, and Facebook Messenger: The Facebook Mobile Browser library is frequently used in Android apps, such as Facebook, Instagram, and Facebook Messenger. However, as discussed in Section 5.4, the address bar may face pixel and race condition flaws. When there is an untrusted sub-frame in the rendered news web page, which is common in practice, the untrusted sub-frame can perform traditional or privileged navigation attacks. Hence, the untrusted sub-frame can also do phishing attacks by leveraging traditional navigation and WUI overlap vulnerabilities. For example, in the same environment (Nexus 5), Samsung Mobile Print only shows 23 letters, and lastpass only display 18 letters. • The U.S., Huntington and Chime Mobile Bank apps: These bank apps provide WebView to load content from their websites. Our study shows that some hybrid apps implement their own URL address and title bars (such as those in our case studies), which could reduce the UI inconsistencies between WebView and regular browsers. To better evaluate the security impacts, we conducted an empirical study of 100 apps that contain home-brewed address bars. As Figure 5-c shows, this address bar can effectively mitigate a DCV attack, such as the WUI overlap attack, since the address bar can show the origin of the fake web page in real time. The fake URL may still spoof users.Moreover, in these apps, our analysis finds a race condition flaw, which can be utilized to show fake web content in WebView, while still presenting the benign URL (e.g., ebay.com) in the address bar ( Figure 5-d). For example, in the Facebook Mobile Browser library, which suffers from the WUI overlap attack, attackers may open a WUI to load fake content, and then immediately update the overlapped benign WUI in background. To mitigate DCV attacks, we propose a multi-level solution that enhances the security of WebView. If developers provide the list of trusted URLs in a configuration file inside their apps (located in the app folder "assets"), the untrusted requests can be automatically denied.Second, we also mitigate the UI inconsistencies by providing floating URL indicators. This makes existing defense solutions effective again, since they can enforce security checks or policies on the new origin.Fourth, to counter the WebView UI redressing problem, changes of the WUI rendering order are monitored. To obtain the origin who is creating a popup, the call site is scanned to locate the last popup-creation operation. Furthermore, considering WebView is also a view group (Section 2.2), we make the indicator local: we temporary add a text view to WebView as the indicator. In the caller, if url is the data scheme URL, it will be replaced by O. To mitigate the WebView UI redressing problem, all associated key APIs are monitored, such as addView(). By comparing time costs, we find our mitigation solution only introduces tiny overhead: 2ms on average.Last, considering the Android version fragmentation issue, we also test the compatibility of our mitigation solution by installing our own WebView library and running above the created app in major Android versions. In past years, in the context of regular browsers, iframe/popup behaviors and these security issues were well studied. [21,25,27,40,49,53] explored the security of webmobile bridges, and also discovered several extended attacks.In Section 3.5, we compare DCV attacks with several related attacks, and show DCV attacks may have a set of advantages.Several static analysis based approaches [22,55] were proposed to vet hybrid apps. However, their behaviors are rarely understood and scrutinized in WebView, which has a totally new working environment. We have designed a novel detection technique, DCV-Hunter, to assess the security impacts of DCVs on real-world apps.