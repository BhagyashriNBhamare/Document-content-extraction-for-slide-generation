In this paper, we systematically retrieve and extract 3,500 AT commands from over 2,000 Android smartphone firmware images across 11 vendors. We methodically test our corpus of AT commands against eight Android devices from four different vendors through their USB interface and characterize the powerful functionality exposed , including the ability to rewrite device firmware, bypass Android security mechanisms, exfiltrate sensitive device information, perform screen unlocks, and inject touch events solely through the use of AT commands. While previous research (e.g., [20,46,47]) has demonstrated that these commands can expose actions potentially causing security vulnerabilities, these analyses have been ad-hoc and narrowly focused on specific smartphone vendors. We extract 3,500 unique AT commands from these images and combine them with 222 commands we find through standards to create an annotated, cross-referenced database of 3,722 commands. We characterize the functionality of these commands, confirming the operation of undocumented commands through disassembly of the firmware images.Our analysis of discovered AT commands exposes powerful and broad capabilities, including the ability to bypass Android security mechanisms such as SEAndroid in order to retrieve and modify sensitive information. Our database and code are publicly available at http://atcommands.org.â€¢ Comprehensive Runtime Vulnerability Analysis.We systematically test 13 Android smartphones and 1 tablet for exposure to the USB modem interface and find that 5 devices expose the modem by default while 3 other devices will do so if rooted. We demonstrate that previously-disclosed attacks targeting the lock screen [49], which required malicious application access, can be performed through a USB cable without requiring any code on the target phone. The left shows an Android device behaving like a USB modem when connected with a host machine and the right is an overview of the Android USB stack. As a result, smartphones also support their own AT command sets and expose modem and/or serial interfaces once connected via USB to receive these AT commands. Android phone makers further extended the AT command set by adding Android-specific commands (e.g., to enable debugging over USB) to be consumed by the Android OS running on the application processor [58]. USB device mode, the most common mode and our focus because of its widespread use, is used when the phone connects to a PC and emulates device functionality such as exposing an MTP (Media Transfer Protocol) endpoint.As shown in Figure 1, the Android USB implementation in device mode relies on both the Linux kernel and the Android framework. USB Modem functionality in Android can be accessed if the smartphone vendor exposes a USB CDC (Communication Device Class) ACM (Abstract Control Model) interface from within their phones. For Hayes and GSM AT commands, such as "ATD" (which enables voice dialing), the RIL (Radio Interface Layer) will be triggered to deliver the command to the baseband processor. ASUS 210 803 Google 447 291 HTC 55 299 Huawei 83 1122 LG 150 450 Lenovo 198 1008 LineageOS 199 535 Motorola 145 779 Samsung 373 1251 Sony 128 416 ZTE 30 696 Total 2018 3500 Table 1: Per vendor counts of firmware images examined and AT commands extracted from all images. We design and implement methods to extract, filter, and test AT commands found within the Android ecosystem.Our procedure for acquiring these commands is shown in Figure 2. 2 Finally, using this database, we evaluate the security impact of these commands on real Android devices by setting up an automated testing framework to send the commands to physical Android devices and monitor any side-effects. Additionally, we also capture build information for each image from the standard Android build properties file, build.prop. We also collect any USB init/pre-configuration files (e.g., init.usb.rc) found in Android boot images to gain insight into the USB modes supported by each firmware.In order to find AT commands present in firmware images, we look in every file for any string containing the regular expression AT[+*! We focus on solely collecting AT extended command references within these firmware images for later categorization and testing.Many pieces of firmware were archived using standard formats. Any nested archives directly under the top-level archive (e.g., Samsung images' several nested tars) are similarly unpacked.Once all files are extracted from the archives, we process each file according to its characteristics. ZIP-like files include yaffs (unpacked using unyaffs [13]), Lenovo's SZB (unpacked using szbtool [11]) and Lenovo's QSB (unpacked using a qsb splitter [6]) formats.If the file is a VFAT or EXT4 filesystem image (e.g., system.img), we mount the filesystem and traverse it once mounted to check each contained file. Android filesystem partitions contain APK files, which we decompile using dex2jar [2] and jd-cli [5] treating the output as text files to pull AT commands from. This script applies additional filtering with a more strict regular expression and uses a scoring heuristic to eliminate commands that appear to be invalid.For every command found, we record metadata such as the vendor, image, and filename where it was discovered. A T + C S E T = 0 , 1 , " p a r a m " Filtering Lines containing AT commands as discovered using strings and grep are what we call coarse-grained matches. Line 4-7 will capture and match the AT directive, the extended command namespace symbol, and the command name, which must be greater than or equal to three characters and only contain letters, numbers and underscores. [25] SMS 20 ETSI TS 100 916 [26] GSM 95Total (unique) 222 Table 2: Additional AT commands were manually collected from several specification documents, for a total of 222 unique AT commands.Line 10 will match a read variant, line 12 a set variant with a non-zero amount of numeric parameters, string parameters, and nested AT commands separated by semicolons (e.g., AT+CMD=1,10,"var";+OTHER=1,2). By observing the make-up of these invalid commands, we developed a simple heuristic to score commands based off of three features: the command length, the character classes present, and the valid to invalid command ratio of the file in which it was discovered. With less invalid commands matched, the signal to noise ratio of database increased and our AT command testing was faster.Generating a DB Once we have filtered and stored every AT command along with any found parameters, we generate plain-text DB files for input into our testing framework. Also, these AT commands may not be found inside the Android firmware, but should be supported by baseband processors meeting the public specifications. In practice, we were able to communicate with all modems using a 115200 baud, 8-bit, no parity, 1 stop bit scheme.For some manufacturers, the USB modem interface is not included in the default USB configuration. We use a public tool called usbswitch [47] to select the alternative USB configuration, enabling communication over the modem interface. In the firmware analysis, we first examine the entire corpus of AT commands extracted from firmware to discover trends in their occurrence across vendors and Android versions. We also inspect the USB configuration files inside these images and provide an estimate of how many images may potentially expose the USB modem interface.In the runtime vulnerability analysis, we first look at 14 Android devices to confirm their exposure of a USB modem interface. We launch our AT command testing framework on 8 different Android devices that do expose such an interface and collect command information based on both response and observable effects on the physical devices during our testing. The average amount of AT commands is fewer than 100 across all versions, and is under 75 starting from version 4.3. Our results show that the number of AT commands generally increases across different versions before Android 5.0. In contrast, 3 non-standard AT commands ("AT+DEVCONFINFO" 3 , "AT+PROF" 4 , and "AT+SYNCML" 5 ) are among the most common ones in Samsung images besides the 7 GSM-related commands. We extend our inspection to the top 20 AT commands and find the trend to be the same -the most frequent AT commands are standard for Google, a combination of standard and homemade for Samsung, and mainly vendor-specific for LG.AT Command Usage Per Binary. For LG, atd seems to be the sole native daemon, taking care of the most AT commands.Two LG-specific apps also appear to serve some AT commands.To gain deeper insight into how AT commands can affect these systems, we analyzed the flow of AT commands starting from the gadget serial TTY device (usually /dev/ttyGS0) to any native daemons and finally to other devices or system applications. socket stream), receives commands, and either handles them itself or dispatches them to appropriate parts of the system.As a result of previous work (CVE-2016-4030, CVE- 2016-4031, and CVE-2016, Samsung has locked down the exposed AT interface with a command whitelist. At least 89 different commands Table 4: Per vendor counts of USB.rc files found to contain acm and diag triggers, alongside the average number of contained triggers. In total, we found 12,018 acm and 39,605 diag triggers across USB.rc files in 1,564 images.are handled by this application and, given its extensive system permissions, it is an interesting target. We were able to extract pre-configuration files from 1,564 of the 2,018 total images, some having multiple such files (for example, HTC images contain an average of 10). We look for property:sys.usb.config triggers in the pre-configuration files and discover that 864 images (55% of the images from which USB.rc files were successfully extracted) contain at least one USB.rc file with triggers for ACM mode. Since each image may have multiple USB.rc files, we average trigger counts over the total number of these files from each vendor, rather than the number of images containing USB.rc files. We chose 8 devices shown in Table 6 for testing, including all devices exposing a USB modem interface by default, as well as 3 other devices that offer ways to enable such an interface. Once the phone is put into download mode using the AT commands in Table 8: A selection of commands that can be used to gain further access into the phone.sung phones we tested, the AT commands put the phone into Odin [48] mode, although they were not able to bypass the device standard firmware authentication mechanism [57,30]. As an example, "AT+CFUN=1,1," although a standard command that is supposed to "reset the device and provide full functionalities" 8 according to the GSM spec [26], causes Samsung phones to reboot and causes LG G4 to become bricked and show "LG G4 factory reset status 2" blue screen error. While we were unable to restore the phone using any of the normal procedures, we were able to successfully un-brick the phone using a combination of "AT%MODEMRESET", which changes the factory reset status from 2 into 5, and "AT%RESTART" commands, which finally reboots the phone into a normal booting environment following a factory reset. Combined with "ATH" and "ATA," one can call any number, accept any incoming call, and end a call via a USB connection. We also find an LG-specific command that allows us to change the IMEI, again bypassing the Android layer.One USB debugging enabling command is found in LG phones, together with an AT command to unlock the screen. While Android security has been improving over the years with respect to protecting privacy information, we found quite a few AT commands providing different kinds of information, including IMEI, battery level, phone model, serial number, manufacturer, filesystem partition information, software version, Android version, hardware version, SIM card details, etc., as shown in Table 9. [['AT+DEVCONINFO\r+DEVCONINFO: MN(SM-G955U);BASE(SM-N900);VER(G955USQU1AQD9/ G955UOYN1AQD9/G955USQU1AQD9/G955USQU1AQD9); HIDVER(G955USQU1AQD9/G955UOYN1AQD9/G955USQU1AQD9/ G955USQU1AQD9);MNC();MCC();PRD(VZW);;OMCCODE(); SN ( ease querying. "AT+CLAC" is a standard command; "AT+LIST" only works on Nexus 5; and "AT$QCCLAC" appears to be a Qualcomm-specific command supported by Qualcomm baseband processors. Unlike other Android devices, which rely on sys.usb.config to manage the USB functionality, ASUS ZenPhone 2 has a unique setting to enable the Table 10: Commands specific to the AT proxy mode that allows debugging and tracing inside the modem.hidden modem interface, called AT proxy mode, as shown in Table 6. Based on our testing, mode 1 works like a traditional modem and responds to most of the AT commands from the standards, including making a call using "ATD" and sending a SMS message using "AT+CMGS". Mode 4 is similar to mode 3, except more commands worked without returning errors, such as "AT+GMI" and "AT+GMM". For example, we found 3 hidden menus on LG phones during our testing, including MiniOS menu, Hidden menu 11 , and MID result menu. To demonstrate this attack, we combine AT commands to (1) bypass the lock screen (AT%KEYLOCK=0), (2) navigate to the settings menu using touchscreen automation, and (3) allow USB debugging from our attacking machine (AT%USB=adb). Through manual auditing of the LG G4's firmware image in IDA Pro (specifically in atd), we discovered that the AT%PROCCAT and AT%SYSCAT commands are intended to open, read, and send back the contents of a file relative to the /proc and /sys directories respectively. While this information alone would be useful for an attacker mounting an attack against the system, we discovered that these commands are vulnerable to a path traversal attack. Given that these interfaces are undocumented and proprietary, we believe it to be unlikely that they have received audit from an external source.If an exploitable memory corruption or Use-AfterFree vulnerability were discovered on LG's system daemons, we could dynamically gather Return Oriented Programming (ROP) gadgets by using a call to AT%PROCCAT=[pid]/exe to leak the entire binary image and reveal Address Space Layout Randomization (ASLR) slides using AT%PROCCAT=[pid]/maps to get all of the memory region address ranges. To figure out the exact impact of a command, we need to enable logcat from ADB to inspect the propagation path of the command, and stare at the phone screen during the command runtime looking for Android UI notifications. Our work has shown that even access to a CDC ACM interface to input AT commands can lead to unintended information loss or act as a starting point for more sophisticated attacks. But despite no choice having been made, it is already too late as AT commands may be sent to the phone immediately before Allow or Deny is chosen, effectively disabling charge only mode using AT%USB=adb until the next reboot. Unlike previous work oriented around static analysis, we consider both static and dynamic analysis.Communicating with the modem within a Samsung S2 using AT commands was previously detailed on the XDA forums [58]. Unlike previous work which focused on a single brand/-model, limited the number of AT commands covered, or rediscovered the traditional AT commands for real modems, we provide a systematic study of traditional and Android-specific AT commands in Android ecosystems across different major vendors and phone models.While USB security has been evaluated in traditional computing environments [44,52,53,32], it has received limited attention on mobile computing platforms. Table 15: The results of filtering the lines retrieved by grep (Lines Processed) using the AT regular expression in Figure 4 (Matched vs. Invalid) and through applying the at score heuristic (Spurious). at score = 10Â·(map [0,1] (charclass)+ f ile score) A.2 AT Database FilteringWe define String and AtFile as types, var::attr as accessing the attribute attr of var, and the map [x,y] (n) function to clamp n to the range x â‰¤ n â‰¤ y.In practice we observe that it is less common for an AT command to have digits ( [0][1][2][3][4][5][6][7][8][9]) and lower case letters ( [a- z]) in the same command. This heuristic eliminated an additional 2.4% of all processed lines and brought the total unique AT command count down from 4,654 to 3,500, a 24.8% reduction. Additionally, we spot-checked the spurious commands and their corresponding at score to make sure that large amounts of valid commands were not being discarded. The version distribution of our dataset appears to reflect mainstream Android devices that are still in use, e.g., Google Nexus series (4.x and 5.x), LG G series (6.x), and the latest Samsung Galaxy series (7.x Some limitations of our extraction include potentially missing AT commands, images that fail to extract, and missing build.prop files. at score = 10Â·(map [0,1] (charclass)+ f ile score) We define String and AtFile as types, var::attr as accessing the attribute attr of var, and the map [x,y] (n) function to clamp n to the range x â‰¤ n â‰¤ y.In practice we observe that it is less common for an AT command to have digits ( [0][1][2][3][4][5][6][7][8][9]) and lower case letters ( [a- z]) in the same command. This heuristic eliminated an additional 2.4% of all processed lines and brought the total unique AT command count down from 4,654 to 3,500, a 24.8% reduction. In these cases, we refer to third-party websites (e.g., AndroidMTK.com) which collect Android firmware images from various vendors. The version distribution of our dataset appears to reflect mainstream Android devices that are still in use, e.g., Google Nexus series (4.x and 5.x), LG G series (6.x), and the latest Samsung Galaxy series (7.x