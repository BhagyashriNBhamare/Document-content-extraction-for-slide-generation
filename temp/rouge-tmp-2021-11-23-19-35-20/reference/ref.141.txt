We describe malleability gadgets for emails using HTML, CSS, and X.509 functionality. We devise working attacks for both OpenPGP and S/MIME encryption, and show that exfiltration channels exist for 23 of the 35 tested S/MIME email clients and 10 of the 28 tested OpenPGP email clients. Reports of pervasive data collection efforts by nation state actors, large-scale breaches of email servers, revealing millions of email messages [2][3][4][5], or attackers compromising email accounts to search the emails for valuable data [6,7] underline that transport security alone is not sufficient. In fact, human rights organizations such as Amnesty International [11], EFF [12], or Reporters without Borders [13] recommend using PGP.We show that this trust is not justified, neither in S/MIME nor in OpenPGP. A simple example uses an HTML image tag <img src="http://efail.de"> which forces the email client to download an image from efail.de. We show the existence of backchannels for nearly every email client, ranging from classical HTML resources to OCSP requests and Certificate Revocation lists.Malleability gadget attacks. More concretely, he can flip specific bits in the plaintext or even create arbitrary plaintext blocks if he knows parts of the plaintext.We use the malleability of CBC and CFB to construct so called malleability gadgets that allow us to create chosen plaintexts of any length under the assumption that the attacker knows one plaintext block. We discovered several attacks variations that solely exploit the complex interaction of HTML together with MIME, S/MIME and OpenPGP in email clients. We describe and apply malleability gadgets for the CBC and CFB modes used in email encryption. We describe techniques to create arbitrary plaintexts from specific changes in the compressed plaintext using advanced malleability gadgets. As the IMF lacks features that are required in the modern Internet, such as the transmission of binary data, it is augmented with Multipurpose Internet Mail Extension (MIME) [15] to support transmission of multimedia messages or -in case of OpenPGP and S/MIME -to allow end-to-end encryption of emails. Phil Zimmerman developed the first version of Pretty Good Privacy (PGP) in 1991 as a means to enable political activists to communicate securely on BBSs, Usenet groups and the early Internet.In the late '90s, the IETF published RFC 2440 describing the OpenPGP format, which has been updated several times. Thus, s will be encrypted under n + 1 different public keys for n recipients of the email. Throughout this paper, we focus on the symmetric encryption.Encryption modes in OpenPGP and S/MIME. Modern email clients are able to assemble and render various types of content, most notably HTML documents, and HTML provides methods to fetch resources like images and stylesheets from the Internet. We will refer to all these channels as backchannels because they can interact with possibly attackercontrolled servers.Backchannels in the email context are well-known to be a privacy issue because they allow detecting if, when and where a message has been read and may leak further information such as the user's mail client and operating system. With some limitations, changing the order of the ciphertext blocks will effectively also reorder the respective plaintext blocks.Assume an AES-CBC encrypted HTML email containing an HTML image tag at a known ciphertext pair (C w−1 ,C w ). We now relax this constraint and introduce the concept of malleability gadgets 27th USENIX Security Symposium 551 that allow to inject arbitrary plaintexts into encrypted emails given only a single block of known plaintext.C i-1 P i (known) C i X C i P c (chosen)(aDefinition. Given a CBC gadget (see Fig- ure 2 (a)), it is possible to transform P i into any plaintext P c by replacing C i−1 with X = C i−1 ⊕P i ⊕P c (see Figure 2 (b)). This comes at a cost as X will be decrypted with an unknown key, resulting in uncontrollable and unknown random bytes in P i−1 . In this section we show that S/MIME is vulnerable to CBC gadget attacks, and demonstrate how exfiltration channels can be injected into S/MIME emails. Sign-then-encrypt is the preferred wrapping technique when both confidentiality and authenticity are needed. S/MIME uses the CBC encryption mode to encrypt data, so the CBC gadget from Figure 2 can be used for S/MIME emails. When decrypted, the ciphertext of a signed-then-encrypted email typically starts with Content-type: multipart/signed, which reveals enough known-plaintext bytes to fully utilize AES-based CBC gadgets. (c) (b) C 0 P 0 P 1 C 0 X 0 =IV ⊕ P 0 ⊕ P c0 C 0 P c0 X 1 =IV ⊕ P 0 ⊕ P c1 C 0 C 1 C 2 C 3 P c1 X =IV ⊕ P 0 0 0 0 0 0 0 0 0 decryption C 1 C 2 decryption decryption C 3 decryption decryption decryption decryption decryption decryption decryption ltipart/signedMeaningless signatures. In case of the src attribute, an additional <base ignore="..." href="http:"> element can be used to globally define the base protocol first.Emails sent as text/plain pose another difficulty. Similar to S/MIME, PGP emails also contain known headers and plaintext blocks, for example, Content-Type: multipart/mixed, but after compression is applied, the resulting plaintext may vastly differ per mail.The difficulty here is to guess a certain amount of compressed plaintext bytes in order to fully utilize the CFB gadget technique. However, if clients try to display whatever is left of the message as a "best effort", exfiltration channels may be triggered.In order to understand how the integrity protection can be disabled and how compression can be defeated, we have to go into more detail of OpenPGP. The OpenPGP standard mandates that clients should prefer the SEIP packet type over the SE packet type, because for SEIP packets, modification of the plaintext will be detected due to a mismatch of the SHA-1 hash of the message and the attached MDC packet.Generating SE packets. If the MDC will not match the modified ciphertext and if the client continues processing, the client may be vulnerable.Stripping the MDC. This was originally used to perform an integrity quick check on the session key.While the SE type resynchronizes the block boundaries after encrypting these two additional bytes, the SEIP does not perform this resynchronization. Although the exact details are not important for this paper, it is important to note that a single message may be partitioned, such that different modes of compression can be used for different segments of the message.Modes of compression. A single OpenPGP CD packet can contain multiple compressed or uncompressed segments. This is an important observation, because it allows us to work around the limited amount of known plaintext.Dynamic and fixed Huffman trees. Starting from around 90 to 100 bytes of plaintext, deflate uses a dynamic Huffman tree that is serialized to bytes and forms the start of the deflate data. The first encrypted block seems most promising, because it consists of OpenPGP packet metadata and compression headers.By exploiting backreferences in the compression algorithm we are able to use only 11 bytes long malleability gadgets. Using our malleability gadget we first create three ciphertext block pairs (C i ,C i+1 ) which decrypt into useful text fragments (P c0 , P c1 , P c2 ). We concatenate the ciphertext blocks into (C 1 , . . .C 8 ) so that they decrypt into our three text fragments and the target compressed plaintext block. Once the victim decrypts and decompresses the email, the final text will result into a concatenation of text fragments P c0 , P c1 , P c2 , and the compressed segment. The email client will not process decrypted data located directly in the uncompressed segments if they are hidden in OpenPGP experimental packets. 3 We measured the complexity to guess the first 11 bytes of the first compressed plaintext block in two scenarios: (1) with OpenPGP-encrypted password-reset emails from Facebook and (2) by simulating the standard encryption process with GnuPG with the Enron dataset containing 500, 000 real world emails.Our approach was as follows: in case of the Facebook emails, we build an email generator to generate 100, 000 password reset emails. This means that with two emails approx. 9% of Enron, or "real world", emails can be exfiltrated.Although 500 guesses are very few in a cryptographic sense, the requirement to open 500 emails makes our attacks hardly practical. Using the multipart/mixed content-type, multiple guesses can be embedded into a single email. This allows an attacker to build trivial decryption oracles which work for S/MIME, PGP and presumably for other encryption schemes. If the email client first decrypts the encrypted part and then puts all body parts into one HTML document as shown in Figure 6 (b), the HTML rendering engine leaks the decrypted message to the attacker-controlled web server within the URL path of a GET request as shown in Fig- ure 6 (c). For example, if the email decryption and email presentation steps are provided by different instances, the email client is not aware of the encrypted email message structure. Even worse, in five email clients, the concept shown in Figure 6 can be exploited directly: Apple Mail (macOS), Mail App (iOS), Thunderbird (Windows, macOS, Linux), Postbox (Windows) and MailMate (macOS). ⊥ √ √ √ Postbox ∠ ∠ ∠ ∠ eM Client ∠ √ ∠ √ IBM Notes ∠ - - - Linux Thunderbird ∠ ∠ ∠ ∠ Evolution ∠ √ √ √ Trojitá ∠ √ √ √ KMail ⊥ √ √ √ Claws √ √ √ √ Mutt √ √ √ √ macOS Apple Mail ∠ ∠ ∠ ∠ MailMate ∠ √ √ √ Airmail ∠ ∠ ∠ ∠ iOS Mail App ∠ - - - Canary Mail - √ √ √ Android K-9 Mail - √ √ √ R2Mail2 ∠ √ ∠ √ MailDroid ∠ √ ∠ √ Nine ∠ - - - Webmail United Internet - √ √ √ Mailbox.org - √ √ √ ProtonMail - √ √ √ Mailfence - √ √ √ GMail ∠ - - - Webapp Roundcube - √ √ ∠ Horde IMP ⊥ √ ∠ ∠ AfterLogic - √ √ √ Rainloop - √ √ √ Mailpile - √ √ √ ∠ Exfiltration (no user interaction) √ No exfiltration channel ⊥Exfiltration (with user interaction) -Encryption not supported Table 4: Exfiltration channels for various email clients for S/MIME, PGP SEIP with stripped MDC (-MDC), PGP SEIP with wrong MDC (+MDC), and PGP SE packets. All other clients block external images by default or explicitly ask the user before downloading.We analyzed all HTML elements that could potentially bypass the blocking filter and trigger a backchannel using a comprehensive list of HTML4, HTML5 and non-standard HTML elements that allow including URIs. Based on the CSS2 and CSS3 standards we assembled an extensive list of properties that allow included URIs, like background-image: url("http://efail.de"). Eleven clients performed OCSP requests for valid certificates from a trusted CA.CRL requests. These requests for intermediate certificates can be used as a backchannel. We also applied 33 PGP-related email headers that refer to public keys (e.g. X-PGP-Key: URI), but none of the tested clients performed a request to the given URL, therefore the issue is only relevant to a MitM attacker. Reliably blocking all backchannels, including those not based on HTML, would prevent all the attacks as presented. OpenPGP provides Message Modification Codes and we could observe several OpenPGP implementations that were not vulnerable to our attacks because they dropped ciphertexts with invalid MDCs. In the long-term, updating the S/MIME and OpenPGP standards is inevitable to meet modern cryptographic best practices and introduce authenticated encryption algorithms.Authenticated encryption (AE). In a backwards compatibility attack an attacker takes a secure authenticated ciphertext (e.g., AES-GCM) and forces the receiver to use a weak encryption method (e.g., AES-CBC) [31]. In 2001 Davis described "surreptitious forwarding" attacks and their applicability to S/MIME, PKCS#7, MOSS, PEM, PGP, and XML [34] in which an attacker can re-sign or re-encrypt the original email and forward it onto a third person.In 2002 Perrin presented a downgrade attack, which removes the integrity protection turning a SEIP into a SE data packet [20]. The attacker need 2 15 queries to decrypt two plaintext bytes per block. Later in 2013, Lell presented a practical exploit for CBC malleability against a Ubuntu 12.04 installation that is encrypted using luks [49] with CBC. CSS properties (bypasses for remote content blocking) C 1 <style>@import url('http://efail.de');</style> C 2 <style>body {background-image: url('http://efail.de');}</style> C 3 <style>body {background-image: \75 \72 \6C ('http://efail.de');}</style> C 4 <style>body {shape-outside: url(http://efail.de);}</style> C 5 <div style="background-image: url('http://efail.de')"> C 6 <div style="background-image: -moz-image-rect(url('https://efail.de'),85%,5%,5%,5%);"> C 7 <style>body {background: #aaa url('http://efail.de');}</style> C 8 <div style="background: #aaa url('http://efail.de')"> C 9 <style>ul {list-style: url('http://efail.de');}</style><ul><li>item</li></ul> C 10 <ul style="list-style: url('http://efail.de');"></ul> C 11 <style>ul {list-style-image: url('http://efail.de');}</style><ul><li>item</li></ul> C 12 <ul style="list-style-image: url('http://efail.de')"></ul> C 13 <div style="border-image: url('http://efail.de');"> C 14 <div style="border-image-source: url('http://efail.de');"> C 15 <div style="cursor: url('http://efail.de') 5 5, auto;"> C 16 <svg/><svg><rect cursor="url(http://efail.de),auto"/></svg> URI schemes (bypasses for remote content blocking) P 1 <img src="//efail.de"> P 2 <img src="file://efail.de/x"> P 3 <img src="news://efail.de/x"> P 4 <img src="ftp://efail.de/x"> JavaScript (bypasses for remote content blocking) J 1 <script>...</script> J 2 <object data="javascript:..."></object> J 2 <svg><style>'<body/onload="..."><? de E 3 From: user@efail.de (HTTP request for favicon) E 4From: user@efail.de (DNS request to hostname) The authors thank Marcus Brinkmann and Kai Michaelis for insightful discussions about GnuPG, Lennart Grahl, Yves-Noel Weweler and Marc Dangschat for their early work around X.509 backchannels, Hanno Böck for his comments on AES-SIV and our attack in general, Tobias Kappert for countless remarks regarding the deflate algorithm, and our anonymous reviewers for many insightful comments.Simon Friedberger was supported by the Commission of the European Communities through the Horizon 2020 program under project number 643161 (ECRYPT-NET).