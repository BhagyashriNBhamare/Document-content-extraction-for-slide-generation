Many compelling uses of these technologies are multiuser: e.g., in-person collaborative tools, multiplayer gaming, and telep-resence. Augmented reality (AR) technologies, which overlay digitally generated content on a user's view of the physical world, are now becoming commercially available. The power that AR technologies have to shape users' perceptions of reality -and integrate virtual objects with the physical world -also brings security and privacy risks and challenges. Despite this gap in prior work, we observe that many compelling use cases for AR will involve multiple users, each with their own AR device, who may be physically co-located or collaborating remotely and who may be interacting with shared virtual objects: for instance, in-person collaborative tools [63], multi-player gaming [3], and telepresence [18]. Indeed, even though multi-user AR technologies are not yet ubiquitous in the consumer market, precursors of such issues have already begun to emerge in the wild and in research settings today. For example, though HoloLens supports running an app shared between multiple device users, it surfaces only basic cross-device messaging features, providing no framework for developers to reason about or support complex multi-user interactions.This work: Sharing control for multi-user AR. Unlike prior AR security work that focused on protecting users from untrusted apps, we aim to limit undesirable interactions between mutually distrusting human users -similar to how traditional file system permissions attempt to separate mutually distrusting human users from each other. By addressing this issue before multiuser AR becomes widespread, we aim to inform the design of future AR systems, thereby preventing such multi-user concerns from manifesting broadly.In our exploration of this space, however, we find that controlled sharing for AR content raises unique challenges not present in traditional settings such as file systems or shared online documents. The answer may depend on the semantics of the app and whether Alice and Bob are physically co-located, and the answer interacts with many other design choices.In our work, we thus explore a set of multi-user AR case study apps that represent different points in the possible design space (co-located and remote users, opt-in versus optout sharing) to surface functionality and security goals for an AR sharing control module. This module supports app developers in (1) allowing users to share AR content with other (co-located or remote) users, (2) allowing users to control both inbound and outbound AR content, while (3) addressing fundamental challenges raised by AR's integration with the physical world.One key challenge is to define and manage different ways that AR content might be mapped into the physical world -we do so by supporting both location-coupled objects (which all users see in the same physical place) and location-decoupled objects (for which users see their own copies in separate locations), and by managing the resulting impact of these types of objects on sharing and access control functionality. Our design addresses key challenges and enables app developers to meet our design goals: supporting users in controlling how they share AR content with others and how AR content is shared with them, while taking into account the ways in which AR content might integrate with the physical world. We provide a concrete prototype implementation (ShareAR, in Section 5) and evaluation (in Section 6), iteratively refining our design and demonstrating its feasibility in practice. A second key axis is (2) opt-in versus opt-out sharing: is sharing a deliberate opt-in action between specific people (as the HoloLens developer guidelines prioritize [43]) or are virtual objects public by default, requiring a deliberate optout (as the Meta developer guidelines advocate [40])? Users may also have a dashboard where they can see 1 arsharing.cs.washington.edu or arsharingtoolkit.com the game status. We envision a collaborative AR whiteboard app in which a user, possibly in a co-located group, may choose to share a whiteboard with other users who may be in the same or different physical locations. This case study, also, is grounded in existing work: a pending patent application by Apple [29] describes a GUI for AR document editing, though it does not mention access control.Community Art: Co-located, opt-out. For instance, artists may choose to keep their art private while constructing it or allow the public to view but not edit their sculptures. This case study is similar to Ubiquity6's smartphone app [67], in which all content is public.Soccer Arena: Not co-located, opt-out. Any sharing control solution must coexist with these functionality goals -while one could trivially meet the security and privacy goals outlined in the next section by allowing no shared content, supporting sharing functionality is critical to the success of emerging multi-user apps. The multiuser AR platform must support a way of sharing virtual state, and a mapping between virtual objects and the physical world, among the collaborating users. In response to such multi-user threats, we develop the following security and privacy goals for an AR sharing module.Control of outbound content. We decompose our security goals along this dimension, beginning with control of outbound content, i.e., managing the permissions of other users to access shared content.Three canonical access control rights are "read," "write," and "execute." Extending "read" and "write" to the AR domain (and deferring "execute" to Section 7):• Support granting/revoking per-user permissions.The multi-user AR platform should support setting edit and view permissions for different users. • Support granting/revoking per-object permissions.A user of Community Art may wish to leave one piece of art publicly visible while working privately on another. But although social norms may change, and although mitigating these issues for bystanders -non-AR users, or AR users of a different and non-compatible platform -is difficult and beyond the scope of this work, we still seek to address this physical-world disconnect at least in the near term for multiple AR users of compatible platforms. Since shared content can have serious implications for the receiver, such as spam that obscures important realworld information [34], we derive the following goals:• Support user control of incoming virtual content.For instance, users of Community Art may wish to filter content to only that which is age-appropriate or that does not contain foul language. In the case of Community Art, a user may not want arbitrary other users to attach content to their heads without consent, a homeowner may wish to prevent house guests from placing virtual content inside private rooms, and the keepers of a public monument may not want the monument to be vandalized with virtual graffiti. Likewise, not all security and privacy goals are relevant in all cases: for instance, enforcing personal space for shared AR content may conflict with the functionality needs of Paintball, which requires that virtual paint stick to players upon a hit. We aim to design a flexible module that helps app developers create multi-user AR apps that incorporate shared AR content while mitigating the risk of undesirable interactions between multiple users. We focus on the case of a developer building a single app and mediating the interactions of its multiple users, deferring to future work the problem of cross-app communication. We explicitly trust app developers to incorporate our module (e.g., as an app-level library) into their apps; a malicious app developer might choose to simply not use our sharing module, implementing their own adversarially-motivated sharing functionality, or use our module but violate security or pri-vacy properties through out-of-band means. We also assume that all users are running legitimate, uncompromised versions of the app; strategies for verifying [36,75] or enforcing [73,74] this assumption are significant research challenges of their own.Finally, we assume that communication between devices is secured with today's best practices, e.g., end-to-end encrypted. Thus, we leave the design of specific interfaces -including how much of our module's control should be surfaced directly to users versus shouldered by the app -to future efforts by researchers and app developers. Our work is similar in spiritspirit to work on user interface toolkits (e.g., [25,27]) in that our goal is to enable app developers to easily create and innovate on a range of user interfaces and experiences, rather than to design and iterate on these interfaces directly. We now present the design of a module that AR developers can use to support secure and private sharing of AR content among multiple users. Compatible with our threat model of untrusted users but trusted developers, we envision this module as an app-level library or an OS interface. Effective solutions to these challenges must integrate with the system design components that have more direct analogues in current technologies. Although we aim to be compatible with whichever access control model a particular app chooses to layer atop our module -e.g., a model akin to Google Docs for the Multi-Team Whiteboards case study -we note that this alone is not enough to support the 3D experience of AR, and that the above key design challenges must also be addressed. We categorize the design points along two axes: (1) where in the above sharing flow the control occurs (outbound on the sharer's end, or inbound on the receiver's end), and (2) what type of control is enforced (what object is shared and with whom, where a shared object can be, or how much information from that object is shared). Accordingly, our design supports two notions for how an AR object can be shared with respect to the physical world: (1) Location-coupled objects, which all users see in the same physical location, and (2) Location-decoupled objects, where all users see the same object but in different physical locations. For example, an AR object (say, a virtual whiteboard) may be shared (1) in a location-coupled way between Alice and Bob co-located in New York, and (2) in a location-coupled way between Guanyou and Huijia in Beijing, and simultaneously (3) in a location-decoupled way between the two groups.Handling people moving around the physical world. All users then share the same view of the augmented physical world. The object's views may be manipulated separately in space; a single view may be split into two, or two may be merged into one, but the underlying object that all views represent remains the same.Implications of location coupling for object deletion. For example, our design lets users delete AR content that they have created; it is not clear, however, that this decision should propagate to other users with whom the object has been shared, and location coupling or decoupling affects how deletion is handled.We design the module to support three cases, which can be chosen by the app developer as appropriate:1. If, in Multi-Team Whiteboards, Alice and Bob share a whiteboard in a locationcoupled manner, Alice can delete her instance of the object while Bob keeps working. Case 2: Global Location-Coupled Deletion: Affect all users' views of location-coupled object. Which of these cases is most appropriate depends on the semantics of an app and each use case within that app.Location coupling and decoupling have other design and implementation implications as well. As raised in the Multi-Team Whiteboards case study in Section 2 and in prior work [35], the fact that AR supports peruser private content can have benefits, but it can also fail to provide a signal about the use of physical space (e.g., leading to one user inadvertently standing in front of another's virtual content, or causing social tension due to one user not knowing what another user is doing). Consider a user who places a virtual curtain around sensitive content so that the content is visible only from the user's point of view. For non-planar objects, we encounter the following question: How does the sharing module determine the appropriate level of granularity to expose in the ghosted object, given that object shapes may contain app-specific information content?For instance, in Community Art, the ghost of a sculpture that is private during its development should not mimic the original sculpture's shape too closely. We refer to both personal space (near one's body) and static owned space (e.g., one's home) as owned physical space in this section.Helping users protect their owned physical spaces requires several components: (1) Determining who owns a region in space, (2) Determining what the boundaries of that region are, and (3) Enforcing some kind of policy on shared AR objects in that region.We defer to future work (1), how to determine who owns a region in space. A complete solution to this issue should also consider non-AR users, and we offer the following suggestion as a starting point for future work: locally on the AR user's device, employ computer vision techniques to identify the spatial positions of bystanders visible by the AR user, estimate the rough pose for each bystander, and use that information to mark bystanders' forms as protected regions of space (e.g., using techniques from [2,39]). Building on this observation, our solution is to model owned physical space as a continuum, where violations become more severe -and thus policies could become stricter -as virtual content approaches the protected region.The key question, then, is (3): what should an app do when one user's shared AR content overlaps another user's personal physical space, or a physical region (e.g., a house) that another user owns?Policies for AR content violating owned spaces. Such a policy can be exploited by surrounding the person with AR content just outside the boundary; thus, there is a tension between a large radius to minimize the effects of such an attack and a small radius to enable legitimate functionality.To help balance this tension, and to take advantage of the continuum in the boundary described above, our design provides a transparency gradient policy, by which the module makes shared objects more transparent the closer the objects are to the boundary of any protected region (e.g., around a person). We implemented the concept of an AR object using the Unity GameObject primitive, which is a virtual entity comprising shape, texture, location, physics properties, script-controlled behavior, etc. Our implementation consists of a core module (1888 lines of code), a network shim layer (1137 lines of code), and a short supplementary script to accompany any object shared using the toolkit (45 lines of code), totalling 3070 lines of code. We find that our prototype is flexible enough to support a range of app sharing control needs and is compatible with all considered existing design guidelines.Case study applications. To evaluate the flexibility of our design to support our functionality goals, and the associated developer effort, we built bare-bones prototype versions of our case studies from Section 2.1: Paintball, Doc Edit (a variant of Multi-Team Whiteboards), and Cubist Art. The low number of sharing-related lines of code suggests that the burden on app developers to use our toolkit in practice is reasonable. We note also that the repetition of some prototyped features across multiple apps (such as location-coupled sharing in both the Paintball and Shared Blocks apps) suggests that ShareAR's features are composable, and that developers can choose an app-appropriate subset of functionality.Compatibility with existing guidelines. We report both the total lines of code for the application and the lines of code dedicated to interfacing with the ShareAR toolkit.vestigate the Microsoft HoloLens guidelines [43] and Meta guidelines [40]; we find that ShareAR is compatible with all of them. We examine the security and privacy of our ShareARenabled apps under our threat model of untrusted users (but trusted OS and apps). Considering the inbound security goals from Section 2.3:• Support user control of incoming virtual content: The Doc Edit app surfaces an incoming permission-granting message to the user via a small menu, through which the user can choose to accept or decline. In our test app, a test device creates objects that are location-coupled or location-decoupled, sharing them publicly, as ghosts, or keeping them private. All devices run our evaluation app with the same n and h parameters; all devices join the network sequentially, and then the last device to join the network triggers the evaluation app.The operations we measure are Create, Accept Create, Change Permission, Accept Change, Update Location, and Delete. To correct for clock skew between the two devices, we add into the evaluation script a message from B to A containing B's timestamps (note that this is not part of our module's protocol, but exists solely for the purposes of the evaluation). This overall time is significantly dominated by factors external to the ShareAR module, and that any multi-user sharing solution would encounter: i.e., the network latency and the HoloToolkit Sharing library on either end of it. Some operations exhibit a slight slope downward, suggesting caching benefits.Performance evaluation summary. However, we anticipate that in practice these operations will only occur during a small fraction of the frame updates in an app.Even so, the greatest observed time taken for an operation was under 5 ms, and most measurements remained under 1 ms. Furthermore, since these measurements were of our unoptimized research prototype, continued code optimization may bring the performance overhead down even further. Our design exploration assumes that both users are online when a sharing action occurs; extensions of our work could explore removing this assumption. Some potential user-to-user threats may be subtle: for example, if app developers chose to share ghost objects automatically with no way to refuse or delete them, one user might intentionally or accidentally clutter another user's view with ghost objects (an example of a denial-of-service attack). More broadly, our work lays a foundation for future empirical studies on how developers use our module's components in practice and how users respond to concrete usage of these components. Such an evaluation is nontrivial since evaluating the usability of a single app does not generalize well to the usability of others [45], for the same reason described in Section 2 that a sharing control module cannot be one-size-fits-all. Prior efforts on AR security and privacy include filtering raw real-world input [12,28,49,54,65] and regulating untrusted AR output [32,34]. Other prior work has proposed specific multi-user interaction modalities, such as locationbased interfaces for making virtual content private and auditing content visibility [8,9], mediating shared experiences with remote collaborators [50], and using personal tablets in shared spaces to separate private and public content [62,72]. Our implementation leverages an access control matrix [30] as a simple and flexible model for per-user and per-object permissions; we intend for other established access control models in specific app contexts (e.g., [17,68]) to be layered on top of our toolkit, and we instead focus on the challenges of managing the implications of access control in the 3D physical AR setting.Work in AR user experience has surfaced security-and privacy-relevant themes for multi-user contexts. Lebeck et al. [35] surface multi-user concerns such as physiological attacks, virtual clutter, and the obscurity of other users' actions. Our prototype, ShareAR, 4 for the Microsoft HoloLens demonstrates the feasibility of our design, and our evaluation suggests that it meets our design goals and imposes minimal performance overhead. By addressing multi-user AR sharing control systematically now, we are taking steps toward securing the fully fledged multi-user AR applications of the future. Although many of the user's possible actions via the control panel are similar to those of Doc Edit, there are several key differences: (1) Cubes are public by default rather than private. (4) Object deletion is global location-coupled rather than global location-independent (note, though, that the semantics of location-coupled sharing make these two cases visually equivalent for solely location-coupled objects). Below we include a further analysis of our module's compatibility with existing design recommendations.How are they sharing? A developer could, for instance, write a replacement network shim layer that relies on a central server for data storage and periodically queries the server for updates.What devices are they using? Although our design does support a purely public virtual world, we do not recommend it for all circumstances; our ghosting mechanism maintains a basic shared-world intuition while preserving a degree of privacy. We thank Ivan Evtimov, Earlence Fernandes, Kiron Lebeck, Lucy Simko, and Anna Kornfeld Simpson for valuable discussions and feedback on previous drafts; we thank James Fogarty for his advice on tabletop interface related work.