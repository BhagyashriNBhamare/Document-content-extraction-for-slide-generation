Credentials in DELEGATEE are never revealed to Delegatees and Owners can restrict access to their accounts using a range of rich, contextually dependent delegation policies. DELEGATEE thus effectively reduces mandatory access control (MAC) in this context to dis-cretionary access control (DAC). We present a full implementation of DELEGATEE using Intel SGX and demonstrate its use in four real-world applications: email access (SMTP/IMAP), restricted website access using a HTTPS proxy, e-banking/credit card, and a third-party payment system (PayPal). In any case, the expression and enforcement of delegation policies lies entirely at the discretion of the services.The ability to delegate access to existing online accounts and services, safely and selectively, could give rise to new forms of cooperation among users. Delegation may be useful for sharing digital content, such as access to streaming services like Netflix. Such delegation mostly works only in closed circles with high levels of mutual trust.In this work, we argue that the emergence of trusted execution environments (TEEs), such as Intel Software Guard Extensions (SGX), has enabled an alternative way to achieve fine-grained delegation without trust between the Owner and Delegatee. Brokered delegation is a new and powerful tool that allows users to flexibly share and delegate access, without requiring the explicit support (or even knowledge) of the service providers.To demonstrate the potential of brokered delegation, we design DELEGATEE, a system that provides brokered delegation for many existing web services according to complex contextual access-control policies. We develop several application prototypes to demonstrate how brokered delegation can support new forms of resource sharing and give rise to new markets: secure outsourcing of personal and commercial microtasks, tokenization (i.e., creation of fungible, tradeable units), resale of resources and services, and new payment methods -all without changes to the legacy infrastructure. For example, reselling limited access to a paid subscription service in regions where the service is unavailable undermines the service's security policy, while delegating access to office tools such as mail, calendar, etc. to administrative assistants can enrich the capabilities and usability of the service itself. The effect is similar to allowing use of setuid [28] in Unix irrespective of MAC policies [39,36]. We thus view DELEGATEE as a catalyst for such new contributions to the sharing economy.In summary, we make the following contributions: • Brokered delegation: We advance a new model for user-specified safe delegation of resources and services governed by fine-grained access control. We present two implemented versions: One based on a hardened third party acting as a credential broker and the other as a peer-to-peer system where users directly store, manage, delegate, and use credentials. There are two major motivations for our work: To demonstrate the many settings in which brokered delegation gives rise to new functionality, and to demonstrate how (for good or bad) trusted hardware TEEs can transform practically any mandatory access control policy in an online service into a discretionary one. These include a desire to delegate work to administrative assistants (e.g., read-only access, send mail only to a specific domain) or to allow limited access to law-enforcement authorities (e.g., read emails from a certain time window relevant to a court case). This can have large benefits in terms of cost-saving, business operations, and anonymity guarantees.Imagine that a company wants to allow its employees to execute online purchases with the company credit card or PayPal, but restricted to a certain limit per expenditure and specific merchants. To guarantee repayment, Sofort requires users to share their e-banking credentials with the service, a practice that clearly raises security and privacy risks.Finally, delegation of payments can benefit "underbanked" populations with limited access to online payment systems, by enabling them to leverage social ties (e.g., via brokered delegation to the bank accounts of friends, family, and peers). The most versatile form of delegation is delegation for arbitrary existing web services, which typically authenticate user accounts through password challenges and then cookies over HTTPS. However, Owners can also offer access to their services on an open market to a wide range of potentially pseudonymous or anonymous Delegatees. This would result in a shared economy in which Owners sell time-limited and restricted access to their accounts in return for other services or financial compensation. of reads/writes etc.• The system logs the actions of Owners and Delegatees so that post-hoc attribution of their behaviors is possible (as a means of resolving disputes). • The system minimizes the ability of a service to distinguish between access by the Delegatee and that of the legitimate Owner, thus, preventing delegation. The first is that the Owner remains online and mediates requests, which forecloses on the possibility of private transactions or her inability to provide continuous service availability.The second is that the Owner provides the Delegatee with a digital resource for unmediated access to the target resource. This, however, would require black-box obfuscation to construct a functionality that establishes a TLS connection, authenticates a user with a concealed password, and supports a series of policy-constrained transactions. Modern TEE environments, most notably ARM TrustZone [3,42] and Intel SGX [13,1], enable isolated code execution within a user's system. Additionally, SGX includes a key feature unavailable in TrustZone, called attestation.In summary, the main protective mechanisms supported by SGX are: runtime isolation [33], ocall/ecall interfaces [20], sealing [2], and attestation [22,13]. We distinguish between two types: • In local attestation, a prover enclave requests a statement containing measurements of its initialization sequence, enclave code, and issuer key. The signing key used by the Quoting Enclave is based on a group signature scheme called EPID (Enhanced Privacy ID) which supports two modes of attestation: fully anonymous and linkable attestation using pseudonyms [22,13]. Enclaves can save confidential data across executions trough sealing, a process for encrypting and authenticating enclave data for persistent storage [2] controlled by the untrusted OS. The sealing key is derived from a Fuse Key (unique to the platform, not known to Intel) and an Identity Key (either Enclave Identity or Signing Identity). Both architectures involve three distinct classes of parties: credential Owner(s) A, Delegatee(s) B, and service(s) G. Additionally, the system distinguishes 2 data types: credential(s) C and access control policy(ies) P. Owners and Delegatees are generically referred to as users.The system supports a potentially large population of credential Owners A 1 ...A n (henceforth referred to as Owners) and Delegatees B 1 ...B n . Additionally, the Owner wants to restrict access to the services that she enjoys (i.e. G k ) according to an access control policy P i jxk specific to this delegation relationship. In our peer-to-peer system, there is no need for a central management entity to mediate between the Owners and the Delegatees. The steps to execute secure credential delegation, also given in Figure 1, are:(1) The Owner A i agrees directly with the Delegatee B j for which specific service (G k ) access will be granted using her credentials (C x ). (4) The Delegatee B j starts the enclave and enters the secret information (shared secret exchanged during the initial agreement) to the enclave needed for mutual authentication and secure connection establishment. (8) The scope of usage is strictly limited by the defined 1 Enclaves used for the credential delegation can also be downloaded from a trusted source. The enclave is stateless, meaning that any interruption, restart or termination after the initial start and the delivery of confidential information is going to result in service abortion.Authentication mechanisms. The server has a trusted execution environment (SGX enclaves) that performs security-critical operations. Steps needed to execute secure delegation follow Figure 2:(1) Both the Owners (A 1 ...A n ) and the Delegatees (B 1 ...B n ) need to register with the system to acquire unique login information (username and password) for access. The variety of credentials that can be stored depends on the supported services (see Section 5 for details).3) The Owners A 1 ...A n may agree directly with the Delegatees B 1 ...B n for which specific service (G k ) the Owner will grant access using her credentials (C x ). (4) During the agreement, users exchange their unique identifiers (i.e. system username) so that the Owner from party A knows whom to authorize from party B.(5) The Owner A i establishes a secure channel to the system, specifies for which credentials (C x ) she wants to perform the delegation, for which service (G k ) and to whom (username of B j ), while she additionally specifies the access control policy P i jxk that restricts usage. In case of the Centrally Brokered system, the enclave retrieves important data regarding services, credentials, and access control from the management enclave, while in the P2P system, the enclave awaits the connection from its issuer to receive all information. Common use case examples include family sharing, delegation among friends and colleagues, etc. For example, a bulletin board (available on the Centrally Brokered system) might allow Owners to publicly list services they are willing to delegate, specifying accompanying access control policies and costs (or offer of free service). Securely enforcing defined policies presents a challenge on its own. For every specific service category, and sometimes even for every specific service provider in the same category, a new policy must be created that resembles the exact capabilities and actions which a fully allowed user may invoke. We designed and implemented policies for all scenarios defined in Section 2.1, namely, for mail, payments, and full website access.In mail, DELEGATEE relies on the IMAP and SMTP protocols which are standardized and well defined. Additionally, the DELEGATEE can enforce restrictions on the source, limiting the Delegatee to perform payments only on specific sites or identified merchants/services, and white-listed geographical locations based on the IP address.In the full website access, DELEGATEE implements limiting the use of login credentials to specific sites (e.g., the Owner can have the same credentials for two different services. We envision that a likely deployment scenario is a curated "app store", to which entrepreneurs or power users submit useful policies they develop. We first describe how these properties are ensured assuming the TEE enclaves are secure, even if the software stack of the Centrally Brokered system is compromised.In the Centrally Brokered architecture, the TEE guarantees security properties (a) and (b) even if the central broker and the Delegatee are otherwise corrupted. To summarize, each application makes use of the credentials only to authenticate with the corresponding service.Finally, we note that Denial-of-Service attacks is outside the scope of our security guarantees since an external (network) adversary can always drop messages. Regardless, by arguing security against this attacker model we reduce the harm if such a vulnerability should be found.We address these concerns by designing our protocol so that all communication channels are authenticated end-to-end, even when communicating with an attested SGX enclave. Hence all three security properties are ensured as long as the service's own software stack is not accessible to the attacker, regardless of any forged TEE attestations the attacker may produce or if the attacker can guess the SGX keys used by the enclave.We also avoid the use of persistent encrypted storage in the P2P model, thus, preventing potential rollback attacks [32], which may otherwise occur if the enclave's sealing keys can be derived by the attacker. A systematic security analysis can be found in the online (eprint) version of our paper at https://eprint.iacr.org/2018/160. To be prudent, we would also like to ensure support for forensic investigation in the case that an incorrect policy is abused. So far our security analysis has Enclave type Core mbedtls Total API 4.0 (7.3%) 51.0 (92.7%) 55.0 Mail 1.9 (3.6%) 51.0 (96.4%) 52.9 Paypal 2.6 (4.9%) 51.0 (95.1%) 53.6 CreditCard 2.5 (4.7%) 51.0 (95.3%) 53.5 HTTPS Proxy 2.7 (5.0%) 51.0 (95.0%) 53.7 Table 1: TCB of DELEGATEE in LoC (thousands). In this section we describe our prototype implementation for the selected use cases mentioned troughout the paper. We use the mbedtls library developed by ARM [29], which also comprises the bulk of our trusted-computing-base (TCB). The small number of calls and the small TCB, as shown in Table 1, facilitate code verification and reduce the surface area that may be affected by vulnerabilities.To demonstrate our use cases, we implemented four service specific enclaves for delegated use of mail, PayPal, credit card/e-banking, and full website access through an HTTPS proxy. In case of website login or PayPal, a captcha may be required as an additional authentication step. B j connects securely to the centralized API using her username and password (for P2P model the communication is established as described in Section 3.2, with both methods supported). Our implemented emulated browser follows redirects, fills known forms, and handles cookies until the final confirmation page is reached. Upon clicking on the DELEGATEE checkout the Delegatee can choose one of the available PayPal credentials delegated to her and then the automated payment process starts (please see Appendix A for screenshots). (4) B j connects securely to the centralized API enclave using her username and password (for P2P model the communication methods are described in Section 3.2). Figure 3c shows the detailed architecture and the steps follow bellow:(1) The Delegatee B j wants to buy something from a merchant using some credentials C x containing credit card or e-banking information that have been delegated by A i . For secure browsing we implemented a HTTPS proxy enclave. To log into a service using delegated credentials we leverage similar technologies as in the HTTPS proxy and we thus only extended the proxy enclave to support delegated authentication for websites. The API checks if B j has the rights to use C x and then forwards C x . We can serve around 100 users concurrently even running on consumer grade hardware. Overhead for ocalls and ecalls is measured and analyzed in [40] and is significant for copying buffers from the untrusted memory.The mail enclave incurs minimal overhead (Table 2-b) with the extra handshake to the IMAP server (P2P system). This environment is feature-complete but slow as it is only functionality-oriented. A full HTTPS proxy enclave is in the works to reduce the waiting time and support all client connections.We have also tested video streaming through our proxy, supporting DELEGATEE's streaming service examples (i.e., Netflix). Therefore the performance of video-streaming through DELEGA-TEE is analogous to the ordinary HTTPS proxy use case. As in the previous test, the overhead is negligible once the streaming starts while the initiation depends on the current latency.Our multithreaded implementation was tested using 8 threads. In this section we explore limitations of DELEGATEE, mainly focusing on how brokered delegation faces technical challenges in the authentication process, as well as business and regulatory challenges arising from users controlling their own resources in a more flexible and fine-grained way than service providers intend.Authentication challenges. It can involve not just passwords but additional factors such as personal questions, email challenges, phone challenges, and "two-step authentication" apps such as Authy and Google Authenticator. If Alice is unavailable or denies the transaction -which she may fail to recognize as originating with her delegation -the transaction will fail.For future production deployment of DELEGATEE, we will address these complications in several ways:• Application-specific delegation: Authentication systems vary considerably across applications and service providers. For example, if Alice has delegated use of her bank account to Bob, then she may be unable to use it herself while Bob (or DELEGATEE, to be precise) is logged in. For example, Owner Alice may set a policy that only delegates her resource at times when she is unlikely to use it. Due to the complexity, for now, the policies have to be created beforehand along with the implemented delegation scenario, while the end-user involvement is limited to configuring parameters, out of a set of given policy characteristics.If all service operators would share a unique set of API calls that could cover the full functionality of their services, then the deployment of DELEGATEE would be feasible for almost all service categories. In many cases, DELEGATEE allows the creation of secondary markets (see the last paragraph of the section) and poses a threat to the revenue stream of the original service operator. We have addressed several of them, however, future work involves investigation into further improvements that could make the distinction between the Owner and any Delegatee less possible.Scalability. Scalability for all other supported services except video streaming is generally not a constraint. Brokered delegation could enable broad reselling and foster competition with direct sales of the subscription service.Such secondary markets would in many cases violate providers' existing terms of service and might resemble markets for underground sales of virtual goods [27,44]. Those underground markets have met with two responses, sometimes used in tandem: (1) providers aim to detect facilitators of secondary markets and penalize or ban them, and (2) providers themselves seek to capture the revenue streams generated by secondary markets; e.g., online role-playing game providers have offered virtual goods for sale through their own shops [31]. ARM TrustZone, for example, is commonly used to protect data on mobile devices, e.g., biometric templates and encryption keys in iOS devices [4]. Second, using chains of cryptographic assertions or certificates (as in X.509 or SPKI/SDSI), which can be digitally signed and communicated without interacting with a central server [10,15,34,8,6]. In this paper we propose a new concept called brokered delegation, using TEEs to enable flexible delegation of credentials and access rights to internet services. Upon selecting some credentials, the enclave takes over and completes the transaction and Alice is redirected to the confirmation page. First, Bob enters his credentials into DELEGATEE and delegates them to Alice.