These false classifications include data flows to third-parties that are omitted (e.g., the policy states only the first-party collects the data type), incorrect (e.g., the policy states the third-party does not collect the data type), and ambiguous (e.g., the policy has conflicting statements about the data type collection). For example, consider the following sentence from a popular Android application with over 10 million downloads:When you launch any of our applications, we collect information regarding your device type, operating system and version, carrier provider, IP address, Media Access Control (MAC) address, International Equipment Mobile ID (IMEI), whether you are using a point package, the game version, the device's geo-location, language settings, and unique device ID. Therefore, the application's privacy policy is also mandated to disclose the third-party entities with which they share data based on the CCPA.In this paper, we propose POLICHECK, which provides an entity-sensitive flow-to-policy consistency model to determine if an application's privacy policy discloses relevant data flows. Furthermore, we found 5.2% of applications state that they do not share or collect a specific type of information within their privacy policy, but dynamic analysis shows the opposite.The results from our empirical study highlight the poor state of privacy policies for Android applications, which demonstrates the need for action from regulatory agencies and application markets. We show that our entity-sensitive consistency finds significant flow-to-policy inconsistencies that involve sharing data to third-party entities, impacting tens-of-millions of users.The rest of this paper proceeds as follows. Section 3 formally defines the different types of flow-to-policy consistencies and inconsistencies. A data flow has a clear disclosure when there exists a statement within the privacy policy that directly discusses the exact type of data and entity of the data flow, and there is no other policy statement that contradicts it. We then look for policy statements that contradict the statement by extracting all negative sentiment statements that discuss the flow's data type and entity at any semantic granularity (e.g., analytics providers collecting device information). We differentiate vague disclosures from clear disclosures, because there is a risk that the language used to disclose the data flow is so broad that it encapsulates a wide-range of data flows, making it difficult to determine if third-party sharing or collection occurs. If we only considered the data type, we would identify the following policy statement: "When you access our Services, we automatically record and upload information from your device including, but not limited to attributes such as the operating system, hardware version, device settings, battery and signal strength, device identifiers..." This policy statement indicates application itself is collecting device identifiers. A data flow has an incorrect disclosure if a policy statement indicates that the flow will not occur (i.e., a negative sentiment sharing or collection statement) and there is not a contradicting positive sentiment statement. We classify a data flow as having an ambiguous disclosure if there exist two policy statements that have a logical contradiction relationship (C 1 to C 5 in Table 1), but not a narrowing definition relationship (N 1 to N 4 in Table 1), as described above. In this case, we only find two relevant policy statements, "On our apps, these third party advertising companies will collect and use your data to provide you with targeted advertising that is relevant to you and your preferences with your consent." A data flow f ∈ F is a tuple f = (e, d) where d ∈ D is the data type that is sent to an entity e ∈ E.For example, an application that sends the device's advertising identifier to AdMob can be concisely represented by the data flow tuple (AdMob, advertising identifier). For example, a privacy policy may specify (advertiser, collect, device identifier) to disclose the data flow (AdMob, advertising identifier). For example, consider we have the data flow (Flurry, advertising identifier) and the policy statements: (advertiser, not_collect, identifiers) and (analytic provider, collect, identifier). The existence of such policy statement conflicts requires flow-topolicy consistency analysis to consider the policy as a whole, rather than looking for the existence of any sharing or collection statement, as done in prior work [29,32,38]. LogicExample * N 1 e i ≡ ε e j ∧ d k δ d l (Flurry, collect, Dev Info) (Flurry, not_collect, IMEI) N 2 e i ε e j ∧ d k δ d l (Flurry, collect, Dev Info) (Advertiser, not_collect, IMEI) N 3 e i ε e j ∧ d k ≡ δ d l (Advertiser, collect, IMEI) (Flurry, not_collect, IMEI) N 4 e i ε e j ∧ d k δ d l (Advertiser, collect, Dev Info) (Flurry, not_collect, IMEI) C 1 e i ≡ ε e j ∧ d k ≡ δ d l (Flurry, collect, IMEI) (Flurry, not_collect, IMEI) C 2 e i ≡ ε e j ∧ d k δ d l (Flurry, collect, IMEI) (Flurry, not_collect, Dev Info) C 3 e i ε e j ∧ d k ≡ δ d l (Flurry, collect, IMEI) (Advertiser, not_collect, IMEI) C 4 e i ε e j ∧ d k δ d l (Flurry, collect, IMEI) (Advertiser, not_collect, Dev Info) C 5 e i ε e j ∧ d k δ d l (Advertiser, collect, IMEI) (Flurry, not_collect, Dev Info) C 6 e i ≡ ε e j ∧ d k ≈ δ d l (Flurry, collect, Dev Info) (Flurry, not_collect, Track Info) C 7 e i ε e j ∧ d k ≈ δ d l (Flurry, collect, Dev Info) (Advertiser, not_collect, Track Info) C 8 e i ε e j ∧ d k ≈ δ d l (Advertiser, collect, Dev Info) (Flurry, not_collect, Track Info) C 9 e i ≈ ε e j ∧ d k ≡ δ d l (Analytic, collect, IMEI) (Advertiser, not_collect, IMEI) C 10 e i ≈ ε e j ∧ d k δ d l (Analytic, collect, IMEI) (Advertiser, not_collect, Dev Info) C 11 e i ≈ ε e j ∧ d k δ d l (Analytic, collect, Dev Info) (Advertiser, not_collect, IMEI) C 12 e i ≈ ε e j ∧ d k ≈ δ d l (Analytic, collect, Dev Info) (Advertiser, not_collect, Track Info) * P = {(e i , collect, d k ), (e j , not_collect, d l )}, f = (Flurry, IMEI)whether a specific data flow is disclosed. P C is the set of policy statements p ∈ P for which there exists a p ∈ P such that p and p have a logical contradiction (C 1−5 ) or a flow-sensitive contradiction (C 6−12 ). A data flow f is consistent with an application's privacy policy P if and only if ∃p ∈ P f such that p.c = collect ∧ ∃p ∈ P f such that p . An application's privacy policy has a vague disclosure of a data flow f if there does not exist clear disclosure, but there does exist a collect policy using a broader semantic granularity for either the data type of entity, and there does not exist a conflicting not_collect policy for the data type and entity. However, if the terms in the matching policy statement are too broad, the disclosure may not be meaningful to the user.For example, the policy statement (third-party, collect, personal data) is considerably more vague than (AdMob, collect, advertising identifier) to describe the data flow (AdMob, advertising identifier). For example, if averaging or summing, the tuples (anyone, collect, device information) and (advertising network, collect, information) would have the same vagueness score for the flow (AdMob, Ad ID). Data Flow Extraction: AppCensus [6] identifies privacy sensitive data flows in Android apps using the approach proposed by Reyes et al. [27]. Domain-to-Entity Mapping: While data flows are represented as a type of data being transmitted to a domain or IP address, privacy policies discuss data flows using terms for entities instead of domains (e.g., cdp.cloud.unity3d.com We curated a list of 144 advertisers and 40 analytics providers on the Google Play store from AppBrain.com. For example, if the flow (advertising identifier, analytics.mobile.walmart.com) occurs in the app com.walmart.android, we mark the flow as a first-party flow, as reversing walmart.com results in com.walmart, which matches the beginning of the package name. In this section, we use POLICHECK to perform a large-scale study of analyzing the consistency of 45,603 data flows from 13,796 unique Android applications and their corresponding privacy policies. 31.2% (4,299/ 13,796) of policies had at least one negative sentiment policy statement and 92.6% (12,779/ 13,796) of policies had at least one positive sentiment policy statement. Across all of the flows, Unity was the most common recipient, which accounted for 6,270 data flows containing 6 unique data types across 4,381 applications.We ran POLICHECK on the dataset and the raw statistics from analysis are listed in Table 3. As we discuss in Finding 2, this is likely due to the fact that policies are being vague about third-party disclosures.In contrast, applications were more likely to clearly dis- close their first-party data flows (216 data flows across 206 apps). In total, 54.9% (23,367/ 42,592) of third-party flows were disclosed using vague terms to refer to the entity, the data type, or both. In particular, data flows to Crashlytics and Unity3d accounted for 7.4% of third-party vague disclosures (3,131/ 42,592). Therefore, it is largely feasible that developers explicitly disclose the exact data types being shared with the exact entities (clear disclosures) As the developers disclosed the behaviors within the privacy policy, albeit vaguely, they are likely aware that the third-party libraries collect some data. Surprisingly, they were only disclosed by the terms "device identifiers" or "identifiers" in 20.8% of the flows (192 / 925 For third-party flows, Figure 7 shows that sharing both Android IDs and Ad IDs with Crashlytics and Unity3d accounted for 27.8% (3,168/11,398) and 24.7% (2,810/11,398) omitted disclosures, respectively. This application collects the user's Android ID, but the privacy policy explicitly states, "We DO NOT collect your unique identificator [sic]," and also states "Anonymous identifiers, we use anonymous identifiers when you interact with services, such as advertising services and others." For example, we found that 35 applications contained first-party flows collecting a wide-range of data (e.g., location (22 apps), phone number (6 apps), email address (2 apps), applications installed (1 app), Ad IDs (3 apps), and various identifiers (3)). Note that we marked 27 flows as uncertain, resulting in 153 data flows across 151 applications Results: POLICHECK achieves an overall 90.8% precision (139/153) for performing flow-to-policy consistency analysis. We explored this direction by analyzing a select number of applications with the greatest number of omitted disclosures in our data set.Case Study: Omitted disclosures may also indicate confusing language in privacy policies: A popular game application with over 100M+ downloads called 'Ant Smasher by Best Cool & Fun Games," (com.bestcoolfungames.antsmasher) had 17 unique omitted disclosures. To measure the impact of entities in flow-to-policy consistency, we simulated the error rate of entity-insensitive consistency models (i.e., models that do not consider entities) by running consistency analysis in the following three configurations: (1) without entities and without negations (negationinsensitive and entity-insensitive); (2) without entities (entityinsensitive); and (3) without negations (negation-insensitive). Finding 8: Prior entity insensitive flow-to-policy consistency models may wrongly classify up to 37.1% of inconsistent third-party flows as consistent. With negation-insensitive consistency models, the incorrect disclosures or ambiguous disclosures are wrongly classified as either clear disclosures or vague disclosures, which is concerning as these models would state that the data flow is consistent with the policy. The privacy policy is copied below in entirety, which shows the potential deceptiveness of their policy.Okay guys listen up, I'm forced to write this privacy policy or Google will take this APP from the store. From the 8 applications in our dataset, we found 95 flows originating from Nazara Games applications, of which, 75 had incorrect disclosures. Even more so when considering that they're sending this information is likely being used to target ads towards children.In Nazara Games' privacy policies, that they do not sell or rent personal information unless the user gives consent.Nazara does not sell or rent your Personal Information to third-parties for marketing purposes without your consent.As some of these applications are for children, verifiable consent is required from the child's legal guardian according to regulations [2]. The main source of ambiguous disclosures were due to statements regarding allowing business partners to collect device identifiers, but then stating that third-parties will not collect device identifiers without consent.The "Bowmasters" game application (com.miniclip.bowmasters) has over 50M downloads and 12 unique ambiguous disclosures. Future work can explore more comprehensive approaches for resolving domains and IP addresses to entities and constructing domain-to-entity mappings.Moreover, while POLICHECK correctly reasons over thirdparty disclosures that are disclosed in terms of parent companies (i.e., subsidiary relationships), the current implementation does not capture subsidiary relationships of first-party disclosures. For policy analysis, Zimmeck et al. [38] and Yu et al. [34] rely on keyword-based approaches, of using bi-grams and verb modifiers respectively, to infer the privacy policies, while Slavin et al. [29] and Wang et al. [32] use crowdsourced ontologies for policy analysis. Moreover, none of the works focus on the evaluation of app behavior, which is a core component for our entity-sensitive flow-to-policy analysis.There is a rich body of work to understand [8,13,22,33] and bridge [28,36] the gap between application behaviors and users' understanding of these behaviors. While the last decade has produced many static and dynamic analysis to detect when mobile applications send privacy-sensitive data to the network, such data flows are not privacy leaks if they are disclosed in a privacy policy.