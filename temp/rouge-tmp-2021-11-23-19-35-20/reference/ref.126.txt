Recent measurement studies have highlighted security threats against the code-signing public key infrastructure (PKI), such as certificates that had been compromised or issued directly to the malware authors. Effective revocations rely on three roles: (1) discovering the abusive certificates, (2) revoking the certificates effectively, and (3) disseminating the revocation information for clients. Unfortunately, anecdotal evidence and recent measurements of the Windows code-signing ecosystem have documented cases of signed malware [8,9,12,23,26] and potentially unwanted programs (PUPs) [1,13,17,28], where the trusted certificates were either compromised or issued directly to the malware authors. Due to this fact, missing or delayed revocations for a certificate involved in abuse allow bad actors to generate trusted executables until the certificate expires or is successfully added to a revocation list.Abusive code-signing certificates may also present a security threat beyond their expiration dates, which is an important distinction from the Web's PKI where the expiration date limits the use of a compromised certificate and also puts a limit on how long a revocation for that certificate must be maintained. This process involves three roles: (1) discovering certificates that are compromised or controlled by malicious actors; (2) revoking these certificates effectively; and (3) disseminating the revocation information so that it is broadly available.Unlike in the Web's PKI, where potentially compromised certificates can be discovered systematically through network scanning [6,29,30], in the code signing PKI this requires discovering signed malware or PUP samples on end-hosts around the world. These challenges render the code signing ecosystem opaque and difficult to audit, which contributes to an under-appreciation of the security threats that result from ineffective revocations.In this paper, we present an end-to-end measurement of certificate revocations in the code signing PKI; in particular, how effective is the current revocation process from discovery to dissemination, and what threats are introduced if the process is not properly done. Our work extends prior works in the code signing PKI; previous studies have focused on signed PUPs [1,13,28] and signed malware [12], but there is no study of code signing certificate revocation process yet. In summary, we make the following contributions: (1) we collect a large corpus of code signing certificates and the revocation information, (2) we conduct the first endto-end measurement of the code signing certificate revocation process, (3) we use our data to estimate a lower bound on the number of compromised certificates, (4) we highlight the problems in the three parts of the revocation process as well as new threats that result from those problems, and (5) we discuss suggestions/recommendations to improve the security of the code signing ecosystem. The code signing PKI provides a mechanism to validate the authenticity of a software publisher and the integrity of a binary executable. Similar to the Web's PKI (e.g., TLS), the software publishers first ask a Certificate Authority (CA) to issue code signing certificates based on the X.509 v3 certificate standard [4], and they use the certificates to sign their binary files. The standard relies on Public Key Cryptography Standard (PKCS) #7 [11] that stores X.509 code signing certificate chains, X.509 TSA certificate chains, a digital signature, and a hash value of a PE file, with no encrypted data.Trusted timestamping. Properly signed and trusted timestamped malware can be trusted and remain valid even after its certificate expiration date.Trends of code signing abuse. CAs are responsible for revoking certificates for reasons such as: the private key associated with a certificate is made public, the entity behind the certificate becomes untrusted, the certificate is used to sign malware even if the source is unknown, or if a certificate is erroneously issued [12]. The revocation process consists of three roles: (1) promptly discovering compromised certificates, (2) performing an effective revocation of the certificate, and (3) disseminating the revocation information.Discovery of potentially compromised certificates. The delay between the initial discovery (t d ) and the time when the revocation information is made public (i.e., revocation publication date (t p )) should be as short as possible. Once the CAs confirm the abuse, in collaboration with the certificate owners, they have to decide the effective revocation date (t r ) due to the trusted timestamping. Suppose we have a code signing certificate valid between t i (issue date) and t e (expiration date). The two predominant ways to disseminate certificate revocation information are (1) Certificate Revocation List (CRL) [4] and (2) Figure 1: An example of (i) an effective revocation date (t r ) that determines the validity of signed malware and (ii) a revocation delay (t p -t d ) (t i : issue date, t e : expiration date, t r : effective revocation date, t b : signing date of a benign program, t m : signing date of malware, t d : detection date, and t p : revocation publication date). â€¢ CRLs contain the revocation information (certificate serial numbers, (effective) revocation date, revocation reason) of certificates that have been revoked. The code signing CAs, however, must maintain and provide the revocation information of all certificates that they have issued including expired certificates due to the trusted timestamp [3,20]. Since the trusted timestamp extends the life of a signed binary, CAs must maintain the CRLs and OCSP in perpetuity to make revocation information always-available for clients. When alerted to a certificate problem, CAs have to begin investigating the reports within 24 hours and revoke the compromised certificates and publish the revocation information within seven days or get reasonable cause from the owner of the certificate to delay [3]. Because of the trusted timestamp, any binary signed with the certificate before the effective revocation date (t r ) is still considered trusted, while any file signed and timestamped after the effective revocation date (t r ) is considered untrusted. Suppose that a client platform does not follow the specification, but instead applies a soft-fail revocation checking policy; the softfail revocation checking policy is for client platforms to trust certificates when revocation information is unavailable. In contrast, little is known about code signing certificate revocation: in particular, the revocation process (1) promptly discovering compromised certificates, (2) revoking the compromised certificates effectively, and (3) disseminating the revocation information. Our non-goals include fully characterizing (1) CA's internal infrastructure problems, (2) their internal revocation policies, and (3) Windows platforms internal revocation checking policies. Table 2 shows the breakdown of the fundamental data.Code signing certificates (D1 Table 2 is that most of the PKCS #7 files were duplicate code signing certificates used to sign binaries with different hashes. To get more code signing certificates, we also select around 300 PE files for each CA from WINE (c.f., Section 3.3) and download the samples from VirusTotal using the download API; 11,108 PE samples are collected. The D1 data set is used for (1) the trend of revocation setting policy (Section 5.1), (2) the certificates without CRL and OCSP (Section 6.3), (3) the inconsistent responses from CRLs and OCSP (Section 6.3), and (4) the unknown or unauthorized responses from OCSP (Section 6.3). We extract the CRL and OCSP points from 145,582 leaf code signing certificates that we find in the four data sets. The revocation date field is effective revocation date (t r ) (c.f., Section 2.2) that determines the validity of signed program code. Therefore, we devise a system, called revocation publication date collection system that collects revoked serial numbers once a day from our CRL data set in order to detect the revocation publication date (t p ), when the certificate is added to CRL or OCSP servers. For example, to measure the malware which is still valid due to the ineffective revocation date setting, we need a view of the binaries signed with a revoked certificate and information to determine their maliciousness and their signing date. For the revoked certificates observed by our revocation publication date collection system, we also received meta information about the binaries signed by the 2,617 code signing certificates from Symantec, using the serial numbers of the certificate to identify the set of the affected binaries. This D5 data set is used to estimate malware signing certificates in the wild (Section 4.1), and to examine the revocation delay (Section 4.2). We use the private API to collect the following information from these reports: the signed date of the binary, the number of AV engines detected the file as malicious, and the first submission timestamp to VirusTotal.VirusTotal also allows users to apply rule-based matching on the incoming submissions, which can help researchers find a specific type of malware. The extracted data set is used in the estimation of malware signing certificates (Section 4.1), and to examine the revocation delay (Section 4.2). This D7 data set is used for measuring the unreachability of CRLs (Section 6.2). Similar to the reachability checker for CRLs, we also develop an OCSP reachability checker. We therefore compute a conservative estimate of the number of certificates used to sign malware in the wild, and we compare it with the coverage of a major security company to assess the odds of discovering all the potentially compromised certificates (Section 4.1). Furthermore, after a signed malware sample has been discovered, the information must reach the principal responsible for revoking the code signing certificate, and the principal must add the certificate to Certificate Revocation List (CRL). The process of revocation starts from discovering the certificates used in malware. These subjects are marked and released in the wild.The second sampling results in the capture of n 2 subjects, among which p bears the marks from the previous sampling. An estimatorË†NestimatorË† estimatorË†N for the total population N can then be computed as:Ë† N = n 1 n 2 p(1)We apply the mark-recapture technique to the malware signing certificates from two different data sets: Symantec telemetry (D5) and VirusTotal (D6). This assumption ensures that the proportion of recaptured subjects in the second sample p/n 2 is the same as the proportion of marked subjects out of the total population n 1 /N, which leads to Equation 1. We set the birth date for each certificate as the first seen timestamp in the Symantec telemetry and the first submission date for VirusTotal, as this is when they join the population of potentially compromised certificates. Excluding the last week (9/4-9/10), we estimate that at least 1,004-1,786 code signing certificates were used to sign malware in the wild and had not been revoked by the date of the estimation. 5 On average, the estimated population is 2.74Ã— larger than the observed number of certificates. This suggests that even a major security company like Symantec and an information aggregator like VirusTotal do not observe a large portion of the potentially compromised certificates.To illustrate the effect of the inefficient discovery process on the revocations, in Figure 2(b) we compare the mark-recapture estimation on all the certificates observed during the measurement period (4/18-9/10/17) with the actual number of newly revoked certificates, which revocation publication date (t p ) is between 4/18/17 and 9/10/17, from data set D3. Kim et al. [12] estimated that 80% of the compromised code-signing certificates remain a threat for over 5.6 years after they are first used to sign malware. 5 Because the Symantec telemetry dataset was collected starting from the certificates we observed on CRLs (D3), all the certificates in D5 were revoked by the end of our observation period. Of the 2,617 revoked certificates, we find 468 (17.9%) revoked certificates in the D5 data set, and 146,286 hashes signed with the revoked certificates. In total we find 19,053 unique samples in VirusTotal, and 254 unique certificates used to sign the samples.For each certificate, we use the earliest detection date of a signed malware sample as the discovery date (t d ). The long delays imply that CAs either do not receive the information in a timely manner or do 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 Figure 4: Effective revocation date setting trends: Number of revoked certificates (stacked). The trust in a signed binary depends on the effective revocation date, and so a CA generally tries to set t r (effective revocation date) close to the oldest t m (the date on which the certificate signed malware). We examine how the CAs set the effective revocation date when they revoke the certificates using our collected 145,582 code signing certificates (D1 revocation status using CRL points, specified at its certificate extension field. Soft revocation is more common than hard revocation in all CAs except for Wosign; in particular, Startcom has never performed hard revocation in our observation. The two certificates of Go Daddy were set to one day before their issue date, and the one certificate of Digicert was set to five days before its issue date. As mentioned in Section 2.3, soft revocation may result in the survival of signed malware even after a certificate has been revoked if a CA sets the wrong effective revocation Figure 5: CDF of the revocation date setting error (t r âˆ’ t m ): difference between the effective revocation date and the first malware signing date of a certificate.date. We also measure how many malware signed with the certificates are still valid due to the ineffective revocation dates. The number of still-valid signed malware is relatively small in our data sets, but we believe that more still-valid signed malware can be found in the wild since our data sets are limited, and do not cover all samples in the wild. netmarketshare.com), since more than 75% of Windows clients use Windows 7 and Windows 10, we focus on only these two platforms.to allow execution with no prompts unless the revocation is explicitly found, for all unknown and unexpected cases the assumption is that it is safe to proceed. However, we observe that 788 (0.5% out of 145,582) certificates contain neither CRLs nor OCSP points from the corpus of leaf code signing certificates (D1). In both versions of Windows, a message saying "The revocation function was unable to check revocation for the certificate" is displayed if you manually inspect the certificate (seen in Figure 6 in the appendix), but the certifi- cate appears trusted due to the soft-fail revocation checking policy of Windows. For example, two CRLs points (http://crl.globalsign.net/ObjectSign.crl, http://www.startssl.com/crtc2-crl.crl) produce HTTP 404 error, which indicates that the CA has removed the CRL from the address but a server still exists at that domain.One domain has been bought by a domain reseller, which means the CRL point is no longer available. However, the AOL's servers are currently no longer maintained, and its clients who try to verify program code signed with the certificates are unaware where to query for revocation status information.Unreachable CRLs and OCSP points are common, since there are many valid reasons to not have a network connection, and so Windows handles these failures quietly. One CA replied that they had a flaw in their revocation system that removes certificates after the certificate expired, and they fix the flaw to keep the certificates on the CRL indefinitely thanks to our report.The disappeared serial numbers from CRLs are unlikely to affect the Windows platforms as long as certificates have both CRLs and OCSP points since in Windows, OCSP is always preferred over CRL to check revocation status. We expect that the state in the CRL and OCSP would be consistent; for example, when the serial number of a revoked certificate is found in a CRL, the corresponding OCSP will also return that the certificate is revoked.We observe that 19 certificates have inconsistent responses from CRLs and OCSP from our data set (D1); the certificates are valid according to the OCSP, but are revoked in the corresponding CRLs 7 . To prevent this sort of threats caused by mismanagement issues, Windows should double-check certificate revocation status using both OCSP and CRLs.The 19 certificate were issued by Go Daddy; three certificates were issued by Starfield Technologies (related to Go Daddy). Due to the nature of how signed binaries are distributed (various distribution mechanisms), there is no easy way to collect all signed binaries and code signing certificates in the wild. TLS certificates collected through network scanners provide a view of the publicly accessible Web's PKI, however our collected code signing certificates may not be representative of the entire code signing PKI ecosystem as the collected data sets do not cover all certificates and signed samples in the wild. The findings from our measurement study (Section 4-6) suggest the current revocation systems based on CRLs and OCSP are facing several problems including (1) difficulties in discovering compromised certificates, (2) revocation delay, (3) ineffective revocation dates, and (4) improper maintenance of the revocation information. The CAs should better understand the code signing PKI and properly maintain their revocation systems (CRLs and OCSP servers) to have better availability and consistency that can help clients correctly check the revocation status of certificates. Additionally, we analyzed the revocation process from end-to-end and we report new findings regarding the discovery of compromised certificates and the dissemination of revocation information.Revocations problems in the Web's PKI. However, we found that the revocation processes can have security problems, and new security threats can be introduced by the problems.In the discovery phase, CAs take on average 5.6 months to revoke the compromised certificates after the certificates was used to sign a known malicious binary. We also thank VirusTotal for access to their service and Symantec for making data available through the WINE platform.