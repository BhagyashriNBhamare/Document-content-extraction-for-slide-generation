However, it has been shown that deploying it in a truly secure fashion is challenging for a large fraction of online service operators. While Let's Encrypt was specifically built and launched to promote the adoption of HTTPS, this paper aims to understand the reasons for why it has been so hard to deploy TLS correctly and studies the usability of the deployment process for HTTPS. Transport Layer Security (TLS) and its predecessor Secure Sockets Layer (SSL) are fundamental cryptographic protocols to secure information in transit across computer networks and are employed to ensure privacy and data integrity between two communicating parties. Recent studies on TLS usage in the Internet ecosystem for both HTTPS [16,25] and email [24,31], however, revealed that a large fraction of communication endpoints are poorly secured and suspectible to a broad array of possible attacks (e.g., Heartbleed [3] and DROWN [11]). Even worse, a large number of services and websites still refrains from using TLS by default for all communication channels despite all efforts in propagating the use of encryption. Besides that, Let's Encrypt still requires to be configured at least once.To date, most studies on human-centric concerns focused on non-expert end users and, to the best of our knowledge, no user study has yet been conducted to examine the usability of the TLS deployment process directly. Our results suggest that administrators struggle with important security decisions (e.g., choosing the right cipher suites) which are mainly driven by concerns about compatibility. Furthermore, our participants had a hard time finding reliable sources on the Internet to support their decision making process. We are confident that our results are a good baseline for the development of improved tools and policies that are better tied to the expert users' needs.The contributions of this paper thus are:• a lab study with 28 participants to explore usability challenges in the TLS configuration process• expert interviews with 7 security auditors to provide a baseline for ecological validity and to further explore potential usability improvements and recommendations for the deployment process. Guidelines and best practices for a proper TLS deployment have also been published [12,38]. This includes the ability to change the quality of the used certificate, settings of used cryptographic primitives (cipher suites), enabling of TLS extensions, use of different TLS versions and the use of additional security features like HTTP Strict Transport Security (HSTS) [23] and HTTP Public Key Pinning (HPKP) [18]. Huang et al. [26] surveyed the use of cipher suites and Kranch and Bonneau [28] scanned domains for HSTS and public key pinning. Akhawe et al. [9] performed a large-scale study on the effectiveness of SSL browser warnings and found that that these warnings have high click-through rates, i.e., 70.2% of Google Chrome's SSL warnings did not prevent users from visiting the initially requested insecure site. Based on their findings, they presented a web application to support developers in making the right decisions and guiding them through the correct deployment.Fahl et al. [19] presented the first study with system administrators and found that many of their participants wished for more simplicity, e.g., simpler interfaces and automatic certificate renewal. In comparison to our lab experiments, the results from Fahl et al. [19] are based on selfreported data gathered via an online questionnaire and therefore provide a baseline for our study. In the following, we describe the methodology used to collect and analyze the data from the lab study. As described in Section 3.2, we recruited students with expert knowledge in the field of security and privacy-enhancing protocols at our university who fulfilled the criteria to potentially work as an administrator or were actually working as administrators.Our experiments proceeded as follows: After the recruitment phase, the participants were invited to the lab where they were shortly briefed about the purpose of our study. We chose Apache for our experimental setup as to date, Apache maintains a clear lead regarding in usage share statistics, followed by Microsoft and nginx, e.g., [1]. We refrained from video recording due to the results from our pre-test during which we filmed the sessions and noticed a severe impact on the participants' behavior. The participants from the pre-study also explicitly reported that they perceived the cameras as disruptive and distracting, even though they were placed in a discreet way.In addition to the notes from the observation, we captured the bash and browser history and the final configuration files. After completing the task, the participants were asked to fill out a short questionnaire with closedand open-ended questions which covered basic demographics, previous security experience in industry and reflections on the experiment. We then invited a selected set of students that completed several security-related courses to take an online quiz to additionally assess their knowledge irrespective of their previously issued grades. The quiz as well as the required previously completed university courses were selected based on a review of 15 open job advertisements for system administrators in our region. Table 1 summarizes key characteristics of the participants: 2 participants were female, 26 were male; the age range was 21 to 32 with a median of 23. 17 of our 28 participants were already experienced system administrators and reported to have deployed TLS before.We are confident that our participants are suitable to explore usability challenges in TLS deployment that real-world system administrators face. For a qualitative analysis of the observation protocols we performed a series of iterative coding which is often used in usable security research to develop models and theories from qualitative data [27,34,39]. On the resulting initial set of coded data we performed axial coding to look for explanations and relationships among the codes and topics to uncover structures in the data. As a result of our analysis, we obtained a picture of usability challenges in the deployment process which is presented in Section 4, grouped by themes.To evaluate the (mostly) quantitative data acquired via the bash/browser history and Apache log files, we applied metrics and measures to evaluate the quality of the resulting configuration. 2 We consider this rating scheme a useful benchmark to assess the quality of a TLS configuration based on the state of the art recommendations from various RFCs [37,38] and with respect to the most recently discovered vulnerabilities and attacks in the protocol.Since web services have different requirements, e.g., backward compatibility for outdated browsers, there is no universally applicable recommendation to get the highest grade. It must be mentioned that this benchmark reflects the best-case scenario at the time of writing, but could be different in the future if new vulnerabilities are discovered.The rating of the evaluation criteria is expressed with a grade from A to F and composed out of three independent values: (1) protocol support (30%), (2) key exchange (30%) and (3) cipher strength (40%). The full set of evaluation criteria based on the metrics used in Qualy's SSL Test is listed in Appendix A.Only four participants managed to deploy an A grade TLS configuration, P24 received the best overall score. Fortunately, none of our participants chose a key size smaller than 2048 for their RSA key. 15 participants chose 2k-and eight chose 4k-sized keys. Eleven participants included HSTS headers to improve the security of their configuration and only two participants deployed HPKP.To determine whether the distribution of SSL Test grades from our lab study reflects those from configurations found in the wild, we consider the estimation from SSL Pulse [6] who regularly publishes data sets of grade distribution measures based on the Alexa Top 1 Million. Based on the 24 valid configurations from our study, 25% of the study configurations were graded with A, 67% with B and 8% with C. Given that the data set from SSL Pulse [6] contains websites with potentially higher security requirements or sites were administrators were presumably given more time to obtain a secure configuration. We refer to the setup phase as to a set of tasks to get a basic TLS configuration, i.e., the service is reachable via https if requested. We identified iterative (tool-supported) security testing as a key element for a successful hardening phase, since the participants relied on external sources to evaluate the quality of their configuration. In the following, we present the usability challenges identified through our analysis of qualitative data from the think-aloud protocols and the quantitative data from the collected log files.Searching for information and finding the right workflow. 2 R C 4 S u p p o r t V u l n e r a b l e t o P O O D L E ( S S L 3 ) F o rnumber of visited websites over all participants was 60 (median=49.5, sd=27). The documentation for SSL on Apache (second-most visited site) contains detailed information on certificate creation and retrieval but only basic information on hardening. In contrast, sslabs.com and bettercrypto.org contain comprehensive tutorials on hardening but require a detailed understanding of the underlying fundamentals. We also found that the number of visited websites (high, medium, low) does not impact the quality of the resulting configuration, but this result is not significant in our sample with χ 2 (0.23327892, 6) > 0.05. (P23)"Creating a Certificate Signing Request (CSR). The most common error was that they did not fill out the requested common name field correctly (14 participants) and thus did not receive a valid certificate for their domain. E.g., P15 reported to have recently deployed TLS on Apache and still tried to upload a self-signed certificate to the CA. Some were annoyed by the fact that HTTPS does not immediately replace HTTP as soon as it is available. Most participants were initially confused when they tested their configuration via the browser and were redirected via http when they entered the URL without the http(s):// prefix. They then spent a significant amount of time to configure the virtual host and the respective ports correctly, mostly also due to misleading or incomplete information from online sources.Multiple configuration files. P23, for example, did not understand the differences between the http.conf and apache.conf which distracted him/her from the TLS-specific tasks and securitycritical decisions.Finding the right balance between security and compatibility. About 15 participants expressed concerns regarding compatibility when configuring SSL/TLS versions and cipher suites. A significance test with χ 2 (7.9982, 3) = 0.046 provides evidence to suggest that there is an association between prior experience with configuring TLS and the grade of a participant's TLS configuration from the lab study. Most frequently mentioned were lack of best practice tutorials (19), followed by misleading terminology (15) and weak default configurations (12). Especially with respect to interactions with the CA, participants expressed confusion about the terminology. Eight participants explicitly criticized the high effort necessary to harden the configuration, as too many cipher suites are enabled by default. One participant also suggested a simplified configuration option including a two-or three-way variable to disable certain cipher suites (e.g., tinfoil hat vs. maximum compatibility). During the configuration process, many participants perceived the Apache config file structure as confusing and experienced it as a severe source for errors. Even then one cannot be sure to have a good configuration because SSL vulnerabilities are discovered almost on a regular basis." The requirements for participation currently work as a security consultant or auditor and to have at least 2 years of prior experience in auditing web services.The expert interviews were conducted as semi-structured interviews with 7 security experts from well-respected security consulting firms in the German-speaking region.The experts were familiar with TLS misconfigurations and frequently encountered misconceptions on how to combat the trade-off between compatibility and security. Our results show that auditors commonly agree that poor usability and too complex workflows and server configurations result in weak TLS configurations. All expert interview participants reported to focus on the following configuration characteristics during audits: activated TLS/SSL version, activated cipher suites, if the certificate is recognized by commonly used web browsers, whether HSTS is configured and whether public key pinning is activated. They also use selected Nessus modules 3 and OpenVAS 4 for internal sites. Our interviewees, however, also mentioned that in most cases the compatibility challenge is just a mock argument which is often used as an excuse and not fully elaborated by the responsible employees. However, E1 and E3 also reported that finding the best fit between security and compatibility is hard even for security experts and often arguable. Two auditors mentioned that in the course of looking at TLS configurations for many years, they have never encountered HTTP public key pinning during an audit. According to them, most companies have multiple servers with varying configurations and each one is maintained and updated separately.E2 also highlights that the ideal TLS configuration has changed frequently in the last two years or algo-rithms have been deprecated which implies a significant overhead for administrators to keep their configurations up to date. E7 highlighted that responsible persons even report that they are "afraid of using crypto". Caddy comes with a TLS configuration by default and 5 https://caddyserver.com/ uses Let's Encrypt to get certificates. E1 also suggests that compatibility flags which administrators can use to configure cipher suites would be much more helpful than letting them deal with cipher suites directly.Regarding the deployment process in larger enterprises that maintain multiple servers, E1 proposes to create a strong sample configuration on a test server and to then deploy them on all servers. Furthermore, E3 argues that the concept behind CAs also has its flaws, i.e., lack of certificate transparency, certificate revocation and lawful interception on the CA's side without the end user's consent. 17 out of 28 participants were already experienced with managing servers in a corporate environment. Fahl et al. [19] also found that real world webmasters heavily rely on online sources to compensate for their lack of knowledge.Based on this comparison and the results from our expert interviews we are confident that our sample is suited to explore usability challenges and reflects the diverse knowledge of administrators in the wild.Our results suggest that poor usability is a key issue and by far the main reason for weak configurations. This result shows that there is a high demand for better default configurations and/or tool support to prevent administrators from dealing with mechanisms they cannot fully understand.As stated in Section 4.1, we based our evaluation criteria on Qualy's SSL Test to evaluate the configurations from our lab study. In fact it aimes to ease the creation of a CSR and the interaction with the CA. Our results also suggest that expert users are often unable to decide on the appropriate level of security, which highlights the need for cross-organizational guidelines and policies.As creating a basic TLS configuration also involves complex decisions (such as choosing the appropriate key length) it is difficult for administrators to maintain or correct errors and wrong decisions.Both the results from the lab study and the expert interviews highlight that the complex deployment process should be simplified, and that the difference between a basic correct configuration and a secure one should not be too broad. Our expert interviews with security auditors underline the ecological validity of the results from our lab study and suggest that configurations found in the wild are even less secure than those generated by our participants during the lab study. Furthermore, our results suggest that even computer scientists who are educated in terms of privacy-enhancing protocols and information security need additional support to make informed security decisions and lack an in-depth understanding of the underlying cryptographic fundamentals. Interview Questions -Expert Interviews• As an auditor, how do you usually proceed to evaluate the security of a TLS configuration? The grade is issued based on the following cumulative scores:• A: score >= 80• B: score >= 65• C: score >= 50• D: score >= 35• E: score >= 20• F: score < 20Errors/warnings/highlights. Two participants did not use this CA and generated self-signed certificates instead.Encrypted private key indicates whether the server's private key was encrypted by the study participant.SSL 2 -TLS 1.2 indicates which protocol versions are supported.RC4 support. Forward secrecy indicates whether the configuration supports ciphers with forward secrecy (e.g., ECDHE). -/root/ssl/certs -/etc/ssl/certs -/tmp/certs -/var/www/static/certs• CSR means ...-common-name signing request -comodo signing request -certificate signing request -cross-site request• Which is the best file permission for your private keys on a Linux system? Lab Study AssignmentYou are the system administrator at a SME (small and medium-sized enterprise). SSL Labs evaluate ciphers based on an average cipher between the strongest and weakest. This is why you should start right away deploying TLS.