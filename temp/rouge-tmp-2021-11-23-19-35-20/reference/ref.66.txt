We also show that in many cases this crosstalk leakage can be observed on the USB power lines, thus defeating a common USB isolation countermeasure of using a charge-only USB cable which physically disconnects the USB data lines. Demonstrating the attack's low costs and ease of con-cealment, we modify a novelty USB lamp to implement an off-path attack which captures and exfiltrates USB traffic when connected to a vulnerable internal or a external USB hub. High-Definition Multimedia Interface (HDMI) [28], DisplayPort [47], the external Serial AT Attachment (eSATA) [43], the Universal Serial Bus (USB) [14], and many others all connect to external devices of unknown origin. Rather than using common techniques, such as encryption and authentication, these buses seem to rely on a unicast network model, where messages are physically routed along the path from the sender to the receiver instead of being broadcasted to all of the components connected to the bus. Compared with legacy interfaces such as serial port (RS-232) [17], parallel port (IEEE 1284) [19] or keyboard jack (DIN 41524/IEC 60130-9) [29], USB has wide range of advantages: it is hot pluggable, extensible (via USB hubs) and capable of supporting many types of equipment. A final feature of the USB interface is the ability to provide both data communication and power to peripheral devices.In this paper we demonstrate that in many cases, datadependent voltage fluctuations of the USB port's data lines can be monitored from adjacent ports on the USB hub. In Section 6 we show how to cheaply construct such a probe which can monitor and extract the communication of other devices.We mainly focus on slow-speed USB 1.x input devices, such as keyboards, card readers, fingerprint readers, USB headsets, etc. We believe that in the forseeable future, slow speed-devices will continue to use the USB 1.x interface.While our proof-of-concept probe (Section 6) was designed to attack USB 1.x devices (connected to any USB hub, including 3.0 hubs), we do show that attacks on devices using the faster USB 2.0 standard are feasible (Section 3.3). We note that our attack allows capture of the actual data transferred from a non-cooperating device and that the suggested mitigation does not protect against our attack.Exploiting Trust on Buses. The attack of the USB bus was also explored by Bratus et al. [12] both at the hardware level and at the device driver level.To protect the host from malicious devices, Tian et al. [46,45] and Angel et al. [7] suggest filtering the USB traffic and implementing a permission mechanisms for USB ports. However, the design of the USB port seems to make this leakage much harder to exploit with only partial information being leaked about key presses, allowing the attack to only narrow down the pressed key to a group of 5 potential keys [48]. EM attacks have also been shown effective in recovering video signals [31] and Ethernet communication [41]. The rest of this paper is organized as follows: Section 2 introduces USB, including the bus topology and relevant aspects of its physical and logical protocols. Section 6 demonstrates a practical attack using a subverted USB lamp that captures key presses and exfiltrates the information wirelessly via Bluetooth.2 The USB Interface USB Versions and Speeds. Initially USB 1.x [13] used a single data path supporting up to 127 peripheral devices and with 12 Mbps data rate (also known as USB full-speed). This version currently still powers a huge number HIDs (Human Interface Devices) such as keyboards, remotes and various card readers. Next, in the early 2000's USB 2.0 unified the computer peripheral market, supporting speeds of up to 480 Mbps (also known as USB high-speed) while maintaining backwards compatibility. Each USB hub may function as a signal repeater, extending the cable length by five meters. Hubs also function as protocol translators: for example in case a USB 1.0 ticket printer is plugged in a USB 3.0 hub, the hub translates the latest USB 3.0 downstream signal back to the legacy USB 1.0 language and forwards to the printer. At the root of the tree, there is a single host (also known as USB root hub) which is directly addressable from CPU. In particular, hubs which are not located on the path between the transmitting peripheral and the host should not be able to observe the peripheral's upstream USB traffic.Broadcasting USB downstream traffic is a risky design decision [34]. The bus protocol divides time into 1 ms frames, as shown in Figure 2. We now turn our attention to the leakage between two adjacent USB ports on the same USB hub. Hence, we can measure the crosstalk leakage present on the data lines of an adjacent port and additionally, or alternatively, we can measure it on power lines of the adjacent port.In a typical scenario both data line and power line leakage should be available on the same USB port, thus allowing the attacker to choose the channel containing the best signal. We find that such data line crosstalks are 1 The choice between measuring the D+ or D-relative to the GND line seems to depend on the specific port and hub used. Finally, we note that data line crosstalk is not limited to USB 2.0 ports and is also noticeable on USB 3.0 ports (see Figure 4 Figure 5. (These are marked as R1, R2, R3, R4 in Figure 5.) However, we conjecture that the close proximity of the USB logic blocks inside the controller chip creates some parasitic Crosstalk or EM? We thus conclude that the observed crosstalk leakage indeed emanates from parasitic capacitance between the hub's USB ports and not from the hub's electromagnetic leakage. We then used one of the oscilloscope's probes in order to monitor the communication between the PC host and the keyboard by measuring the voltage on the D+ line relative to the GND line. Finally, using the oscilloscope's second probe, we observed the power line crosstalk leakage by measuring the voltage on the Vcc line relative to the GND line on one of the hub's other downstream ports. Overall, we found that 29 of the 34 internal and 17 of the 20 external hubs we tested show power line crosstalk leakage. Leakage Mechanism.Parasitic capacitances are present not only between two proximate data lines, but also exist across a data line and a nearby USB power line. However, since these devices operate at a much greater speed, the experimental setup used in Section 3.1 is no longer sufficient.Experimental Setup. We then connected a USB drive to one of the hub's downstream ports and used an Agilent N2795A active probe in order to monitor the communication be- Figure 10: USB 2.0 data line crosstalk leakage from a hub of the same make as the one used in Figure 6. The yellow (top) trace shoes the USB traffic and the blue (bottom) trace shows the observed data line crosstalk leakage measured from an adjacent downstream port (manually aligned with the yellow trace by subtracting 4ns). Finally, we used an Agilent N2752A differential probe in order to monitor the voltage between the D+ and D-lines on one of the hub's other downstream ports.Observing USB 2.0 Data Line Crosstalk Leakage. Figure 10 shows that resulting data line crosstalk leakage while transferring data from the USB drive to the host PC. Next, as mentioned in Section 2, the token packet also contains a CRC5 field (using the polynomial X 5 + X 2 + X 0 ) of the ADDR and ENDP fields. In order to automatically and reliably decode the information present in the data line crosstalk leakage trace we have performed the steps outlined below. Step 1: Leakage Trace Cleanup. To precisely locate the bus transitions in the trace we produced at Step 1, we calculated its derivative. That is, we want to find V 񮽙 = ∂V ∂t where V denote the trace produced by Step 1 above. Simplifying this operation, we approximated the derivative by subtracting from each sample at some location t in V the sample present at location t − 10 in V . As mentioned in Section 4.1, in the NRZI encoding the rising and the falling edges are equivalent. As mentioned in Section 4.1, in the USB protocol uses NRZI encoding. More specifically, the value of a transmitted bit is indicated by maintaining a fixed signal level for a logical one and a transition between signal levels for a logical zero. Nonetheless, we have successfully extracted the keyboard presses, despite additional USB traffic from other devices, functioning concurrently to USB keyboard.Attacking USB Magnetic Card Readers. In addition to USB keyboards, we have successfully extracted creditcard data from a USB magnetic card reader (MagTek 21040140) using data line crosstalk leakage from an internal USB hub of a Lenovo Ideapad 100s laptop. In addition to attacking human interface devices, we have also mounted crosstalk leakage attacks on USB 1.1 drives connected to both internal and external USB 2.0 hubs. Indeed, we have successfully recovered the communication during a file transfer from a USB 1.1 drive to the PC host using data line crosstalk leakage with both external and internal USB 2.0 hubs. The spy probe is constructed from an Alinx AX309 FPGA development board (30 USD) connected to an AN108 analog to digital conversion (ADC) board (15 USD) designed by heijin.org. We have connected the ADC's input to the D+ USB line and monitored its voltage relative to the GND line. We have also used the USB's 5V power line in order to power the probe. The clamp is a protective element consisting of two germanium diodes, to ensure that the voltage of the signal feed into the ADC never goes above 5 Volts or below GND. We measured the spy probe's key recognition rate under various typing speeds. We typed "USB CROSSTALK" on the keyboard while the spy probe was monitoring the data line crosstalk leakage, exfiltrating the key presses via bluetooth to the attacker's computer. Traditional countermeasures, such as blocking the power or the data lines, do not protect against our attack. As can be seen in Figure 26, our improved USB condom is able to significantly reduce the data line crosstalk leakage, thus requiring far more sensitive measurement equipment to exploit the small remaining leakage.Frequency filtering cannot be used to protect the data lines against crosstalk leakage. Adding end-to-end encryption, for example using the methodology of [7] would protect messages from eavesdropping attacks such as those we describe in this work. While our attack does apply to non-USB 3.0 devices connected to USB 3.0 hubs (see Figure 4(d)), one limitation of our work is that it does not apply to USB 3.0 devices connected to USB 3.0 hubs. As we mentioned earlier, input devices, which often send sensitive information to the host, mostly use USB 1.x Hence, even though our attack does not apply to the newest version of the protocol (USB 3.0), it remains relevant. Yuval Yarom performed part of this work as a visiting scholar at the University of Pennsylvania.