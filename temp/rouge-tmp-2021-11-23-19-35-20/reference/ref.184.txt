Software-Defined Networking (SDN) enables network innovations with a centralized controller controlling the whole network through the control channel. In order to identify the target paths containing the shared links to attack, we develop a novel technique called adversarial path reconnaissance. Experiments show the attack significantly degrades the performance of existing network applications and causes serious network anomalies , e.g., routing blackhole, flow table resetting, and even network-wide DoS. Existing studies focus on many security aspects of SDN, including malicious or buggy applications [63,48], attacks on crashing controllers [60,49,65], attacks on disrupting switches [22,51], and information leakage in SDN [25,56,19,45] , but the security of the SDN control channel is still an open problem.In this paper, we propose a novel attack named CrossPath Attack, which disrupts the SDN control channel by exploiting the shared links between paths of control traffic and data traffic. Instead, it generates well-crafted data traffic in the shared links to implicitly interfere with the delivery of the control traffic while the data traffic does not reach the controller. Thereby, real-time control messages delivered between the SDN controller and the switches are significantly delayed or dropped. The root cause of the vulnerability is the side effect incurred by shared links between paths of control traffic and data traffic in SDN. However, it also opens the door for an attacker to disrupt the control channel by sending malicious data traffic to the shared links.It is challenging to construct the attack in real networks. Unlike traditional IP networks where almost all links deliver both control traffic (e.g., OSPF or BGP updates [1,2]) and data traffic at the same time, only a few number of links forward control traffic in SDN. To address the above challenge, we present a probing technique called adversarial path reconnaissance to find a target path of data traffic that contains the shared links. The key observation is that the delays of control messages on the SDN control channel will become higher if a short-term burst of data traffic passes through the shared links. The reason one host can measure the delays is that the first packet of a new flow will be sent to the controller to query forwarding actions, which incurs extra delays of control messages other than that of the following packets directly processed in the data plane. For example, it only needs to explore less than 50 paths on average if there are 1,000 paths and only 2% of them contains shared links. Experimental results in a real SDN testbed show our reconnaissances can achieve more than 90% accuracy.In order to ensure the stealthiness of the attack, we leverage the low-rate TCP-targeted DoS [41] to generate data traffic consisting of periodic pulses in the shared links, instead of directly flooding shared links to disrupt the network. In order to understand the impacts, we conduct experiments with four typical applications that have been widely deployed in SDN controllers, i.e., ARP Proxy [5], Learning Switch [6], Reactive Routing [9], and Load Balancer [7]. The results show (1) the performance of ARP Proxy can be significantly degraded, such as 10 times increase in the response delays and 95% reduction in the number of the ARP replies; (2) Learning Switch cannot successfully install forwarding decisions in the data plane and thus the throughput of the data plane is reduced to 0 Mbps; (3) Reactive Routing cannot update routing information in time and obtain incorrect topology information, which incurs various routing anomalies, e.g., routing loop, routing blackhole, routing path eviction, and flow table resetting; and (4) Load Balancer generates wrong decisions, resulting in link overloading.In summary, our paper makes the following contributions:• We present the CrossPath attack to significantly disrupt the SDN control channel by exploiting the shared links between paths of control traffic and data traffic. • We develop a probing technique called adversarial path reconnaissance that can find a target path containing the shared links with a high accuracy. Various network applications can be deployed in the application layer to enable diversified network functions, such as routing, network monitoring, anomaly detection, and load balancing. The data plane layer, which consists of "dumb" SDN switches, performs low-level packet processing and forwarding based on the decisions generated by the control layer.The dominant communication protocol between the control and data planes is OpenFlow, which has been standardized by the Open Networking Foundation (ONF) [14]. Moreover, to reduce the cost of building a dedicated control network and operating networks, in particular in large-scale networks [21,65], OpenFlow allows the control and data traffic to share some links in the network, which is called in-band control. Particularly, we develop a probing technique called adversarial path reconnaissance to accurately find a target path containing shared links. The CrossPath attack aims to disrupt the SDN control channel by exploiting the shared links between paths of control traffic and data traffic. To achieve this, an attacker needs to use a host attached in the network to generate probing traffic so as to identify which path of data traffic (i.e., a target path) shares links with paths of control traffic. In order to successfully launch the attack, an attacker should correctly choose a target path that contains shared links. For example, Traceroute [17] cannot infer the routing path of the packets, as SDN usually does not decrease the time-to-live (TTL) values in packet headers. To address the challenges above, we develop a probing technique called adversarial path reconnaissance to find target data paths that have links shared with control paths. The technique inspired by the key observation that the delay of a control path is higher if a short-term burst of the data traffic passes through the shared links. To achieve the goal, our adversarial path reconnaissance consists of two phases: measuring the delays of control paths and identifying a target data path. We can know the end-to-end delay for the packet is:d i, j = d h i prop + ω+1 ∑ k=1 d k trans + ω ∑ k=1 (d k queue + d k proc ) + δ i, j , (1)where d h i prop is the propagation delay at host h i , d k trans is the transmission delay at the k th link, d k queue is the queuing delay at the k th switch, and d k proc is the processing delay at the k th switch. Based on equation (1) and (2), the delay of the control path is:δ i, j = d i, j − d 񮽙 i, j + ω ∑ k=1 ( ˆ d k queue − d k queue )(3)However, if we send two packets with a short time interval, e.g., sending the same packet immediately once we receive a response to the last packet, the queuing delay d k queue andˆdandˆ andˆd k queue can be approximately equal. An attacker needs to send two packet streams for each possible data path in order to find a target data path crossing with some control paths, i.e., a data path containing shared links. (ii) If δ 񮽙 is similar to δ , no available evidence indicates that the data path crosses with some control paths.Thus, we are able to find a target path by testing each path if it exists. In order to efficiently and accurately find a target data path, we apply two methods to improve our reconnaissance. Although our reconnaissance allows an attacker to know whether a data path crosses with control paths by sending only four packets, it may achieve low accuracy in practice. For example, a burst of benign traffic can also cause high latencies of control paths, which makes a non-target data path misidentified as a target data path. Moreover, we assume 10 repeated reconnaissances are conducted for each path in order to apply t-test. Fortunately, different flow rules matching specific packets make up different data paths in SDN, which means the installation and expiration of rules in two different paths are independent. Due to space constraints, for further details, we refer the reader to see the pseudo-code in Appendix A. To understand the feasibility and efficiency of the adversarial path reconnaissance in SDN, we perform theoretical analysis to answer the following two questions:• If there exists target data paths crossing with control paths in the network, which conditions the network must meet so that our reconnaissance can identify a target data path? Figure 4: The target network where an attacker conducts reconnaissances.the two cases is whether the target data path crosses with a control path of a switch belonging to the data path.We consider a set of all the hosts in the target network H = {h 1 , h 2 , ..., h n }, a set of compromised hosts˜Hhosts˜ hosts˜H = { ˜ h 1 , ˜ h 2 , . According to the conditions, we can know that a data path p j,k d from a compromised host˜hhost˜ host˜h j to another host h k crosses with a control path p i c . The total latencies of control paths can be obtained again in a similar way; however, crossed control path p i c will be affected by the test stream. We will show that our reconnaissance can find a target data path with various real network topologies for most cases in Section 4.1. In order to estimate the average number of explored data paths for finding a target data path, we introduce a parameter γ denoting the total number of target data paths which can be identified in a network. In addition to the notations we used in Theorem 1, let ρ be the total number of data paths between a compromised host iñ H and a host in H, and let X be a random variable denoting the number of explored data paths for finding a target data path. (7)Equation (7) indicates the average number of explored data paths E(X) totally depends on n and γ. As these network topologies do not contain hosts and routing information, we generate 100 hosts 1 in each topology and apply Dijkstra's algorithm [28] to generate the shortest data path between two hosts. The controller can connect switches via shortest paths (SP) to minimize delays, a minimum spanning tree (MST) to minimize costs, or randomly searching available paths (RS). Moreover, for simplicity and without loss of generality, we assume that the attacker only controls one host in the network and we attach such a host to each network topology.We note that the positions of hosts in a network will affect our experimental results. From the results, we can see all the network topologies have at least 5% identified target paths among total data paths in a network regardless of types of connections. Fig- ure 5b shows that more than 20% of the switches can be affected by attacking a target path for 90%, 99% and 99% of the 261 network topologies with SP, MST and RS connections, respectively. Equation (7) denotes the average number of explored data paths E(X) for finding a target path totally depends on the number of data paths γ containing shared links and the number of hosts in a network n. Our testbed contains a popular SDN controller Floodlight [12], five hardware SDN switches (AS4610-54T [10]), and three physical hosts. The controller is deployed on a server with a quad-core Intel Xeon CPU E5504 and 32GB RAM. The attacker then generates LDoS data traffic to disrupt the control channels of switches s 1 and s 2 by attacking the data path between h 1 and h 3 . We choose the burst length as 100 ms, inter-burst period as 200 ms, and peak magnitude as the maximal speed 1 Gbps that the host can send for our all experiments in the paper. The delay variation is defined as the absolute difference between the delays of control messages measured with and without testing stream. To evaluate the impact of the attack on the control packets, we configure the controller to generate 1,000 control packets per second 2 to the switch s 2 . Such traffic traces comes from two Data Centers (DC1 and DC2) [3], an Internet Backbone (IB) [8], a University (UNIV) [18] and our Laboratory (LAB). Moreover, due to the limited flow table capacity in switches, we randomly choose flows from the trace to ensure that the number of rules generated by flows do not exceed the table capacity. Figure 11a shows the accuracy of reconnaissances with different background traffic. We then study four typical SDN applications, which use these common core services, so that we measure the impacts of SDN controllers can be abstracted as a two-layer architecture though different controllers have different implementations. Applications can be deployed in the top layer to enable different network functionalities, while the low layer provides different core services that interact with switches and provide basic functionalities for the top-tier applications. It periodically queries the flows on network devices via stats request and stats reply messages, and then provides various statistics to applications.We note that almost all applications enabling network functionalities in SDN is built on at least one of the four services. In SDN, ARP packets are handled by an ARP proxy application [5] in the SDN controller. The application extracts the sender IP address and the source MAC address to store them into the ARP table. The reason is that the TCP flows of control traffic frequently enter the retransmission timeout phase under the attack due to the congestion. Particularly, some delays exceed 10,000 ms, which can cause connection failures between two hosts because hosts cannot get MAC addresses. Here, we define the success ratio of rule installation as the number of successfully installed rules over the number of rule requests within a second. As shown in Figure 14a, the success ratio of rule installation in a switch always maintains over 90% with various numbers of new flows without our attack. (b) Long-term routing blackhole due to delayed messages when a host is migrated. (c) Eviction of a routing path due to a deactivated link. In order to demonstrate the effectiveness of our attack, we build a network topology with four hosts and three switches, as shown in Figure 15 The hosts h 1 and h 2 send packets to the host h 3 . The default routing path of packets from h 2 to h 3 is < l h 2 →s 2 , l s 2 →s 3 , l s 3 →h 3 >. The migration is finished within five seconds without the attack, as the topology service can track the new location via packet in messages containing the DHCP payload when the host moves to s 2 . In the Floodlight controller, a link will be deactivated if no LLDP packets pass through the links within 35s. Load balancing has been widely used to improve resource usage and throughput as well as reduce response delays, which balances the workload among multiple nodes. The statistics-based scheduling chooses a server that has the lowest utilization to serve a new request, where the utilization is calculated according to the real-time statistics of the switch ports. Delivering Control Traffic with High Priority. To defend against the attack, one way is to ensure forwarding control traffic with high priority, which thus can protect control traffic from being congested by malicious data traffic. The detailed implementations and evaluations can be found in Appendix B.Proactively Reserving Bandwidth for Control Traffic.Another way to defend against the attack is to proactively reserve proprietary bandwidth for control traffic. The necessary condition to successfully launch the CrossPath attack is to find a target path containing shared links. Our evaluation shows that the accuracy of path reconnaissances can drops to less than 30% by adding random delays ranging from 100 ms to 1,000 ms. However, adding random delays affects the rule installation of all flows in the network. Different from it, our attack generates low-rate data traffic to implicitly disrupt control traffic in the shared links instead of directly generating massive control traffic. Second, probing techniques are required in the attack to identify target data paths containing shared links, which is necessary to ensure the effectiveness of the attack. Studer et al. [38] and Kang et al. [57] introduced link flooding attacks, which generate large-scale legitimate low-speed flows to flood and congest network critical links. Our crosspath attack also congests the critical links that deliver control traffic and data traffic in SDN at the same time. Though there exist some SDN defense systems [67,61,62,37] that detect link flooding attacks, they cannot defend the crosspath attack that disrupts the control channel, which these SDN defense systems depend on. We develop the adversarial path reconnaissance to find a target data path containing shared links for the attack. After obtaining all the latencies of possible crossed control paths for the k max data Input: η, t wait , t max , α Output: h; 1: H ← ScanAllHosts() 2: k max ← t wait /(2 · t max ) 3: i ← 0 4: while i < |H| do for j = 0 → η − 1 do t start ← time() for k = i → min(i + k max , |H|) do i ← i + k max 29: end while paths, the t-test is applied to determine whether a data path crosses with control paths in Step 21 to Step 27. The first is delivering control traffic with high priority. Such a defense scheme can be enforced with Priority Queue (PQ) or Weighted Round Robin (WRR) 3 scheduling mechanism in SDN switches. A meter entry belonging to a meter table associates with various flow rules so that it can measure the total rate of packets matching the flow rules and enforce rate limiting. Therefore, by limiting the maximal rate of the total data traffic, we reserve proprietary bandwidth for control traffic.We evaluate above two defense schemes with AS4610-54T commercial hardware SDN switches in our testbed. The research is partly supported by the National Key R&D Program of China under Grant 2017YFB0803202, the National Natural Science Foundation of China (NSFC) under Grant 61625203, 61572278, 61832013, 61872209, and U1736209, the U.S. ONR grants N00014-16-1-3214 and N00014-16-1-3216, and the National Science Foundation (NSF) under Grant 1617985, 1642129, 1700544, and 1740791. Qi Li and Mingwei Xu are the corresponding authors of the paper.