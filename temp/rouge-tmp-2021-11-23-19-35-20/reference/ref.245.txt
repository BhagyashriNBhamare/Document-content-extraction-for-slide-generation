Device tracking services (e.g., Google's "Find My Device") enable the device owner to secure or recover a lost device, but they can be easily circumvented with physical access (e.g., turn on airplane mode). It is designed to robustly operate in real-world scenarios characterized by bursting high-frequency noise, bustling crowds, and diverse environmental layouts. We conduct a user study (n = 17) to investigate participants' smartphone loss experiences, collect feedback on using Chaperone, and study different alert methods. Most participants were satisfied with Chaperone's performance for its detection ability, detection accuracy, and power consumption. Users are more likely to lose their smartphones in public places, e.g., coffee shops and bars, where strangers can steal them [4]. We term these solutions as post-loss solutions. Proximity-based solutions [6,19,33] target this goal by making the owner carry an additional device, and use RFID or Bluetooth to detect proximity to the phone. In addition, the solution should satisfy the following requirements: (1) detect device loss in real-time, i.e., the device must react before its owner has left the premise; (2) work on common off-the-shelf smartphones without requiring additional hardware or OS root privileges; (3) perform robustly across common device loss scenarios, e.g., noisy and crowded public places, offices, and cars; and (4) have sufficiently low error rates for everyday device usage.Given that smartphones are equipped with at least a pair of microphone and speaker, they are capable of active acoustic sensing. However, iLock was only evaluated in two relatively ideal environments: a lab and a library. High-frequency noise, movement of nearby people, and the presence of obstacles may interfere with iLock's distance estimation and result in false positives. Chaperone focuses on capturing a user's departure patterns and addresses the aforementioned challenges by tracking the departure procedure of the device owner across three dimensions (in reference to the smartphone): the motion state of the owner, the intensity of the motion, and the distance of the owner from the device. We design and implement Chaperone, a standalone, active acoustic sensing-based system that detects possible smartphone loss incidents in real-time on commodity smartphones. We conduct 1,345 experiments to demonstrate Chaperone's ability to operate under different conditions (including device orientations and positions, user leaving speeds, distances to nearby stranger, close objects, and concurrent sensing by multiple devices), and cover various real-world scenarios characterized by high-frequency ambient noise, crowded locations, and diverse layouts (including academic venues, restaurants, offices, cars, and transit stations). We conduct a user study (n = 17) to investigate people's smartphone loss experiences, collect feedback on using Chaperone, and study user perceptions of different alert methods for smartphone loss prevention. We release Chaperone as an opensource, standalone Android app, and our collected dataset from both lab and real-world experiments, to help reproduce our findings, and improve acoustic sensing-based device loss prevention solutions. The project link is https://github.com/cryspuwaterloo/chaperone. Yang et al. [34] propose Surround-See, a smartphone equipped with an omnidirectional camera that enables peripheral vision. Mirsky et al. [17] study the scenario where an attacker picks up an unattended phone and starts using it. Yu et al. [35] present a post-loss solution that uses emergency call mechanisms to allow the device owner to wipe their device remotely after a loss. However, the solution is not designed to prevent the physical loss of the device. We conduct extensive experiments to show that Chaperone performs better in most real-world scenarios than iLock (see §7.1 and §8). However, no past approach has explored the feasibility of active acoustic sensing for smartphone locking and loss prevention, considering diverse background noise, crowd, and location layout conditions. Our focus is the threat posed to an unattended smartphone by nearby opportunistic attackers. We assume the device owner is initially closer to the phone than others, including nearby people and the attacker, and the initial distance between the owner and the device is under 1m. This condition ensures that the device is initially in a relatively secure context compared to the later unattended status. We discuss more complicated situations in §10 (e.g., when a stranger is closer to the device than the owner). We propose a preventive approach that can detect a potential smartphone loss situation, lock the phone, and generate an alert before the owner leaves the place. The smartphone owner enters the detection-blind area caused by the obstacle while still being within the distance threshold, making the detector fail to follow the owner and track a nearby person instead. just putting a threshold on the distance from the smartphone, our approach detects the owner's departure and absence from the phone (i.e., the owner keeps moving away from the phone and is eventually absent). In a loss prevention solution, the detection delay corresponds to the time duration between the device owner leaving, and the solution realizing that the owner is not present near the device, in turn, locking the phone. For example, the smartphone owner may move to grab something from across the table in a restaurant, which may be misconstrued as the owner leaving by a solution with low detection delay. Location diversity implies different levels of background noise, nearby moving people, and obstacles in the physical layout of the location. In terms of background noise, active acoustic sensing for smartphones usually uses the highfrequency band up to 24kHz (see §5), and as a result, highfrequency background noise poses a threat. A high-frequency noise source may emit noise for a short period of time, but it is likely to happen more often at certain locations (e.g., a restaurant). Therefore, it is important for a robust system to deal with high-frequency noise. In Figure 1, the range where active acoustic sensing can effectively receive the echoes is limited by the lounge layout since the acoustic signal is blocked or reflected by the obstacles. The speed of sound is orders of magnitude greater than the speed of a person moving away from the devicesufficient for real-time detection. It sends a particular acoustic signal, and processes the received echo signal to make meaningful conclusions about the user's movement (if any). It consists of an acoustic signal generator, audio manager (controlling the speaker and the microphone), and a signal processor.The signal generator produces an inaudible acoustic signal based on sampling rate, frequency, length, and signal type, Figure 4: Distance estimation procedure: (a) the bright part represents the captured echoes from nearby objects and people; (b) after excluding echoes from static objects, the user's movement from time 0-2.5s is highlighted, but we can still observe the echo from nearby people, e.g., 85cm away from the device during the time period 2.5-5s; (c) by using our candidate selection algorithm, we can track the user's movement and predict the movement when there is no valid observation (e.g., at time 3s). It simultaneously uses the speaker to periodically play the acoustic signal and the microphone to record the sound; see Figure 3b for an example of the raw sound. Since the recorded sound covers the whole frequency range, including environmental noise, the audio manager continuously passes the raw sound data to the signal processor to extract the reflected acoustic signal.The signal processor is designed to obtain a magnitude vector m of the echoes. This module locates the user by filtering echoes reflected from surrounding objects and background noise, and tracking the user among other moving bodies. We remove echoes from static objects by using the differential magnitude vector ∆m t =| m t − m t−1 |,t ∈ N * , which is the absolute difference between the current and the previous magnitude vectors. The overall magnitude of the differential magnitude vectors at the corresponding moments may become irregularly large due to high-frequency noise (see §4); we thus set a threshold on the average value to exclude such noisy frames. We handle these outliers by clustering them based on their relative distance, so that they are merged into a single Input: All m candidate tuples C m = {(s m , h m , l m )} where s is starting distance, h: peak magnitude, l: cluster size; ˆ d: predicted distance ; n history speeds˜vspeeds˜ speeds˜v = {v 0 , v 1 , . . . , v n−1 }; R max : max range; q: base discount Output: Observed distance obs1: function CANDIDATE_SELECTION(C, ˆ d, ˜ v) 2: obs ← −1, p max ← −1, e ← 0 Initialization 3: κ 0 ← getDirection(v n−1 ) 4:for i ← n − 2 to 0 do5: κ ← getDirection(v i ) 6:if κ = κ 0 and κ = 0 then If direction changes 7: e ← e + 1 Add to discount exponent 8:else break for i ← 0 to m − 1 do 10:s i , h i , l i ← C i , r ← q e R max discounted range r 11:if| s i − ˆ d |≤ r or | s i + l i − ˆ d |≤ r then 12:if h i > p max then obs ← s i , p max ← h i return obs candidate. From the clustered candidates, we choose the candidate that corresponds to the user and use it to estimate the user-device distance and the user's speed. To address this scenario, we make the candidate selection and the Kalman filter work together to decide which candidate point to choose as the observed distance d t at time t. After com- bining multiple frames, we obtain a trace of the user's movement based on the distance estimated by the Kalman filter (the yellow line in Figure 4c). As noted in §4, several environmental factors can limit the detection capabilities in real-world scenarios; see Figure 5, where the user tracking module fails when a distance-only approach is employed with the distance threshold set at 1m. We rely on three classifiers: the motion state classifier determines whether the user is approaching, leaving, or stationary; the activity intensity classifier determines whether the user's activity is intense or moderate; and the user presence classifier determines whether the user is close to the device or far away. The features for these classifiers are derived from distance, speed, magnitude vector and differential magnitude vector estimates of the user tracking module; Table 1 lists our features and their usage in the classifiers. Figure 5b shows that when the user is performing activities, such as typing or standing up, the movement of different body parts leads to the average differential magnitude close to the phone being dramatically larger (called a "hot area") than the ambient magnitude. Furthermore, it is possible to infer the user's presence based on the static objects nearby. The decision maker uses the following criteria to decide whether a departure activity of the user happens: The user is leaving (i.e., the motion state classified as "leaving"), the activity intensity is fading (i.e., the activity intensity changed from "intense" to "moderate"), and lastly the user is no longer close to the device (i.e., the user presence state changed from true to false). This strategy helps reduce false positives by a distance-only approach.As a reaction to a potential smartphone loss, Chaperone locks the phone immediately and triggers an appropriate alert method using, e.g., a ringtone, vibration, notification sound, or screen flashing. For most experiments, we use a Google Pixel (2.15GHz quad-core CPU, 2016) for data collection to train the classifiers in the decision making module. User tracking considers echoes only within two meters from the device, which is sufficient for device loss detection, and takes less than 1ms to extract features. When acoustic sensing is triggered on a device in silent mode, the media volume is set to high for exclusively sending inaudible acoustic signals. In total, eight experimenters (one undergraduate student and one graduate student who have no security background, six graduate students who have security background) simulated the device loss events in the experiments and one observer labeled the events for consistency. Finally, we evaluated real-world conditions with varying factors (e.g., crowd, noise, and physical layout) at eight locations (library, office, restaurant, coffee shop, lounge, bus stop, in-vehicle, and academic venue). Finally, to measure the performance of Chaperone over longer idle periods, we collected 15-20 minutes of data in locations where the user stayed for a long time, such as libraries, meeting rooms, or restaurants. For example, when more than two users' movements are detected but only one exceeds the threshold, iLock locks the device without knowing whether it was the owner who crossed the threshold; this causes many false positives in the real-world experiments (see §8). Precision is the fraction of successfully detected departing activities in all the positively detected ones, while recall is the fraction of successfully detected departing activities in all the positive instances. 7 Lab Experiments We conducted experiments on nine different combinations of the following two factors-three phone orientation angles: 0 • (vertical), 45 • , and 90 • (horizontal); and three departure speeds for the experimenter: slow, normal, fast. Even when the user departed at a fast speed and the phone orientation angle was 90 • , the precision and the recall of Chaperone are 100% and 89%, respectively-a strong indication of robustness against different phone orientation angles and departure speeds. Chaperone consistently reacts within 400ms (95 th percentile) for all nine combinations after the user passed the 1m line; in contrast, iLock and iLock++ can react within 200ms due to their simpler detection strategy. Chaperone's window-based decision mechanism incurs a delay of 400ms, but it is still fast enough for real-time use.In summary, Chaperone performs significantly better under several angle-speed combinations. Chaperone handles this situation well by tracking the user's departure pattern instead of relying on user-phone distance only. We conducted controlled lab experiments to investigate how a nearby stranger affects the detection performance. In addition, the activities from nearby people are unpredictable in terms of direction, intensity, timing, etc. Although Chaperone's battery consumption during active acoustic sensing is significant, it is still acceptable for daily use with help of the trigger module -low-frequency sensing with motion and location sensors can help avoid unnecessary acoustic sensing and save battery. Figure 10 shows the overall detection performance of the three algorithms over 366 departing activities and 391 idle activities in real-world scenarios. The precision and recall scores of Chaperone are 93% and 96%, respectively, compared to iLock's 79% and 82%, respectively. From the results, we can see that the pre-trained classifiers worked well for all eight experimenters, indicating that Chaperone is user-independent. The experimenter shared a group study table with two or three students at our university library. The cubicle has a semi-open structure, and we placed the phone at different positions on the table. iLock has significantly lower precision and recall scores since it failed to handle partially blocked signals well, or was misled by changes in the magnitude of the echoes from the chair. There was high-frequency noise from the entrance door, dragging of chairs, and dining carts in the restaurant; an espresso machine also sometimes produced high-pitched noise in the coffee shops. However, both iLock and iLock++ do not perform well in tracking the departure activities in some specific layouts where the experimenters passed by a near obstacle (e.g., a pillar) on their departure trace.Lounge. We experimented at two types of bus stops: an open-air bench and a small glass-enclosed waiting area. There was high-frequency noise from passing vehicles and alert signals from trams. Chaperone was unaffected by such high-frequency noise thanks to its noise handling strategy. To reduce false negatives, one possible solution is to shorten the decision window when the phone detects that it is in a vehicle. For real-world conditions iLock resulted in more false positives than in lab experiments. The decision making module determines the user's departure activities based on user's motion state and activity intensity, rather than estimating user-phone distance only. We evaluate these cases by running Chaperone in the standalone mode with the trained classifier models used in the real-world experiments. Although many factors, such as object numbers, surface materials, and placements, may affect the sound transmission, our main focus is to test Chaperone under different blocking effects. Our pilot tests show that the acoustic signal generated by another phone, together with its echoes, could also be detected as additional noisy frames by Chaperone, which is not considered in our design. Nevertheless, there is no significant change in detection performance brought by concurrent sensing.We added another Pixel (and an experimenter) to conduct concurrent sensing experiments with three devices by placing them in parallel, 75cm apart, with the Pixel 3 in the middle. Finally, we asked participants regarding their preferred alert mechanisms for different environments based on perceived effectiveness and annoyance.To achieve these objectives we conducted a three-part study: a semi-structured interview on smartphone loss experiences, a hands-on experience of Chaperone, and a semi-structured interview for their feedback on Chaperone. Then, we enabled a ringtone-and-vibration based alert without telling the participants about it, asked the participants to simulate a smartphone loss scenario, and observed their reaction to the alert. Among the 15 reported loss cases, two were due to pickpocketing (beyond Chaperone's threat model), ten were due to participants forgetting their phones, and three were due to phones slipping out of participants' pockets. For the device loss simulation, the researcher noted that 11/17 participants reacted (e.g., stopped leaving, turned/moved back) to the ringtone-and-vibration based alarm and another five participants mentioned that they had heard the alarm but they thought it was from somebody else's phone. Five thought the real-time distance tracking was not very accurate because they noticed small fluctuations in the real-time trace display although they did not lead to any false positive or false negative.To measure Chaperone's acceptability, participants rated Chaperone on a 5-point Likert scale, as shown in Figure 12 (a higher score means a higher satisfaction), for its overall effectiveness (Assuming that you want to use a device loss prevention solution, do you think Chaperone is an effective system?) (a counterexample is that Chaperone sends an unwanted alert when the owner is not actually leaving). Among 16 participants who perceived it, twelve thought the timing of the alert was good to attract their attention, three thought the alert was a little late and they might miss it if the alarm sound was not loud enough in a noisy environment, and one participant thought Chaperone sent the alarm a little early and suggested to allow adjustable sensitiveness for the alert.For participants' rating of different alerts, 13 participants rated the effectiveness of a strong ringtone as "Very effective" or "Effective," while eleven participants thought vibration was "Not effective at all" since the vibration was too weak to alert the user in a noisy environment. The results suggest that the trigger module can help Chaperone to determine an appropriate alert method based on the current context. Ten participants mentioned they needed a customized ringtone for device loss and nine participants expected the volume of the ringtone to be automatically adjusted based on the ambient noise level. These comments and suggestions are useful in designing a context-aware alert mechanism for Chaperone. Eight participants answered "maybe"; four of them believed they had a good habit of always keeping their phones with them but they still wanted to try it to record how often they leave their phones behind, two had privacy concerns due to Chaperone requesting the microphone permission, one was worried about the effectiveness of the alarm in very noisy environments, and the other one expected that Chaperone could learn from a user's habits to trigger the sensing smartly and save battery. Only one participant answered "no" as they did not need a device loss prevention application due to the perceived low probability of losing the device. Although we did not require participants to have smartphone loss experiences, the advertised content for the user study mentions the study is to "test the context-aware techniques on smartphones to prevent smartphone loss", which may have attracted users with such experiences. In addition, since our user study focuses on collecting smartphone users' perception about Chaperone and its alert mechanism based on one demo session, it may not cover potential issues regarding long-term usage of a product-ready Chaperone. The potential consequence is that the system may track the wrong person since it assumes that the initially closest person is the owner. An active attacker may attempt to disarm Chaperone so that the auto-lock and alert mechanisms are not triggered. For a better defence against the misleading attack, a potential avenue is to improve the motion tracking algorithm (e.g., include motion history), or use additional detection methods (e.g., RF sensing [29]) to distinguish different people. Since our models were trained with data from the lab-based experiments, it was challenging to handle these special cases. A systematic study on how hardware differences affect Chaperone's sensing ability and the necessary parameter adjustments due to these differences is future work.