Due to the proliferation of SSO, user accounts in identity providers are now keys to the kingdom and pose a massive security risk. We also introduce novel attacks that leverage SSO for maintaining long-term control of user accounts. To remedy this we propose Single Sign-Off, an extension to OpenID Connect for universally revoking access to all the accounts associated with the hijacked identity provider account. This has resulted in the proliferation of single sign-on (SSO) schemes that allow users to leverage their existing accounts in popular identity providers (IdPs) like Facebook and seamlessly access other web services or mobile apps (referred to as relying parties, or RPs) without the nuisance of repeating the account creation process or creating/managing extra passwords.Naturally this new paradigm is not without pitfalls, and previous work has extensively explored the design and implementation flaws of SSO platforms that enable a plethora of attacks [46,53,49,3,28]. This highlights the scale of the threat, as attackers can gain access to a massive number of web services.Even though compromised accounts remain a widespread and prevalent issue for major services [10] (e.g., due to phishing [44]), we motivate part of our threat model by demonstrating a session cookie hijacking attack that allows complete account takeover in Facebook, the most prevalent IdP. Our findings further highlight the deleterious effect of SSO on account management, as we present an attack that allows the adversary to maintain access to the user's RP account, regardless of potential remediating actions taken by the user (i.e., changing passwords and killing active sessions), without making any changes visible to the user.Finally, we identify the remediation options that RPs offer to users for preventing attackers from further accessing their accounts. Moreover, manually revoking access and changing passwords is ineffective in many RPs, and practically infeasible as it cannot scale; due to the preemptive account hijacking attack (Section 5), the user would also have to check every new RP she uses in the future. This paper makes the following contributions:• We present the first large-scale study of the SSO ecosystem by measuring the adoption of IdPs in the Alexa top 1 million websites and quantifying the implications that stem from the prevalence of major providers. Broadly speaking, SSO is deployed to simplify user access to services in three categories: enterprise login, single login to a suite of distinct yet interrelated services provided by a single provider, and website/application login also called web SSO. Examples include universities using SSO to provide access to unrelated university services such as student grade systems; Google's SSO for services like YouTube; websites like Stack Overflow that support account creation and login using OpenID Connect [36]. However, the threats we explore are not restricted to a specific standard.OpenID Connect is an extension to OAuth 2.0 [20] that provides a standardized method for a web service to re-trieve identity information from an identity provider using OAuth. • The Relying Party (RP) is the website/service to whom the End-User wishes to authenticate. The End-User initiates logging in to an RP by clicking on a login link in her web browser (the User Agent) thus initiating a sequence of steps that, if successful, results in the End-User being logged in to the RP. Then the User Agent sends a request to the RP's web server as normal and the RP responds by directing the User Agent to visit the IdP's OAuth 2.0 Authorization Endpoint, e.g., using a HTTP 302 Found status code. For consistency with other academic work, we use the term Identity Provider.2The OpenID Connect specification, somewhat confusingly, additionally refers to the RP as the "Client" [36]. Note that both the RP's request for an authorization code and the IdP's response are carried by the User Agent via redirections to the other party's appropriate endpoint.At this point, the User Agent stops mediating communication between the RP and the IdP. As long as the cookie remains valid, the browser remains logged in to the RP without the need for any further communication with the IdP (unless the RP explicitly requires SSO authentication for every session). Here we outline two different attack scenarios that capture adversaries with different levels of capabilities, and which present varying degrees of technical difficulty and attack scalability. Specifically, phishing can enable stealthier preemptive attacks (Section 5) while session hijacking results in the attacker "bypassing" Facebook's auxiliary detection mechanisms and not appearing in the active sessions (Section 4). Figure 1 provides a high level overview of the attack workflow, depending on what the attacker has access to; while we use Facebook as the example IdP for the remainder of the paper, the basic transitions (solid lines) are applicable to any IdP. However, as we demonstrate in Section 4, the vast majority of RPs do not require the IdP password to be re-entered, and at the outset of this study Facebook (the most prominent IdP) was transmitting session cookies over HTTP connections. For the preemptive account hijacking attack (Section 5) where the attacker creates the user's RP account, we assume that the user will eventually attempt to create the RP account using SSO. We selected cookie hijacking as it affects even cautious users who do not fall victim to phishing attacks.Cookie hijacking. static content (through the like or share button) exposed session cookies because requests for static content on the domain staticxx.facebook.com were not protected by HSTS and the cookies were not served with a Secure flag or the flag was not enforced properly. This module counted the unique values seen for the relevant Facebook HTTP cookies for a period of four months (January-May, 2017). Overall, we collected a total of 5,729 unique vulnerable cookies during our experiment, which were appended to requests toward 11 different Facebook (sub)domains, with staticxx.facebook.com being the most common. While networks encrypted with WPA2 and a strong, tightly-guarded secret key are infeasible to brute force, well-known keys and open wireless networks (which is common in free public WiFi, e.g., coffee shops, university campuses, public transit etc.) make such man-in-themiddle attacks trivial. For our study we use a list of 65 IdPs that support the OAuth 2.0 and/or OpenID Connect standards along with their corresponding API endpoints, which we based on Wikipedia's list of OAuth providers [48]. We find that Facebook is the most prevalent IdP covering 4.62% (42,232) of the websites, while Google and Twitter follow with 2.75% (25,142) and 1.34% (12,294), respectively. Figure 5 shows which identity providers are also relying parties for other identity providers. Using a hijacked Facebook account an attacker could indirectly compromise an additional 226 RPs in the top 100K by first compromising the IdPs those RPs support, increasing the respective coverage by 3.1%. We do not have data showing how often users inadvertently create a chain of IdPs by opting to associate the account on an IdP that exhibits this dual behavior to a different IdP. Finally, RPs that allow accounts that were created through a traditional creation process to be associated with an IdP account over SSO post facto (e.g., Strava) are also vulnerable regardless of user actions. Figure 6 depicts the impact of this cascading effect for the top 100K websites assuming that the victim's Facebook account has been compromised. To determine the level of access the attacker has in the RP, we manually evaluated 29 websites out of the Alexa top 500 and 66 popular iOS apps that support Facebook SSO. We begin by injecting the user's hijacked session cookie into a clean browser session, which we then use to authenticate to the IdP during the SSO flow (see Section 2.1). We setup a MitM proxy and implement a cookie overwriting attack [52] to inject the hijacked IdP cookie.44Interestingly, while the absence of the Facebook app in iOS results in the RP apps falling back to the internal browser (Safari), in Android the RP apps predominantly rely on the Facebook app for SSO. Nevertheless, this does not affect the feasibility of the attacks mentioned throughout this paper as the underlying session management issues are independent of the access method and are valid in both iOS and Android. The 7,287 green nodes depict RPs that support Facebook login and can be directly compromised by an attacker that has hijacked the user's Facebook account. We can view all account information including the details of previous rides, and can track the victim's trips in real time. The attacker has access to all app functionality; in one experiment we even tipped the driver from the attacker's device after the victim's trip completed.Hookup. This is one of the RPs that always require reauthenticating the IdP account before getting access.However, we have found a bypass which allows us to gain access using only the IdP cookie; by selecting the account creation option instead of the log in option, if the session cookie is present the attacker will be authenticated and the system will not trigger an SSO reauthentication process.The Guardian. An important aspect of the attack is the extent of the attack's visibility, i.e., whether the attack leaves any digital "footprints" that could potentially alert the victim to unauthorized access. Specifically, none of the 95 RPs actively notify the user regarding other devices or active sessions. Thus, in practice the victim will never become aware of an attack taking place.Long-term access. That could prevent the cookie hijacker from accessing the account on nine RPs (two require an SSO reauthentication at the start of every session, and seven log the user out when the IdP password is reset). Even if the attacker does not know the user's password she can leverage this process and maintain long-term access in 22 out of the 29 RPs that we tested. If the victim creates the RP accounts over SSO, only two of those accounts will definitely have a password set; given the burden of "password fatigue" [12] many users will not set passwords in RPs that do not mandate it. As a result the attacker can maintain long-term access to the user's RP account, regardless of any changes or actions the user may conduct. The victim could recover from this by logging in to the RP account using her RP credentials, de-linking and re-linking the RP account with her own IdP account. In IMDB the RP does not link the two accounts, but actually links the account to the attacker's and the victim is moved to a new empty account upon logging in. We investigate the scenario where the attacker uses the victim's IdP account to preemptively create an account for the victim on an RP at which the victim does not yet have an account. After accessing the newly created account, the RP populates the attacker's device with session cookies that enable access to the account. To determine the level of access that the attacker can maintain after the user joins the RP, and also identify any obstacles that the services may pose in practice, we manually recreated the attack scenario in the 95 RPs. Nonetheless, for the remainder of the section we consider those two services unsuitable targets for this attack and do not explore them further due to the uncertainty introduced by this factor.Next we assume the role of the victim and evaluate the stealthiness of the attack by exploring whether there is some form of notification regarding the creation of an associated account in the RP. Finally, we switch roles again, and complete the final phase of the attack; we attempt to access the RP account using the session cookie(s) that were created upon the initial visit and also explore what user information or account functionality we can access.Results. More importantly, in terms of visibility, the victim will only receive one notification from the IdP instead of multiple account creation notifications from the RPs. The attacker could opt to run the attack during the night (or repeat and resume across multiple nights), which would give her enough time to create all the RP accounts and remove her email from the IdP account; when the user checks the IdP account settings the only email visible in the settings will be the user's own email (the attacker's email is only shown during the "password reset" and "sign out of all devices" processes). Here we explore the remediation actions that users can take if they become aware that their IdP account has been compromised. Our experiments further highlight the significant implications of SSO; apart from the absence of a standardized mechanism to revoke the attacker's access to all of the RP accounts, we find that for the majority of RPs there is no course of action available that can lock out the attacker.Conceptually, for a website to authenticate a user with SSO, a two-link chain is created. We would like for a user who becomes aware that her IdP account has been compromised to be able to sever one of those links and deny the attacker any future access to her account at the RP. Resulting from our investigation we have identified the following actions that a user can take: (i) logout from IdP, (ii) logout from RP, (iii) change password for IdP account, (iv) add or change password for RP account, (v) revoke RP's access to IdP account, and (vi) invalidate active RP sessions. We repeat the experiment for every single RP.Results. Out of the 95 RPs we evaluated, only ten (six web, four iOS) offer some form of session management; for those RPs the user can lock the attacker out by changing the IdP password and invalidating all active sessions in the RP and IdP. The attacker retains partial read access to the account no matter what actions are taken. Prevalent SSO schemes do not provide functionality for an IdP to universally revoke access to all RP accounts created or accessed from a compromised IdP account. While we consider the implementation of the single sign-off protocol as part of our future work, we present our current design to kickstart a discussion within the security community on this inherent limitation of SSO and a first step in addressing this significant threat.Universal revocation. Figure 8 presents the workflow of the hijacking attack and the subsequent steps of the single sign-off universal access revocation protocol. 5 After realizing that her account on the IdP has been compromised, the user connects to her account and initiates the single sign-off revocation process in the IdP. To prevent the attacker from having access to the user's RP accounts, the IdP also issues Authentication Revocation Requests to all the RPs that are associated with that account.7 Once an RP receives a valid Authentication Revocation Request for a specific user account from a supported IdP, it logs out active sessions on all the connected devices, and invalidates all access tokens. For cases where the RP is also an IdP (Section 3), it will in turn issue Authentication Revocation Requests to all the relying parties that are associated with that user account. Here we detail our proposed backwards-compatible extension to OpenID Connect to support single sign-off by adding support for authentication revocation. Once a user regains control of her IdP account and initiates the single sign-off procedure, the IdP will notify all the RPs for which ID Tokens have been issued, unless the token has already expired, as well as revoke all relevant Refresh Tokens. The IdP will send JSON containing a Revocation Token to the revocation URI specified during Client Registration.The Revocation Token is a JSON Web Token [24] containing all of the required claims for an ID Token [36, § 2]. Offering a user multiple options for session termination may lead to incomplete post-compromise remediation if the user makes the wrong choices.The similarity of the back-channel logout proposal and our proposal suggests that both approaches are substantially correct. Although the back-channel logout proposal is a concreteand much-needed-step toward mitigating the threat of IdP compromise, we believe a simple design with little flexibility is preferable. As such, we believe that our results constitute a lower bound but offer a significant step toward better understanding the SSO ecosystem and provide a valuable quantification of SSO adoption.Single sign-off. However, apart from the user becoming aware of the attack, the attacker is automatically locked out of all the RP accounts and the user can initiate an account recovery process in the IdP. In [49] the authors presented OAuthTester, an adaptive model-based testing framework for automatically evalu-ating implementations of OAuth 2.0 systems in practice. Zuo et al. [54] created a tool for detecting server-side access control implementation flaws.Fett et al. [15] presented a formal analysis of the OAuth 2.0 specification, and were able to demonstrate four novel attacks against OAuth. The authors had previously evaluated OpenID and discovered novel attacks that would allow a malicious IdP to compromise the security of all accounts on a vulnerable service provider [28]. Sivakorn et al. [41] demonstrated how the lack of ubiquitous HTTPS resulted in the exposure of HTTP cookies granting attackers access to sensitive user data and account functionality in major services.In contrast to prior work on design and implementation issues of SSO, we explore the security risks surrounding the deployment of SSO, which would persist even if implementations were complete and correct. Our novel preemptive account hijacking technique and the feasibility of long-term access to victims' accounts highlight the obstacles to mitigating these attacks and revoking an adversary's access. Guided by our findings and the significant threat posed by these attacks, we designed single sign-off, an access revocation extension to OpenID Connect that enables users to efficiently recover from an IdP account hijack. The dataset from our SSO coverage study can be found at: https://www.cs.uic.edu/~sso-study/ sIn Table 4 we detail all the web and mobile RPs that we audited throughout our experiments.