Our preliminary study of the top 5,000 Google Play Store free apps identified 983 instances of N-day and 655 instances of 0-day vulnerabilities spanning across the software layers (OS, software services, communication, and web apps) of cloud backends. For an input APK, SkyWalker extracts an enumeration of backend URLs, uses remote vetting techniques to identify software vulnerabilities and responsible parties, and reports mitigation strategies to the app developer. mobile app developers often disregard prudent security practices when choosing cloud infrastructure, building, or renting these backends.Recent backend breaches of the British Airways [1] app and Air Canada [2] app demonstrate how wide-spread these incidents are. Additional cases [4] involving the exposure of 43TB of enterprise customer names, email addresses, phone numbers, PIN reset tokens, device information, and password lengths was due to insecure mobile backends and not the developer's mobile app code.Even for security-conscious developers, it is not clear what backends their mobile app will interact with because of third-party libraries. Using SkyWalker, we conducted an empirical analysis of the top 5,000 free mobile apps in the Google Play store from August 2018. Lastly, we offer the SkyWalker analysis pipeline as a free public web-service to help developers identify what backends their mobile apps interact with, the security state of the backends, and recommendations to address any detected issues.Our empirical study found 983 N-day instances of 52 vulnerabilities affecting hypervisors, operating systems, databases, mail servers, DNS servers, web servers, scripting language interpreters, and others. We present two case studies to demonstrate the vulnerabilities affecting a specific developer and vulnerabilities affecting a platform that is used by many developers.We found these backends to be geographically distributed across the globe and hosted on 6,869 different networks. Mobile apps use cloud-based backend services to support extensive functions like ads, telemetry, content delivery, and analytics. SkyWalker automatically identified 13 unique backends from this app's APK (shown in Table 1) and mapped them to the modules they were found in, i.e., library backends versus developer backends. Backends have layers of software (components) that support the web application software (AS), including an operating system (OS), software services (SS), and communication services (CS). SkyWalker found that the game content backend interface is vulnerable to SQLi for some parameters passed by the mobile app, which is due to the AS not properly sanitizing the input.The developer must now remediate or mitigate these risks, but each backend layer may be operated by different entities that provide hardware and software as a service. SkyWalker fingerprinted the Crime City Real Police Driver game content backend, androidha.vascogames.com, as being hosted on a Google Compute Engine Flexible Environment instance (which provides virtual hardware, operating system, and PHP). Ideally, the developer could report those vulnerabilities to the platform through a bug bounty program or migrate their app to backends that are not vulnerable.This manual assessment procedure is very involved and requires extensive security domain knowledge, which many app developers may not have. • Software Services (SS) refers to software services running in the OS, i.e., database service, web service, etc.• Application Software (AS) refers to the custom application interface used by mobile apps to interact with the running services. • Communication Services (CS) refers to the communication channel supported between the mobile app and the mobile backend.Our approach does not consider the hardware layer because 1) we would need root-level access on the backend to evaluate the hardware and 2) mobile app developers have no direct way of addressing hardware vulnerabilities, i.e., manufacturers must issue firmware updates or replace the hardware. It is important to note that this work does not consider the mobile app security, instead we leverage the mobile app to study the backend.We differentiate between mobile backends by ownership, which provides a granular mapping between stakeholders and resources. Table 2: Backend labels (first-party -B 1st , third-party B 3rd , and hybrid -B hyb ) and cloud layers (hardware -HW , operating system -OS, software services -SS, application software -AS, and communication services -CS) mapping to stakeholders (developers -, service providers -, and shared -) • Block (b) incoming internet traffic to exposed services. This work considers vulnerabilities which are software bugs that exist in the backend software stack, including the operating system (OS), services (SS), application (AS), and communication (CS). This work looks at three classes of 0-Day vulnerabilities, SQLi, XSS, and XXE and counts each instance per API interface endpoint on the mobile backend. Each phase provides input to the next phase, starting from an input app APK to the final vulnerability/mitigation report. The first list is called CP and contains cloud providers, content delivery networks (CDNs), and mobile platform cloud services. OSSPolice [22] provides a more comprehensive list, including native libraries used by the mobile app, but our binary analysis technique only instruments Java code, therefore, we limit the third-party SDK identification to LibScout.To perform the labeling we generate a tuple for each extracted backend B that contains the effective-second level domain d, IP address ip, a boolean flag lib indicating if the backend belongs to an SDK library, and the developer or vendor name v. Algorithm 1 takes as input a list of backends, β , containing tuples B = {d, ip, lib, v} and returns a list of labeled backends β . Phase 2 labels backends into first-party, third-party, and hybrid. Input: β = List of backend tuple B = {d, ip, lib, v} Output: β = Ownership labeled backend list SDK: List of backend domains found in the SDK libraries; CP: List of cloud and hosting providers (domains, net prefix, and ASNs); Colo: List of collocation providers (domains, net prefix, and ASNs);for ∀B ∈ β do if B.lib ∨ B.d ∈ SDK then // Backend from Java lib B.label ← "third-party"; continue end if owner(B.d) = v ∧ owner(B.d) / ∈ CP then // Backend domain not owned by developer or CP B.label ← "third-party"; continue end if B.ip ∈ CP then // Backend IP hosted by cloud provider B.label ← "hybrid"; continue end if B.ip ∈ Colo then// Backend IP hosted by collocation center B.label ← "first-party"; continue end B.label ← "unknown"; end assigns "third-party" label if lib's value is true or the backend domain belongs to the list of SDK backends.If none of the previous statements are true about the domain, then SkyWalker checks the IP membership against the CP and Colo list. Service discovery identifies internet-facing services on backends and fingerprinting identifies the software type, version, Table 3: A list of third-party SDKs extracted by LibScout from the top 5,000 apps, which is used to curate third-party backends. First, SkyWalker groups all IP addresses into their network prefixes and in a random order picks a prefix and a random IP from the selected prefix to scan. TCP ping scans are more reliable in detecting the availability of the remote server (backend) because they are not filtered by firewalls like ICMP scans.Once SkyWalker establishes the host is reachable, SkyWalker conducts a TCP SYN scan (SYN-SYN/ACK-RST) across all ports. Finally, to obtain the backend IP address fronted by CDNs, SkyWalker looks up the IP address in a manually curated CDN list and uses passive DNS to find historical records that existed just before the current records. For example, to identify the OS, the NASL script inspects the banner string, analyzes the SSL certificate, checks additional running services (SMB, RDP, SSH), performs structured ICMP pings, inspects HTTP headers, and uses TCP/IP fingerprinting algorithms [24]. The binary phase performs in-context analysis for each API interface on the backend, which provides API information used for fingerprinting. It is important to note that other vulnerabilities such as authentication bypass, broken access control, and sensitive data exposure present a high risk that can violate legal obligations. SkyWalker generates p requests for a given backend interface and stores them in the job queue. The vulnerability analysis is two parts, N-day analysis, and 0-day analysis. On the other hand, when we used UDP scanning techniques and consider generic service banner information we find over 6, 500 candidate N-day instances with a large false positive rate. If the deviation is equal to the time delay parameter in the SQL statement, SkyWalker concludes that the interface and parameter pair is vulnerable.Similarly for XSS, SkyWalker triggers the vulnerable parameter and includes JavaScript code to creates a new div element with a unique name attribute. One of our primary goals for this work is to empower app developers with open access to SkyWalker via a free-to-use web-service. The web-interface takes as input a link to an Android app in the Google Play store or a direct APK upload. Once a user is manually vetted, they can only submit apps that they develop. We use an Amazon Web Service (AWS) Elastic Compute (EC2)instance with a reserved IP address to conduct the fingerprinting and run a web server with information about our study along with an email address for backend hosts to contact us if they want to opt-out. Table 4 shows the distribution of 0-day and N-day instances across the software layers. Overall, we analyzed 4, 980 apps with cloud-based backends and successfully extracted backends for 4, 740 mobile apps. For 0-day vulnerabilities, the top three mobile app categories are tools, entertainment, and games. For N-day vulnerabilities, the top three mobile app categories are entertainment, tools, and games.Ownership. In general, we observe that the components that app developers are responsible for (AS and CS in the B 1st and B hyb ) have more vulnerabilities.Operating System (OS). Overall, the top three OS vulnerabilities listed in Table 6 affect 197 mobile apps.We found the MS15-034 vulnerability affecting hybrid backends (B hyb ) that run on Amazon AWS, Akamai, OVH, Go Daddy, Digital Ocean, and other smaller hosting providers. Although this might be a difficult task, recent advancement in vulnerability fuzzing [37] can uncover these deep bugs.The second most common SS vulnerability was unsupported versions of Apache web server (1.3.x and 2.0.x), Tomcat server (8.0.x), and Microsoft IIS web server (5.0). For Apache web server versions less than 2.2.15, they are affected by several denial of service bugs (CVE-2010-0408, CVE-2010 and TLS injection bug (CVE-2009-3555) affecting 76 mobile apps. Based on our measurement, we found 1 XXE instance in the top 100M, 5 in the top 50M, 15 in the top 10M, 9 in the top 5M, and 17 in the top 1M. For example: 1 XXE and 3 XSS vulnerabilities in the top 132 mobile apps; 4 SQLi, 10 XSS, and 5 XXE vulnerabilities in the next 131 mobile apps (though still representing over 50M+ installs each). The mobile apps using these vulnerable backends do not use the SSH service and to remediate one can turn off, patch, or block the incoming internet traffic to it.Those backends which only use HTTP expose users to eavesdropping and MITM attacks because it does not offer integrity or confidentiality. We manually inspected the request messages sent from 3,253 apps that use HTTP and found personally identifiable information (PII) such as name, gender, birth year, user ID, password, username, and country. Interestingly, the Apple iOS App Store enforces strict use of HTTPS through their App Trans- port Security [41] model. The overall impact for each vulnerability varies based on the severity, the mobile app to backend usage, and the adversary capability/visibility. For example, if a mobile app uses app slicing [3] or downloads additional libraries from the mobile backend, an attacker who compromises the backend can modify the content and attain code execution on the mobile device. Directly quantifying the impact of each vulnerability is an involved task and depends on many variables such as the severity of the vulnerability, the mobile app to backend usage, the adversary capability, and other nuance factors (number of backends per app, network distribution, and geographical distribution). We followed a tiered approach in our notification by first notifying the app developer directly using the contact information in the Play Store. Operating System (OS) 341,521 Services (SS) 445,908 Application (AS) 206,533 The N-day vulnerabilities we found are discoverable and easy to exploit due to the availability of fast internet scanners like ZMap [48] and MASSCAN [49]. Many of these scans target N-day vulnerabilities, while scans for 0-day vulnerabilities cannot be accounted for. Furthermore, a recent report [53] also pointed out that the number of vulnerabilities in web apps increased in 2018 and that support for PHP version 5.x and 7.x will end in 2019, which means we can anticipate more unpatched and exposed backends in the future. We were not able to fingerprint the OS and the SS because the Akamai servers respond only to web app specific responses, i.e., minimal header and banner information. We found that the eBooks by Dailyhunt app (which has over 500K installs but does not rank in the top 5,000 apps) also uses the same vulnerable API interface. Additionally, the mobile apps use HTTP to communicate with the hybrid backends and HTTPS to communicate with third-party services.As for the third-party services, we did not find any vulnerabilities. Third, vulnerabilities can exist (and be scanned for) in any software layer of the cloud and API interface on the web app, which makes them challenging to identify and fix. The appnext platform is used by 6 mobile apps from the top 5,000 free apps. We analyzed all apps by the same developers that are not in the top 5,000 and found 140 additional apps using the appnext platform. * domains run on Amazon AWS and provide app-specific data, like authentication, telemetry ingestion, predictive actions, and configuration. Unfortunately, these backend vulnerabilities are inherited by multiple apps and developers, and the app developers cannot immediately remediate the vulnerabilities in third-party services. In this section, we discuss the general mitigation strategies which SkyWalker recommends for app developers and to help improve the security posture of their app backends. For example: if the hybrid backend is using a cloud provider's platform offering, developers should report and/or migrate their backend if the vulnerabilities are found in HW , OS, SS and upgrade or patch if the vulnerabilities CS or AS related, respectively. Second, developers should dedicate personnel to manage and maintain their backends including the routine maintenance of OS, SS and CS, and timely fixes of known vulnerabilities affecting their cloud backends and mobile apps using patching tools [55]- [57]. • Non-Exploit Payloads: Similar to the work of Durumeric et al. [59], our scanning and measurement techniques did not include any active exploits against the mobile app backends. Additionally, we assume any internet-facing service gives implicit permission to access the target computer system, in particular, we refer to how web crawlers and internet indexing services operate. Zuo et al. [12] performed an assessment of mobile app backend services by investigating the cloud offerings of Google, Amazon, and Microsoft.Our work provides a wider analysis by going beyond just the third-party service backends and by examining a diverse set of cloud-based backends. We used SkyWalker to empirically analyze the top 5,000 mobile apps in the Google Play store and uncovered 655 0-days and 983 N-days instances affecting thousands of apps.