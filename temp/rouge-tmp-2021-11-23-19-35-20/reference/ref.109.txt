The rapidly increasing landscape of Internet-of-Thing (IoT) devices has introduced significant technical challenges for their management and security, as these IoT devices in the wild are from different device types, vendors , and product models. The discovery of IoT devices is the prerequisite to characterize, monitor, and protect these devices. However, manual device annotation impedes a large-scale discovery, and the device classification based on machine learning requires large training data with labels. Gartner reports [1] that nearly 5.5 million new IoT devices were getting connected every day in 2016, and are moving toward more than 20 billion by 2020. Even if an IoT device has a serious security vulnerability, users have no capability of updating patches in a timely manner due to their limited knowledge.In general, there are two basic approaches to addressing security threats: reactive defense and proactive prevention. By contrast, a proactive security mechanism is to prevent potential damages by predicting malicious sources, which is more efficient than the reactive defense against large-scale security incidents (e.g., Mirai Botnet [21]). For instance, an IoT device has a type (e.g., routers or camera), comes from a vendor (e.g., Sony, CISCO, or Schneider), with a product model (e.g., TV-IP302P or ISR4451-X/K9). In this paper, we aim to automatically discover and annotate IoT devices in the cyberspace while mitigating the cost in terms of manual efforts and the training data.The key observation we exploit is that the response data from those IoT devices in application layer protocols usually contain the highly correlated content of their manufacturers. Manually enumerating every description webpage is impossible.To address these technical challenges, we propose an Acquisitional Rule-based Engine (ARE) that can automatically generate rules for discovering IoT devices in the cyberspace. For those relevant webpages, ARE uses named-entity recognition (NER) to extract device annotation, including device type, vendor, and product. Note that ARE generates rules without the human efforts or the training data, and it can dynamically learn new rules when vendors distribute new products online.To demonstrate the effectiveness of ARE, we perform three applications based on IoT device rules. (2) The Compromised Device Detection (CDD) application deploys 7 honeypots to capture malicious behaviors across one month. Our evaluation shows that ARE generates a much larger number of rules within one week and achieves much more fine-grained IoT device discovery than existing tools. Our main findings include (1) a large number of IoT devices are accessible on the Internet, (2) thousands of overlooked IoT devices are compromised, and (3) hundreds of thousands of IoT devices have underlying security vulnerabilities and are exposed to the public.The remainder of this paper is organized as follows. Section 3 describes how the core of ARE, i.e., the rule miner, derives rules of IoT devices. In this section, we first present the background of IoT device discovery and annotation. To fingerprint an IoT device, the input data includes a pair of queries and responses from IoT devices, and the class label (known as category or target) is what the IoT device belongs to. In contrast to the limited number of OS classes, the number of device models is vast, and it is infeasible to collect the training data manually. Bannergrabbing is to extract textual information in the application layer data for labeling an IoT device. Antonakakis et al. [21] applied the Nmap [8] banner rules to analyze online devices from CENSYS and Honeypot. After the initial sale of products, there are many websites describing device products such as product reviews. In the development of ARE, we leverage a set of existing tools (web crawler, NLP, and association algorithms) to address several practical problems in the process of automatic rule generation. It is a challenging task to crawl every webpage, especially given that we cannot catalog every IoT device. The search engines also keep the history snippets even if a product is outof-date without correlated webpages. To present IoT device annotation, ARE needs to extract the relevant terms from a related description website. Name Entity Recognition (NER) is used to determine the words into predefined classes, such as organization names and location names. ARE will choose an item whose value is larger than the minimum support and generate rules whose values are larger than the minimum confidence. Also, there are many websites including product information, such as product reviews and official documents. We define the concept of "transaction" to associate the applicationlayer data from an IoT device with the corresponding description of an IoT device in a webpage, and our rule generation is based on the transaction set. For application-layer data p i , we convert the response data into the sequence of search queries {q 1 i , q 2 i , ..., q k i }, where k is the number of the query sequence (detailed in Section 4.2). The value i denotes an IoT device i, , and l i 1 to l i n is the keywords extracted from the application layer data. [A-Za-z0-9] *∧[0-9]2,4[A-Z]+As defined above, a rule is an association between a few features extracted from the application-layer data and the device annotation extracted from relevant webpages. DER is derived from the NER technique in the NLP tools, and uses the contexter and local dependency among words to identify the device information. The rule miner uses the apriori algorithm to learn the relationship between A and B. Although the apriori algorithm is straightforward, it is able to generate rules satisfying the inference process for discovering and annotating IoT devices. Relevant words in a webpage would be classified as one label among three predefined classes.DER is a combination of the corpus-based NER and rule-based NER. Note that the device type and vendor can be easily expanded.In the rule-based DER, we use regular expressions to extract the product name entity. To address this problem, DER leverages the local dependency between entities for accurate device entity recognition.Our observation is that true IoT entities always have strong dependence upon one another. Two kinds of local dependency usually occur: (1) the vendor entity first appears, followed by the device-type entity, and finally the product entity; (2) the vendor entity first appears, and the product entity appears second without any other object between the vendor entity, and the device-type entity follows. The rule miner uses the apriori algorithm to derive the relationship between search queries extracted from the response data (q 1 i , q 2 i ,...,q k i ) and device annotation extracted from a webpage (t j , v j , p j ) in the transaction set. The argument support is used to indicate the frequency of the variable appearing, and the argument confidence is the frequency of the rules under the condition in which the rule appears. In the transaction set T = {t 1 ,t 2 ,...,t n }, we can calculate those two parameters of the rule A ⇒ B as follows:sup(A) = | n ∑ i A ∈ t i |/|T | con f (A ⇒ B) = sup(A 񮽙 B)/sup(A)The apriori algorithm first selects the frequent tuples in the dataset and discards the item whose support value is smaller than the support threshold. We randomly choose an IP address chunk to generate the data set, which contains 2,499 transactions across 250 application response packets, across 5 device types (printer, access point, router, modem, and camera), 48 vendors and 341 products. When the confidence increases, we can achieve high precision but missing some rules. For instance, given the rules, A ⇒ B and A ⇒ C, when the application matches the condition A, the output is 50% of the annotation B or C. Otherwise, we use the majority voting to output the highest confidence of the rules.Example Rules. Nmap developers usually provide users with those hardcoded and apparent rules in the service library. When we add new instances into the transaction set, the rule miner could automatically learn new rules over time. Fortunately, the amount of fake response data is small in comparison with the large number of regular IoT devices. Our prototype system can be seamlessly deployed in large residential/enterprise/local networks that manage a fleet of IoT devices within their networks to collect transactions (see Section 4). OEM is that one manufacturer produces parts of a device for another manufacturer, leading to the mixture of parts from the original and other vendors. The rule library and planner modules provide interactive interfaces to applications for discovering and annotating IoT devices in the cyberspace. Below, we first illustrate how ARE works and then detail the system design and implementation of ARE. The second step uses the web crawler to obtain the description webpages of IoT devices, and then removes redundant content from the webpages. Furthermore, this module can dynamically learn rules, e.g., when manufacturers release new IoT device products. The rule library is a standard file, which stores each rule in the format {A ⇒ B} with a timestamp. The API Update(network, time) notifies the planner module to generate new rules in the current network and gather data from this space, and the outdated rules would be removed. We can directly use public data sets about application service responses (such as HTTP, FTP, TELNET, and RTSP) from Censys [25]. For example, the packets from some commercial websites selling camera devices include device-relevant textual content. • The webpage of IoT devices usually does not have the external links to other websites, and if it does, the number of links is also small.Using these observations, we can filter the non-IoT devices and the rest of the response data is added into the candidate IoT devices.Web Crawler. Note that if the dictionary word is also in our brand and device type list, we will keep it. For instance, Google provides 100 queries per day for free users and has a limitation of 10,000 queries per day. Each item in the URL list returned by browser instances is a complete HTML page. In our experiment, the top 10 webpages work well in practice for locating relevant information on IoT devices.In the implementation, we write a custom Python script to pipeline from the response data into webpage crawling. We also use apriori algorithm [3] in Python Package to generate rules for IoT devices.In practice, the rule miner has to handle the scenarios where the response data does not include sufficient device information to initiate the subsequent web crawling process for rule generation. For example, from the FTP response packet "220 Printer FTP 4.8.7 ready at Jan 19 19:38:22," we can only extract one useful keyword "Printer" as a search query. To demonstrate the effectiveness of ARE, we develop three ARE-based applications.Internet-wide Measurement for IoT Devices. Like prior Internet-wide measurements [21,26,31,33,35], we build the measurement application using the rules from ARE to collect, analyze, and characterize the deployment of these IoT devices across the real world.Detecting Compromised IoT Devices. Like [23,24], we build a vulnerability analysis application through the dataset from the National Vulnerability Database [12]. Then, we show the experimental results for ARE evaluation, which include that (1) the number of rules generated by ARE is nearly 20 times larger than those of the existing tools, (2) our rules can achieve very high precision and coverage, and (3) the time cost introduced by ARE is low. In the first dataset, we randomly choose 350 IoT devices from the Internet. We manually label those IoT devices, and the ground truth labels include 4 different device types (NVR, NVS, router, and ipcamera) 64 different vendors, and 314 different products. Nmap [8] is an opensource tool for network discovery and security scanning. The first dataset 95.7% 94.9%The second dataset 97.5% - creasing for two decades, from the initial version V3.40 to the latest version V7.60. There are 92.8% of rules that can completely label IoT devices in the form of (device type, vendor, product). As a comparison, Nmap only has about 30% of rules with a fine-grained annotation.We use the hash algorithm to calculate MD5 checksums of the application-layer packets from Censys [25], and then remove the duplicated packets. Given the same number of response packets, ARE achieves a larger coverage than Nmap. Note that the distribution of IoT devices on the Internet is a typical long tail rather than uniform distribution on the Internet. Our ARE prototype is running on a commercial desktop computer (Windows 10, 4vCPU, 16GB of memory, 64-bit OS), indicating that CPU and memory costs of ARE can be easily met. The acquisition of applicationlayer data takes 0.5022 seconds, and the web crawling takes 0.4236 seconds. Additionally, we deploy the collection module on the Amazon EC2 [20] with 2 vCPU, 8GB of memory, and 450Mbps of bandwidth, which collects the RTSP application-layer response data. Overall, we found 6.9 million IoT devices, including 3.9 million from HTTP, 1.5 million from FTP, 1 million from Telnet, and 0.5 million from RTSP. (1) Although a large portion of IoT devices may be behind firewalls in home/enterprise networks, the number of visible and reachable IoT devices on the Internet is still very large. It is common for routers, gateways, switches, and modems to be visible and reachable on the Internet. Unfortunately, there are more than two million of those types of IoT devices accessible on the Internet, as shown in Table 6. Similarly, we develop the CDD application to discover compromised devices.In particular, we deploy seven honeypots as vantage points for monitoring traffic on the Internet, across four countries (Brazil, China, India, and Ukraine) and six cities, including Fuzhou, Kharkiv, Kunming (2 honey- [6] in the CDD. In total, we detect nearly 2,000 compromised IoT devices among 12,928 IP addresses attempting to connect to our honeypots. In addition, we also observe that a few smart TV boxes are compromised and exhibit malicious behaviors. From the defensive perspective, it can help us find out which online devices are still vulnerable and perform security patches for critical infrastructure immediately. Table 9 lists the Common Weakness Enumeration (CWE) of online IoT devices, in which the left column is the CWE ID, the middle column is the weakness description, and the right column is the number of IoT devices with this type of vulnerability. The VDA application aims to reveal underlying vulnerable devices accessible on the Internet.Discovery. The majority of the top 10 vulnerabilities in the CWE list are related to improper implementation (Path Traversal, Credentials Management, and Improper Access Control), which could be easily avoided if a developer pays more attention to security. One classic usage is OS fingerprinting, which identifies the OS of a remote host based on the different implementations of a TCP/IP network stack. Kohno et al. [32] proposed monitoring TCP traffic for calculating the clock skews as features.In general, a fingerprinting tool consists of three major components: feature selection, training data collection, and learning algorithms. Thus, we propose ARE that is able to learn the rules for automatic IoT device identification without any training data or human effort.Banner-grabbing. Nmap [8] also provides a service library to identify application and web services for end users. In the analysis of the Mirai botnet [21], the regex in bannergrabbing is used to annotate the device type, vendors, and products. Xuan et.al [30] proposed to utilized the banner of industrial control protocols to find a critical infrastructure equipment. Furthermore, we apply ARE to three application cases: (1) inferring and characterizing millions of IoT devices in the whole IPv4 space, (2) discovering thousands of compromised IoT devices with malicious behaviors, and (3) revealing hundreds of thousands of IoT devices that are still vulnerable to malicious attacks. This work was supported in part by the National Key R&D Program of China (Grant No. 2016YFB0801303-1), Key Program of National Natural Science Foundation of China (Grant No.