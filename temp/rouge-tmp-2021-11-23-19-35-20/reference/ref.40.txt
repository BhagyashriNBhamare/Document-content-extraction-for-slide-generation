We show how DeTor can be used to avoid censors (by never transiting the censor once) and to avoid timing-based deanonymization attacks (by never transiting a geographic region twice). If an adversarial network is on the path of the circuit between source and entry, and between exit and destination, then it can introduce small, detectable jitter between packets to correlate the two connections and therefore uncover the source and destination [19]. Users can specify arbitrary geographic regions (our techniques do not rely on any notion of network topology or ownership), and we return per-packet proofs of avoidance, when available.We construct avoidance in Tor in two applications:Never-once proves that packets forwarded along a circuit never traversed a given geographic region, even once. We show that provable, never-once avoidance is possible even when avoiding routing-central countries like the US, and that provable never-twice avoidance works for 98.6% of source-destination pairs not in the same country.Collectively, our results show that, with client-side techniques alone, it is possible to achieve greater control over where Tor data does not go. Tor's default circuit selection algorithm chooses nodes almost uniformly at random to be in a circuit, with three notable exceptions: (1) nodes with greater bandwidth are chosen more frequently, (2) no two nodes from the same subnet are chosen to be in the same circuit, and (3) no nodes are chosen from a user-specified list of countries to ignore.Circuit construction is done in such a way that the only host who knows all hops on the circuit is the source: each other host knows only the hop immediately preceding and succeeding it. As we will demonstrate, because our techniques apply to noncontiguous geographic regions, they are not restricted to single nation-states, and can be applied to arbitrary sets of countries.The attacker can also run its own Tor routers or collude with some Tor routers, but, as per the previous assumption, only within its own (or its fellow colluders') borders.Finally, we make several assumptions about what an attacker cannot do. In particular, if the destination's traffic patterns (e.g., the number of bytes transferred in response to apparent requests) are well-known and unique, then an attacker may be able to infer the destination by observing the traffic on any leg of the circuit [23]. Like DeTor, the idea is that if we can reason about and enforce where our packets may (or may not) go between hops in the circuit, we can address attacks such as censorship and certain forms of traffic deanonymization.As described in §2.2, however, we assume in this paper an adversary who has the ability to manipulate an observer's map of the Internet, for instance by withholding some routing advertisements, withholding traceroute responses, and so on. In this paper, we seek techniques that yield provable security, even in the presence of such adversaries.Alibi Routing [24] uses round-trip time measurements and speed of light constraints to provably avoid userspecified, "forbidden" geographic regions. Let R(x, y) denote the round-trip time (RTT) between hosts x and y, and let R e2e denote the end-to-end RTT that s observes; then for a user-configurable δ ≥ 0:(1 + δ ) · R e2e < min min f ∈F [R(s, f ) + R( f , a)] + R(a,t) R(s, a) + min f ∈F [R(a, f ) + R( f ,t)](1)When this inequality holds, it means that the RTT for s forwarding packets through a to t is significantly less than the smallest round-trip time that would also include a host in the forbidden region. As a result, Levin et al. [24] refer to a relay a who provides such a proof an alibi peer. Critically, computing this does not require any participation from F (e.g., sending responses to pings)-it only depends on knowing the geographic coordinates of those trusted to forward the packets: s, t, and a.As mentioned above, Alibi Routing assumes that node s trusts all nodes that are provably outside of its specified forbidden region F. To determine if a node n is definitively outside of F, s directly measures the RTT to n by asking it to echo a random nonce. Recall that these attacks arise when an adversary is on both (a) the path between source and entry node and (b) the path between exit node and destination. To this end, we measure the end-to-end round-trip time R e2e through the entire circuit, and we compute the shortest possible time necessary to go through each circuit and the forbidden region:R min = 3 c · min          D min (s, F, e, m, x,t) D min (s, e, F, m, x,t) D min (s, e, m, F, x,t) D min (s, e, m, x, F,t)(3)Here, D min (x 1 , . . . , x n ) denotes the shortest possible great-circle distance to traverse nodes x 1 → · · · → x n in order. For example, in Figure 1, the top circuit has its shortest detour through F between the middle and exit nodes; the bottom circuit's shortest trajectory that includes F does so between source and entry.Last, we compare this theoretical minimum RTT including F (R min ) with the end-to-end measured RTT (R e2e ), and ensure that(1 + δ ) · R e2e < R min . All other parts of the circuit (entry to middle and middle to exit) do not help the adversary in this particular attack.Never-twice avoidance of a single host We begin by constructing a proof that a circuit could not have traversed any single host on both the entry and exit legs.Ultimately, we seek to show that there is no point p for which 3 c · D min (s, p, e, m, x, p,t) ≤ R e2e . For each country F ∈ C e ∩ C x , we ensure that the minimum RTT to go through the entry leg and F plus the minimum RTT to go through the exit leg and F is larger than the end-to-end RTT would allow:∀F ∈ C e ∩C x : (1 + δ ) · R e2e < 3 c · (D min (s, F, e) + D(e, m, x) + D min (x, F,t))(5)The subtle yet important difference between Eq. Trivially, any circuit with a Tor router in some region F cannot be used to avoid F. Subtler issues can also arise, such as when two consecutive hops on a circuit are in direct line-of-sight of a forbidden region.In this section, we describe how DeTor identifies which circuits could possibly provide a proof by alibi, and how we choose from among them to maximize both anonymity and likelihood of success. In this case, we redefine D min (x 1 , . . . , x n ) to be the shortest sum distance from any point in x 1 's country to any point in x 2 's country to any point in x 3 's country, and so on.Armed with a set of potential DeTor circuits, we next address the question: which among them should we choose? If any host on the circuit has very high latencies (e.g., because their last-mile link is a satellite or cellular link [32]), then we will never be able to definitively prove with RTT measurements alone where their packets could not have gone.It is difficult to determine whether there are such highlatency links without directly measuring them. In particular, DeTor uses the Stem [36] Tor controller for constructing circuits and attaching TCP connections to them.Much like Alibi Routing, DeTor must check for proofs of avoidance for every round-trip of communication.Half of this is provided by Tor's checks that the packets followed the circuit and were not altered; additionally, a DeTor client measures the end-to-end RTT for each round-trip of communication and checks this against Eq. In this section, we present the evaluation of DeTor in terms of both never-once and never-twice avoidance.Our evaluation is driven by several fundamental questions: who can avoid whom, does provable avoidance harm anonymity, what is the performance of the circuits that DeTor provides, and what are the primary indicators of DeTor's success (or failure)? Overall, DeTor is successful at avoiding all countries, even those prevalent on many paths, like the US.tion of all source-destination pairs who (from bottom to top): (1) terminate in the forbidden region and therefore cannot possibly achieve avoidance, (2) do not have any trusted nodes, typically because they are too close to the forbidden region to ensure that anyone they are communicating with is not in it, (3) have trusted nodes but no circuits that could possibly provide provable avoidance, (4) have circuits that could theoretically avoid the forbidden region, but none that do with real RTTs, and (5) successfully avoid the forbidden region over at least one DeTor circuit.The key takeaway from this figure is that DeTor is generally successful at finding at least one DeTor circuit for all countries and all values of δ . We believe this is due to the fact that Russia is close to the large cluster of European nodes in our dataset.The US is another example of somewhat lower success rate; this is due, again, to our dataset comprising many nodes from the US, and thus 45% of all pairs in our dataset cannot possibly avoid the US. Figure 5 shows the distribution, across all sourcedestination pairs in our dataset, of the number of circuits that (1) offered successful never-once avoidance, (2) were estimated to be possible (but may not have achieved avoidance with real RTTs), and (3) were trusted, but not necessarily estimated to be possible. It is in this sense that we say that Tor offers its users merely the illusion of control.All together, these results demonstrate the power of DeTor-simply relying on random chance is highly unlikely to result in a circuit with provable avoidance.Given that there are source-destination pairs that have only a handful of DeTor circuits, we ask the converse: are there some circuits that offer avoidance for only a small set of source-destination pairs? We next turn to the question of whether the set of circuits that DeTor makes available disproportionately favor some Tor routers over others.To measure how equitably DeTor chooses available Tor relays to be on its circuits, we first compute, for each source-destination pair, the probability distribution of each Tor relay appearing on a successful DeTor circuit. (b) China is the forbidden region Figure 10: Success rates for never-once circuits as a function of the ratio between the maximum acceptable distance (through the circuit but not through F) and the minimum distance (directly through the circuit). Therefore, to evaluate how well never-twice works, we measure the number of source-destination pairs that yield a successful DeTor circuit.Ruling out the source-destination pairs who are in the same country (as these can never avoid a double-transit), we find that 98.6% of source-destination pairs can find at least one never-twice DeTor circuit. In the remainder of this section, we investigate the quality of the circuits that our nevertwice avoidance scheme finds.Turning once again to the number of circuits, Fig- ure 11 compares the number of circuits that DeTor identified as possibly resulting in a proof of avoidance (as computed using Eq. DeTor succeeds more frequently as the middle legs take on a larger fraction of the circuit's distance, but then begins to fail as the length of the middle legs approaches the combined length of the entry and exit legs. Through extensive simulations using real Tor latency data [6], we have demonstrated that DeTor achieves provable avoidance for most sourcedestination pairs, even when avoiding large, routingcentral countries like the United States.Although the dataset we use in evaluating DeTor comes from live Tor measurements [6], the scale and geographic positions do not reflect the Tor network in its entirety; our results indicate that having more Tor routers would lead to more potential DeTor circuits and greater overall success rates.