Our attack, called Synchronized Token Lifting and Spending (STLS), demonstrates that an active attacker can sniff the payment token, halt the ongoing transaction through various means and transmit the token quickly to a colluder to spend it in a different transaction while the token is still valid. POSAUTH addresses this issue by incorporating one unique ID of the current POS terminal into the generation of payment tokens by requiring a quick scan-* The two lead authors are ordered alphabetically. Particularly, mobile payment, in which a payment transaction is carried out between a smartphone and a point of sale (POS) system, becomes increasingly popular, with over 1 trillion dollars revenue projected for 2019 [49]. Most of these schemes are designed for online use originally, which requires both the payer and the payee to stay connected to the Internet during a transaction, so both parties are notified by the payment service provider once the transaction succeeds. To avoid the delay and extra cost introduced during this process, recently offline payment schemes are gaining traction, which allow a transaction to go through even when the payer's network connection is less reliable. More importantly, both NFC and Bluetooth allow convenient bidirectional interactions between the payer (smartphone) and the payee (POS), which helps strengthen the protection: a typical approach is for the POS device to challenge the phone with an "unpredictable number"; the number is then used by the phone to generate a payment token with a short validity period. PayPal and AliPay (an extremely popular Chinese payment service, with 190 million users) both transmit the token through QR scanning, an approach widely supported by POS machines. The effectiveness of this protection, however, becomes questionable in the presence of an active attacker, who is capable of disrupting a transaction to prevent the token from being spent, which allows him to use it in a different transaction within the validity period. Our study reveals surprising security vulnerabilities within these high-profile schemes, affecting hundreds of millions of users around the world: we found that both approaches are subject to a new type of over-the-counter payment frauds, called Synchronized Token Lifting and Spending (STLS), in which an adversary sniffs the payment token, manages to halt the ongoing transaction and transmits the token to a colluder to spend it in a different transaction while the token is still valid. Our study shows that a malicious payer device or the one infected with an attack app can not only steal the token from the payee's screen, which can later be used for over-the-counter payment (through POS), but also stealthily force the payee device to refresh its screen, causing it to generate a new token, therefore preserving the original one for an unauthorized purchase (Section 3). In the meantime, we found that it is feasible to acquire the image of the code from the reflection on the glass of the QR scanner's scan window (captured by the phone's front camera) (Section 3.3). Our findings highlight the fundamental weaknesses of today's mobile off-line payment schemes: onetime token is insufficient for defending against an active adversary capable of stealthily disrupting a payment transaction (which is found to be completely realistic); also given the error-prone nature of the channels (magnetic field, sound, QR scan) those schemes use, the validity period of their payment tokens needs to be sufficiently long to allow multiple retries, which leaves the door open for the STLS attack. POSAUTH is meant to be easily deployed, without changing hard-ware of today's POS systems. We made a first step towards practically mitigating these STLS attacks through a new design that binds the payer's payment token to a specific POS terminal, without changing the hardware of existing systems. The rest of the paper is organized as follows: Section 2 provides background information for our study; Section 3 elaborates the STLS threats on Samsung pay and Alipay; Section 4 presents our protection mechanism; Section 5 discusses the limitations of our study and potential future research; Section 6 compares our work with related prior studies and Section 7 concludes the paper. Figure 2 illustrates the work-flows of both payment methods. An off-line transaction starts when the payee creates a charge request through entering payment information (e.g., amount, payment method) into a POS terminal. Such a token is generated using a secret in the payer's mobile digital wallet, the current time and the challenge from the payee when it is available, and other credential data.Upon receiving the token, the POS terminal forwards the token as well as other transaction information to the payment service provider for verification. The security guarantee of an off-line payment scheme is mainly built upon the protection of the payment token, which is essentially the proof for a payment request, typically in the form of a hash-based message authentication code (HMAC) over its generation time and other information. Also, each token is ephemeral, with a short valid period attached to it, based upon its generation time specified in its content.This protection apparently only considers the threat from a passive adversary, who does nothing to interfere with the execution of a transaction. Also this attack cannot be prevented by checking the liveness of the token, since the validity period often has to be set sufficiently long to tolerate the errors in a normal token transmission. Instead, we assume that the payer's phone is infected with an attack app, which does not have system privileges but needs camera, Bluetooth and network permissions, which are commonly requested by legitimate apps. In this section, we report our security analysis on Samsung Pay as well as the Audio Pay and QR Pay techniques utilized by other popular mobile off-line payment services such as Alipay and Wechat. In this paper we focus on the security protection of MST, even though Samsung Pay also supports NFC.Samsung Pay features a high compatibility to existing POS terminals which work with magnetic-stripe card. When the Samsung Pay user (the payer) is going to pay at a POS, she launches the app and chooses a card she is going to pay with and then passes the app's verification with either password or fingerprint. Fundamentally, the distance that allows electromagnetic field signal sniffing feasible is determined by a signal-noise-ratio (SNR) at that distance and the capability for the sniffing antenna to pick up the signal. As we can see here, the signal still largely preserved the coding information and can therefore be used for decoding using our later proposed decoding method. The captured signal is then decoded using a band pass filter (BPF), a synchronization detection module and a symbol judgment module. The synchronization detection module identifies the start and the end positions of each symbol. As mentioned earlier, Samsung Pay and LoopPay utilize one-time token, which effectively defends against passive attacks: up to our knowledge, none of the prior exploit attempts [6,3] can succeed, because a used token cannot be used again. Note that such jamming does not need to be blind: most mPOS systems are using WiFi, and a temporary disruption of its service, within a few meters, will not affect other mobile users, such as those using smartphones through 3G or 4G; even for the mPOS running on cellular networks, the adversary can jam only their specific cellular formats, e.g., Verizon (CDMA format), without interfering with others, e.g., AT&T users (UMTS format), in a 3-meter peripheral. Further, given the delay for the POS system to restore its connection, the adversary can quickly stop jamming: for example, he can turn on the device for 30 seconds and then leave, and gives his colluder, who receives the token from an unblocked channel, at least 1 minute to spend the token. The attacker runs a small antenna (small enough to be hidden in his backpack) connected to a laptop (also hidden) to monitor the electromagnetic signal around an mPOS terminal. Similar to MST-based payment, the schemes based upon the audio channel are equally vulnerable to the STLS attack. Upon receiving the audio, the merchant decodes it to recover the payment token from, and then sends the token as well as transaction information to the payment service provider. Upon receiving the audio, the machine decodes the payment token from the audio and sends it to the payment service provider through cellular network to proceed the transaction. Specifically, before the payment transaction starts, a nearby attacker turns on a signal jamming device to block signals and prevents the merchant from communicating with the payment service provider. When the payer plays her payment sound to the merchant (mobile vending machine in Alipay), the attacker records the sound within a proper distance. A QR code representing the payment token is generated by the payer's mobile payment app (like WeChat, ChasePay and AliPay) and then picked up by payee's POS scanner and transferred to service provider (see Figure 11). The payer scans the QR code presented by the payee using a mobile app to get payee's merchant ID, inputs the right amount and then authorizes the payment. In this case, the QR code can be printed on a paper as the merchant ID is usually permanent. In this work, we evaluate whether STLS attack can succeed for the first and third transaction scenario, i.e., whether the payment token can be stolen at one place and spared at another place. Different from the native payment apps, like Samsung Pay and Apple Pay, which protect the payment token through hardware means (e.g., Secure Enclave for Apple Pay and KNOX for Samsung Pay), the third-party payment apps, like WeChat and Alipay, cannot shield the payment token against the OS-level attack (e.g., malicious app with root privilege). Though the OS-level attacks can cause devastating consequences, their victim base is usually small.As a result, the defense employed by the third-party apps is largely targeting malicious apps with non-root permissions. In particular, the malicious app attempts to steal the QR code from the glass reflection of the POS scanner when the payer's screen is close to it. The token (stored in photos captured by the front camera of payer's phone ) is exfiltrated to attacker through network and spent at another store after unmasking, like MST and audio attack. The scanner glass is an ideal object here because of its brightness is significantly different from payer's screen: mobile payment apps always increase screen brightness to ease the recognition of the QR code while the light source of the scanner is much darker to avoid glare. Whether QR code can be successfully captured by the phone's front camera depends on several factors, including the horizontal distance between the QR code and the front camera (d cq ), the side length of the QR code (l q ), the vertical distance between the glass and the phone screen (d gs ), and the front camera's angle of view (AOV ). Instead, we compute their theoretical value range for the successful attack. Instead, we instruct the malicious app to mask the QR code for the disruption.A QR code has to embed three positioning markings (or PM) at its three corners. However, showing floating window on top of another app requires a system permission SYSTEM_ALERT_WINDOW since Android 6.0 [17]. When the reflected QR code is captured, the attack app will dismiss the transparent activity and bring back the original QR code window. To keep the sniffing and jamming process stealthy, our attack app actively infers the running context and moves to the next stage when the context is matched. We use the brightness of the screen to determine if the payment app is displaying QR code.Our key observation is that mobile payment apps always increase the screen brightness (say B QR ) to the maximum level when showing the QR code. When the difference between the current angle and A initial exceeds a threshold, the user is recognized as rotating the phone to show the QR code to the merchant. Therefore, the images are exfiltrated to attackers' server through cellular or WiFi network for further analysis, i.e., mask removal. We further examined the success rate of our attack by asking 14 users to show the masked QR code (the QR code is masked for 60s) to a desktop QR scanner (NLS-FR40). Some attempts are failed when the user positioned the phone too close to the scanner. This time is sufficient for the attacker to launch the attack and spend the QR code in a different transaction.Since the attack app does not require any system permissions or any unique system features, the attack is applicable to all Android versions. Then the attacker can spend the sniffed QR code in the B2L transaction in another place.In particular, the malicious app on payer's phone brings itself to the foreground and takes picture when it discovers that the payment app on the same phone is in the QR code scanning mode. The QR code is decoded in the payer's phone and transfered to the remote attacker to be spared (different from the prior attack, the QR code of the payee is not masked and therefore can be directly decoded on the phone). If the API returns an error code, the back camera is highly likely occupied by the payment app and the scanning mode is identified (only this mode uses camera). Once the scanning mode is inferred, the attack app will bring an activity (with identical UI to the payment app) to the foreground by sending an intent. Different from the prior attack in which we have no control over the POS scanner, we can block payer's app scanner through intent injection. Though the payment token can be obtained by the attacker, it might be invalid to be spent by the attacker in a B2L transaction as the same token could be used earlier by the P2P transaction. Since the payment app works in offline mode, both the old and new payment tokens are valid (if used within its lifetime, e.g., around 90 seconds for Alipay). We reported the attack to Alipay, and after that, they removed the functionality of payment QR code P2P transfer. In addition, our attacks have demonstrated that the validity period of offline payment tokens is sufficiently long for the adversary to transmit the token to a colluder to spend it in a different transaction. The indispensable steps in a STLS attack include sniffing the payment token, halting the ongoing transaction, and spending the sniffed token in a different transaction. As a result, our defense cannot rely on preventing the payment token from being sniffed. In particular, each POS terminal is attached with a QR code that contains its unique ID (PID). To prevent an attacker from replacing the encoded PID in the sniffed payment token, we encode the PID by integrating it within the one-way HMAC computation.When the POS terminal receives the payment token, it sends the payment token as well as its PID to the payment service provider. We can further require that, if a payment token is spent, the payer's tokens with earlier timestamp should be invalid, in order to prevent a stolen payment token being spent on the bound POS terminal in the short period after the payer finishes payment with a refreshed payment token.To understand whether POSAUTH can properly protect current mobile off-line payment schemes, we implemented a prototype of POSAUTH on Alipay QR Pay. We mainly evaluate the time overhead during each transaction introduced by POSAUTH, because obviously POSAUTH does not introduce much other overhead like upgrading costs, power consumption etc.Comparing with the existing transaction schemes, POSAUTH adds only one QR scanning step and slightly modifies the token generation algorithm while the remaining steps are all the same, which brings extra time consumption in 2 steps. Without such capabilities, mobile off-line payment schemes have to rely on time-restricted one-time token for security, which, as shown in this work, turns out to be ineffective to active attackers. However, POSAUTH is immune to such attacks since the payment token is indeed bound to the ID of a POS terminal (via QR code scanning), and any discrepancy between the POS ID and the payment token would raise an alarm of such attacks to the payment service providers. These studies showed that sniffing payment token from the MST channel by a passive attacker is feasible, but the proposed techniques did not lead to the successful attack under the real-world settings, as the payment token is onetime and the payer could spend it ahead of the attacker. In the mean time, attacks [27] have been proposed against QR Pay in B2S transaction, e.g., replacing the merchant's QR code with one associated with the attacker. In this paper, we mainly focus on the scenarios in which a user shows her QR code to the merchant or another user (B2L and P2P transaction). The difference is that prior attacks still keep the QR code readable but our attack prevents it from being read. In this paper, we present a new threat called STLS which can enable adversaries to attack off-line payment schemes by sniffing payment token, aborting current transaction, and spending the stolen token at other places. Channels between smartphone and POS terminal are susceptible to sniffing attack.