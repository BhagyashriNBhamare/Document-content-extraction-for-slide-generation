We uncover several security and privacy vulnerabilities ranging from design flaws to implementation bugs leading to a man-in-the-middle (MitM) attack enabling stealthy modification of files transmitted via AirDrop, denial-of-service (DoS) attacks preventing communication, privacy leaks that enable user identification and long-term tracking undermining MAC address randomization, and DoS attacks enabling targeted or simultaneous crashing of all neighboring devices. With deployments on over one billion devices, spanning several Apple operating systems (iOS, macOS, tvOS, and watchOS) and an increasing variety of devices (Mac, iPhone, iPad, Apple Watch, Apple TV, and HomePod), Apple Wireless Direct Link (AWDL) is ubiquitous and plays a key role in enabling device-to-device communications in the Apple ecosystem. It is also noteworthy that the design of AWDL and integration with Bluetooth Low Energy (BLE) are (1) driven by optimizing energy and bandwidth and (2) the devices do not require an existing Wi-Fi access point (AP) with secure connections but are open to communicating with arbitrary devices, thus, potentially exposing various attack vectors.We conduct the first, to the best of our knowledge, security analysis of AWDL and its integration with BLE, starting with the reverse engineering of protocols and code supported by analyzing patents. Our analysis reveals several security and privacy vulnerabilities ranging from design flaws to implementation bugs enabling different kinds of attacks: we present a man-in-the-middle (MitM) attack enabling stealthy modification of files transmitted via AirDrop, a denial-of-service (DoS) attack preventing communication between devices, privacy leaks allowing user identification and long-term tracking undermining MAC address randomization, and targeted DoS and blackout DoS attacks (i. e., enabling simultaneous crashing of all neighboring devices). First, we discover security and privacy vulnerabilities in AWDL and AirDrop and present four novel network-based attacks on iOS USENIX Association 28th USENIX Security Symposium 37 and macOS. These attacks are:(1) A long-term device tracking attack which works in spite of MAC randomization, and may reveal personal information such as the name of the device owner (over 75% of experiment cases). Section 4 presents an attack to activate AWDL on devices in proximity, while Section 5 shows how we leverage this activation mechanism for user tracking attacks. AWDL is a proprietary wireless ad hoc protocol based on the IEEE 802.11 standard. Each node announces its own sequence s consisting of 16 AWs 1 regularly in AWDL-specific IEEE 802.11 Action Frames (AFs). Each master node transmits synchronization parameters which consist of the current AW sequence number i (0 to 2 16 − 1) and the time until the next AW starts based on its local clock t AW . (3) AirDrop is an application that allows iOS and macOS users to exchange files between devices using AWDL as transport.We reverse-engineered the AirDrop protocol by employing a MitM HTTPS proxy [20] and using a popular disassembler on macOS' sharingd daemon and Sharing framework where AirDrop is implemented. Based on our findings, we reimplement AirDrop in Python and make it available as open source software [78]. Based on a user study that we present in Section 5.2, we found that 80 % of the participants enable AirDrop (59.4 % in contacts only and 20.6 % in everybody mode) while the other 20 % disabled it. The sender initiates the discovery procedure and transfers the data while the receiver responds to requests: (1a) The sender emits BLE advertisements including its hashed contact identifiers (see Section 4.1 for details), while the prospective AirDrop receiver regularly scans for BLE advertisements. (2) For each discovered service, the sender establishes an HTTPS connection with the receiver and performs a full authentication handshake (Discover). Next, we discuss the client and server TLS certificates and explain their usage in combination with the sender's and receiver's record data to establish an authenticated connection. In order to authenticate, a device needs to prove that it "owns" a certain contact identifier c i such as email address or phone number associated with its Apple ID, while the verifying device checks whether it has c i in its address book. (4)The signed record data RD σ additionally includes a signature and a certificate chain ( Fig. 3):RD σ = RD, sign (σ VR , RD) , σ VR , σ AAI2 ,(5)where sign (σ, X) is the signature of σ over X. This means that AirDrop will establish an unauthenticated connection with devices that use a self-signed certificate and provide no record data. While AirDrop's authentication mechanism appears to be crypto- Length (2) Type (0x01) Flags (0x1b) Length (23) Type (0xff) Apple (0x4c00) Subtype (0x05)Length (18) Zero bytes (0x00). . . Contact Identifier 1Contact Identifier 2 Contact Identifier 3Contact Identifier 4 0x00 graphically well-designed, we show in Section 7 how to downgrade an authenticated connection to an unauthenticated one and launch a MitM attack on the data transfer. In fact, we found that the contact hashes are the first two bytes of the SHA2 digest of the sender's contact identifiers that are also included in the record data (see Section 3.3). Due to the short length, it appears feasible to use brute force to try all possible values. Then, the attacker's effective brute force rate r can be calculated as:r = 4 3 · i PHY . (8)In particular, the attacker only requires one hit to activate the target's AWDL interface whose probability we call p:p = P(X ≥ 1) = 1 − P(X = 0) = 1 − n 0 S−n C−0 S C = 1 − S−n C S C . BLE devices perform scans regularly at a fixed interval i [17]. 4 Let j indicate the target's jth scan since the attacker started their brute force attack. (13)We know that j depends on the time since the attack started and the target's BLE scan interval i (the target performs one BLE scan of length w per interval). (14) The Bluetooth standard imposes a minimum advertisement interval 5 We measure the target response time, i. e., the time it takes for a target to turn on its AWDL interface when being exposed to our attack. We show the results for an iPhone 8 (iOS 12) in Fig. 6. (2) Figure 6: Time it takes until target turns on its AWDL interface after being exposed to our brute force attack. In particular, AWDL includes the following sensitive fields in the AFs which devices broadcast in the clear multiple times per second when the AWDL interface is active:• The hostname may include parts of the user's name, e. g., "Janes-iPhone," which is the default when setting up a new device. The attacker could exploit the OS information during reconnaissance to mount attacks on vulnerable driver implementations.Targets need to broadcast AFs to make these vulnerabilities exploitable, which an attacker can practically enforce by mounting the attack presented in Section 4. The combination also enables more sophisticated threats as the person's name can be combined with information from public databases (e. g., US census [86]) to infer their home and work locations, while the MAC address can be used to track them in real-time. To demonstrate the feasibility of user tracking using AWDL, we collect the number of discovered devices and check whether that device's hostname includes a person's name in four different locations within the US. For example, for the hostname "Johns-iPhone," we try to match the strings "Johns" and "John" to our name databases. Library Metro University Location the given name database, it is not matched again as a family name because it is more likely that an Apple device will include a person's given name [3]. Our survey complements our experimental results by indicating that 20 % of Apple device users have AirDrop turned off and, thus, are not trackable via AWDL. This can happen if a device (not controlled by us) sends out advertisements itself, for example, when a user opens the AirDrop sharing pane which apparently occurred regularly at the university location. However, given that we can receive unique identifiers of Apple devices (Wi-Fi MAC address and hostname), mounting a large-scale tracking attack should be trivial for an adversary that can deploy multiple low-cost Wi-Fi and BLE nodes throughout an area. This presents a countermeasure to our attack presented in Section 4, i. e., the AWDL interface cannot be remotely activated via BLE advertisements.Hide Real MAC Address When Not Connected to an AP. Apple devices transmit their hostname in AWDL AFs as well as the mDNS responses during service discovery that are used to find AirDrop instances (see Section 3). Some common attack vectors include using the GPS sensor [35,48,55,83,95], cellular [5,44,50,67], Wi-Fi [15,40,69,96,97], radio interface fingerprinting [90], and motion sensors [25,39,59,61,62]. Some of them include recommending new location frameworks and privacy metrics [9,28,29,30,49,64], location obfuscation [1,6,18,72,92], location cloaking [42,43], synthesizing locations [16,46,53,82,98], sensor data obfuscation [22,23], and permission analysis [32,45,68]. Like BLE addresses, MAC addresses are also essential as they form the backbone of layer 2 network communication and must be exposed for networking (e. g., Wi-Fi probe requests). Another work [56] demonstrated that MAC randomization could be defeated through timing attacks, where a signature based on inter-frame arrival times of probe requests can be used to group frames coming from the same device with distinct MAC addresses. Thus, while end-to-end confidentiality and integrity can be achieved using a secure transport protocol such as TLS, AWDL frames are vulnerable to forgery which renders any upper layer using AWDL susceptible to attacks on availability.In this section, we present a novel DoS attack that targets AWDL's synchronization mechanism (Section 2) to prevent two nodes from communication with each other. In order to succeed, the attacker needs to (1) get recognized as the master by both targets, (2) communicate with each target separately to (3) send different sets of synchronization parameters that result in zero (or minimal) channel overlap. Figure 9 depicts the non-zero overlap in normal operation and the zero overlap as the result of the desynchronization attack. The attacker needs to send the synchronization parameters to each target without the other one noticing. (17)For the second target, the attacker will calculate t as t φ = We evaluate the impact of our desynchronization attack by measuring the packet loss via the ping program. The ICMP echo requests are sent from a MacBook Pro ( Late 2015, macOS 10.13) to an iPhone 8 (iOS 12). At φ = 0, there is no attack, while at φ = 16, the targets are desynchronized by a full period which unsurprisingly does impair communication reliability. However, the desynchronization attack can be more attractive for two reasons: first, desynchronization in principle needs less energy than a jamming attack. The desynchronization attacker only needs to emit one frame every 1.5 s to maintain their position as a master node because AWDL nodes elect a new master if they have not received an AF for more than 1.5 s from their current one. Our desynchronization attack only requires a system with an off-the-shelf Wi-Fi chip and, thus, could even be implemented in a smartphone [71]. This section describes a MitM attack on the popular AirDrop service which allows iOS and macOS devices to exchange files directly via AWDL. In particular, while a receiver in contacts-only mode will only accept files from authenticated senders, a sender will see all discoverable receivers irrespective of whether they are authentic or not. Based on our results in Section 5, a device name contains the user's given name in the majority of the cases (more than 70 % according to our experimental evaluation in Section 5), which the attacker can exploit to create a trustworthy-looking device name. Third, we relay and manipulate the actual data transfer to plant arbitrary files at the receiver. This is due to the fact that AirDrop senders increase the channel allocation when starting the discovery process, thus, increasing the overlap with the receiver even when desynchronized.As an alternative, we used the well-known TCP reset attack which sends TCP segments including an RST flag to the targets which, in turn, immediately drops the connection. Once the receiver becomes discoverable (we can check when a receiver is discoverable by everyone by periodically sending Discovery requests), we advertise our own AirDrop identity via mDNS and wait until the sender tries to perform the authentication handshake via HTTPS for discovery which we let succeed. We use the monitor mode and frame injection of the system's Wi-Fi card to receive and inject raw IEEE 802.11 frames. We examine them according to complexity to implement, starting with the mitigation requiring the least number of changes to existing AirDrop implementations.Provide Stronger Visual Cues for Authenticated Receivers. By committing to the one-time cookie in the TLS handshake, a MitM attack on the OOB channel would be fruitless because the attacker could not establish a TLS connection with the same key. Finally, [10] proposes a conflict detection mechanism for Multicast DNS (mDNS) to prevent their attack, which is based on the assumption that "disrupting two parties' communication through a Wi-Fi direct link or a local network is difficult for the adversary without access to the routing infrastructure of the network." In particular, we can trigger kernel panics by setting invalid values in the synchronization parameters (affecting macOS 10.12) and the channel sequence (affecting macOS 10.14, iOS 12, watchOS 12, and tvOS 5), respectively. To build PoCs for these attacks, we have reverse-engineered AirDrop, a system service that runs on top of AWDL, and have implemented open versions of both AWDL and AirDrop which we make available as open source software. (3) DATA TRANSFERHTTPS POST /Ask with device name "Jane's iPhone" Attacker receives original file and forwards a modified copy to John Jane selects "John" as the receiver. HTTPS POST /Ask with device name "Jane's iPhone" Attacker receives original file and forwards a modified copy to John