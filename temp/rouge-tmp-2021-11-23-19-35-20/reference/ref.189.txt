A large body of existing work examines Tor's susceptibility to attacks that attempt to block Tor users' access to information (e.g., via traffic filtering), identify Tor users' communication content (e.g., via traffic fingerprinting), and de-anonymize Tor users (e.g., via traffic correlation). This paper focuses on the relatively understudied threat of denial-of-service (DoS) attacks against Tor, and specifically, DoS attacks that intelligently utilize bandwidth as a means to significantly degrade Tor network performance and reliability. Finally, we analyze the effects of Sybil DoS and deanonymization attacks that have costs comparable to those of our attacks. Research directions for Tor attacks include website fingerprinting [18,41,42,56,69,70,77,84,85], routing [15,16,79,81,83], end-to-end correlation [54,57,58,65,66], congestion [31,34,51,64], and side channels [43,63]. Given Tor's limited resources and slow performance relative to the open web, further reducing performance through bandwidth DoS attacks also has the potential to reduce security by driving away users who may be unwilling to endure even slower load times [16,25]. Non-state actors could also reasonably deploy the attacks since they require only a few servers or can be completely outsourced.Tor DoS attacks are not a hypothetical threat: existing evidence indicates that DoS attacks against the network have already been successfully deployed [23,38,40], requiring Tor to develop a subsystem to mitigate its effects [24,39] (the subsystem does not mitigate our attacks). Our Contributions: This paper focuses on the costs and effects of DoS attacks that intelligently utilize bandwidth as a means to significantly degrade Tor performance and reliability. and would reduce bridge user throughput by 44% (if 25% of the users migrated to other bridges) while more than doubling meek bridge maintenance costs.Second, we explore in §6 an attack that attempts to disrupt Tor's load balancing system by flooding TorFlow bandwidth scanners with packets, thereby causing inaccurate and inconsistent relay capacity measurement results. In the attack, a Tor client builds thousands of 8-hop circuits and congests relays by downloading large files through the network. We also find that a stop reading strategy [51] reduces the estimated cost of a 20k circuit attack to $1.6K/mo. Although anonymity attacks are certainly problematic for Tor, the primary focus of this paper is on bandwidth-based DoS attacks that significantly degrade Tor network performance and reliability. Denial-of-Service Attacks against Tor: We are not the first to explore the network's susceptibility to DoS. Similarly, Pappas et al. [71] propose an asymmetric, amplification packet-spinning DoS attack against legitimate Tor relays. Their focus is on de-anonymization and they do not consider DoS attacks against the entire Tor network.Borisov et al. [16] show that an attacker can de-anonymize a large fraction of Tor circuits by performing selective DoS on honest Tor relays to increase the probability that the attacker's relays will be chosen as guard and exit relays (and thus capable of performing traffic correlation [80]). We explore multiple avenues for causing network-wide performance and disruption.Geddes et al. [35] demonstrate socket exhaustion attacks against various proposed replacements [12,37] of Tor's transport protocol. However, the attack does not apply to the deployed Tor network, which does not employ the vulnerable transport protocols.Jansen et al. [51] propose the Sniper Attack, a memorybased DoS attack that exploits Tor's end-to-end reliable data transport to consume memory by filling up the application level packet queues. We highlight two potential avenues for obtaining the resources necessary to carry out network-wide attacks against Tor: dedicated DoS "stresser" services ( §3.1) and the use of more traditional (and legal) dedicated hosting services ( §3.2). For some attacks, we additionally require the adversary to operate a Tor relay, but as we describe below, it is advantageous for such attacks to run a relay that provides negligible bandwidth to the Tor network; that is, the relay could be cheaply instantiated on a shared cloud provider or other low-cost hosting service. Attacker Costs: One of our goals is to estimate the monetary cost of performing various bandwidth DoS attacks against different elements of Tor infrastructure. To estimate such costs to the attacker, we build a cost model from publicly available information on pricing of various online stresser services and dedicated hosting services. Although others have empirically evaluated the achieved attack strengths of these services [74,75], we elected not to repeat their experiments due to ethical concerns (specifically, the strong possibility of incurring collateral damage). In our analysis in subsequent sections, we consider the average amortized cost of the attacker to flood a single target (i.e., IP address) with 1 Gbit/s of attack traffic for an hour; we found this to be $0.74. The attacker can use the resources provided by dedicated hosting services to launch such application layer bandwidth DoS attacks on Tor. Saturating Links: To simplify our analysis, we assume a model of the Internet in which every node i has a finite bandwidth capacity C i , measured in bits per second (bit/s). We do not consider asymmetric bandwidth since Tor relays receive and send traffic in roughly equal proportions; if node i has asymmetric connectivity, we can consider C i to be the minimum of its upstream and downstream capacities.We assume that an adversary can effectively deny service to a targeted node v if (i) it can cause traffic to arrive at the target at a rate greater than C v and (ii) such traffic cannot be filtered upstream. Estimating Tor Relay Link Capacity: For a successful flooding attack, the rate at which the attack traffic arrives at 1 Computing TCP's performance for a given packet loss rate is complex since there are a variety of TCP congestion control algorithms (e.g., Tahoe, Reno, etc.). For each day, we find the maximum observed bandwidth for the relay and map this bandwidth to the next highest value in a fixed set of bandwidth offerings that are commonly available: 1, 10, 100, 200, 500, 1,000 and 10,000 Mbit/s. For example, a relay with a maximum observed bandwidth of 1,200 Mbit/s will be considered to have 10 Gbit/s network link. Applying our cost model, an attacker can use stresser services to flood all relays in the Tor network at a cost of about $10K/hr. Although Santanna et al. have found such services to reasonably deliver high-bandwidth [74,75], it is possible that they provide a much lower attack strength than advertised. In particular, entry relays must allow for clients anywhere on the Internet to initiate a circuit, and any relay may be chosen as an entry by clients implementing non-default path selection algorithms. Finally, dropping packets on the relay is an ineffective defense since the dropped packets have already consumed bandwidth.Traditional DoS defenses such as the use of CDNs are not compatible with Tor since aggregating relays onto a small number of CDN providers would diminish anonymity; it is also unclear how a relay could operate within a CDN. Bridges serve as alternative ingress points into the Tor network for users who cannot directly connect to Tor entry guards.In this section, we explore the effects of using stresser services ( §3.1) to flood Tor bridge relays. However, such protections are obviously brittle and numerous techniques exist for discovering unlisted bridges [20,30]. For consistency, we fixed the middle and exit relays, choosing relays with high selection probabilities (and thus high bandwidths). The median throughput of the default bridges is 368 KiB/s; there is a large variation over the default bridges however, ranging from 67 KiB/s to 1,190 KiB/s. In summary, Tor's bridges are generally far more brittle compared to the network's advertised relays, offering much greater failure rates for default (52%) and unlisted (30%) bridges (compared to 0% for Tor relays) and lower average throughput (545 KiB/s and 681 KiB/s for default and unlisted bridges, respectively, versus 786 KiB/s without bridges). Following the link capacity estimates based on bandwidth offerings as described in §4, we estimate that the set of 12 operational default bridges consists of two 10 Gbit/s links and ten 1 Gbit/s links (a total of 30 Gbit/s) and that the full set of 38 default bridges consists of two 10 Gbit/s links and thirty-six 1 Gbit/s links (a total of 56 Gbit/s If the default bridges are successfully attacked, there are several potential consequences. The Cost of Migrating to Unlisted Bridges: We base our analysis on (i) the distribution of throughput we measure from unlisted bridges (Figure 1), (ii) the simplifying assumption that how Tor is used by bridge users is independent of the particular type of bridge used to gain entry to the network, and (iii) Matic et al.'s observation that suggests approximately 90% of bridge traffic traverses through default bridges [62]. More generally, when a fraction f of default bridge users shift to using unlisted bridges, the unlisted bridges should expect to see a corresponding increase in traffic of a factor of 9 · f . Unfortunately, the Tor Project stopped providing usage statistics for meek bridges, so we restrict our analysis to usage that occurred between March 2016 and March 2017 (where such data is available [5]). We also note that Amazon and Google stopped supporting the use of domain fronting on their respective cloud services [17,33] 3 . In this section, we seek to better understand the extent to which an adversary can disrupt Tor by using stresser services ( §3.1) to launch bandwidth DoS attacks on TorFlow [72], a critical component in Tor's load balancing process. When using Tor, clients download and verify a recent consensus, and use it to select paths of relays through which they build circuits and tunnel Internet connections.Tor uses a load-balancing system in order to provide lowlatency anonymous communication (i.e., suitable for browsing websites) due to high client resource demand and a large variance in the bandwidth capacities offered by relays (see §4). Relay Performance Estimation: Although Tor initially estimated relay performance according to self-reported advertised bandwidth capacities, Bauer et al. showed how a lowresource adversary could attract significant traffic to mali-cious relays (to improve end-to-end correlation attacks) by lying about their available bandwidth [15]. To measure Tor relays, TorFlow (i) sorts the consensus list of relays by their previously-expected performance, (ii) partitions the sorted list into slices of 50 relays each, (iii) distributes the slices among 9 subprocesses that run in parallel, (iv) creates 2-hop circuits using pairs of relays that belong to the same slice (and so can provide similar performance), and (v) downloads one of a set of 13 fixed-sized files (2 i for i ∈ [4, 16] KiB) from a known destination through each circuit. The TorFlow relay scanners constitute attractive targets for DoS attacks: disrupting the scanners may result in significant variation in relays' weights which could degrade loadbalancing and security. Previous work observed the ability to detect TorFlow scanners due to their connection patterns and fixed-size file downloads [55], which we further explore.TorFlow scanners stand out from normal Tor clients because: (i) they download one of a set of 13 fixed-size files, (ii) they choose new entry relays for each circuit (disabling the guard feature), and (iii) they use two-hop circuits.To discover the network addresses of the TorFlow scanners, we first determined the range in the number of Tor cells required to download each of the fixed-size files. Given that an adversary can identify TorFlow scanners by their IP address, they can use bandwidth DoS attacks to disrupt the relay scanning process and therefore degrade the accuracy of the relay weights produced by TorFlow. We explore several strategies that an adversary may use to conduct bandwidth DoS attacks on TorFlow scanners with a goal of increasing the file download times measured by TorFlow and disrupting the load balancing process. Targeted: We also consider a targeted strategy where the adversary carefully selects periods of time during which to run the DoS attack and otherwise does not alter the victim scanner's network conditions. For any strategy used by the adversary, we assume that it can utilize a stresser service (see §3.1) to limit the victim's effective bandwidth to rate γ while increasing packet loss on the victim's link by ρ. We evaluated the DoS attack strategies and effects in Shadow [47], a high-fidelity network simulation framework that directly executes Tor. We used Shadow to create a private Tor network that is completely contained inside of our lab environment in order to guarantee that our attacks do not harm the safety or privacy of real Tor users or the network. Network Setup: We used standard Shadow and Tor network generation tools and methods [48] to generate a private Tor network with 100 Tor relays, 3,000 Tor clients, and 1,000 server, and to generate background traffic [53]. During each phase where the attack is active, we limit TorFlow's bandwidth to γ = 500 Kbit/s (62.5 KiB/s) and we add a ρ = 2% chance of packet loss occurring independently on all incoming and outgoing packets. We set our TorFlow instance to conduct 4 parallel probes (2-hop relay measurements), to partition the relays into 10 slices of 10 relays each, and to probe each relay at least 3 times per round before producing a new V3BW file.We ran a baseline No Attack experiment and experiments with each attack strategy. As shown in the table, our results indicate that the Constant attack is the most effective at caus- Overall, our results show the extent to which an adversary may disrupt Tor performance using straightforward DoS attacks on easy-to-detect TorFlow scanners, and that the simplest constant attack strategy was the most effective. If we assume that they all run on 1 Gbit/s links, then the cost to run the DoS attack on all 5 scanners for one month would be $0.74·5·24·31≈$2.8K. Limitations: A limitation of our study of the effects of bandwidth DoS on the TorFlow scanners is that we used a smaller-scale Tor network than that which is publicly accessible (100 relays compared to 6,436). However, the adversary would require additional bandwidth to attack all or a majority of scanners in parallel.The Targeted attack requires the ability to estimate when the fastest slice is being measured and the amount of time required to measure that slice. Attack Extension: Our focus in this paper is on relatively simple and straightforward bandwidth-based DoS attacks. Such an attack could be used to drive additional traffic to other mali- cious relays, improving the ability of an adversary to conduct attacks on anonymity, e.g., traffic correlation attacks [66]. (Note that dropping packets on the bandwidth authority is an ineffective defense since the dropped packets already consumed bandwidth.) In §4, §5, and §6 we evaluated the effects of using stresser services ( §3.1) to flood Tor relays, Tor bridges, and Tor bandwidth authorities, respectively. To utilize these features, a client may select its own custom path of relays and build circuits through them either by modifying their Tor client code directly, or by interacting with Tor using the Tor control interface and protocol. Given the above features, an adversary may conduct a concerted bandwidth consumption DoS attack by building custom circuits and downloading large files through them. Long Paths: The most basic form of our Tor bandwidth DoS attack makes use of the ability to create 8-hop Tor circuits.For every byte of data downloaded by a client through such a long path, relays in the Tor network will download and upload that byte 8 times in total. Although the client stopped reading, it can still write: the adversary uses the measured time to download the first 25 KiB to estimate the frequency with which it should send Tor circuit and stream SENDME flow control cells 5 which instruct the exit relay to continue to send data toward the client. A stop reading strategy was first described and used as part of the Sniper Attack [51], but we are the first to observe that each attack circuit should use a new and unique TCP connection in order to limit interference with other circuits built in parallel. Therefore, a victim may appear in the same circuit a maximum of 3 times (either in positions 1, 4, and 7, or 2, 5, and 8). This will ensure that the adversary will choose and congest relays with the same distribution that clients attempt to use them: the DoS attack will cause more congestion on relays that are chosen more often by clients, and should therefore impact more users. Network Setup: We use the same tools and methods as described in §6.4 to generate a Tor network containing 634 relays (10% of the size and capacity of the public network), 15,000 clients (14,259 web clients, 441 bulk clients, and 300 benchmark clients), and 2,000 servers. Our attacks utilize a Tor v0.3.1.10 client that we modified (409 LoC) to support creating new TCP connections for attack circuits as well as commands to stop reading and for sending SENDME cells. We parallelize our attack by running φ /1, 000 identical processes on new attack hosts (i.e., 1,000 circuits per host), each of : Performance metrics as measured throughout our network-wide DoS attack on Tor relays: (a) the distribution of attacker throughput rates; (b) the distribution of aggregate Tor relay goodput rates (summed over all relays for each second); and (c) the distribution of benchmark client download times to first byte (TTFB) and last byte (TTFB) for files of sizes 50 KiB, 1 MiB, and 5 MiB (the box shows the interquartile range, the shows the mean, and the lower and upper whiskers extend to the minimum and the 99th percentile values, respectively). The victim relay's throughput increased from 978 KiB/s with no attack to 3.8 MiB/s with 100 attack circuits and 5 MiB/s with both 500 and 1,000 attack circuits (in the medians). Intuitively, the throughput used by the adversary increases with the number of attack circuits: from a median of 61 MiB/s in a φ =1k circuit attack to a median of 197 MiB/s in a φ =20k circuit attack. Compared to the regular Long Path strategy in the φ =20k attack, Figure 6(a) shows that the Stop Reading strategy consumed only 36 MiB/s of attacker bandwidth in the median while Figure 6(b) shows that the attack was still able to consume 1,755 MiB/s of total relay bandwidth in the median (an increase of 953 MiB/s over no attack). The effects of the Stop Reading attack on the performance metrics as measured throughout our network-wide 20,000 circuit DoS attacks on Tor relays: (a) the distribution of attacker throughput rates; (b) the distribution of aggregate Tor relay goodput rates (summed over all relays for each second); and (c) the distribution of benchmark client download times to first byte (TTFB) and last byte (TTFB) for files of sizes 50 KiB, 1 MiB, and 5 MiB (the box shows the interquartile range, the shows the mean, and the lower and upper whiskers extend to the minimum and the 99th percentile values, respectively). Our φ =20k attack with the Stop Reading strategy requires only 288 Mbit/s (36 MiB/s) in our scaled down private Tor network which contains about 10% of both the number of relays in and the bandwidth capacity of the public Tor network (due to the relay sampling approach of Jansen et al. [48]). The cost to rent three dedicated servers supporting 1 Gbit/s of traffic for one month would then be $0.70·3·24·31≈$1.6K. (The regular version of the attack consumes ≈4 times as much bandwidth, requiring 12 dedicated servers and costing $0.70·12·24·31≈$6.3K/mo.) Additionally, Shadow has been used to measure performance when Tor is generally overloaded (as in our evaluation) [47,49,52], and it has been used to measure the effects of specific DoS attacks against Tor [51]. The Long Path part of the attack could be mitigated if Tor changes its protocol to further restrict the length of circuits, however, in this case an adversary could switch to using hidden service circuits which are 6 hops by default.The Stop Reading part of our attack uses a separate TCP connection to the entry relay for each attack circuit, and builds many such connections and circuits in parallel. Note that for such an attack to work, the adversary must (i) maintain a high selection probability by providing high performance during periods in which it is measured by Tor's bandwidth measurement system, and (ii) not trigger Tor's abusive relay detection systems (e.g., exit scanners) to avoid getting ejected from the network. Sybil DoS Sybil Deanonymization 30 Gbit/s 32% degraded 21% entry · 5.3% exit ≈ 1.1% total 5 Gbit/s 7.2% degraded 4.5% entry · 1.2% exit ≈ 0.06% total 3 Gbit/s 4.5% degraded 2.8% entry · 0.8% exit ≈ 0.02% total that a selective service refusal attack, where an adversary refuses to forward traffic on any circuit it is not in a position to compromise [16], could be mitigated by Tor's route manipulation (path bias) detection system [26, §7]. A Sybil deanonymization attack with a bandwidth budget of 3 Gbit/s (Table 5) and a 5:1 guard-to-exit relay bandwidth allocation would allow the adversary to observe the entry for 5 6 ·3/( 5 6 ·3+86.7)≈2.8% of Tor clients and observe the exit for 1 6 ·3/( 1 6 ·3+64.0)≈0.8% of circuits built by those clients. We also compare our attacks to Sybil attacks and highlight that our load balancing and relay congestion attacks are more effective and flexible than Sybil attacks with the same budget.For each attack, we describe mitigation strategies that Tor could adopt to improve its resiliency.