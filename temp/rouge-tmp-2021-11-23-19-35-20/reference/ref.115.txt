The attacks allow an adversary to reset and forge platform configuration registers which are designed to securely hold measurements of software that are used for bootstrapping a computer. A TPM chip is a tamper-resistant device equipped with a random number generator, non-volatile storage, encryption functions, and status registers, which can be utilized for applications such as ensuring platform integrity and securely storing keys. The chain can either start statically from Basic Input and Output System (BIOS)/Unified Extensible Firmware Interface (UEFI) code modules when the system is booted or dynamically from a specialized instruction set during runtime.Regardless of how the chain starts, the measurements are "extended" to platform configuration registers (PCRs) inside the TPM. When a value is extended to a PCR, the value is hashed together with the previously stored value in the PCR and then the PCR is updated with the hashed result. How the power management works is quite complicated because each peripheral device can have its own power state independently from the system-wide power state.A recent Linux kernel supports the Advanced Config-uration and Power Interface (ACPI), which is an open industry specification that enables operating systemcentric intelligent and dynamic management coordination with power management-aware devices such as CPUs, networks, storage, and graphics processing units. The information stored in the TPM chip such as keys and state values are very important for maintaining the security of the whole system, TPM has to actively and safely save and restore the state as the power state changes.Unfortunately, the TPM does not safely maintain the state when the power state changes. The vulnerability of the dynamic RTM (DRTM) is due to a bug in the open source project, tboot, which is the most popular measured launch environment (MLE) for Intel's Trusted eXecution Technology (TXT). We also have obtained Common Vulnerabilities and Exposures (CVE) identifiers: CVE-2018-6622 for the SRTM and CVE-2017-16837 for the DRTM attack, respectively. Then, we introduce their vulnerabilities 1 The commit hash is 521c58e51eb5be105a29983742850e72c44ed80e Figure 1: Examples of static and dynamic RTM (SRTM and DRTM, respectively) processes and exploits against them. A trusted computing base (TCB) [37] is a collection of software and hardware on a host platform that enforces a security policy. When a measurement is "extended" to a PCR, the measurement is hashed together with the current value of the PCR, and the hashed result replaces the current value. For example, a TPM's "sealed" data can be decrypted by the TPM only when the PCR values match specified values. Initiating the measurement is done by another software component that can be trusted called the core RTM (CRTM). SRTM is the trust anchor that is initialized by static CRTM (S-CRTM) when the host platform starts at power-on or restarts. As the DRTM process starts, the special code module (the DCE), is executed as a dynamic CRTM (D-CRTM), validates whether the platform is trustworthy, and transfers the control to the initial part of the operating system, called the dynamically launched measured environment (DLME). There are four global power states, defined as working (G0 or S0), sleeping (G1), soft-off (G2), and mechanicaloff (G3). â€¢ S3: Sleep (Suspend to RAM). Before sleep, the operating system requests the TPM chip to save the state, and then makes a transition to sleeping states by sending a request to the ACPI in the BIOS/UEFI firmware. For the S3 sleep function to work properly, each part must function perfectly without error; however, this state may collapse when one part malfunctions, which is hard to correct using the other parts. When their TPM support option is enabled in the BIOS/UEFI menu, the BIOS/UEFI firmware starts the "trusted boot" [25] process, which means that it measures the firmware itself and the bootloader and stores the measurements in the TPM chip.Second, we assume that our system employs TCG's DRTM architecture [43]. We consider an attacker who has already acquired the Ring-0 privilege with which the attack can have the administrative access to the software stack of a machine including the firmware, bootloader, kernel, and applications. We also assume that the attacker cannot rollback to an old version of the firmware, where the attacker can exploit a known vulnerability.The attacker's primary interest is to hide the breach and retain the acquired privileges for further attacks. This proof also can be delivered to and verified by a remote administrator.The attacker may try to compromise the bootloader and kernel by modifying files in the EFI partition and under /boot/. Vulnerabilities of the System Management Mode (SMM) [13] may allow the attacker to remotely and pragmatically alter firmware binary or change the BIOS/UEFI options [6], but we do not consider such vul- Bootstrapping a system utilizing TPM and SRTM/-DRTM technologies involves many entities, and Figure 3 shows their relationships. While reviewing the TCG specification, we found a change in the TCG specification from TPM 2.0 to TPM 1.2 regarding power management. The difference was regarding restarting TPM when the system resumes [37].2. We investigated the open source implementation of DRTM, tboot [11], which is based on Intel TXT. The vulnerability of an authenticated code module (ACM), which is the DCE of Intel TXT, as reported by Wojtczuk and Rutkowska [44,45] demonstrates that the authenticity and integrity of code are not guaranteed to be flawless. As a result, some platforms allow software to reset the PCRs and extend measurements arbitrarily.A TPM typically has two power states, the working state (D0) and the low-power state (D3). On exiting from the S3 sleeping state, the S-CRTM determines whether the TPM should restore the saved state or be re-initialized. In version 2.0, TPM2 Shutdown() and TPM2 Startup() correspond to TPM SaveState() and TPM Startup(), respectively.Version 2.0 [39] tells TPM to return TPM RC VALUE when TPM2 Startup(STATE) even if it does not have a saved state to restore. Otherwise, there should be a way to warn that the TPM state has been reset abnormally.Although another specification document [37] states that the CRTM is expected to take corrective action to prohibit an adversary from forging the PCR values. The attacker obtains good hash values from the BIOS/UEFI event logs, which are recorded during a normal boot process. Assorted hash values are stored in RAM temporarily, and are finally handed over to the kernel. First, before resetting and replaying the TPM, we need [5] Trusted-GRUB1 [40] Trusted-GRUB2 [41] GRUB-IMA [24] Table 2: List of bootloaders with BIOS/UEFI support and TPM version When the field is not there, there is another option for obtaining the logs. Our exploit in the kernel resets TPM by making the system enters the S3 sleeping state, and finally extends the measurements, one after another, in the normal order as presented in the logs.We take the GRUB implementation from the open source Container Linux [4] to implement our exploit. Our customized bootloader functions as the SRTM and extracts the event logs for both TPM 1.2 and 2.0. The digest is the hashed result of binary or text values depending on the event type, whereas the event data stores raw data. c */ /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ int tpm_pm_suspend ( struct device * dev ) { ... omitted ... + printk ( KERN_INFO " tpm : tpm_savestate () " + " and tpm2_shutdown () are skipped \ n " ) ; The log entry for the bootloader hash can be identified by event type EV EFI BOOT SERVICES APPLICATION (0x80000003) and the one for the kernel (including the kernel file and the initial RAM disk file) hash is identified by event type EV IPL (0x0D). PCR 7 , Event Type 0 x80000001 , Size 36 , Digest 5 B F 8 F A A 0 7 8 D 4 0 F F B D 0 3 3 1 7 C 9 3 3 9 8 B 0 1 2 2 9 A 0 E 1 E 0 PCR 7 , Event Type 0 x80000001 , Size 38 , Digest 734424 C 9 F E 8 F C 7 1 7 1 6 C 4 2 0 9 6 F 4 B 7 4 C 8 8 7 3 3 B 1 7 5 E PCR 0 -7 , Event Type 0 x4 , Size 4 , Digest 9069 C A 7 8 E 7 4 5 0 A 2 8 5 1 7 3 4 3 1 B 3 E 5 2 C 5 C 2 5 2 9 9 E 4 7 3 PCR 5 , Event+ return 0; + if ( chip -> flags & T P M _ C H I P _ F L A G _ A L W A Y S _ P O W E R E D ) return 0; if ( chip -> flags & T P M _ C H I P _ F L A G _ T P M 2 ) { tpm2_shutdown ( chip ,To reset the TPM, two tasks must be performed. CVE-2017-16837 DRTM builds up the dynamic chain of trust at runtime, and it uses the set of PCRs from PCR #17 to PCR #22. This is not easy because the DCE, being executed prior to the DLME [33], launches the DLME after extending the measurement of the DLME, as shown in Section 2, however, after the DLME has started, security is a matter of the trustworthiness of the DLME. It is used to record power-on self test (POST) code, embedded SMM code, ACPI flash data, boot integrity services (BIS) code, or manufacturer-controlled embedded option ROMs. After sleep, the values are re-extended to the PCRs by hooking the functions in the DCE and DLME. This means that the process of measuring and extending the kernel or the VMM can be interfered with by compromising the data loaded in the memory.After reviewing the source code of tboot, we found that some mutable function pointers that are not measured open up a window of attack. Figure 11 shows the detailed process of the exploit for the DRTM vulnerability using mutable function pointers.According to Intel's specification [14], SINIT ACM obtains a loaded address, a size, and the entry point of an MLE by reading the MLE header. By hooking those pointers, we can hook the control flow and eventually forge the dynamic PCRs, bypassing the protections provided by the SINIT ACM.Similarly to the attack explained in Section 4.2, the normal measurements extended by tboot are recorded in the event logs that reside in the kernel's memory area. The txt-stat tool provided by tboot dumps the kernel memory via /dev/mem and prints out the summary status of TXT and event logs, as shown in Figure A.1 in Appendix.After obtaining the normal digests, we can forge extended values after tboot takes control by hooking the ex- The last step of the attack, likewise, is to reset the TPM state and replay the normal digests. To replace the normal bootloader and kernel with our customized ones, we put the customized ones under the /boot directory with the same name.TPM 2.0 supports multiple banks of PCRs, with each bank implementing different hash algorithms. Although the reported vulnerabilities do not depend on a specific hash algorithm, we used SHA-1 in all evaluations only because the algorithm is supported in both versions of the TPM.The DRTM exploit requires devices to support Intel TXT and tboot. Because the static PCRs values are measurements of the SRTM components, most of the values differ according to the manufacturers and model, except for PCR #4 and PCR #9, where the measurements of the boot- Table 5: Forged PCR values after the SRTM attack loader and kernel are extended. It seems that all of the manufacturers considered in this study failed to deal with the exception mentioned in Section 4.2 because of the incomplete specification.On the contrary, all TPM 1.2 devices, except for the Dell Optiplex 7040 mini PC (PC #9), appropriately handle the exception by entering failure mode, in which re- 2 The EV S CRTM VERSION event is not extended to PCR #0 and the EV EFI PLATFORM FIRMWARE BLOB event is not extended to PCR #2, which are wrong probably because the software does not comply with the TCG Specification 3 Entering failure mode 4 The static PCR values are kept 5 Only the first eight hexadigits are shown here for the brevity 6 ... omitted ... Figure 14: Event log summary relate to PCR #0 and PCR #2 in the GIGABYTE Q170-MK setting and replaying are not possible. As explained at the beginning of Section 4.3.3, PCR #18 and PCR #19 differ when the legacy PCR mappings are used, while only PCR #17 is different when the details/authorities PCR mappings are used. Because the vulnerability is due to the software stack, all the devices are exposed to the attack regardless of the TPM version. The vulnerability is due to the absence of a saved state, and it occurs when TPM2 Startup(STATE) is called with no preceding TPM2 Shutdown(STATE) command. For the SRTM vulnerability, a brutal and desperate remedy is to prohibit the platform from entering the S3 sleeping state, since this power state transition is a vital part of the attacks. We requested a CVE ID regarding the grey area vulnerability, and this ID has been obtained (CVE-2018-6622). Concealed information such as keys can then be acquired using simple wiretapping attack.Kauer [17] demonstrated an attack that resets a version 1.1 TPM chip by physically connecting a reset pin to ground. Sparks also summarized the countermeasures against those threats: loaded programs can be protected by hypervisors, the Low Pin Count bus can be protected from attacks by employing tamper-resistant circuits, and the timing attack on the RSA calculation can be prevented by employing the techniques that better hide the statistics of the calculation.Butterworth et al. [2] exploited a vulnerable BIOS update process to re-flash a BIOS chip with an arbitrary firmware that contains rootkits. VT-d technology [15] is a hardware support for isolating device access and is considered to be a countermeasure against direct memory access attacks, which can bypass the memory protection of a CPU and access system memory.Sharkey introduced a hypervisor rootkit that emulates the SENTER instruction and TPM using a thin hypervisor [28]. This work was supported by National IT Industry Promotion Agency (NIPA) grant funded by the Korea government (MSIT) (No.S1114-18-1001, Open Source Software Promotion).