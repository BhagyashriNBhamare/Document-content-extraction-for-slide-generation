To improve Tor performance, we propose Predic-Tor, a path selection technique that uses a Random Forest classifier trained on recent measurements of Tor to predict the performance of a proposed path. We implemented PredicTor in the Tor source code and show through live Tor experiments and Shadow simulations that PredicTor improves Tor network performance by 11% to 23% compared to Vanilla Tor and by 7% to 13% compared to the previous state-of-the-art scheme. The Tor Network [13] in particular has received enormous attention and currently serves millions of users from all over the world. Tor users can connect to the Internet through an encrypted tunnel by first building a path through three Tor routers (called a circuit) chosen from a set of approximately 7,000 volunteer routers. Part of Tor's anonymity is attributed to the size of the user base, called the anonymity set, and attracting a large anonymity set is thus important for privacy of Tor users.Performance. Wacek et al. [41] examined these approaches and determined that Congestion-Aware Routing (CAR) [42] offered the best performance-anonymity trade-off. This resulted in a speed up over Vanilla of over 500ms in the median case, and over 1.5s in the 90th percentile. We show that PredicTor utilized approximately 30% more Tor relays compared to Vanilla resulting in greater load distribution and allowing PredicTor to make better use of limited network resources.Moreover, we performed live Tor experiments and show that PredicTor improves network performance partly due to avoiding highly congested nodes, and partly due to building lower latency circuits. Unfortunately, existing metrics do not address all aspects of Tor that need to be considered in evaluating new path selection proposals.Current anonymity metrics fall into two complimentary categories: methods that aim to quantify anonymity and metrics that empirically measure all-or-nothing compromises. As such, we need a metric that offers some insight into the state of anonymity before full deanonymization and one that shows an adversary's ability to infer key attributes about the user.In this work, we present an anonymity metric called CLASI (Client AS Inference). Thus, inferring a client's AS is more achievable and may be a first step in reconnaissance for an adversary;-High-resource adversaries such as nation-states are known to target ASes for infiltration in efforts to passively observe network traffic;-Making inferences at the client level may yield negligible results due to Pr[1/|N| + δ ] being small in most cases, especially when N is large.We evaluate this method empirically by testing a recently proposed location-aware algorithm called De-NASA [6]. We find that AS leakage for PredicTor is similar to Vanilla and slightly better than CAR due to PredicTor clients building paths independently of their own network location.Contributions In summary, we make the following contributions:1. We perform live Tor experiments and show that PredicTor is the first path selection algorithm to dynamically optimize for congestion and path length depending on path conditions. Our evaluation shows that CLASI indicates anonymity loss for location-aware path selection algorithms where entropy-based metrics show little to no loss of anonymity.5. The first, middle, and last relays on the circuit are called the guard, middle, and exit relays, respectively. Once per hour, each client receives a consensus document from the directory servers, and this document contains weights assigned to each relay based on the relay's position in the circuit and its bandwidth. A circuit is selected for use only if it's measured congestion time (the current RTT minus the shortest RTT) is the lowest out of three randomly selected circuits. Our approach, CLASI, builds on the AnoA framework proposed by Backes et al. [4] for computing quantitative bounds on the anonymity in Tor. -Our adversary classification model is configured to infer the Autonomous System of the client.In the CLASI classification model, we use three features for each relay in a circuit: the bandwidth of the relay from the consensus file (BW), and the network (AS) and country (CC) that the relay is located in. We decided to use AS, CC, and BW features because the proposed path selection algorithms in Tor are generally designed to optimize performance or security based on relay bandwidth [34], network location of relays [1,33], or by routing around relays that located in certain ASes [14,35,6,23]. Snader and Borisov [34] proposed a change to Tor's path selection algorithm that allows the client to tune the degree to which relay selection is weighted in proportion to bandwidth. A limitation of this approach is that selecting relays weighted too heavily towards bandwidth can cause high-bandwidth relays to become overloaded and low-bandwidth relays to become starved, resulting in poor performance.Sherr et al. [33] proposed a latency-aware relay selection strategy in which relays participate in a virtual coordinate embedding system. Clients then estimate the latencies of anonymous circuits by summing the virtual distances between relays' advertised coordinates. Existing anonymity metrics for Tor can be categorized into works that use information theoretic or rigorous methods to quantify anonymity of Tor users and works that aim to empirically measure all-or-nothing compromises of Tor users. Snader and Borisov [34] apply the Gini coefficient to measure the equality of selection probability for Tor relays. In this section, we motivate the design of PredicTor by first showing machine learning classification results for k-NN and Random Forest models trained on Tor descriptor data. We generated a training set of 120,000 streams from one simulation run and a testing set of 25,000 streams from another simulation run. In the second method, we gathered training data from the live Tor Network by deploying a server that hosted 20 VMs, each running Tor version 0.3.0.9. As such, we resolve each relay into three features: 1) Autonomous System (AS), 2) Country Code (CC), and 3) Consensus Bandwidth (BW). For the BW features, the consensus bandwidth is used and represented as an integer. We tested the k-NN model with k = 3, 5, 7, 9, and 11, and found that k = 9 produced the highest accuracy compared to other values of k.Classification Accuracy. The Shadow results in Fig- ure 1a show the accuracy at the median to be 76% and 70% for Random Forest and k-NN, respectively. The Live Tor results in Figure 1b show the accuracy at the median to be 70% and 64% for Random Forest and k-NN, respectively. Our Shadow configuration consisted of 1000 clients from the top 10 countries by directly connecting users [26], 400 relays from a live Tor Consensus, and 70 destination servers from the Alexa list of top websites [2]-forming a client to relay ratio of 2.5 : 1. Web clients randomly selected servers from which they performed HTTP GET requests to download 320 KiB files over the modeled Tor network [18], and perf clients downloaded 50 KiB files over the Tor network. The results show that live Tor performance was not significantly different than Shadow perf client performance for our simulation, indicating that our Tor model performs statistically similar to live Tor. To complete a path, middle and exit relays are selected according to consensus bandwidth weights as per standard Tor protocol. If the proposed circuit is predicted to be fast, the circuit is built; otherwise, new relays are selected.Let us define function M τ (C) that, for a given threshold τ, returns True when a proposed circuit C is predicted to be faster than τ and False when it is predicted to be slower than τ. We implemented PredicTor in the Tor source code and tested its performance compared to Vanilla, Congestion-aware routing (CAR), and Snader and Borisov (SB) path selection using both Shadow and live Tor. Prior work shows that SB has competitive performance under medium congestion with the parameter s set to 9 [41,34]. We tested SB with two settings: SB-9, with s = 9 for partial bias to high bandwidth and SB-15, with s = 15 for heavy bias to high bandwidth.In the Shadow simulation, we used the same configuration as described in section 3. Figures 2a and 3a show Shadow and live Tor download times for Vanilla, PredicTor, CAR, SB-9, and SB-15. SB-9 and SB-15 performed the slowest in both Shadow and live Tor. Figures 2b and 3b show the Shadow and live Tor circuit consensus bandwidths for Vanilla, PredicTor, SB-9, and SB-15. As expected, SB-9 and SB-15 build circuits with significantly higher bandwidth compared to other techniques, particularly in live Tor, where SB-9 and SB-15 circuits used 22% and 97% more bandwidth in the median than Vanilla. The persistent congestion causes poor performance even if one client weights their selection heavily toward these high bandwidth relays.Performance gains in PredicTor, on the other hand, cannot be attributed exclusively to selecting highbandwidth relays. Vanilla completely avoided selecting approximately 45% of relays in the network, and SB-9 and SB-15 completely avoided selecting approximately 50% of relays in the network. Under-utilizing the network in this way caused more persistent congestion on the 65% and 50% of relays that Vanilla and SB did utilize, respectively. On the other hand, PredicTor utilized approximately 85% of the network. These results suggest that, when all clients use PredicTor, more relays are utilized, resulting in greater load distribution and lower persistent congestion for high-bandwidth relays.PredicTor+CAR. The circuit length was taken as the sum of the distances between the guard and middle and between the middle and exit. In the median case, PredicTor built circuits that were approximately 680 km shorter compared to Vanilla. In the 90th percentile, PredicTor and CAR built circuits that were approximately 592 km and 2,043 km shorter compared to Vanilla, respectively. We conclude that performance gains for PredicTor are achieved by considering three key factors: 1) congestion, 2) bandwidth, and 3) latency. We do not claim, however, that our experiments can show the exact quantitative gains that PredicTor would provide when deployed in Tor. Since popularity of websites is heavily concentrated in relatively few sites [10], a moderate-sized list of probe destinations should suffice to make the attacker unable to distinguish quickly between a measurement circuit and the majority of non-measurement user activity.In contrast, a major disadvantage for methods that use RTT measurements such as CAR and Navigator is that malicious exit nodes can easily manipulate RTT measurements. For each client location, the experiment was performed during prime Internet surfing hours for both the US and Europe (approximately 14:00 GMT) and during a time that is evening in the US and middle of the night in Europe (approximately 00:00 GMT). We call the experiments run at 14:00 GMT as the high-congestion condition and the experiments run at 00:00 GMT as the low-congestion condition.Due to the single-guard selection strategy in Tor, clients may be connected to a slow or fast guard for long periods of time. From the JP location, there was a 6.3% and 10.8% improvement in the median and 90th percentile, respectively.During times of low congestion while connected to a fast guard, PredicTor performance did not improve compared to Vanilla as much as in the high-congestion experiment. From the US location, there was a 52% improvement in the median, with circuits that were approximately 1,600 km shorter. During times of low congestion, when there are fewer congested nodes to avoid, PredicTor correctly builds lower-latency circuits of shorter geographic distance. If the client AS is known, then the adversary may be able to efficiently target clients with a BGP hijacking attack [37]. CH generates a path P from PS and removes the sender p 1 such that P = {p 2 , p 3 , p 4 , p 5 }. More precisely, L is the sender's AS, and we let S L be the set of all possible sender ASes. Pr[L = L ] = 1 |S L | + ε s . Adversary A uses the function Predict(P) that extracts the features from the path P and uses them to classify the AS of the sender. We now evaluate CLASI's ability to measure sender location information by running a simulation of the Tor network using TorPS [39] and testing a location-aware Tor path selection protocol called DeNASA [6]. For our evaluation, we chose to test a location-aware protocol called DeNASA (destinationnaive AS-awareness) because DeNASA's tunable parameters allow users to increase or decrease location awareness in exchange for more or less security against ASlevel adversaries respectively. We would expect, however, that increasing location awareness would cause an increase in sender information leakage.DeNASA increases security against AS-level adversaries by creating circuits that have higher probability of avoiding some Tier 1 ASes from the client to guard, and simultaneously from exit to destination. Vanilla e-select_0.1 e-select_0.2 e-select_0.3Figure 6: CLASI: Sender AS leakage for DeNASA exit selection variations compared to Vanilla Tor as a function of user model.We denoted streams as being vulnerable if AS3356 or AS1299 appeared on both sides of the stream. For each experiment, we generated 1.8 million Tor paths to train the CLASI adversary classification model. We then ran the CLASI challenge-response game for 3,000 new paths on which the adversary made prediction attempts. For example, for the 5-, 10-, 15-, and 20-destination user models, sender AS leakage increased by 7%, 10%, 11%, and 13%, respectively, for τ = 0.1 compared to τ = 0.2. Degree e-select_0.3 Gini e-select_0.2 Gini e-select_0.1 Gini Vanilla GiniFigure 8: Gini Coefficient and Uniformity degree for De-NASA exit selection variations compared to Vanilla Tor.cantly higher than random guessing. Moreover, we note that CLASI is sensitive to changing user models and should be a useful tool for researchers seeking to gain more understanding of security implications for their proposed path selection algorithms under different user models. In Figure 8 we plot Gini coefficient and uniformity degree for DeNASA exit selection variants compared to Vanilla Tor. This highlights an advantage for CLASI, in that it can be used by researchers to understand the anonymity impact of path selection algorithms under various user models in Tor.Additionally, there was not a significant change in Gini coefficient for Vanilla compared to DeNASA's exit selection variants. This shows that uniformity degree did not indicate that there was a guard placement attack vulnerability even if clients were configured to avoid up to eight suspect ASes while selecting their guard nodes.We conclude that gini coefficient and uniformity degree are not sufficient replacements for the CLASI metric when measuring anonymity of path selection algorithms in Tor. After the nine month period, approximately 80% of Vanilla and e-select clients built at least one vulnerable stream. Therefore, some DeNASA clients should realize some security improvement compared to Vanilla clients because they build less vulnerable streams, even The results indicate that DeNASA e-select τ = 0.1 provides approximately the same security against ASlevel adversaries with respect to time to first compromise, and better security against AS-level adversaries with respect to vulnerable stream rate. To understand the anonymity level of PredicTor and PredicTor+CAR compared to CAR and Vanilla, we first generated 500,000 paths for each algorithm from the Shadow experiment described in Section 3. Accordingly, we found a slight increase in AS leakage for CAR and a significant increase of about 9% for PredicTor+CAR compared to Vanilla and PredicTor alone. There are two main challenges that would need to be addressed for the successful deployment of PredicTor: 1) clients should routinely receive comprehensive training data, and 2) the training data should be gathered securely, such that an adversary has little chance of directing traffic to malicious relays.In the Live Tor experiments, we built a training set by measuring download times for approximately 50,000 streams from a centralized authority over the course of one hour. If the data is gathered by one authority, then that authority should be trusted. Given that, PredicTor can usually classify a circuit correctly without resorting to data about other ASes and countries which might have questionable relevance to the circuit being considered. We evaluated the anonymity of PredicTor using standard entropy-based metrics, and we proposed a new anonymity metric called CLASI: Client Autonomous System Inference. CNS-1423163 as well as Rochester Institute of Technology under a Signature Interdisciplinary Research Areas grant.