Nonetheless, to protect users, private browsing modes and extensions automatically delete cookies and clear storages at the end of a session, decreasing the efficiency of the standard tracking techniques.In 2010, Eckerlsey [3] revealed a stateless tracking technique that can complement traditional stateful tracking: browser fingerprinting. By collecting browser fingerprints composed of 8 attributes, he demonstrated that 83.6 % of the visitors of the PANOP-TICLICK website could be uniquely identified.Since browser fingerprinting is stateless, it is difficult for end-users to opt-out or block, and raises several privacy concerns, in particular when it comes to undesired advertising and profiling. In summary, this paper reports on 5 contributions to better evaluate the privacy impact of browser fingerprinting countermeasures: 1) we review the state-of-the-art browser fingerprinting countermeasures, 2) we propose an approach that leverages the notion of consistency to detect if a fingerprint has been altered, 3) we implement a fingerprinting script and an inconsistency scanner capable of detecting altered fingerprints at runtime, 4) we run extensive experiments to detect how fingerprinting countermeasures can be detected using our inconsistency scanner, and 5) we discuss the impact of our findings on user privacy.The remainder of this paper is organized as follows. Before addressing the consistency properties of fingerprint attributes (cf. Section 2.3), we introduce the principles of browser fingerprint (cf. Section 2.1) and existing countermeasures in this domain (cf. Section 2.2). In 2016, Laperdrix et al. [12] studied the diversity of fingerprint attributes, both on desktop and mobile devices, and showed that even if attributes, like the list of plugins or the list of fonts obtained through Flash, exhibit high entropy, new attributes like canvas are also highly discriminating. More recently, Vastel et al. [22] showed that, using a set of rules combined with machine learning, it was possible to keep track of fingerprint evolutions over long periods of time.Browser Fingerprinting Adoption. Besides blocking, it also provides another mode, similar to CANVAS DEFENDER, 7 that randomizes the value of a canvas every time it is retrieved. BRAVE 8 is a CHROMIUM-based browser oriented towards privacy that proposes specific countermeasures against browser fingerprinting, such as blocking audio, canvas, and WebGL fingerprinting.Another strategy consists in switching the value of different attributes to break the linkability and stability properties required to track fingerprints over time. Since 2018, FIREFOX integrates an option to protect against fingerprinting. Like TOR, it standardizes and switches values of attributes, such as the user agent, to increase the anonymity set of its users, and also blocks certain APIs, such as the geolocation or the gamepads API, to decrease the entropy of the fingerprints.Another way to break linkability is to add noise to attributes. Finally, BLINK [11] exploits reconfiguration through virtual machines or containers to clone real fingerprints-i.e., in contrary to countermeasures that lie on their identity by simply altering the values of the attributes collected-BLINK generates virtual environments containing different fonts, plugins, browsers in order to break the stability of fingerprints, without introducing inconsistencies. The following UA, Mozilla/5.0 (X11; Linux x86 64) AppleWebKit/537.36 (KHTML, like The OS and browser family, reflected by the UA, are expected to be consistent with attributes, such as navigator.platform, which represents the platform on which the browser is running, namely Linux x86 64 on Linux, Win32 for Windows and MacIntel on macOS. While we cannot know the motivations of fingerprinters when it comes to detecting browsers with countermeasures-i.e., this could be used to identify bots, to block fraudulent activities, or to apply additional tracking heuristics-we argue that countermeasures should avoid revealing their presence as this can be used to better target the browser. Finally, the fourth component aims at revealing canvas poisoning techniques. While some of the tests we integrate, such as checking the values of both user agents or browser features, have already been proposed by Nikiforakis et al. [16], we also propose new tests to strengthen our capacity to detect inconsistencies. The user agent is available both from the client side, through the navigator object (navigator.userAgent), and from the server side, as an HTTP header (User-Agent). The difference between the two user agent attributes reflects a coarse-grained inconsistency that can be due to the OS and/or the browser. While extracting the OS and the browser substrings can help to reveal the source of the inconsistency, the similarity of each substring does not necessarily guarantee the OS and the browser values are true, as both might be spoofed. Nevertheless, consistent does not mean equal as, for example, the user agent of a 32-bits Windows will contain the substring WOW64, which stands for Windows on Windows 64-bits, while the attribute navigator.platform will report the value Win32. The first attribute reports the name of the GPU, for example ANGLE (VMware SVGA 3D Direct3D11 vs 4 0 ps 4 0). On a mobile device, the attribute vendor can report the string Qualcomm, which corresponds to the vendor of the mobile chip, while values like Microsoft are returned for Internet Explorer on Windows, or Google Inc for a CHROME browser running on a Windows machine. When querying for the list of plugins via the navigator.plugins object, the browser returns an array of plugins containing detailed information, such as their filename and the associated extension, which reveals some indication of the OS. The most common use case is the implementation of responsive web design, which adjusts the stylesheet depending on the size of the device, so that users have a different interface depending on whether they are using a smartphone or a computer. Moreover, since these media queries are only available from FIRE-FOX, if one of the previous media queries is matched, then it likely means that the real browser is FIREFOX.Fonts. Even for properties such as message and name, which are implemented in all major browsers, their values may differ for a given error.For example, executing null[0] on CHROME will generate the following error message "Cannot read property '0' of null", while FIREFOX generates "null has no properties", and SAFARI "null is not an object (evaluating 'null [0]')". For example, if we consider the feature getUserMedia, it is available as mozGetUserMedia on FIREFOX and webkitGetUserMedia on a Webkit-based browser.Moreover, as navigator properties play an important role in browser fingerprinting, our test suite detects if they have been overridden by looking at their internal string representation. Finally, the third metric tests the presence of the orange color (255, 102, 0, 100) by counting the number of pixels having this exact value, and also the number of pixels whose color is slightly differenti.e., pixels whose color vector v c satisfies the following equation (255, 102, 0, 100) âˆ’ v c < 4. For each test of our suite, FP-SCANNER stores the details of each test so that it is possible to know if it is consistent, and which steps of the analysis failed.Estimating the parameters Different parameters of FP-SCANNER, such as the number of transparent pixels, may influence the accuracy of FP-SCANNER, resulting in different values of true and false positives. Indeed, while it is normal for a canvas countermeasure to be detected because some pixels have been modified, we consider it to be a false positive when detected because of a wrong browser feature threshold, as the countermeasure does not act on the browser claimed in the user agent. Thus, we chose a value of N e = 1Even if the detection accuracy of the tests may seem low-0.42 for the fonts and 0.51 for the browser features-these are only two tests among multiple tests, such as the media queries, WebGL or toDataURL that can also be used to verify the authenticity of the information provided in the user agent or in the canvas. Moreover, we still consider RANDOM AGENT SPOOFER even though it is not available as a web extension-i.e., for FIREFOX versions > 57-since it modifies many attributes commonly considered by browser fingerprinting countermeasures. Firefox fingerprinting protection standardizes the user agent when the protection is activated and replaces it with Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0, thus lying about the browser version and the operating system for users not on Windows 7 (Windows NT 6.1). For privacy reasons, FIREFOX disabled OS-related media queries presented earlier in this paper for its versions > 57, whether or not the fingerprinting protection is activated. In particular, one can observe that FP-SCANNER leverages the work of Nikiforakis et al. [16] by succeeding to detect a wider spectrum of fingerprinting countermeasures that were previously escaped by their test suite (e.g., canvas extensions, FPRANDOM [10] and BRAVE). Browser version To infer the browser version, we test the presence or absence of each MODERNIZR feature for the recovered browser family. Regarding the OS, FP-SCANNER was always capable of predicting the OS family-i.e., Linux, MacOS, Windows-but often failed to recover the correct version of Windows, as the technique we use to detect the version of Windows relies on Mozilla media queries, which stopped working after version 58, as already mentioned. The benchmark we report has been executed on a laptop having an Intel Core i7 and 8 GB of RAM.Performance of FP-Scanner We compare the performance of FP-Scanner with FINGERPRINTJS2 in term of processing time to detect inconsistencies. Indeed, while 83 % of the fingerprints are processed in less than 0.21 ms, the remaining 17 % need more than 440 ms. This is caused by the fact that most of the fingerprints we tested had installed countermeasures that could be detected using straightforward tests, such as media queries or testing for overridden functions, whereas the other fingerprints having either no countermeasures or FPRANDOM (17 fingerprints), require to run all the tests. We extend this line of thought to more generally argue that being detected with a fingerprinting countermeasure can make browsers more trackable, albeit this is not always the case. In the case of countermeasures with large user bases, like FIREFOX with fingerprinting protection or BRAVE, although their presence can be detected, these countermeasures tend to increase the anonymity set of their users by blocking different attributes, and, in the case of FIREFOX, by sharing the same user agent, platform, and timezone. By using the JavaScript Mutation observer API 16 and a regular expression (cf. Listing 2), it is possible to extract the noise vector associated to the browser, which can then be used as an additional fingerprinting attribute. While it may seem more tempting to install an aggressive fingerprinting countermeasurei.e., a countermeasure, like RAS, that blocks or modifies a wide range of attributes used in fingerprinting-we believe it may be wiser to use a countermeasure with a large user base even though it does not modify many fingerprinting attributes. However, we make the dataset, as well as the algorithm, publicly available online 11 , making it possible to replicate the experiment.We use a ruleset to detect inconsistencies even though it may be time-consuming to maintain an up-to-date set of rules that minimize the number of false positives while ensuring it keeps detecting new countermeasures. Thus, instead of taking the value of a fingerprint for granted, fingerprinters could check whether attributes of a fingerprint have been modified to escape tracking algorithms, and apply different heuristics accordingly.To support this study, we collected browser fingerprints extracted from browsers using state-of-the-art fingerprinting countermeasures and we showed that FP-SCANNER was capable of accurately distinguishing genuine from altered fingerprints.