This paper conducts a study on variable approaches to virtualizing TrustZone in virtualized environments and then presents vTZ, a solution that securely provides each guest VM with a virtualized guest TEE using existing hardware. With such virtualization extensions, commercial virtualization softwares like Xen [37] and KVM [28] have provided built-in support for ARM platform.With ARM gaining increasing momentum in the server market, one natural question to ask is: can TrustZone, the security pillar of ARM platform, be leveraged by multiple VMs on a virtualized platform? Based on the interposition, vTZ further provides multiple Constrained Isolated Execution Environments (CIEEs) that protect self-contained code snippets running inside them by leveraging TrustZone-enabled sameprivilege isolation [30,21,31] such that the hypervisor cannot tamper with the CIEE or break their execution integrity. Building atop vTZ, we also provide various VM management operations including VM suspending and resuming while preserving the security properties.We have implemented vTZ based on Xen-ARM 4.8 on both LeMaker Hikey ARMv8 development board as well as a Samsung's Exynos Cortex development board, and run two common TEE-kernels: seL4 [40,39] and OP-TEE [6] about 3% compared with Xen. Typically, a special instruction called "secure monitor call" (smc) is used for worlds switching.TrustZone divides all memory into two parts: normal part and secure part, which are distributed into normal world and secure world accordingly. Besides, the memory partition can be dynamically controlled by the secure world, which gives secure services running in the secure world the ability to dynamically protect certain memory.For I/O devices and interrupts, TrustZone also splits them into two worlds. TrustZone ensures that the normal world cannot access the secure world's I/O devices while the secure world can control the whole system's devices. TrustZone is getting increasing popularity and has been used in various scenarios to protect security-critical data and enhance the security of the normal world.Secure Storage and Credential Protection: The isolation property of TrustZone makes it an ideal choice to store user's secret data, e.g., private keys, passwords, credit card numbers, etc. All these systems and technologies can be applied to the server platform in a seamless way.Enforcing REE Security: TEE can be used to enhance the security of REE because the secure world has higher privilege than the normal world. It means that cloud users are restricted to use the root key controlled by the vender to sign their TAs, and have to trust the only TEE-kernel provided by the vender which is the single point of breach in software running inside TrustZone. These motivate us to design vTZ to virtualize TrustZone to be seamlessly used by multiple virtual machines, while preserving the security properties offered by the hardwarebased TrustZone, so that each virtual machine can run its own TEE-kernel in a secure and isolated environment. To enforce these properties, vTZ needs to address the following challenges:• Challenge 1: A compromised hypervisor may violate the booting sequence or booting a compromised or even a malicious guest TEE-kernel. A TEE hypervisor needs to virtualize a full-featured execution environment as the physical TrustZone provides, which requires nontrivial implementation complexity due to the lack of virtualization support in the secure world. An smc (secure monitor call) will first be trapped in the REE hypervisor and then transferred to the TEE hypervisor, which in turn transfer the call to the designated guest TEE. This design fully simulates multiple guest TEEs by using the hypervisor running in the normal world to virtualize the guest TEEs along with the normal world guest VMs and to handle their interaction, as shown in Figure 2(b). Based on that, vTZ can set security policies to, e.g., ensure that any of the guest TEE's secure memory will never be mapped to other VMs or the hypervisor, and the hypervisor cannot map any new executable pages in hyp mode after booting up.To protect the CPU states during context switching and guest TEE's execution, Secured World Switching (SWS) hooks and checks all the switches in the secure world, which alternatively saves and restores guest CPU states for each guest TEE (Section 4.3). In contrast, the TCB for design-1 contains the huge REE hypervisor as well as a smaller TEE hypervisor containing tens of thousands of LoC (e.g., NOVA [57] contains a 9k LoC microhypervisor and 29k LoC VMM, OKL4 [33] contains 9.8k LoC). It only provides one interface to some specific CIEEs which contain virtual partitioning controller emulator (introduced in Section 5.3) to configure security policies.Exclusive Control of Memory Mapping: To ensure that only the SMM can load or change memory mapping, vTZ enforces that the hypervisor does not contain any instruction to do so. We deprive the hypervisor of ability to modify this base register by replacing all the modification instructions with invocations to secure world, similar as Section 4.1. There are three methods for the hypervisor to do so: by executing eret instruction, by executing movs pc, lr instruction, or directly setting the exception level (e.g., by executing CPS instruction); In order to enforce a single exit point, SWS requires the hypervisor to remove all these instructions and replace them with corresponding invocations to SWS. Unforgeable to the secure world: A CIEE needs to identify itself to the modules running in the secure world; otherwise the hypervisor may impersonate to be CIEE. So that we can satisfy requirement-3 , and hypervisor cannot tamper with CIEE's control flow.Since a CIEE contains code which serves the guest or the hypervisor, vTZ enables a CIEE to write results back to them. 2) The bootloader initializes the secure world and loads a TEE-kernel to memory.3) The TEE-kernel does a full initialization of the secure world, including the secure world translation table, vector table and so on. 5) The kernel-loader loads a non-secure OS and runs it.During the process, each time a loader loads a binary image, it will calculate the checksum of the image to verify its integrity. The hypervisor initializes the data structure and allocates memory for both guest V M n and its corresponding V M s , loads the TEE-kernel image and guest normal world OS image to the memory, respectively. During registration, SWS first asks the Secured Memory Mapping (SMM) module to remove all the mapping of memory pages allocated to the guest from the hypervisor's translation table and checks the integrity of a guest's TEE-kernel. • P-2.3: Protect S/W CPU states.SWS intercepts all the switching between a guest VM and the hypervisor, A switching includes saving states of the current VM, finding the next VM, and restoring its states. The states saving and restoring are done by SWS in the secure world, while the finding of next VM is done by the hypervisor, as shown in the bottom half of Figure 5 to ensure P-2.1 and P-2.2 are satisfied. For example, a guest may only allow its guest TEE to configure the vGIC, or first initialize a vRNG in V M s and then use it in V M n . To support these requirements, vTZ provides the same semantic of resource partitioning as a real TrustZone, which includes the configuration of partitioning and the enforcement of partitioning.Virtualizing Partitioning Controllers: Following two properties should be satisfied:• P-3.2: Only S/W can configure memory partition. This property is enforced by the SMM module through the following policy: any guest's secure memory region can only be mapped in its V M s but not any other VMs or the hypervisor.Secure Device Partitioning: In secure device part, vTZ must enforce the following two properties:• P-4.2: N/W cannot access secure peripherals. The entire process is also protected by CFLock, so that all the operations on virtual secure device will eventually be handled by the emulator in CIEE, and P-4.3 is satisfied.Secure Interrupt Partitioning: For interrupts, vTZ needs to ensure the following property:• P-4.1: Secure interrupts must be injected into S/W. The suspend CIEE will first invoke the SWS to encrypt and hash guest's vTZ related data, including CPU states, memory partition, interrupt partition, device partition, etc. Same as world switching, secure configuration operations happen rarely, so the overhead will have limited effect on the whole system.Run-Time Integrity Checker: Besides virtualizing secure devices like vTZASC, vTZPC and virtual GIC (virtual devices used to perform resource partition), we also virtualize and use Run-Time Integrity Checker (RTIC) to evaluate the overhead of vTZ's virtual secure devices. Finally, vTZ has about a 5% performance slowdown compared with original Xen on ARMv8 implementation, and less than 30% performance slowdown compared with native environment. For Apache (shown in Figure 9(b)), we evaluate the downloading throughput by downloading a file (size is 100MB) from the server with https protocol. Since SWS is responsible for saving and restoring each VM's CPU states and synchronizing general registers between guest's two worlds, it will check and refuse the tampering.Memory Protection: A compromised hypervisor may want to map one guest's secure memory to a compromised VM or the hypervisor itself. Secured Memory Mapping (SMM) prevents these malicious behaviors by controlling and checking all the mapping to the physical address and ensuring that one guest's secure memory can only be mapped to its guest TEE.vTZ allows a guest TEE to dynamically repartition its memory through a virtual memory configuration device, which invokes SMM to update the security policy. A benign hypervisor also does not need to load code dynamically.Code-reuse or Return-to-guest Attacks: Attacker may try to reuse code of the hypervisor or let the hypervisor jump to some code region of a guest VM to execute critical instructions (e.g., switching translation table) and bypass the SMM. Meanwhile, the SMM ensures that only the code of the hypervisor can be mapped as executable in the hyp mode, thus return-to-guest attack also can be prevented.DMA Attack: An attacker may try to access guest secure memory or inject code into hypervisor's memory by leveraging Direct Memory Access (DMA). After exclusively controlling the SMMU, we can ensure that all DMAs cannot access guest's secure memory, hypervisor's text section or CIEE's memory.Debugging Attack: The attacker may also want to bypass the SWS or CFLock by setting debug checkpoint on the smc instruction. But note that vTZ can ensure that if a guest VM uses smc instruction to switch to its guest TEE, such switching cannot be ignored.TEE-kernels may have bugs [61,62,24]. vTPM [48] makes TPM functions available to virtual machines by virtualizing the TPM hardware to multiple virtual vTPM instances, which supports suspending and resuming operations.