Concretely, we present novel precomputation techniques for correlated oblivious transfers (reducing the online communication by factor 2x), Cuckoo filter compression (with a compression ratio of ≈ 70 %), as well as 4.3x smaller Cuckoo filter updates. In a protocol performing oblivious PRF evaluations via garbled circuits, we replace AES as the evaluated PRF with a variant of LowMC (Albrecht et al., EUROCRYPT'15) for which we determine optimal parameters, thereby reducing the communication by factor 8.2x. Furthermore, we implement both protocols with security against malicious clients in C/C++ and utilize the ARM Cryptography Extensions available in most recent smartphones. The on-line phase of our fastest protocol takes only 2.92 s measured on a real WiFi connection (6.53 s on LTE) to check 1,024 client contacts against a large-scale database with 2 28 entries. For example, their fastest protocol that can easily be made secure against malicious clients requires more than 52 s on a smartphone with WiFi connection to check a single client contact against a database with only 2 20 entries.The developers of Signal, a mobile messaging service similar to WhatsApp but with focus on privacy, considered the use of PSI protocols for contact discovery. In contrast, fixes for flawed implementations of provably secure cryptographic protocols can be deployed quickly via software updates.Thus, we revisit state-of-the-art unbalanced PSI protocols which provide cryptographic security and show that using new optimizations and native implementations they turn out to be practical on modern smartphones. Our results show that in practice none of these applications protect the users' privacy during contact discovery.We optimize two protocols for unbalanced PSI that can easily be made secure against malicious clients and are suitable for private contact discovery: one that uses oblivious evaluations of the Naor-Reingold PRF (NR-PSI, cf. [31,40,47]) and one that uses Yao's garbled circuits (GC-PSI, cf. [40,52,56]) to run oblivious AES evaluations. For both protocols we apply new forms of correlated random OT precomputation (reducing the online communication by factor 2x, which is of independent interest) and introduce a method for Cuckoo filter compression (with a compression ratio of ≈ 70 % and negligible computational overhead) as well as 4.3x smaller Cuckoo filter updates to reduce the required network communication. To remain practical for even larger set sizes (the market leader WhatsApp currently has more than 1.6 billion users [61]), we suggest multiple extensions, e.g., combining our protocols with multi-server PIR s.t. the overall client-server communication complexity becomes logarithmic in the size of the server database.As a proof-of-concept, we integrate both of our protocols in the Signal Android client, thereby positioning our secure cryptographic approach as a practical alternative to vulnerable trusted execution environments like Intel SGX. In our work, we present C/C++ implementations that make use of the hardware-accelerated cryptography available in most recent smartphones.Resende and de Freitas Aranha [59] use techniques similar to [40], but replace Bloom filters [12] with the more efficient and versatile Cuckoo filters [27] to efficiently represent the encrypted server database (cf. §3.4) in a Diffie-Hellman style PSI protocol [7] with security against semi-honest adversaries. In our work, we optimize communication by proposing methods for Cuckoo filter compression and updates, and perform evaluations with reasonable parameters: while in [59] the authors settle with an error probability of ≈ 2 −13 , which results, on average, in one false positive when 10 clients match 2 10 contacts each, we propose realistic Cuckoo filter parameters for error probabilities ≈ 2 −29 and ≈ 2 −39 . Their implementation managed to evaluate ≈ 100 AND gates per second, taking about 10 min to intersect two sets of 256 items each.Asokan et al. [6] implemented an RSA-based PSI protocol with security against semi-honest adversaries on smartphones for secure mobile resource sharing.Carter et al. [17] presented a maliciously secure system for secure outsourced garbled circuit evaluation on mobile devices. However, with OT extension (OTe) protocols [9,36], a small number (e.g., 128) of "base OTs" can be extended to a large number of OTs using only efficient symmetric cryptographic operations.There exist flavors of OTe with reduced communication complexity [5]: In random OT (R-OT), neither party inputs any values, but the inputs of sender and receiver are randomly chosen by the protocol. To garble a gate, the garbler uses all four combinations of the gate's two input wire labels to encrypt the corresponding output wire label, based on the truth table of the original gate, and sends the resulting ciphertexts, the so-called garbled table, to the evaluator. The evaluator can then use the two input wire labels it possesses to decrypt one of the four ciphertexts and receive the output wire label, which is then used as input for subsequent gates.We now describe how the evaluator obtains the wire labels corresponding to the inputs of the two parties: Since the garbler knows all wire labels, it can send the wire labels corresponding to its input bits to the evaluator. This is due to several advantages over Bloom filters when representing the server's database, namely they (i) support inserting and deleting items subsequently, whereas standard Bloom filters only support inserting items, and variants that do support deletion such as counting Bloom filters have much higher storage costs; (ii) have better lookup performance; and (iii) use less space in many scenarios while having the same false positive probability.Cuckoo filters consist of a table of buckets with fixed bucket size b. Inside the buckets, so-called tags are stored. If both buckets are full, one tag in one of the buckets is chosen at random, removed from that bucket, and moved to its other possible bucket. For private contact discovery, the following properties are desired: (i) the server performs the computationally expensive tasks; (ii) all computationally expensive and communication intensive tasks are performed only once; and (iii) the actual intersection computation is very fast and also allows for efficient updates. For example, if only 10 % of a Cuckoo filter storing a maximum of 2 20 items is occupied, it can be compressed by a factor of 8.3x.In concurrent and independent work, Breslow and Jayasena [15] proposed Morton filters, which combine these compression techniques with cache-optimized layouts and further optimizations. Using the optimized S-Box implementation of [13], an AES-128 circuit (without key schedule) has 5,120 AND gates [32], serving as a baseline for comparison.In this section, we focus on variants of LowMC [2], a highly parameterizable block cipher designed for use cases in multiparty computation (MPC) and fully-homomorphic encryption (FHE). In the following, we give a short description of LowMC and highlight the different parameter choices.LowMC [2] is a block cipher where block size n, key size k, number of S-Boxes per substitution layer m, and allowed data complexity d can be chosen freely up to some sanity constraints. We can observe some interesting properties: LowMC instances (1) and (2) require the same number of rounds to be secure, but instance (1) [22], the large number of linear layer computations can be reduced, bringing the evaluation time of (3) close to (1) and (2). It is based on the observation that with the Free-XOR technique [42] for Yao's GC protocol [62], the client receives one of the two labels l 0 and l 1 = l 0 ⊕ ∆ via OT depending on its input bit, where l 0 is chosen at random and ∆ is a random global constant only known by the garbler. This is because in the online phase when using OT precomputation [8], the random messages r 0 and r 1 obtained by the sender in the base phase need to be swapped ( PRF i k , l 0 i,1 , . . . , l 0 i,α ) = GC.Build(PRF, k, r 0 i,1 , . . . , r 0 i,α , ∆) PRF i kInitialize Cuckoo filter CF with parameters N s , ε, v, b Setup Phasefor i = 1 to N S : CF.Insert(PRF k (x i )) CF for i = 1 to N C :Online Phase for i = 1 to N C :for j = 1 to α: for j = 1 to α: in case the random choice made by the receiver differs from its actual input. Thus, it would be necessary to swap input wire labels in the garbled circuits, which requires recomputing and resending at least the first layer of those circuits.b i, j = c i, j ⊕ y i [ j] B i, j = r bi, j i, j ⊕ l 0 i, j l i, j = r ci, j i, j ⊕ B i, j PRF k (y i ) = GC.Eval( PRF i k , l i,1 , . . . , l i,α ) If CF.Contains(PRF k (y i )):Our novel precomputation method circumvents this dilemma: In the base phase we run C-OTs via OT extension s.t. the garbler on input ∆ learns the random but correlated values r 0 and r 1 = r 0 ⊕ ∆, whereas the evaluator upon random choice c learns r c . b i, j = c i, j ⊕ y i [ j] r i, j = r bi, j i, j r 1−bi, j i, j ⊕ (r bi, j i, j · a j ) r inv i = ( n ∏ j=1 r i, j ) −1 mod q R i, j = r ci, j i, j ⊕ y i [ j] · (r 1−bi, j i, j ⊕ (r bi, j i, j · a j )) ˜ g i = g a0·r inv i mod p C i = α ∏ j=1 R i, j mod q ˜ g i If CF.Contains( ˜ g C i i mod p) then put y i into S Output SFigure 2: Our optimized NR-PSI protocol (based on [31,40,59]). Depending on b, the server then decides which of the two random messages obtained during OT precomputation is chosen as r and which is used to mask the correlated message r · a that is sent to the client. As the OT extension contributes only a small percentage to the total runtime of the PSI protocols and today's maliciously secure OTe protocols are only slightly less efficient than the passively secure OT extension of [3], the total runtime of the PSI protocols does not increase by a noticeable amount when replacing the OTe protocols. Preventing malicious behavior on the server side could be done by combining our protocols with a trusted execution environment for hardware-enforced code and remote attestation capabilities s.t. the server's protocol deviation possibilities are restricted to wrong inputs for the Cuckoo filter construction. Applied to our PSI protocols, the extension works as follows: After the server prepared the Cuckoo filter, it is not transmitted to the client, but to a second non-colluding server instead. The client then performs the OPRF evaluation for each of its items with the first server and then runs a multi-server PIR protocol to retrieve the fingerprints stored in the Cuckoo filter.The communication complexity for the multi-server PIR lookup is O(κ log n), where κ is the symmetric security parameter and n the size of the server database [14,21]. For the GC-PSI protocol, we implement Yao's GC protocol (cf. §3.2) with Free-XOR [42] and Half-Gates [63], resulting in no communication for XOR-gates and two wire labels of κ bits each per AND gate, where κ = 128 is the symmetric security parameter.For creating and evaluating the garbled tables, the most efficient choice today is fixed-key AES [11], mainly due to the hardware support for AES that is widespread in modern x86 CPUs. For implementing the NR-PSI protocol, we use the modified libOTe version described in §5.1 for C-OT precomputation as well as the GNU GMP 8 library for modular arithmetic operations and the MIRACL 9 library for instantiating the protocol 7 As recently reported by [29], many secure computation implementations use fixed-key AES incorrectly. We consider two network settings: (i) an IEEE 802.11ac WiFi connection with ≈ 230 Mbit/s down-/upload and 70 ms RTT and (ii) a mobile LTE connection with 42 Mbit/s download (S → C), 4 Mbit/s upload (S ← C), and 80 ms RTT.Note that the LTE network speeds are real-world parameters and exhibit a significant difference in the down-and upload rates. The authors therefore conclude that instead their ECC-DH-PSI protocol is most suited for the mobile use case since the evaluation time for a single item is 23 ms. However, both of our optimized protocols with security against malicious clients are more than competitive with an evaluation time of less than 2 ms for a single item. 7.System-on-a-Chip (SoC) Example Smartphones and Tablets CE Apple A4, A5, A6 iPhone 4, iPad, iPad 2, iPhone 5 Apple A7, A8, A9 iPhone (5s,6), iPad Air, iPad mini 2 Apple A10, A11, A12 iPhone (7,8,X,Xs), iPad (2018), iPad Pro Snapdragon 801 HTC One (E8), OnePlus One Snapdragon 805Galaxy S5+, Nexus 6 Snapdragon 808Nexus 5X, LG G4, Moto X Style Snapdragon 810OnePlus 2, Nexus 6P, Sony Xperia Z5 Snapdragon 820OnePlus 3, Galaxy S7, LG G5 Snapdragon 821Google Pixel (XL), LG G6 Snapdragon 835Google Pixel 2 (XL), Galaxy S8 Snapdragon 845OnePlus 6, Galaxy S9, Sony Xperia Z2 Table 7: Availability of ARM Cryptography Extensions (CE) in modern smartphone and tablet systems-on-a-chip (SoCs). This work was co-funded by the DFG as part of project E4 within the CRC 1119 CROSSING and project A.1 within the RTG 2050 "Privacy and Trust for Mobile Users", by the BMBF and the HMWK within CRISP, and by the European Union's Horizon 2020 research and innovation programme under grant agreement No 644052 (HECTOR).