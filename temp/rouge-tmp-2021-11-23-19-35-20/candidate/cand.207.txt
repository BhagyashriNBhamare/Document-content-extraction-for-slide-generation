For example, though HoloLens supports running an app shared between multiple device users, it surfaces only basic cross-device messaging features, providing no framework for developers to reason about or support complex multi-user interactions.This work: Sharing control for multi-user AR. By addressing this issue before multiuser AR becomes widespread, we aim to inform the design of future AR systems, thereby preventing such multi-user concerns from manifesting broadly.In our exploration of this space, however, we find that controlled sharing for AR content raises unique challenges not present in traditional settings such as file systems or shared online documents. The answer may depend on the semantics of the app and whether Alice and Bob are physically co-located, and the answer interacts with many other design choices.In our work, we thus explore a set of multi-user AR case study apps that represent different points in the possible design space (co-located and remote users, opt-in versus optout sharing) to surface functionality and security goals for an AR sharing control module. This module supports app developers in (1) allowing users to share AR content with other (co-located or remote) users, (2) allowing users to control both inbound and outbound AR content, while (3) addressing fundamental challenges raised by AR's integration with the physical world.One key challenge is to define and manage different ways that AR content might be mapped into the physical world -we do so by supporting both location-coupled objects (which all users see in the same physical place) and location-decoupled objects (for which users see their own copies in separate locations), and by managing the resulting impact of these types of objects on sharing and access control functionality. To do so systematically, we consider four case study apps (Section 2.1) that we selected to explore unique points in the multi-user AR design space and that we envisioned might exercise a broad range of functionality and security needs. A second key axis is (2) opt-in versus opt-out sharing: is sharing a deliberate opt-in action between specific people (as the HoloLens developer guidelines prioritize [43]) or are virtual objects public by default, requiring a deliberate optout (as the Meta developer guidelines advocate [40])? Although each co-located group of users sees the same whiteboard in the same location, different groups may see the whiteboard instantiated in different locations; furthermore, a user in a group may split off an individual copy of the whiteboard in order to leave the room and still collaborate from another remote space. The ability to form AR reconstructions of soccer games from monocular video footage, demonstrated in [51], shows that this app is within reach of today's technology. Any sharing control solution must coexist with these functionality goals -while one could trivially meet the security and privacy goals outlined in the next section by allowing no shared content, supporting sharing functionality is critical to the success of emerging multi-user apps. We decompose our security goals along this dimension, beginning with control of outbound content, i.e., managing the permissions of other users to access shared content.Three canonical access control rights are "read," "write," and "execute." This is in sharp contrast to current technologies, where the physical presence of a device -e.g., a smartphone or a television set -enables the user of that device both (1) to signal to others that they are busy with that device, and (2) to establish a dedicated spatial region upon which their use of the device depends. There is no mechanism by which the user can exercise agency over their working space in the presence of other users, and no mechanism by which other users passing by can determine whether the object is five feet away from its owner or up against a more distant wall. Since shared content can have serious implications for the receiver, such as spam that obscures important realworld information [34], we derive the following goals:• Support user control of incoming virtual content.For instance, users of Community Art may wish to filter content to only that which is age-appropriate or that does not contain foul language. Even in an app that is otherwise simple from a sharing control perspective, user needs may warrant a degree of added sharing control complexity: for instance, an AR assistive technology object that transcribes spoken words for deaf users may be exempt from the app's general rules for the enforcement of owned physical space so that it always remains visible to the deaf user who needs it. We explicitly trust app developers to incorporate our module (e.g., as an app-level library) into their apps; a malicious app developer might choose to simply not use our sharing module, implementing their own adversarially-motivated sharing functionality, or use our module but violate security or pri-vacy properties through out-of-band means. Though a user may install malicious apps alongside legitimate ones that use our module, these malicious apps cannot interfere via our module: we consider (and our module supports) AR content sharing only among multiple users of the same app, rather than also considering sharing across apps. Current network best practices still suffer from denial-of-service attacks and traffic analysis attacks, but we do not aim to protect against such attacks in this work, focusing instead on the app-level security and privacy issues.Non-Goals. Our work is similar in spiritspirit to work on user interface toolkits (e.g., [25,27]) in that our goal is to enable app developers to easily create and innovate on a range of user interfaces and experiences, rather than to design and iterate on these interfaces directly. This sharing flow might seem simple: the sharing control module provides APIs that help an app keep track of which users can access which AR objects -i.e., view and edit permissions -and syncs this information across the devices of all users of the app. These challenges are deeply connected with AR's integration with the physical world, and although they do not on the surface appear to be security-centered questions, they affect the security and privacy mechanisms we design, and so we must address them:• Integration of shared AR objects with the physical world (Section 4. Although we aim to be compatible with whichever access control model a particular app chooses to layer atop our module -e.g., a model akin to Google Docs for the Multi-Team Whiteboards case study -we note that this alone is not enough to support the 3D experience of AR, and that the above key design challenges must also be addressed. We categorize the design points along two axes: (1) where in the above sharing flow the control occurs (outbound on the sharer's end, or inbound on the receiver's end), and (2) what type of control is enforced (what object is shared and with whom, where a shared object can be, or how much information from that object is shared). Recall from Section 2 that we aim to support both physically co-located sharing (i.e., two users in the same physical place and seeing the same AR objects in the same physical locations) and remote sharing (i.e., two users physically separated but seeing the same AR objects in their own physical spaces). Accordingly, our design supports two notions for how an AR object can be shared with respect to the physical world: (1) Location-coupled objects, which all users see in the same physical location, and (2) Location-decoupled objects, where all users see the same object but in different physical locations. This is not the case, however: Alice and Bob see one instantiation of the whiteboard, and Carol sees a separate instantiation in a slightly different location.To resolve this potential inconsistency, our design keeps track of all copies of a shared object, allowing the app to show all of these copies to all users. Thus, we also provide mechanisms to merge two location-decoupled instances into a location-coupled object and to separate a location-coupled object into two location-decoupled instances.Another way to think about shared AR objects, then, is that there is one conceptual object and potentially multiple views of it. For example, our design lets users delete AR content that they have created; it is not clear, however, that this decision should propagate to other users with whom the object has been shared, and location coupling or decoupling affects how deletion is handled.We design the module to support three cases, which can be chosen by the app developer as appropriate:1. As raised in the Multi-Team Whiteboards case study in Section 2 and in prior work [35], the fact that AR supports peruser private content can have benefits, but it can also fail to provide a signal about the use of physical space (e.g., leading to one user inadvertently standing in front of another's virtual content, or causing social tension due to one user not knowing what another user is doing). We refer to both personal space (near one's body) and static owned space (e.g., one's home) as owned physical space in this section.Helping users protect their owned physical spaces requires several components: (1) Determining who owns a region in space, (2) Determining what the boundaries of that region are, and (3) Enforcing some kind of policy on shared AR objects in that region.We defer to future work (1), how to determine who owns a region in space. Accounting for different types of space ownership is also nontrivial: in particular, we identify (a) fixed-location physical spaces (e.g., a house, a room, a storefront, or a public park), (b) person-relative spaces (e.g., within 5 feet of a user), and (c) object-relative spaces (e.g., within 35 feet of a virtual art object). A complete solution to this issue should also consider non-AR users, and we offer the following suggestion as a starting point for future work: locally on the AR user's device, employ computer vision techniques to identify the spatial positions of bystanders visible by the AR user, estimate the rough pose for each bystander, and use that information to mark bystanders' forms as protected regions of space (e.g., using techniques from [2,39]). Building on this observation, our solution is to model owned physical space as a continuum, where violations become more severe -and thus policies could become stricter -as virtual content approaches the protected region.The key question, then, is (3): what should an app do when one user's shared AR content overlaps another user's personal physical space, or a physical region (e.g., a house) that another user owns?Policies for AR content violating owned spaces. 3 MixedRealityToolkit does not provide any sharing control or access control functionality; we use it only as a basic tunnel to send messages between HoloLens devices.We build a network shim layer that serializes and deserializes ShareAR messages and uses MixedRealityToolkit Sharing to send them between devices. A developer who wishes to use a different networking solution -e.g., one relying further on a central server for data storage, or one implementing a more rigorous consensus protocol -may write a replacement network shim layer satisfying the same interface with the ShareAR core.Users may join, leave, and re-join the network. We report both the total lines of code for the application and the lines of code dedicated to interfacing with the ShareAR toolkit.vestigate the Microsoft HoloLens guidelines [43] and Meta guidelines [40]; we find that ShareAR is compatible with all of them. A user with permission only to view the ghost cannot tell if the original document is red or not; but the user sees the ghost in the same location as the document's owner sees the original document, and this location remains synchronized when the document's owner moves the document in physical space. Considering the inbound security goals from Section 2.3:• Support user control of incoming virtual content: The Doc Edit app surfaces an incoming permission-granting message to the user via a small menu, through which the user can choose to accept or decline. In addition to measuring the within-module time for A's initiating action and B's receiving action, we measure and report on operation completion time, i.e., the time it takes from A's initiating action until B has finished processing. Next, we consider how ShareAR scales as the number of users increases.In terms of network traffic, a user sharing an object needs to send object create and update messages to n − 1 others; additionally, once a user accepts a sharing offer, their device sends an acceptance message back to the sharer and an informational message to all other n − 2 users to stay in sync. We may want (1) the objects to still be visible to a passerby when the user is not home, but (2) the passerby's device to only become notified of the objects' existence and public visibility when the passerby is physically proximate to the home. Still other pitfalls may depend on app semantics: for instance, if the developer of an app such as Community Art does not put limits on users, a user could monopolize a common space and prevent other users from placing objects there. If the ball rebounds for both users, then the ball owner gains information about the presence of the wall; if the ball does not rebound for either user, then the wall owner sees the ball go through the wall, defying physics; if only the wall owner sees the ball rebound, then the two users no longer have a synchronized view of the shared space. While these works present specific multi-user AR systems, our work is the first to systematically and broadly consider the design space for AR sharing control and our module could be leveraged when implementing these prior ideas.There is a rich literature on access control (see, e.g., [7] for an overview). Our implementation leverages an access control matrix [30] as a simple and flexible model for per-user and per-object permissions; we intend for other established access control models in specific app contexts (e.g., [17,68]) to be layered on top of our toolkit, and we instead focus on the challenges of managing the implications of access control in the 3D physical AR setting.Work in AR user experience has surfaced security-and privacy-relevant themes for multi-user contexts. These studies shed light on desired system properties and user concerns but do not directly address system design; our work builds concretely on these findings.Multi-user digital interactions that take place in a physical space have also been studied in the context of tabletop interfaces and large computerized displays [44,[57][58][59]71]. A user can also turn a document red, modifying the document's contents in a way that ghost documents do not display (for the prototype, this emulates arbitrary content entry, which we do not implement); the user can also delete the document in a group-extended way (i.e., all other users' instances of the document are also deleted). Besides the opt-in scenarios that the HoloLens guidelines describe, our design also supports opt-out public content sharing, which we argue should be treated as another important use case for AR.What is the group size? (In practice, our implementation stores both object IDs and user IDs as 32-bit integers, providing a generous upper bound on its capacity. HoloLens recommends setting a "plane clipping" distance of 0.85 m so that a user does not see any portions of AR objects that are closer than that in the user's field of view [42].