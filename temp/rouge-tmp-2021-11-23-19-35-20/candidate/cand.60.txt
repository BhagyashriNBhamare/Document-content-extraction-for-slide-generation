To mitigate this increasing threat, Firefox introduced the contentaccessible flag and Chrome a new manifest version [16] to implement some form of access control over the extension resources. In particular, while the two design choices (i.e., access control settings or URI randomization) are both secure from a theoretical point of view, their practical implementation suffers from many different problems.We discuss two offensive techniques to subvert these control policies, one based on a timing side-channel attack and one based on an involuntary leakage of the random URI token that affects many extensions. We also discuss a set of attacks based on these techniques, which allow third-parties to perform precise user fingerprinting, or to perform various types of targeted attacks, performing proof-of-concept tests of some of them.We already reported the discovered problems to the involved browsers and extensions developers and we are currently discussing with them about possible fixes.In summary, this paper makes the following contributions:• We propose the first time-based extension enumeration attack that can retrieve the complete list of extensions installed in browsers that use access control settings. After an extensive survey of several traditional and mobile browser families, we identified two main classes of protection mechanisms currently in use: access control settings ( §2.1), and URI randomization ( §2.2). The most popular approach to protect extension resources from unauthorized accesses consists in letting the extensions themselves specify which resources they need to be kept private and which can be made publicly available. Each Chromium extension includes a JSON file called manifest.json that defines a set of properties such as the extension name, description, and version number (see Figure 1 for an example of manifest). The "name": "description", "example": "Example extension", "version": "1.0", "permissions": [ "activeTab", "https://ajax.googleapis.com/"], manifest is used by the browser to know the functionality offered by the extension and the permissions required to perform those actions [16]. This development kit provides a high-level API, easing the development process and addressing some of the security issues of previous Firefox extensions.The registration and allocation of the different extensions is performed through the Chrome Registry [27] which is also in charge of customizing user interface elements of the application window that are not in the windows content area (such as toolbars, menu bars, progress bars, or windows title bars). *" "update_url": "https://foo/bar" } } ... Chrome extension developers will require minimal effort.Beside the general web APIs, a special extension API will provide a deeper integration with the browser, making possible to access features such as tab and window manipulation. In this solution there is no distinction between private or public resources, but instead the base URI of the extension is randomly re-generated in each session.Safari extensions are coded using a combination of HTML, CSS, and JavaScript. To develop an extension, a developer has to provide: (i) the global HTML page code, (ii) the content (HTML, CSS, JavaScript media), (iii) the menu items (label and images), (iv) the code of the injected scripts, (v) the stylesheets, and (vi) the required icons.These components are grouped into two categories: the first including the global page and the menu items, and the second including the content, and the injected scripts and stylesheets. cssText = 5 " background -image : url ( " + myImage + " ) " ; 6 </ script > Figure 3: Example of background image load in CSS using absolute URLs in Safari extension. It is important to remark that our method exploits the proportional timing difference between two different calls rather than using a pre-computed time for a specific device. log ( " failed with " + e + " \ n " ) ;} 23 return false ; 24 } security mechanism to protect the access to an extension resources.While this may seem like a simple bug in the extension development, our experiments show that it is instead a very widespread phenomenon. The Web-of-Trust example discussed above consists of a single function of 30 lines of code, but not all the cases are so obvious to identify without a complex static analysis of the extension.To estimate how prevalent the problem is, we implemented a prototype analyzer that reports candidate cases of URI leakage in all Safari extensions. Within the extensions that are vulnerable to our attack, we found popular pro-tection extensions such as Adblock 5 , Ghostery 6 , Web Of Trust 7 , and Adguard 8 . Therefore, if we configure our techniques to check one of these built-in extensions that does not exist in other browsers, a website can precisely identify the browser family with 100% accuracy.The installed extensions enumeration combined with the aforementioned browser identification can be used to determine users' demographics. For instance, attackers can inject the extension enumeration code in a compromised website and search for users with shopping management extensions and password managers to narrow down their attack surface to only those users whose credit card information has a higher likelihood to be stolen. Another possibility would be to identify the presence of a major antivirus vendor extension to personalize an exploit kit or to decide whether the malicious payload should be delivered or not to a certain user.In addition to the attacks already presented, in a recent work, Buyukkayhan et al. [7] presented CrossFire, a technique that allows attacker to perform malicious actions using legitimate extensions. Hence, even a careful user who decides to analyze the website source cannot easily understand if a certain window or frame is created by an installed extension or by the site reusing the extension resources.While the URI randomization control bypass does not provide a complete enumeration capability, when an extension leaks its random token it opens all its internal resources to the attacker. For instance, the number of visitors with "shopping", "web development", or "sports" extensions, may help the website owner to personalize her content or ads accordingly, thus improving her number of visitors or ad revenues.However, not only the most popular extensions may help the website owner to get a better understanding of her visitors and act accordingly. For example, the usage of extensions from the "creative tools" category indicates that the visitor is prone to create content, the presence of extensions within "academic resources" category would likely indicate that the visitor is near the academic environment, "teacher tools" may imply that the visitor deliver at least some lectures, and "blogging" implies that the visitor is a blogger.In summary, we believe that extensions are a powerful tool to perform fine-grained user analytics because of their diversity. In order to understand and measure the capability of extensions for device fingerprinting, we implemented a page that checks the users' installed extensions among the top 1,000 most popular from the Chrome Web Store and the Add-ons Firefox websites, using the timing sidechannel extension enumeration attack described in §3.1. In fact, this analysis is simply designed to determine the viability of our technique for device fingerprinting, either as a method by itself or by complementing other existing fingerprinting techniques.Following the standard adopted in previous works [12,24], we analyzed the extension anonymity sets of the fingerprinted users, which is defined as the number of users with the same fingerprint i.e., same extension set (the distribution of anonymity sets is shown in Figure 8). We can notice that extensions pre- -Firefox Mobile -Iceweasel -Pale Moon . . . Safari ≤ 40% ≤ 40% Microsoft Edge in discussion Firefox WebExtensions in discussionsented the highest entropy of the analyzed fingerprinting attributes -making them more precise than using the list of fonts or canvas-based techniques. R e s o l v e S p e c i a l C a s e s ( root , N S _ L I T E R A L _ C S T R I N G ( " / " ) , uri ) ) { 12 return N S _ E R R O R _ N O T _ A V A I L A B L E ;} 13return NS_NewURI ( result , uri ) ; 14 } Figure 9: Firefox functions that cause the difference between existing and not existing extensions. At the time of writing, as it is a design-related problem, it is still not fixed.In addition, as the new Firefox WebExtensions and Microsoft Edge (both currently in their early stages) use the same extension control mechanisms proposed by Chromium, we also notified their developers to make them aware of the issue described in this paper. We also responsibly reported the Firefox nonWebExtensions problem that makes our enumeration attack possible to its developers, who acknowledged the issue and are currently discussing how to proceed. Specifically, Figure 9 show the function that causes the response difference regarding the extension existence.The error returned when the resource path does not exist (line #4 and line #12 in Figure 9) does not raise any exception. In the case of security extensions, this is particularly worrying due to the type of information they manage is usually very sensitive.In this case the problem is even harder to solve, because it is not a consequence of an error in the extension control but of hundreds of errors spread over different extensions. Reaching out and training all the extension developers is a difficult task but Apple should provide more information on the proper way to handle the baseURI and about the security implications of this process.In addition, we believe that Safari could benefit from adopting a lightweight static analysis solution (similar to the one we discuss in §3) to analyze the extensions in their market and flag those that leak the random token. VEX [3] is instead a static analyzer for Firefox JavaScript extensions that applies information flow analysis to identify browser extension vulnerabilities.Dynamic extensions analysis includes the work of Djeric et al. [11], in which the authors proposed the use of dynamic analysis to track data inside the browser and detect malicious extensions. By measuring the time needed to access certain data from an unrelated website, the researchers could determine if that specific data was cached or not, indicating a previous access.Later, Bortz et al.[5] organized timing attacks in two different types of attacks: (i) direct timing, consisting in measuring the time difference in HTTP requests to websites and (ii) cross-site timing, which allows to obtain data from the client-side. In particular, we present a novel time side-channel attack against the access control settings used by the Chromium browser family. Firefox WebExtensions and Microsoft Edge (early states) follow the same API and design, indicating that they may be prone to be vulnerable to the attack.We also discuss a URI leakage technique that subverts the URI randomization mechanism implemented in Safari, that emerges from inappropriate extension implementations that leak the value of a random token. x1 bool R e s o u r c e R e q u e s t P o l i c y :: C a n R e q u e s t R e s o u r c e ( const GURL & resource_url , blink :: WebFrame * frame , ui :: PageTran sition tr an si t io n_ ty p e ) { 2 CHECK ( resource_url .