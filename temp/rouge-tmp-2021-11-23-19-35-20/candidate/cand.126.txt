Recent measurement studies have highlighted security threats against the code-signing public key infrastructure (PKI), such as certificates that had been compromised or issued directly to the malware authors. This process involves three roles: (1) discovering certificates that are compromised or controlled by malicious actors; (2) revoking these certificates effectively; and (3) disseminating the revocation information so that it is broadly available.Unlike in the Web's PKI, where potentially compromised certificates can be discovered systematically through network scanning [6,29,30], in the code signing PKI this requires discovering signed malware or PUP samples on end-hosts around the world. These challenges render the code signing ecosystem opaque and difficult to audit, which contributes to an under-appreciation of the security threats that result from ineffective revocations.In this paper, we present an end-to-end measurement of certificate revocations in the code signing PKI; in particular, how effective is the current revocation process from discovery to dissemination, and what threats are introduced if the process is not properly done. In summary, we make the following contributions: (1) we collect a large corpus of code signing certificates and the revocation information, (2) we conduct the first endto-end measurement of the code signing certificate revocation process, (3) we use our data to estimate a lower bound on the number of compromised certificates, (4) we highlight the problems in the three parts of the revocation process as well as new threats that result from those problems, and (5) we discuss suggestions/recommendations to improve the security of the code signing ecosystem. Similar to the Web's PKI (e.g., TLS), the software publishers first ask a Certificate Authority (CA) to issue code signing certificates based on the X.509 v3 certificate standard [4], and they use the certificates to sign their binary files. The standard relies on Public Key Cryptography Standard (PKCS) #7 [11] that stores X.509 code signing certificate chains, X.509 TSA certificate chains, a digital signature, and a hash value of a PE file, with no encrypted data.Trusted timestamping. CAs are responsible for revoking certificates for reasons such as: the private key associated with a certificate is made public, the entity behind the certificate becomes untrusted, the certificate is used to sign malware even if the source is unknown, or if a certificate is erroneously issued [12]. The two predominant ways to disseminate certificate revocation information are (1) Certificate Revocation List (CRL) [4] and (2) Figure 1: An example of (i) an effective revocation date (t r ) that determines the validity of signed malware and (ii) a revocation delay (t p -t d ) (t i : issue date, t e : expiration date, t r : effective revocation date, t b : signing date of a benign program, t m : signing date of malware, t d : detection date, and t p : revocation publication date). Each CRL is updated based on their CA's issuance policy; for example, they can be issued when a new revoked certificate is inserted, or a specific time of day or a day of month. When alerted to a certificate problem, CAs have to begin investigating the reports within 24 hours and revoke the compromised certificates and publish the revocation information within seven days or get reasonable cause from the owner of the certificate to delay [3]. If this date is not set correctly, then signed malware (i.e., malware is signed before the date, t m < t r ) may still exist and continue to be trusted as the example shown in Figure 1. In contrast, little is known about code signing certificate revocation: in particular, the revocation process (1) promptly discovering compromised certificates, (2) revoking the compromised certificates effectively, and (3) disseminating the revocation information. To get more code signing certificates, we also select around 300 PE files for each CA from WINE (c.f., Section 3.3) and download the samples from VirusTotal using the download API; 11,108 PE samples are collected. The D1 data set is used for (1) the trend of revocation setting policy (Section 5.1), (2) the certificates without CRL and OCSP (Section 6.3), (3) the inconsistent responses from CRLs and OCSP (Section 6.3), and (4) the unknown or unauthorized responses from OCSP (Section 6.3). Therefore, we devise a system, called revocation publication date collection system that collects revoked serial numbers once a day from our CRL data set in order to detect the revocation publication date (t p ), when the certificate is added to CRL or OCSP servers. From the 215 CRLs, we observe 2,617 unique certificates added to the CRLs between Apr. 16th, 2017 to Sept. 10th, 2017. For example, to measure the malware which is still valid due to the ineffective revocation date setting, we need a view of the binaries signed with a revoked certificate and information to determine their maliciousness and their signing date. We use the private API to collect the following information from these reports: the signed date of the binary, the number of AV engines detected the file as malicious, and the first submission timestamp to VirusTotal.VirusTotal also allows users to apply rule-based matching on the incoming submissions, which can help researchers find a specific type of malware. We also use the VirusTotal download API to download the actual binary of a given hash when necessary (e.g., to collect the certificate to extract the CRL/OCSP information). An estimatorˆNestimatorˆ estimatorˆN for the total population N can then be computed as:ˆ N = n 1 n 2 p(1)We apply the mark-recapture technique to the malware signing certificates from two different data sets: Symantec telemetry (D5) and VirusTotal (D6). However, security companies share malware feeds with each other, which raises the probability of recapture for the potentially compromised certificates captured in the first sample. We set the birth date for each certificate as the first seen timestamp in the Symantec telemetry and the first submission date for VirusTotal, as this is when they join the population of potentially compromised certificates. The existence of such certificates would imply thatˆNthatˆ thatˆN underestimates the real population N. Similarly, dependencies between the two data sets would lead to an increase of the intersection p, which would also result in an underestimation of N. This suggests that even a major security company like Symantec and an information aggregator like VirusTotal do not observe a large portion of the potentially compromised certificates.To illustrate the effect of the inefficient discovery process on the revocations, in Figure 2(b) we compare the mark-recapture estimation on all the certificates observed during the measurement period (4/18-9/10/17) with the actual number of newly revoked certificates, which revocation publication date (t p ) is between 4/18/17 and 9/10/17, from data set D3. 5 Because the Symantec telemetry dataset was collected starting from the certificates we observed on CRLs (D3), all the certificates in D5 were revoked by the end of our observation period. Of the 2,617 revoked certificates, we find 468 (17.9%) revoked certificates in the D5 data set, and 146,286 hashes signed with the revoked certificates. In total we find 19,053 unique samples in VirusTotal, and 254 unique certificates used to sign the samples.For each certificate, we use the earliest detection date of a signed malware sample as the discovery date (t d ). The long delays imply that CAs either do not receive the information in a timely manner or do 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 Figure 4: Effective revocation date setting trends: Number of revoked certificates (stacked). The trust in a signed binary depends on the effective revocation date, and so a CA generally tries to set t r (effective revocation date) close to the oldest t m (the date on which the certificate signed malware). As mentioned in Section 2.3, soft revocation may result in the survival of signed malware even after a certificate has been revoked if a CA sets the wrong effective revocation Figure 5: CDF of the revocation date setting error (t r − t m ): difference between the effective revocation date and the first malware signing date of a certificate.date. As shown in Table 4, most CAs have set the effective revocation dates even after its certificate expiration date. The number of still-valid signed malware is relatively small in our data sets, but we believe that more still-valid signed malware can be found in the wild since our data sets are limited, and do not cover all samples in the wild. After compromised certificates are properly revoked and the appropriate effective revocation dates are decided, the next step for CAs is to make the revocation public and maintain its availability. netmarketshare.com), since more than 75% of Windows clients use Windows 7 and Windows 10, we focus on only these two platforms.to allow execution with no prompts unless the revocation is explicitly found, for all unknown and unexpected cases the assumption is that it is safe to proceed. In both versions of Windows, a message saying "The revocation function was unable to check revocation for the certificate" is displayed if you manually inspect the certificate (seen in Figure 6 in the appendix), but the certifi- cate appears trusted due to the soft-fail revocation checking policy of Windows. In fact, when clients attempt to execute such a file, the prompt presents a normal trusted file as seen in Figure 7 in the appendix even though the revocation status information of the certificate is unavailable (at worst, it might be compromised and already revoked). For example, two CRLs points (http://crl.globalsign.net/ObjectSign.crl, http://www.startssl.com/crtc2-crl.crl) produce HTTP 404 error, which indicates that the CA has removed the CRL from the address but a server still exists at that domain.One domain has been bought by a domain reseller, which means the CRL point is no longer available. However, the AOL's servers are currently no longer maintained, and its clients who try to verify program code signed with the certificates are unaware where to query for revocation status information.Unreachable CRLs and OCSP points are common, since there are many valid reasons to not have a network connection, and so Windows handles these failures quietly. One CA replied that they had a flaw in their revocation system that removes certificates after the certificate expired, and they fix the flaw to keep the certificates on the CRL indefinitely thanks to our report.The disappeared serial numbers from CRLs are unlikely to affect the Windows platforms as long as certificates have both CRLs and OCSP points since in Windows, OCSP is always preferred over CRL to check revocation status. Surprisingly, in our data set (D1), the three OCSP servers (Certum, Shanghai Electronic CA, and LuxTrust) respond that they are unaware of the status of their 669 certificates; almost all of the certificates (658, 98%) are issued from Certum; the rest of them (2%) are issued by Shanghai Electronic CA and LuxTrust.OCSP responders may also respond with an error message. In the OCSP server-side case, OCSP responders return an unauthorized error message when (1) they are not authorized to access the revocation records for the certificate, or (2) when they remove the revocation records of expired certificates and are unable to locate the records for requested certificates. TLS certificates collected through network scanners provide a view of the publicly accessible Web's PKI, however our collected code signing certificates may not be representative of the entire code signing PKI ecosystem as the collected data sets do not cover all certificates and signed samples in the wild. As we discussed in Section 4.1, the characteristics of the data violates the assumptions of Mark-recapture algorithm: 1) the population should be homogeneous, 2) the samples should be independent, and 3) it should be a closed population. The findings from our measurement study (Section 4-6) suggest the current revocation systems based on CRLs and OCSP are facing several problems including (1) difficulties in discovering compromised certificates, (2) revocation delay, (3) ineffective revocation dates, and (4) improper maintenance of the revocation information. The distinct feature from TLS certificate transparency is that publishers are required to log the history of when/what binaries (to be publicly distributed) are signed with their private keys. The CAs should better understand the code signing PKI and properly maintain their revocation systems (CRLs and OCSP servers) to have better availability and consistency that can help clients correctly check the revocation status of certificates. These studies briefly introduced a few of the revocation problems, but they did not make a distinction between the effective revocation date (t r ) and the revocation publication date (t p ) and only measured the former. Zhang et al. [30] and Durumeric et al. [6] have found that the number of revocations increased after the Heartbleed announcement. However, we found that the revocation processes can have security problems, and new security threats can be introduced by the problems.In the discovery phase, CAs take on average 5.6 months to revoke the compromised certificates after the certificates was used to sign a known malicious binary.