We methodically test our corpus of AT commands against eight Android devices from four different vendors through their USB interface and characterize the powerful functionality exposed , including the ability to rewrite device firmware, bypass Android security mechanisms, exfiltrate sensitive device information, perform screen unlocks, and inject touch events solely through the use of AT commands. For example, AT commands on Sony Ericsson smartphones can be used to access GPS accessories and the camera flash [18]. We characterize the functionality of these commands, confirming the operation of undocumented commands through disassembly of the firmware images.Our analysis of discovered AT commands exposes powerful and broad capabilities, including the ability to bypass Android security mechanisms such as SEAndroid in order to retrieve and modify sensitive information. Our database and code are publicly available at http://atcommands.org.â€¢ Comprehensive Runtime Vulnerability Analysis.We systematically test 13 Android smartphones and 1 tablet for exposure to the USB modem interface and find that 5 devices expose the modem by default while 3 other devices will do so if rooted. We also discuss how mechanisms such as "charger" mode and SELinux policies only partially mitigate the threat that broadly accessible AT commands can pose to smartphone platforms. Android phone makers further extended the AT command set by adding Android-specific commands (e.g., to enable debugging over USB) to be consumed by the Android OS running on the application processor [58]. USB device mode, the most common mode and our focus because of its widespread use, is used when the phone connects to a PC and emulates device functionality such as exposing an MTP (Media Transfer Protocol) endpoint.As shown in Figure 1, the Android USB implementation in device mode relies on both the Linux kernel and the Android framework. ASUS 210 803 Google 447 291 HTC 55 299 Huawei 83 1122 LG 150 450 Lenovo 198 1008 LineageOS 199 535 Motorola 145 779 Samsung 373 1251 Sony 128 416 ZTE 30 696 Total 2018 3500 Table 1: Per vendor counts of firmware images examined and AT commands extracted from all images. 2 Finally, using this database, we evaluate the security impact of these commands on real Android devices by setting up an automated testing framework to send the commands to physical Android devices and monitor any side-effects. We also collect any USB init/pre-configuration files (e.g., init.usb.rc) found in Android boot images to gain insight into the USB modes supported by each firmware.In order to find AT commands present in firmware images, we look in every file for any string containing the regular expression AT[+*! ZIP-like files include yaffs (unpacked using unyaffs [13]), Lenovo's SZB (unpacked using szbtool [11]) and Lenovo's QSB (unpacked using a qsb splitter [6]) formats.If the file is a VFAT or EXT4 filesystem image (e.g., system.img), we mount the filesystem and traverse it once mounted to check each contained file. They may otherwise be provided as sparse Android data images (SDATs), which are converted into EXT4 using sdat2img [8]. Similarly, we also decompile JAR files using jd-cli before extracting AT commands from them. This script applies additional filtering with a more strict regular expression and uses a scoring heuristic to eliminate commands that appear to be invalid.For every command found, we record metadata such as the vendor, image, and filename where it was discovered. [25] SMS 20 ETSI TS 100 916 [26] GSM 95Total (unique) 222 Table 2: Additional AT commands were manually collected from several specification documents, for a total of 222 unique AT commands.Line 10 will match a read variant, line 12 a set variant with a non-zero amount of numeric parameters, string parameters, and nested AT commands separated by semicolons (e.g., AT+CMD=1,10,"var";+OTHER=1,2). With less invalid commands matched, the signal to noise ratio of database increased and our AT command testing was faster.Generating a DB Once we have filtered and stored every AT command along with any found parameters, we generate plain-text DB files for input into our testing framework. This logging is crucial for understanding what unknown commands are doing to a phone under test.During our preliminary testing, we discovered commands that reboot, reset, or cause instabilities in the phone. We also inspect the USB configuration files inside these images and provide an estimate of how many images may potentially expose the USB modem interface.In the runtime vulnerability analysis, we first look at 14 Android devices to confirm their exposure of a USB modem interface. As the base of all other Android variants, AOSP (Android Open Source Project) keeps the number of AT commands contained inside the factory images around 70 on average. We extend our inspection to the top 20 AT commands and find the trend to be the same -the most frequent AT commands are standard for Google, a combination of standard and homemade for Samsung, and mainly vendor-specific for LG.AT Command Usage Per Binary. For LG, atd seems to be the sole native daemon, taking care of the most AT commands.Two LG-specific apps also appear to serve some AT commands.To gain deeper insight into how AT commands can affect these systems, we analyzed the flow of AT commands starting from the gadget serial TTY device (usually /dev/ttyGS0) to any native daemons and finally to other devices or system applications. socket stream), receives commands, and either handles them itself or dispatches them to appropriate parts of the system.As a result of previous work (CVE-2016-4030, CVE- 2016-4031, and CVE-2016, Samsung has locked down the exposed AT interface with a command whitelist. We look for property:sys.usb.config triggers in the pre-configuration files and discover that 864 images (55% of the images from which USB.rc files were successfully extracted) contain at least one USB.rc file with triggers for ACM mode. Once the phone is put into download mode using the AT commands in Table 8: A selection of commands that can be used to gain further access into the phone.sung phones we tested, the AT commands put the phone into Odin [48] mode, although they were not able to bypass the device standard firmware authentication mechanism [57,30]. Some commands reboot/shutdown the phone, and we manually inspect security related settings, e.g., USB debugging, after the reboot, but did not find any particular configuration change.We observe that some AT commands result in different behaviors on phones from different vendors. As an example, "AT+CFUN=1,1," although a standard command that is supposed to "reset the device and provide full functionalities" 8 according to the GSM spec [26], causes Samsung phones to reboot and causes LG G4 to become bricked and show "LG G4 factory reset status 2" blue screen error. While we were unable to restore the phone using any of the normal procedures, we were able to successfully un-brick the phone using a combination of "AT%MODEMRESET", which changes the factory reset status from 2 into 5, and "AT%RESTART" commands, which finally reboots the phone into a normal booting environment following a factory reset. We also find an LG-specific command that allows us to change the IMEI, again bypassing the Android layer.One USB debugging enabling command is found in LG phones, together with an AT command to unlock the screen. While Android security has been improving over the years with respect to protecting privacy information, we found quite a few AT commands providing different kinds of information, including IMEI, battery level, phone model, serial number, manufacturer, filesystem partition information, software version, Android version, hardware version, SIM card details, etc., as shown in Table 9. Unlike other Android devices, which rely on sys.usb.config to manage the USB functionality, ASUS ZenPhone 2 has a unique setting to enable the Table 10: Commands specific to the AT proxy mode that allows debugging and tracing inside the modem.hidden modem interface, called AT proxy mode, as shown in Table 6. For example, we found 3 hidden menus on LG phones during our testing, including MiniOS menu, Hidden menu 11 , and MID result menu. With the discovery of the LG G4's AT interface and knowledge of certain AT commands, we developed a proof of concept attack against the phone in order to enable USB debugging without any user interaction. Access to USB debugging and developer options would allow a local attacker connected to USB to install new unsigned applications with high permissions to achieve persistence on a victim's phone. To demonstrate this attack, we combine AT commands to (1) bypass the lock screen (AT%KEYLOCK=0), (2) navigate to the settings menu using touchscreen automation, and (3) allow USB debugging from our attacking machine (AT%USB=adb). Through manual auditing of the LG G4's firmware image in IDA Pro (specifically in atd), we discovered that the AT%PROCCAT and AT%SYSCAT commands are intended to open, read, and send back the contents of a file relative to the /proc and /sys directories respectively. Given that these interfaces are undocumented and proprietary, we believe it to be unlikely that they have received audit from an external source.If an exploitable memory corruption or Use-AfterFree vulnerability were discovered on LG's system daemons, we could dynamically gather Return Oriented Programming (ROP) gadgets by using a call to AT%PROCCAT=[pid]/exe to leak the entire binary image and reveal Address Space Layout Randomization (ASLR) slides using AT%PROCCAT=[pid]/maps to get all of the memory region address ranges. To figure out the exact impact of a command, we need to enable logcat from ADB to inspect the propagation path of the command, and stare at the phone screen during the command runtime looking for Android UI notifications. This diverse functionality is a benefit of Android's mature USB gadget driver, but unfortunately compared to MTP, Mass Storage, and ADB, these USB classes are less understood or even proprietary. Our work has shown that even access to a CDC ACM interface to input AT commands can lead to unintended information loss or act as a starting point for more sophisticated attacks. We also did not find any AT command, which can disable or bypass SELinux.When analyzing the LG G4 phone we discovered that its primary AT distributor daemon possessed the Linux Capabilities CAP SYS ADMIN, CAP DAC OVERRIDE, and CAP CHOWN. Unlike previous work which focused on a single brand/-model, limited the number of AT commands covered, or rediscovered the traditional AT commands for real modems, we provide a systematic study of traditional and Android-specific AT commands in Android ecosystems across different major vendors and phone models.While USB security has been evaluated in traditional computing environments [44,52,53,32], it has received limited attention on mobile computing platforms. Due to OEM vulnerabilities in fastboot implementations, Hay also showed that hidden USB functionalities can be enabled, including modem diagnostics and AT interfaces [31], allowing data exfiltration and system downgrading. at score = 10Â·(map [0,1] (charclass)+ f ile score) A.2 AT Database FilteringWe define String and AtFile as types, var::attr as accessing the attribute attr of var, and the map [x,y] (n) function to clamp n to the range x â‰¤ n â‰¤ y.In practice we observe that it is less common for an AT command to have digits ( [0][1][2][3][4][5][6][7][8][9]) and lower case letters ( [a- z]) in the same command. We increase the confidence of this FP score exponentially based off of the number of lines seen in the file and a constant of our choosing.Finally we sum and weight the charclass and f ile score metrics to create a final at score (a lower score means that it is less likely to be spurious). With less invalid commands matched, our analytics were not skewed and our AT command testing was faster.Due to how the heuristic is implemented, it only has memory of firmware image file score across a single vendor. Effectively, all of the images we have gathered are publicly available with some effort on categorizing and collecting valid URLs for download.Factory/stock firmware is available on the official vendor sites for ASUS, Google, and HTC. The version distribution of our dataset appears to reflect mainstream Android devices that are still in use, e.g., Google Nexus series (4.x and 5.x), LG G series (6.x), and the latest Samsung Galaxy series (7.x Some limitations of our extraction include potentially missing AT commands, images that fail to extract, and missing build.prop files. We increase the confidence of this FP score exponentially based off of the number of lines seen in the file and a constant of our choosing.Finally we sum and weight the charclass and f ile score metrics to create a final at score (a lower score means that it is less likely to be spurious).