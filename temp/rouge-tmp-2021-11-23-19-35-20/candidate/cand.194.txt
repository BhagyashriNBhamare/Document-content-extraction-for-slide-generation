Such mapping tools prove useful in both attack and defense scenarios, such as identifying potentially malicious servers, attesting server configurations, and auditing firewalls by identifying available network connections. Analogously, with such a tool for scanning a car's network, we could (1) discover potentially malicious ECUs inserted through an attacker, (2) attest to the network configuration of ECUs over time, and (3) identify potential ECUs that are vulnerable to a recent type of attack ( §2). Considering new model years and over-the-air update capabilities, the frequency of analyzing an intra-vehicular network will quickly increase in time and cost requirements.A key challenge we face in realizing this vision in practice is the lack of source information in CAN messages. Rather than require physically isolating each ECU, our key insight is to extract message information by re-purposing two observations from prior work:• Identifying message source ( §5): Prior work by Cho et al. [11] state that clock skew is a unique characteristic to a given ECU and thus build an intrusion detection system (IDS) that measures this skew from the timestamps of periodic CAN messages. Contributions and roadmap: In summary, this paper makes the following contributions:• Designing an accurate message source identification algorithm that tracks a message's relative clock offset ( §5); • Engineering a reliable message destination identification method by isolating ECUs with a forced shutdown technique ( §6); • A real implementation that maps five real vehicles and extracted ECUs ( §7) along with two real examples of motivating use cases for mapping ( §2). After defining the automotive network mapping problem and describing typical CAN bus setups ( §3), we highlight the challenges of identifying message information via the CAN protocol and provide an overview of our approach ( §4). One major automotive cybersecurity concern (depicted in Figure 1) is the potential for an attacker to gain access to a physical network and add a new device [26], which could be a malicious ECU installed by an untrusted party or even by a vehicle owner who installs a CAN-enabled device purchased from an untrusted source. Now consider an attacker who aims to target a safety-critical ECU (e.g. engine ECU) as depicted in Figure 3. If gaining direct access to the engine ECU proves infeasible, the attacker could access an ECU that is less critical and potentially has access to remote networks (e.g. telematics ECU). Considering these reasons, we aim to achieve a mapping time of under one hour.Inexpensive: To permit greater access to the mapper, the mapper should consist of relatively inexpensive components and should avoid expensive tools, such as oscilloscopes and logic analyzers. For our mapper to be practical, it must work on many makes and models of vehicles as well as rely on only standard CAN features.Minimally-intrusive and non-destructive: One extreme approach for mapping a vehicle requires physical disassembly, which is a very intrusive process and requires a great deal of access to the target vehicle. Each message is queued by a software task, process or interrupt handler on the ECU, and each ECU will queue a message when the message's associated event occurs.CAN frame format: Each CAN message from an ECU uses its assigned message ID (interchangeably referred to as the ID or the arbitration ID), which determines its priority on the CAN bus and may serve as an identifier for the message's contents. During the ACK slot, the transmitter now becomes a receiver on the bus and all other ECUs in the network that correctly receive a message will simultaneously send a dominant bit on the network. To develop a mapper that will aid in the motivating scenarios of §2, we formulate three required outputs for CANvas:ECU enumeration: The importance of enumerating ECUs is evident in all of our provided scenarios as seen in Table 1; enumeration highlights new or absent ECUs. Using this mapping, we can group the IDs with a common source ECU and complete our enumeration.Message destination identification ( §6): For the continuous network attestation scenario, we want to look for changes in what messages an ECU correctly receives as this could also indicate a potentially malicious reconfiguration. This component plays an important role in the lenient filter identification scenario, where an attacker could shutdown an ECU from an unintended message recipient.We assume that at least one ECU in the network will correctly receive each message in the network. However, to achieve these mapping goals, we encounter two major challenges to determining the source and destination ECUs for CAN messages: (a) CAN lacks identifying source information and (b) CAN implements a broadcast protocol, which naturally implies that all nodes receive all messages. CANvas then performs destination mapping and generates the full map at step 10. After an offline data collection, the source mapper uses the data to produce a mapping of each unique CAN ID to its source ECU and subsequently, by grouping IDs with a shared source, a list of all active source ECUs on the bus. CANvas systematically isolates each ECU, which will most likely cause the vehicle to enter a temporary error state that the user can reset.User capabilities: We assume that the user has access to the OBD-II port of the vehicle and can connect the CANvas mapper directly to the CAN bus with the ability to read and write to the bus. The user should also be able to transition the vehicle's ignition switch between the LOCK, ACC and ON positions as the user will have to reset the vehicle after each iteration to exit the error state.Scope and evasion: We assume that the vehicle does not implement countermeasures that will alter timing of message transmissions, potentially to prevent intruders from identifying transmitting ECUs. Source mapping: With the list of all unique message IDs, the source mapper will extract the timestamped CAN traffic for each ID and determine which IDs share the same source as detailed in §5. Following observations from prior work [11,29] and CAN documentation [2,14], we consider clock skew as a candidate fingerprinting mechanism. We first define the following terms considering two clocks, C 1 and C 2 :• Clock frequency: ered to be synchronized, and two clocks with a nonzero relative clock skew are said to "skew apart," or have an increasing relative offset over time [2]. Specifically, this work uses timestamps of periodicallyreceived message IDs and posit that IDs with the same skew originate from the same ECU.To compute the clock skew of an ID I i over time, Cho et al. [11] perform the following steps: (1) skewf Cho i (N) = kO i kN = O i N(1)As an extension to this work, Sagong et al. [29] note that the skew of Equation 1 varies significantly based on N and use Sa mpl es 0x262 0x4C8 0x521Figure 7: E A transmits IDs 0x570, 0x571 and 0x572 at the same period and E B transmits IDs 0x262, 0x4C8 and 0x521 at different periods. Our analysis and experiments shed light on why these approaches fail-the skew value they compute is perioddependent.As such, we update Equations 1 and 2 w.r.t. period T and batch size N:skewf Cho i (N, T ) = kO i kT N = O i T N(3)skewf Sagong i (N, T ) = N · kO i kT N = O i T(4)To potentially fix this issue, we can attempt a strawman that is not dependent on period or batch size.skewf Straw i (N, T ) = T N · kO i kT N = O i(5)Ideally, accounting for both batch-size and message-period (essentially batch-period, NT ) using Equation 5 should give us a unique value that is common only among IDs from the same ECU. We also find that some I i produce S I i with more deviation than others and produce widely-varying skew values, thus making our straw-man solution an unlikely candidate for source mapping.Observation 2: We need a method of extracting the clock skew invariant that is: (a) independent of the period of I i and (b) robust to noise in the period. To address the issue of noise in the period of I i , p I i , we compute the relative offset between a pair Figure 8: Timeline of two message IDs, I 1 and I 2 , that have periods, p 1 = 7ms and p 2 = 9ms. Observation 3: Compute offset at the hyper-period of I 1 and I 2 , or the least common multiple of their periods.Measuring offset at the hyper-period: To guide our algorithm design for computing ∆O I 1 ,I 2 over time, we first model two periodically-transmitted IDs observed on the CAN bus. To accurately compute the relative offset of these two IDs, O I 1 ,I 2 , we must select a time instant when the expected offset should also be 0: the hyper-period of I 1 and I 2 , or the least common multiple of p 1 and p 2 . Using this approach to revisit the setup described in Figure 7, we correctly conclude that IDs 0x262, 0x4C8 and 0x521 originate from the same ECU.Practical challenges: While the above approach is correct, there are a number of other practical challenges we need to address to ensure accurate mapping:1. Fortunately, with a pairwise approach, we can choose to not attempt a comparison when the hyper-period is large; for example, if we assume that the E src of I 1 also transmits another ID, I 3 , where the hyper-period of I 1 and I 3 is small, we can still determine that I 1 , I 3 ∈ E src . We describe the three CAN error-states and, under what conditions, the ECU will transition:• Error-active: When an error is detected by an ECU in error-active, it will transmit an active error flag, or 6 dominant bits, that destroy the bus traffic. This error occurs when a transmitting ECU reads back each bit it writes; when the actual bit is different, the ECU invokes an error.Since only one ECU is expected to win the bus arbitration as detailed in §2, the authors point out that two winners would potentially cause a bit error. The number of injection attempts needed to cause a single bit error, κ, is defined as the following where I is a confidence attack parameter (high parameter value means higher confidence in attack), σ p v is the jitter deviation of the victim's period, and S bus is the speed of the bus in Kbps:κ = 2 √ 2Iσ p v S bus 124 (6)The authors state that only one of these injections is needed to cause a bit error if setting I = 3 and at most 2 if setting I = 4, given that the period deviation is 0.025ms. Straw-man limitations: Suppose we used the above ap- proach to cause a bus-off in a real vehicle. Since the majority of messages have a period deviation greater than 0.205ms, it is highly unlikely to use this method for isolating an ECU.Observation 5: We need a method of transitioning an ECU into the bus-off state that is reliable and robust even when the period deviates by more than 0.025ms. High-level idea: To map each unique ID to its set of destination ECUs, we break the module into two steps. As such, if we transmit a message and see a continuous stream of the same ID from our transmitter, then we may conclude that the message ID is not received by the isolated ECU.Practical challenges of mapping a real vehicle: Since our approach to destination mapping involves shutting off multiple ECUs at a time, we encounter a couple of challenges in a real vehicle setting: (1) ECUs that auto-recover and (2) ECUs that are persistently active. We attempted to transition all ECUs in the network to the bus-off state by shorting the CAN bus pins, which would effectively cause a transmit error for all ECUs and force them into bus-off. In this situation, we must "hold" the bus open by constantly transmitting false messages from our device to trick the recovering ECU into thinking that the bus is still active.Factors for mapping time: For destination mapping, the run-time is dependent on the number of ECUs and increases with more ECUs. We use a paid subscription to both Toyota and Ford's mechanics' manuals [3,6] for guidance on disassembly of vehicle components. • Synthetic networks: To further validate the capability of our mapper, we perform additional experiments on three real engine ECUs extracted from a '12 Ford Focus, '13 Ford Escape and '14 Ford Escape. Message acceptance filtering: CAN controllers have the option to employ a programmable acceptance filter where a message that is received by the controller can either be sent to the application layer or dropped after the message is received. When the receiving ECU gets behind on processing these messages, it will transmit an overload frame, indicating its acceptance filter allows the injected message ID; if the ID is dropped, then no overload frame will be present.Non-transmitting ECUs: CANvas expects ECUs to transmit their messages periodically, but it is possible for ECUs to only activate under certain conditions or simply read from the network. We discuss other related efforts here.Automotive attacks: There have been a number of efforts at demonstrating vulnerabilities of automotive networks, including work on injecting messages [20], attacking keyless entry systems [8,16,28], and specific components such as TPMS [17,18]. Our work can better inform such attack efforts and defenses by proactively identifying possible attack channels.Intrusion detection for automotive: Given the growing security concerns, related work has also developed intrusion detection and firewall capabilities akin to traditional networks (e.g., [11,19,22,29,31]). This work was also supported in part by the CONIX Research Center, one of six centers in JUMP, a Semiconductor Research Corporation (SRC) program sponsored by DARPA. This work is made available [1] to encourage the community to add richer functionality and use CANvas to further the creation of automotive security tools.