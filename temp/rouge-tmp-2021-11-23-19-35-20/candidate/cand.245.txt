Therefore, a phone that is about to become unattended in a public place should try to prevent this loss by alerting its owner (e.g., playing an alarm sound), in addition to locking its screen.The main challenge for a device locking and loss prevention solution is to make the phone track the user's departure in a contactless way, where the phone senses the user's motion without the user carrying it. Chaperone focuses on capturing a user's departure patterns and addresses the aforementioned challenges by tracking the departure procedure of the device owner across three dimensions (in reference to the smartphone): the motion state of the owner, the intensity of the motion, and the distance of the owner from the device. We conduct 1,345 experiments to demonstrate Chaperone's ability to operate under different conditions (including device orientations and positions, user leaving speeds, distances to nearby stranger, close objects, and concurrent sensing by multiple devices), and cover various real-world scenarios characterized by high-frequency ambient noise, crowded locations, and diverse layouts (including academic venues, restaurants, offices, cars, and transit stations). We release Chaperone as an opensource, standalone Android app, and our collected dataset from both lab and real-world experiments, to help reproduce our findings, and improve acoustic sensing-based device loss prevention solutions. There has been extensive work on performing a variety of acoustic sensing tasks with commodity off-the-shelf smartphones; such tasks include: ranging [13], gesture tracking or recognition [23,30,36,40], object detection [16,27,38], and user authentication [39]. In a loss prevention solution, the detection delay corresponds to the time duration between the device owner leaving, and the solution realizing that the owner is not present near the device, in turn, locking the phone. The local analysis of the acoustic data on the mobile device could be computationally intensive and consume significant battery power. In terms of background noise, active acoustic sensing for smartphones usually uses the highfrequency band up to 24kHz (see §5), and as a result, highfrequency background noise poses a threat. Since the delay of an echo is the round-trip time of sound traveling between the phone and an object (or user), each index of the vector can be mapped to the corresponding distance d according to the following time-of-flight distance measurement formula:d = Mc 2 f s · i,where c is the speed of sound, f s is the sampling rate of the acoustic signal and M is the downsampling rate. We handle these outliers by clustering them based on their relative distance, so that they are merged into a single Input: All m candidate tuples C m = {(s m , h m , l m )} where s is starting distance, h: peak magnitude, l: cluster size; ˆ d: predicted distance ; n history speeds˜vspeeds˜ speeds˜v = {v 0 , v 1 , . . . , v n−1 }; R max : max range; q: base discount Output: Observed distance obs1: function CANDIDATE_SELECTION(C, ˆ d, ˜ v) 2: obs ← −1, p max ← −1, e ← 0 Initialization 3: κ 0 ← getDirection(v n−1 ) 4:for i ← n − 2 to 0 do5: κ ← getDirection(v i ) 6:if κ = κ 0 and κ = 0 then If direction changes 7: e ← e + 1 Add to discount exponent 8:else break for i ← 0 to m − 1 do 10:s i , h i , l i ← C i , r ← q e R max discounted range r 11:if| s i − ˆ d |≤ r or | s i + l i − ˆ d |≤ r then 12:if h i > p max then obs ← s i , p max ← h i return obs candidate. As noted in §4, several environmental factors can limit the detection capabilities in real-world scenarios; see Figure 5, where the user tracking module fails when a distance-only approach is employed with the distance threshold set at 1m. We rely on three classifiers: the motion state classifier determines whether the user is approaching, leaving, or stationary; the activity intensity classifier determines whether the user's activity is intense or moderate; and the user presence classifier determines whether the user is close to the device or far away. = tw ∑ i=t 1 d i /w Estimated distance: d est = tw ∑ i=t 1 ˆ d i|i /wDifference from median:∆d est = d est − median{d t } ∆d est = d est − median{d t|t } Speed Observed speed: v obs = (d tw − d t 1 )/w Est. speed: v est = ( ˆ d tw|tw − ˆ d t 1 |t 1 )/w Numerical avg. speed: ¯ v = tw ∑ i=t 1 ˆ v i|i /w Fluctuation # of direction changes in est. speed Magnitude ¯ m = tw ∑ i=t 1 r ∑ j=d 0 ∆m i, j /wr Hot area rate h = tw ∑ i=t 1 r ∑ j=d 0 1{∆m i, j > θ}/wrRow varianceσ d = tw ∑ i=t 1 (m i,d − µ d ) 2 /w, µ d = tw ∑ i=t 1 m i,d /wStatic object # of static objects changed in m valid observation on the user's motion, and then we can obtain both observed and estimated distances and speeds. To help reproducibility, we also implement a remotemode option, where the smartphone is responsible only for acoustic sensing, and a remote server stores and analyzes the raw acoustic data for user tracking and decision making.For acoustic sensing, we use LibAS [26], an opensource framework for the rapid development of acoustic sensing apps. When acoustic sensing is triggered on a device in silent mode, the media volume is set to high for exclusively sending inaudible acoustic signals. Since silent mode implies that the user is in a quiet environment, Chaperone can adopt vibration or flashing for alerts, instead of a ringtone. In total, eight experimenters (one undergraduate student and one graduate student who have no security background, six graduate students who have security background) simulated the device loss events in the experiments and one observer labeled the events for consistency. Finally, we evaluated real-world conditions with varying factors (e.g., crowd, noise, and physical layout) at eight locations (library, office, restaurant, coffee shop, lounge, bus stop, in-vehicle, and academic venue). We adopt Randomized Search Cross Validation [20] to tune the three hyper-parameters of the Random Forest algorithm: tree size d, minimum sample number for splits n s , and minimum sample number of each leaf n l . For iLock and iLock++, which are model-free, we directly evaluate their performance over each combination.For angle-speed combinations (0 • , fast/normal/slow), (45 • , normal/slow), (90 • , slow), all three algorithms achieved both 100% precision and 100% recall. iLock and iLock++, which are designed to defend against nearby attackers, also perform very well: among the 108 events, both algorithms had two false positives and one false negative for the 75cm user-stranger distance, and one false positive and one false negative for the 100cm user-stranger distance. Figure 10 shows the overall detection performance of the three algorithms over 366 departing activities and 391 idle activities in real-world scenarios. Due to the combination of the environmental factors (signal partially blocked by the furniture), and the user's departure trace (walking in a direction where the signal transmission is weak), iLock and iLock++ can hardly capture the user's movement as they highly rely on distance estimation. We record six false positives (including two in actual departure activities but where Chaperone sent alerts before t d ) for situations where the user reclined on the couch while the smartphone was on the coffee table. We note four false positives for Chaperone (the precision is still 92%) when the phone was placed between a stranger and the user, where the stranger-phone distance was very close to the user-phone distance. However, among the eight locations, Chaperone has lower precision scores in the office and lounge scenarios, apparently, because users have a large movement range in these scenarios, and some specific activities (e.g., document fetching) are similar to the preset departure pattern of Chaperone. In the experiments, we tuned the threshold and made no other changes in the noise detection sub-module to handle concurrent sensing.We follow the basic setting used in the nearby stranger experiments: two Chaperone-enabled phones (the Pixel and Pixel 3, using the same classifiers) are placed in parallel on the desk and two experimenters stand in front of the two phones and leave alternatively. Finally, we asked participants regarding their preferred alert mechanisms for different environments based on perceived effectiveness and annoyance.To achieve these objectives we conducted a three-part study: a semi-structured interview on smartphone loss experiences, a hands-on experience of Chaperone, and a semi-structured interview for their feedback on Chaperone. On the Nexus 5x (1.8GHz hexacore CPU, 2015), processing takes 60ms, while on the Pixel 3 (2.5+1.6GHz octa-core CPU, 2018), it takes only 35ms. Although Chaperone's battery consumption during active acoustic sensing is significant, it is still acceptable for daily use with help of the trigger module -low-frequency sensing with motion and location sensors can help avoid unnecessary acoustic sensing and save battery. We conduct a user study (n = 17) to investigate participants' smartphone loss experiences, collect feedback on using Chaperone, and study different alert methods. In addition, the solution should satisfy the following requirements: (1) detect device loss in real-time, i.e., the device must react before its owner has left the premise; (2) work on common off-the-shelf smartphones without requiring additional hardware or OS root privileges; (3) perform robustly across common device loss scenarios, e.g., noisy and crowded public places, offices, and cars; and (4) have sufficiently low error rates for everyday device usage.Given that smartphones are equipped with at least a pair of microphone and speaker, they are capable of active acoustic sensing. It consists of an acoustic signal generator, audio manager (controlling the speaker and the microphone), and a signal processor.The signal generator produces an inaudible acoustic signal based on sampling rate, frequency, length, and signal type, Figure 4: Distance estimation procedure: (a) the bright part represents the captured echoes from nearby objects and people; (b) after excluding echoes from static objects, the user's movement from time 0-2.5s is highlighted, but we can still observe the echo from nearby people, e.g., 85cm away from the device during the time period 2.5-5s; (c) by using our candidate selection algorithm, we can track the user's movement and predict the movement when there is no valid observation (e.g., at time 3s). In each experiment, the smartphone(s) are placed in front of the experimenter with 0 degree orientation angle (i.e., vertical) and the experimenter moves at a normal speed. Using Chaperone's candidate selection strategy, iLock++ offers higher precision, especially in restaurant and coffee shop scenarios where environmental factors introduced more noise; iLock++ also improved in detecting more departure activities in office and in-vehicle scenarios. As Chaperone relies on acoustic sensing, it may be affected by the following scenarios: 1) The sound transmission is partially blocked by an object very close to the speaker and microphone of a smartphone; 2) Multiple nearby Chaperoneenabled smartphones are conducting acoustic sensing concurrently. While it is possible to leverage specialized hardware (e.g., Surround-See [34]), a solution that works on common off-the-shelf smartphones is more likely to be adopted. Even when the user departed at a fast speed and the phone orientation angle was 90 • , the precision and the recall of Chaperone are 100% and 89%, respectively-a strong indication of robustness against different phone orientation angles and departure speeds. However, no past approach has explored the feasibility of active acoustic sensing for smartphone locking and loss prevention, considering diverse background noise, crowd, and location layout conditions. To start with, the smartphone is placed stationary on a surface intentionally (e.g., the owner puts it on a table), or unintentionally (e.g., the phone slips from the owner's pocket). There was high-frequency noise from the entrance door, dragging of chairs, and dining carts in the restaurant; an espresso machine also sometimes produced high-pitched noise in the coffee shops. This strategy helps reduce false positives by a distance-only approach.As a reaction to a potential smartphone loss, Chaperone locks the phone immediately and triggers an appropriate alert method using, e.g., a ringtone, vibration, notification sound, or screen flashing. Device tracking services (e.g., Google's "Find My Device") enable the device owner to secure or recover a lost device, but they can be easily circumvented with physical access (e.g., turn on airplane mode). Since a significant number of smartphone losses happen during ride hailing [28], we specifically target this scenario, which includes several challenges: the car space is much smaller than other scenarios, and the leaving procedure is very short-the user opens the car door, steps out, and closes the door. We collected data at a workshop (a lecture room with over 50 people), and a conference keynote (a large hall with over 900 people). We conduct a user study (n = 17) to investigate people's smartphone loss experiences, collect feedback on using Chaperone, and study user perceptions of different alert methods for smartphone loss prevention. Most stolen phones are never recoverede.g., 68% US users failed to retrieve their phones in 2014 [11]. A high-frequency noise source may emit noise for a short period of time, but it is likely to happen more often at certain locations (e.g., a restaurant). Figure 5b shows that when the user is performing activities, such as typing or standing up, the movement of different body parts leads to the average differential magnitude close to the phone being dramatically larger (called a "hot area") than the ambient magnitude. However, the common noise in the car did not affect Chaperone's user tracking (due to the incorporation of noise detection, candidate selection algorithms and three user state classifiers). Active acoustic sensing of Chaperone is triggered only when the Trigger module detects a potentially vulnerable context (e.g., at a bus stop). In addition, the high-frequency noise sometimes interfered with the detection of iLock and iLock++ and produced false positives. We remove echoes from static objects by using the differential magnitude vector ∆m t =| m t − m t−1 |,t ∈ N * , which is the absolute difference between the current and the previous magnitude vectors. The experimenter was alone in a narrow office cubicle and performing activities, such as using the keyboard and monitor, and standing up to fetch documents from a shelf. Location diversity implies different levels of background noise, nearby moving people, and obstacles in the physical layout of the location. Similarly, while an accessory (e.g., a smartwatch) connected to the smartphone can detect smartphone loss, a standalone solution relieves users from carrying an additional device. Besides, these activities may result in some fluctuations in the speed and distance estimation, which can be observed in frequent changes of the direction.The magnitude vector also provides information about user presence; see Figure 5a. We conducted the close-object experiments in an office, and placed the Pixel (8.5mm thick) on a desk with a laptop on its left side and two books on its right (within 50cm to the phone). For the (90 • , fast) combination, the recall score of iLock drops to only 29%, and iLock++'s is about 35% with successfully tracking two more departing activities based on the improved tracking strategy. The three algorithms shared a common false negative, caused by the simultaneous movements from both the user and a passer-by. Intuitively, if an object that is wider and thicker than the smartphone is placed very close to the bottom of the smartphone, the sound transmission will at least be partially blocked. Bus stop. Nevertheless, there is no significant change in detection performance brought by concurrent sensing.We added another Pixel (and an experimenter) to conduct concurrent sensing experiments with three devices by placing them in parallel, 75cm apart, with the Pixel 3 in the middle. In addition, we evaluated the effects of other interference factors by collecting 75 departure events in close-object experiments and 135 departure events in concurrent sensing experiments.Each data collection experiment consists of two parts. The trigger module invokes active acoustic sensing only when the device is not in use (i.e., idle), not on the user's body, and in a potentially untrusted or public environment. Since the Kalman filter itself predicts the current distance and speed at each round, we incorporate the a priori estimate of distancê d t|t−1 (i.e., "predicted distance") from the Kalman filter to calculate the possible range for the next distance. For the first frame (at t = 1), we choose the candidate closest to the phone, assuming that the user is the closest, and then feed the corresponding distance into