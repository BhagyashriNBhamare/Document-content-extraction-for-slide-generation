Cloud backends provide essential features to the mobile app ecosystem, such as content delivery, ad networks, ana-lytics, and more. Our preliminary study of the top 5,000 Google Play Store free apps identified 983 instances of N-day and 655 instances of 0-day vulnerabilities spanning across the software layers (OS, software services, communication, and web apps) of cloud backends. For an input APK, SkyWalker extracts an enumeration of backend URLs, uses remote vetting techniques to identify software vulnerabilities and responsible parties, and reports mitigation strategies to the app developer. These features are supported by multiple layers of software and multiple parties including content delivery networks (CDNs), hosting providers, and cloud providers who offer virtual/physical hardware, provisioned operating systems, and managed platforms. Additional cases [4] involving the exposure of 43TB of enterprise customer names, email addresses, phone numbers, PIN reset tokens, device information, and password lengths was due to insecure mobile backends and not the developer's mobile app code.Even for security-conscious developers, it is not clear what backends their mobile app will interact with because of third-party libraries. Further, identifying vulnerable software layers and the responsible party can expedite remediation and therefore lower the risk of exposure.To deal with the complexities in cloud infrastructure, the research community surveyed [5] and proposed several taxonomies [6], ontologies [7], assessment models [8], and threat classifications [9]. Finally, the study should offer practical steps to guide and inform app developers on the security of their mobile backends.To this end, this paper presents the design and implementation of SkyWalker, an analysis pipeline to study mobile backends. Lastly, we offer the SkyWalker analysis pipeline as a free public web-service to help developers identify what backends their mobile apps interact with, the security state of the backends, and recommendations to address any detected issues.Our empirical study found 983 N-day instances of 52 vulnerabilities affecting hypervisors, operating systems, databases, mail servers, DNS servers, web servers, scripting language interpreters, and others. SkyWalker automatically identified 13 unique backends from this app's APK (shown in Table 1) and mapped them to the modules they were found in, i.e., library backends versus developer backends. SkyWalker found that the game content backend interface is vulnerable to SQLi for some parameters passed by the mobile app, which is due to the AS not properly sanitizing the input.The developer must now remediate or mitigate these risks, but each backend layer may be operated by different entities that provide hardware and software as a service. Ideally, the developer could report those vulnerabilities to the platform through a bug bounty program or migrate their app to backends that are not vulnerable.This manual assessment procedure is very involved and requires extensive security domain knowledge, which many app developers may not have. Instead, SkyWalker gives all mobile app developers the ability to identify the backends invoked by their app, assess their software layers, and suggest remediation strategies to improve the security for their mobile app backends. • Unknown (B ukn ) refers to backends that ownership could not be established with high confidence.In our model, there are two primary stakeholders, the app developers (D) and the cloud service providers (SP). Table 2: Backend labels (first-party -B 1st , third-party B 3rd , and hybrid -B hyb ) and cloud layers (hardware -HW , operating system -OS, software services -SS, application software -AS, and communication services -CS) mapping to stakeholders (developers -, service providers -, and shared -) • Block (b) incoming internet traffic to exposed services. Some software versions are affected by multiple CVEs, in this case, we do not count every CVE as an instance. This work looks at three classes of 0-Day vulnerabilities, SQLi, XSS, and XXE and counts each instance per API interface endpoint on the mobile backend. Each phase provides input to the next phase, starting from an input app APK to the final vulnerability/mitigation report. OSSPolice [22] provides a more comprehensive list, including native libraries used by the mobile app, but our binary analysis technique only instruments Java code, therefore, we limit the third-party SDK identification to LibScout.To perform the labeling we generate a tuple for each extracted backend B that contains the effective-second level domain d, IP address ip, a boolean flag lib indicating if the backend belongs to an SDK library, and the developer or vendor name v. Input: β = List of backend tuple B = {d, ip, lib, v} Output: β = Ownership labeled backend list SDK: List of backend domains found in the SDK libraries; CP: List of cloud and hosting providers (domains, net prefix, and ASNs); Colo: List of collocation providers (domains, net prefix, and ASNs);for ∀B ∈ β do if B.lib ∨ B.d ∈ SDK then // Backend from Java lib B.label ← "third-party"; continue end if owner(B.d) = v ∧ owner(B.d) / ∈ CP then // Backend domain not owned by developer or CP B.label ← "third-party"; continue end if B.ip ∈ CP then // Backend IP hosted by cloud provider B.label ← "hybrid"; continue end if B.ip ∈ Colo then// Backend IP hosted by collocation center B.label ← "first-party"; continue end B.label ← "unknown"; end assigns "third-party" label if lib's value is true or the backend domain belongs to the list of SDK backends.If none of the previous statements are true about the domain, then SkyWalker checks the IP membership against the CP and Colo list. Service discovery identifies internet-facing services on backends and fingerprinting identifies the software type, version, Table 3: A list of third-party SDKs extracted by LibScout from the top 5,000 apps, which is used to curate third-party backends. To be efficient, SkyWalker uses the list of ports identified in the TCP SYN scan to conduct a TCP connect scan (SYN-SYN/ACK-ACK) i.e., establish a complete connection. The NASL results are considered if they have 90% confidence level or higher for OS detection, which provides high accuracy for vulnerability matching. If the parser is vulnerable to XXE, SkyWalker will log an HTTP request from the backend under analysis, which indicates the interface is vulnerable. We use an Amazon Web Service (AWS) Elastic Compute (EC2)instance with a reserved IP address to conduct the fingerprinting and run a web server with information about our study along with an email address for backend hosts to contact us if they want to opt-out. For our backend labeling implementation, we relied on Team Cymru IP-to-ASN [29], MaxMind Geolocation [23], Alexa ranking [30], ipcat list [20], and Domaintools WHOIS [31] with custom code written in Python (480 lines of code). 332 15 49 55 71 190 365 653 501 354 1,873 Business 145 5 22 10 37 74 93 258 150 113 614 Entertainment 1,177 36 108 158 170 472 746 913 942 783 3,384 Games 1,283 34 81 147 106 368 290 804 651 444 2,189 Lifestyle 363 20 50 79 72 221 262 665 311 largest is first-party with 2,492 backends followed by thirdparty with 1,089 backends. Overall, the top three OS vulnerabilities listed in Table 6 affect 197 mobile apps.We found the MS15-034 vulnerability affecting hybrid backends (B hyb ) that run on Amazon AWS, Akamai, OVH, Go Daddy, Digital Ocean, and other smaller hosting providers. App developers who run and maintain their own backends (B 1st ) have to be mindful of these bugs, which in some cases require provisioning new backends with newer OSes causing incompatibilities with existing services (SS) and applications (AS). For example: 1 XXE and 3 XSS vulnerabilities in the top 132 mobile apps; 4 SQLi, 10 XSS, and 5 XXE vulnerabilities in the next 131 mobile apps (though still representing over 50M+ installs each). The mobile apps using these vulnerable backends do not use the SSH service and to remediate one can turn off, patch, or block the incoming internet traffic to it.Those backends which only use HTTP expose users to eavesdropping and MITM attacks because it does not offer integrity or confidentiality. We manually inspected the request messages sent from 3,253 apps that use HTTP and found personally identifiable information (PII) such as name, gender, birth year, user ID, password, username, and country. For example, if a mobile app uses app slicing [3] or downloads additional libraries from the mobile backend, an attacker who compromises the backend can modify the content and attain code execution on the mobile device. In some cases, the different backends may not be fully synchronized in terms of the latest software patches for OS, SS, AS, and CS layers, which results in a vulnerable backend affecting only a segment of users for a particular mobile app. Directly quantifying the impact of each vulnerability is an involved task and depends on many variables such as the severity of the vulnerability, the mobile app to backend usage, the adversary capability, and other nuance factors (number of backends per app, network distribution, and geographical distribution). Furthermore, a recent report [53] also pointed out that the number of vulnerabilities in web apps increased in 2018 and that support for PHP version 5.x and 7.x will end in 2019, which means we can anticipate more unpatched and exposed backends in the future. The hybrid backends are hosted on Akamai's EdgeComputing [36] and run a custom web app to serve the mobile app. The t.appsflyer.com backend is a telemetry endpoint for the ad network and the api.appsflyer.com backend authenticates and associates the app with its profile.Takeaway. Third, vulnerabilities can exist (and be scanned for) in any software layer of the cloud and API interface on the web app, which makes them challenging to identify and fix. The appnext platform is used by 6 mobile apps from the top 5,000 free apps. The infrastructures run Microsoft Windows Server 2008 R2 for the OS, Microsoft-IIS/7.5 for its web server (SS), and the CS uses HTTPS. This mobile platform collects sensitive information about user behavior, including PII and device information. For example: if the hybrid backend is using a cloud provider's platform offering, developers should report and/or migrate their backend if the vulnerabilities are found in HW , OS, SS and upgrade or patch if the vulnerabilities CS or AS related, respectively. Second, developers should dedicate personnel to manage and maintain their backends including the routine maintenance of OS, SS and CS, and timely fixes of known vulnerabilities affecting their cloud backends and mobile apps using patching tools [55]- [57]. Finally, developers should utilize defense tools like web app firewalls (WAF), DDoS mitigation, and crawler/scanner blockers to protect from internet scanners, DDoS threats, and web app attacks (SQLi, authentication bypass, etc.). Our measurements followed the best practices used in previous work using the following approach:• Good Internet Citizenship: Similar to the work of Li et al. [58], we provided an opt-out page for our scanner IP that gives targets an option to be removed from the study. Singh et al. [66] presented a survey to identify common issues reported in third-party cloud services and summarize the work from the architecture framework, service and deployment, and cloud technologies perspective.Our work looks at "in-the-wild" deployment of cloud services from the OS, SS, AS, and CS perspectives to empirically study and uncover common issues in mobile backends.Measurement Studies. Zuo et al. [12] performed an assessment of mobile app backend services by investigating the cloud offerings of Google, Amazon, and Microsoft.Our work provides a wider analysis by going beyond just the third-party service backends and by examining a diverse set of cloud-based backends.