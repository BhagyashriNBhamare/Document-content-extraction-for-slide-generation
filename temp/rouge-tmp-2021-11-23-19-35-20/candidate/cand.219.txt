We show an untrusted web iframe/popup inside WebView becomes dangerous that it can launch these attacks to open holes on existing defense solutions, and obtain risky privileges and abilities, such as breaking web messaging integrity, stealthily accessing sensitive mobile functionalities, and performing phishing attacks. In past years, in regular browsers, their behaviors have been well studied, and a variety of mature iframe/popup protection solutions (e.g., Same Origin Policy (SOP) [6], HTML5 iframe sandbox [4], and navigation policies [11]) have been deployed.Inconsistencies Between Browsers and WebView. We show through these attacks, remote adversaries (e.g., web or network attackers on iframes/popups) can obtain several unexpected and risky privileges and abilities: 1) Origin-Hiding: hiding the origin when• breaking the integrity of web messaging (i.e., postMessage) [8], which allows the communication between mutually distrusted web frames; and • secretly accessing web-mobile bridges [21], which link the web layer with the mobile or native layer (e.g., Java for Android) ( Figure 1); Existing work has shown that postMessage's message receivers [44,47] and web-mobile bridges [21,49,53] often carry sensitive functionalities. We find that these solutions are ineffective to defend against the above attacks: Figure 1: WebView Programming Features 1) For origin-hiding attacks, existing defense solutions for postMessage [11,44,47,52] and web-mobile bridges [18,21,38,45,49] usually provide security enforcement relying on origin validation. Several special sensitive categories of apps are affected including leading password management apps (such as dashlane, lastpass, and 1password), and popular banking apps (such as U.S. bank, Huntington bank, and Chime mobile bank). By combining a couple of DCV attacks, untrusted iframes/popups can still launch phishing attacks ( Figure 5-d). • Navigation policies: As studied in existing work [11], in regular browsers, the main frame is often exempt from strict navigation policies, which means any sub-frame can directly navigate the main frame by using "<a>" or "window.open()". It manages multiple WUIs with a rendering queue, and only rendering the foremost WUI to users.Third, the manners of initializing web content are different. Compared to regular browsers, which allow users to manually type the address of a website, WebView initializes web content through programming APIs (Figure 1), including• loadUrl(URL/file/JS): loading content in the main frame;• loadData(HTML, ...): loading code with the "null" origin;• loadDataWithBaseURL(origin,HTML,...): loading HTML code with a specified origin. Generally, the bridges include 1) event handlers, which let mobile code handle web events that occur inside WebView; and 2) JavaScript bridges, which can allow JavaScript code to directly access mobile methods.Furthermore, as shown in Table 2, several programming features can impact iframe/popup behaviors. In our threat model, we assume the native or mobile code (e.g., Java code), and the main frame loaded in its WebView are secure and trusted.The main frame usually loads web content from the first-party benign domains (e.g., developer.com). Our empirical study on a set of popular hybrid apps and mobile websites shows iframes/popups are frequently used to load third-party content, especially third-party advertising and tracking content. Thus, attackers obtain chances to inject malicious code and launch attacks.Furthermore, as discussed in Section 2.1, considering the security of the popup behavior is one of our research objectives, we assume the popup-creation ability of an iframe/popup is enabled in its sandbox attribute. For example, the invocationWebView.loadurl('file:///android _ asset/index.html')can load a local file with the origin "file://", while WebView.loadData() and WebView.loadDataWithBaseURL() may create a main frame to load web data with the "null" origin.However, these common origins are not unique for the main frame, and may be reproduced by untrusted iframes/popups in their inside sub-frames for launching attacks. As discussed in Section 1, WebView's UI design causes security risks that untrusted iframes/popups may perform phishing attacks, if they have the abilities of 1) manipulating the rendering order of multiple WUIs; 2) navigating the main frame. This is mainly because the event handler onCreateWindow() cannot distinguish between benign and untrusted requests, due to its design flaws (Section 3.6). Due to the lack of URL indicators (e.g., the address bar), the attack is stealthier and may be hardly noticed by users.1 // Using HTML Code 2 <a href="https://attacker.com" target=" _ top" ... 3 // Or Calling JavaScript code 4 window.open("https://attacker.com", _ top, ... Even when the navigation capability is disabled by iframe sandbox (which prevents the above traditional navigationbased attack directly), it is still possible for untrusted iframes/popups to launch privilege escalation attacks and obtain the ability of performing navigation attacks. More importantly, DCV attacks are more powerful that attackers may obtain abilities to not only access web-mobile bridges, but also directly leverage critical web features.Furthermore, different from existing MITM attacks on a sub-frame inside WebView, DCV attacks cannot be prevented by existing web protections (e.g., SOP). For example, as shown in Figure 5, to trigger WebView inside the Facebook Messenger app, the analysis tools need to automatically log in and open a URL link.We propose a novel static detection tool, DCV-Hunter, that utilizes program analysis to automatically vet apps. For example, when an event handler class that contains the implementation of event handlers is configured through the API "setWebChromeClient(...)", DCV-Hunter can check the points-to information of the API's parameter, and retrieve the parameter's actual class name.However, points-to analysis does not scale well, especially when the target app is complex. For example, as shown in Figure 5, in Facebook Messenger, when a link is clicked, an Intent message that includes the link is sent out to an activity (Andrioid UI) to start WebView and show that link. On the other hand, if a link uses HTTPS, it is difficult to determine if the link is third-party, considering the main frame does not have an explicit domain (i.e., the "null" To mitigate the problem (i.e., determine the first-party URLs), we leverage several heuristics: 1) inside the target app, WebView class name and its internal package names are usually related with developers' website. However, after the web pages are fully loaded, these apps run extra JavaScript code through the API "WebView.evaluateJavascript()" to created and embedded new iframes/popups for loading ads content, which introduces security risks.Furthermore, we find the events and news apps are more likely to suffer from WUI redressing attacks. However, as described in Section 3.6, due to the design flaws of the event handler system, such a WUI management strategy is also exposed to untrusted iframes/popups, and cause security issues.Traditional and privileged navigation attacks impact more apps than other DCV attacks. These apps are collected by filtering the DCV-Hunter analysis results (by checking if there is a path or flow from WebView's real-time URLs (such as the API "WebView.getUrl()" and the second parameter of the event handler "onPageFinished(view, url)") to UI components' updating APIs such as "TextView.setText()"). We find that the home-brewed address bars are ineffective to prevent DCV attacks, for two main reasons: limited address bar lengths, and implementation errors.Limited Address Bar Lengths. As Figure 5-c shows, this address bar can effectively mitigate a DCV attack, such as the WUI overlap attack, since the address bar can show the origin of the fake web page in real time. The fake URL may still spoof users.Moreover, in these apps, our analysis finds a race condition flaw, which can be utilized to show fake web content in WebView, while still presenting the benign URL (e.g., ebay.com) in the address bar ( Figure 5-d). For example, many WebView instances prefer using the default configuration (e.g., disabling popupcreation), and suffer from privileged navigation attacks.The traditional navigation based attack causes more serious consequences in the context of WebView. Nearby smartphone users may use this WiFi.If these users open vulnerable apps (e.g.,Facebook and skype) and click web links, apps' WebView may load these links. Our implementation is mainly done by instrumenting the WebView library, without modifying the source code of Android frameworks. We manually analyze a set of apps in these categories, and find these categories of apps use WebView more often to load third-party untrusted content in iframes/popups. Iframes/popups are frequently used in web apps, for example, to view files in various formats (e.g., images, videos and PDFs), or load third-party untrusted web content (e.g., ads). Then, DCV-Hunter separately reconstructs each WebView instance's own context, which includes 1) the URL or HTML code to be loaded; 2) settings (e.g., the enablement of popup creation); 3) implementation of event handlers (e.g., "onCreateWindow()" and "onCloseWindow()"). Up to now, several practical protection solutions were designed and deployed in regular browsers:• Same origin policy (SOP): SOP isolates web frames whose origins are different. This is mainly because that these protections work by monitoring exceptional Android UI state changes between different apps, while the WUI state change occurs within an app during attacks. On the other hand, existing dynamic analysis tools (e.g., [53]) have high false negatives, as it is very difficult to trigger a WebView instance at runtime. This information includes the links of developers' home page, email and "privacy policy". Up to now, the potentially impacted apps have been downloaded more than 19.5 Billion times in total. • The U.S., Huntington and Chime Mobile Bank apps: These bank apps provide WebView to load content from their websites. To avoid potential conflicts, we create an event handler wrapper, which first shows the origin information, and then calls the essential event handler registered by developers.To monitor the main-frame navigation, the event handler "shouldOverrideUrlLoading()" is leveraged. As a result, sensitive information (e.g., GPS location) may be stolen, and important hardware (e.g., microphone) may be unauthorizedly accessed.2) WebView UI Redressing: performing phishing attacks by overlapping the foremost benign WUI with an untrusted WUI; 3) (Privileged) Main-Frame Navigation: freely redirecting the main frame to a fake website. As a result, untrusted iframes/popups obtain the ability of performing phishing attacks by simply triggering a popupcreation event, and letting the created WUI load fake web content and overlap the benign WUI. Then, we open Chrome in PC to inject code to target WebView instances. We also manually verify that many high-profile apps are vulnerable (a list of video demos of our attacks can be found online [2]), including Facebook, Instagram, Facebook Messenger, Google News, Skype, Uber, Yelp, WeChat, Kayak, ESPN, McDonald's, Kakao Talk, and Samsung Mobile Print. The key observation behind the idea is that based on the specification of the event handler [9], when untrusted iframes/popups are opened or created, the event handler is triggered, and should return false (Please note returning true is usually used for denying the link or other purposes [53]). However, a nested sub-frame with a "null" origin can still be generated by using the data scheme URL (e.g., <iframe src="data://..."), which is frequently used to load simple HTML code (such as images) in the web platform. In this section, we present two example apps (Skype and Kayak) in detail, and also briefly discuss other examples listed in Table 6. • Uber: Uber's WebView can be started to show "Terms and Conditions" from its own website by sequentially clicking the buttons "menu", "legal" and "terms&conditions". Note that different from WebView settings and event handlers, which are often class instances, the URL source may have several different formats, such as 1) HTML code or URL string; 2) Intent messages (inter-component communication in Android). Up to now, a number of them (e.g., the Android and Facebook security teams) have confirmed our findings.DCV Mitigation. The user clicks one of the searching results (Figure 12-a), such as the AA flight, and then clicks the "View" button to get more details (Figure 12-b). Untrusted iframes/popups may still use the new WUI to consume the resources (such as CPU and memory) of the victim devices in background. In this paper, we mainly focus on the hybrid app whose WebView contains an untrusted sub-frame. Listing 4: Exploit Code of the WUI overlap attack and the privileged navigation attack We note that the key API name "addView" also appears in existing work on Android UI redressing attacks such as [35]. If the loaded web content embeds iframes/popups using unsafe network channels (e.g., HTTP), attackers may inject malicious code into the iframes/popups and launch attacks. For example, in the Facebook Mobile Browser library, which suffers from the WUI overlap attack, attackers may open a WUI to load fake content, and then immediately update the overlapped benign WUI in background. In practice, the privileged navigation attack can be easily launched by using the exploit code shown in Listing 4. However, if the web frame's origin is "null", DCV-Hunter checks the web frame tree to get the real frame who create the "null" frame. But considering iframe sandbox is hardly used in practice, the attack is still prevalent and has negative security impacts in real-world hybrid apps. NoFrak extends SOP to the mobile layer of a third-party development framework, while Draco implements the access control in WebView. Unlike existing touch hijacking in WebView [31], DCV attacks do not need to control the mobile code, and craft the placement of multiple WebView components in Activity layout XML.In addition, DCVs can be leveraged to boost other attacks. More than that, it can also be added to an existing view group. • Facebook Mobile Browser, Facebook, Instagram, and Facebook Messenger: The Facebook Mobile Browser library is frequently used in Android apps, such as Facebook, Instagram, and Facebook Messenger. Inside WebView, the main frame contains an iframe for isolatedly loading untrusted third-party tracking content ( Figure 4). Finally, if there is a flow between above source and sink, the event handler class should be a part of the context of the corresponding 