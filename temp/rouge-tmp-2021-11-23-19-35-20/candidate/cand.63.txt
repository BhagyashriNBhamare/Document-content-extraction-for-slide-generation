[12], [13], [14] Table 1: Different subsets of SOP rules.that most researches are familiar with many edge cases in SOP-DOM, especially those relating to attacks and countermeasures, it is likely that some of those edge cases will not be covered in this paper. For instance, the term "authority" used in RFC 6454 [18] may not be sufficient any more if we compare the power of SVG images [19] with the following quote from RFC 6454: "an image is passive content and, therefore, carries no authority, meaning the image has no access to the objects and resources available to its origin". We also apply it to CSS code by interpreting the style changes imposed by CSS code as write access on certain DOM elements.We define "comprehensive" by meaning the coverage of all interesting edge cases. We also do not restrict the test set to full DOM read or write access (which easily could have been automated to cover more test cases) but instead, also concentrate on the more interesting cases of partial read and write access.Our tests thus cover only a representative sample of SOP-DOM, but this sample was chosen to cover each known edge case of SOP-DOM. We show the applicability of our test methodology for SOP implementations in current web browsers by providing a testbed at www.your-sop.com, where proof-of-concept HTML, JavaScript, and CSS code is given for each test case. We make the following contributions:We systematically test edge cases of the SOP that have not been previously documented like the influence of the embedding element, and the CORS and sandbox attributes.We provide a testbed where the SOP implementation of a browser can be automatically tested and visualized.We used this testbed to extensively evaluate our model in 544 test cases on 10 modern browsers.More than 23% of the test cases revealed different SOP-DOM access rights implemented in at least one of the tested browsers. Our ABAC model provides a systematic way to describe these differences.We prove that a better understanding of SOP-DOM is useful by describing a novel CSS-based login oracle attack for IE and Edge, which we found using the ABAC rules for cross-origin access to CSS.We critically discuss the applicability of standard access control models like DAC, RBAC, and ABAC to SOP-DOM. The <script> element will then be parsed and the (second) alert function will be executed.1 <html><head><title>a.html</title></head> 2 <body><iframe src="b.html" /> 3 <script>alert(document.location)</script> 4 </body></html>Listing 1: Code of http://a.org/a.htmlThe two alert pop-up windows, triggered by the two script elements, will display different URLs because they are acting in different DOMs. It works as follows: a) in a preflight request, 3 the browser sends an origin header (Origin: http://a.com) to the target web service requesting CORS privileges. 4 Although CORS is designed to relax the Same-Origin Policy (SOP) in a secure manner, there are many cross-origin resources used in the web (e.g., scripts, stylesheets, images, iFrames) that can be loaded without CORS and without XMLHttpRequest. However, in HTML5 some elements (e.g., <img>) may have crossorigin attributes which invoke CORS and subsequently modify the SOP access controls.1 <html><head><title>b.html</title></head> 2 <body><script>alert(document.location)</ script> 3 </body></html> The Same-Origin Policy for DOM Access (SOP-DOM) controls the access of a subject -typically JavaScript code -to a web object (e.g., an HTML form). By systematically analyzing the provided list of the W3C [20] and the WHATWG [21], we picked the representative HTML elements <script>, <img>, <canvas>, <link>, <iframe>, <object >, <embed>, and <link>. contentDocument; 6 HD2ED=ED.getElementById("ID2"); 7 read_success = (HD2ED.textContent == "Text in ED"); 8 </script> 9 <element id="ID1">Text in HD</element> 10 <EE id="EE" src="ED.org/ED.mime"></EE> 11 </body> 12 </html> Listing 3: Host document (HD) verifying full read access.1 <html> 2 <head>ED from ED.org</head> 3 <body> 4 <ED><element id="ID2">Text in ED</element ></ED> 5 <script> 6 var ED2HD; 7 ED2HD=parent.getElementById("ID1"); 8 read_success = (ED2HD.textContent == " Text in HD"); 9 </script> 10 </body> 11 </html> Listing 4: Embedded Document (ED) for verifying full read access.Partial Access. In addition, the HTTP response header Use-Credentials is once set for each test to (1.) The immense number of combinations lead to a significant number of test cases if CORS is supported.Each test loads an external resource (ED), first from the same domain (your-sop.com), and then from a different one (other-domain.org). This behavior holds for both the same-origin and cross-origin case.If we use <canvas> as the embedding element EE 5 , we can get read access to pixels in JPG, PNG and SVG images if loaded from the same origin. It is clear that we cannot change the content of the external file (write), but we can overwrite functions defined in this external file, and thus change the functionality of the loaded code. For <iframe> (without sandox attribute) we have full read/write access in both directions in the same-origin case, and partial read/write access in the cross-origin case.The cross-origin case from ED (subject) to HD (object) is of special interest; we have partial read/write access. Similar results hold for the other direction (subject HD to object ED) in the cross origin case. However, a complete separation between two HTML documents is often not possible; for example, to allow UI redressing countermeasures with JavaScript frame-busters [22]. In contrast to the other seven browser tests that allow partial read access with the help CORS from HD to ED 8 http://www.your-sop.com/stats.php cross-origin, FF, IE, and Edge do not allow read access in the following CORS cases of <canvas> with SVG and PNG: Access-Control-Allow-Origin : your-sop.com (ED sets the domain of HD) and Use-Credentials: true. CORS thus shows that a relatively new and complex technology leads to different interpretations of "well-known" web concepts like SOP.Similarly to Chromium's testbed that have been applied to other browsers to find bugs, our testbed could be used and extended by browser vendors and security researchers to identify browser differences leading to exploits. This allows us to build a novel login oracle:Suppose a webserver delivers different CSS files, depending on whether the user is logged in or not.The attacker's website consists of the EE <link> loading the victim's CSS code (ED). We only covered <svg> as an ED which directly embeds the JavaScript code for testing read/write access. We excluded pseudo protocols (e.g., about:, chrome:) and Data and JavaScript-URIs from our tests, because in a (possibly outdated) overview, Zalewski [28] already pointed out that there are different Web Origin assignments in different browser implementations. Singh et al. [7] analyzed in-coherencies in web browser access control policies by showing that there are different definitions of Web Origins; there are web-origins for DOM objects, localStorage, and XMLHttpRequest, as well as other definitions for cookies (domain, path) and the clipboard (user). Jackson et al. [35] and Johns et al. [36] discuss DNS rebinding attacks (which manipulate Web Origins and thus disable the SOP) and proposed mitigation techniques. Lekies et al. [5] are using dynamically generated JavaScript files to attack the privacy of a victim. This data includes the web origins of the different subjects and objects, the HTML markup (elements and attributes), and more recently, security policies communicated through HTTP headers like CORS, CSP, X-Frame-Options, and others.In SOP-DOM, the set O of objects may contain any element or property of the local DOM of the web page. Another example is email encryption in which read access is granted on the basis of the RFC 822 email addresses of the recipients.Definition 1 In DAC, access rights are directly assigned to subjects: the policy set P is a subset of S × O, and subject s has access to object o if (s, o) ∈ P.In the WWW, each subject from S and each object from O can be assigned a unique name, which is the URL at which it can be found. Instead of assigning, revoking, and reassigning these access rights periodically to individual subjects, the access rights are assigned to the role "system administrator", and this single role is assigned, revoked and reassigned over time.Definition 2 In RBAC, subjects are assigned to roles from a set R, and access rights are assigned to roles: P 1 ⊆ S × R, P 2 ⊆ R × O, and s has access to o if there exists a role r such that (s, r) ∈ P 1 and (r, o) ∈ P 2 . The policy decision in ABAC may depend on other subject, object and environment attributes as well.Definition 4 Let A i = {NULL, value 1 i , ..., value k i i } be the set of different values of attribute i. Let S A = A 1 × ... × A l , OA = A l+1 × ... × A m and E A = A m+1 × ... × A n be the cartesian products of all subject, object and environment attribute values. Then subject s has access r ∈ R to object o if the array a, formed by concatenating sa, oa, ea, and r, is contained in P: a ∈ P.ABAC could be suitable for SOP-DOM because we can model any parameter that influences the access decisions as an attribute. This shows that the ABAC model can also be used to simplify the description of SOP-DOM.1 Read(protocol,domain,port,dd); 2 if dd=NULL or (dd is not a superdomain) 3 then wo:=(protocol,domain,port) 4 else wo:=(protocol,dd,NULL)Listing 5: Computation of extended Web Origin.Listing 5 shows how an extended web origin is computed from the four given ABAC variables. The requirements on an access control model for SOP-DOM can be formulated as follows: the general rules of SOP-DOM must be expressible without reference to the URL or the HTML context of a web subject or object, and to apply the SOP-DOM rules, URL and HTML context of each web object must be transformed into an abstracted description which then will serve as an input to the general SOP-DOM rules.This rules out DAC as a model, since DAC rules would simply consist of a large global matrix, where each web object worldwide has a row, and each subject a column.