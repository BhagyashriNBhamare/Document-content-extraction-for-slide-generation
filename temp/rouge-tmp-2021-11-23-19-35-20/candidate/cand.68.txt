Our technique, called SmartAuth, automatically collects security-relevant information from an IoT app's description , code and annotations, and generates an authorization user interface to bridge the gap between the functionalities explained to the user and the operations the app actually performs. To address the unique challenges in IoT app authorization, where states of multiple devices are used to determine the operations that can happen on other devices, we devise new technologies that link a device's context (e.g., a humidity sensor in a bath room) to an activity's semantics (e.g., taking a bath) using natural language processing and program analysis. These systems use cloud frameworks to integrate numerous home IoT devices, ranging from sensors to large digital appliances, and enable complicated operations across devices (e.g., "turn on the air conditioner when the window is closed") to be performed by a set of applications. In mapping capabilities to devices, the user allows the IoT app to perform the set of operations defined by those capabilities (e.g., turn on a light, unlock the door) based on event triggers (e.g., the room becomes dark, a valid token is detected near the door). However, this implicit authorization suffers from issues related to coarse granularity and context ignorance, namely that an app given any capability (e.g., monitoring battery status) of a device (e.g., a smart lock) is automatically granted unlimited access to the whole device (e.g., lock, unlock) and allowed to subscribe to all its events (e.g., when locked or unlocked). While asking users to authorize third-party apps' access to IoT devices would, in concept, seem to prevent this sort of overprivileging, prior work on permissions systems for mobile apps has repeatedly documented that users often fail to act based on, or even understand, these permission screens [18,32,33]. Even worse, unlike the Android permission model, which asks the user for permission to access specific resources on a single device (e.g., location, audio, camera), access control in a smart home system is much more Figure 1: The installation interface of SmartApp SAFETY WATCH lists configuration options without connecting to higherlevel app functionality. Furthermore, in the absence of robust monitoring and enforcement by the platform, the authorization system provides little guarantee that the capabilities requested by an app actually align with the app description.As a result, despite the existing authorization system for IoT platforms, there can exist a crucial gap between what a user believe an IoT app will do, and what the app actually does. Because the natural-language description developers write to advertise an app in the app store is the key source of users' expectations for what the app will do, we use natural language processing (NLP) to automatically extract capabilities from this description.SmartAuth then compares the app's actual functionality (determined through program analysis) to the functionality developers represent (determined through NLP). For example, an annotation indicating a "bathroom" and the activity "take a shower" are used to identify the location of the humidity sensor of interest.To minimize user burden, SmartAuth automatically allows functionality that is consistent between the app's natural-language description and code, yet points out discrepancies between the description and code since these are potentially unexpected behaviors. Home automation is growing with consumers, and many homeowners deploy cloud-connected devices such as thermostats, surveillance systems, and smart door locks. Such vendors typically host third-party IoT apps in the cloud, allowing remote monitoring and control in a user's home environment. Figure 2 depicts cloud-based IoT apps BEACON CONTROL and SIMPLE CONTROL installed by a user from their mobile device and with access to the user's relevant IoT devices.Current IoT platforms use capabilities [36] to describe app functionality and request access control and authorization decisions from users. This functionality-oriented design creates potential privacy risks, as granting an app a capability for a device allows it to access all aspects of the device's status and fully control the device.An IoT app can also act as a web service (an endpoint in Samsung Smartthings) to interact with the outside world. Since our approach analyzes app descriptions and gaps in users' mental models, we rely on several existing tools and techniques for natural language processing (NLP). In the latter, a device is implicitly granted additional capabilities that are not needed or intended.We have identified an additional type of overprivilege that relates not only to the functionality of the IoT app, but also to the user's perception of the app functionality, as seen through the app description. Similar to the undisclosed overprivilege, remote access does not match the user's mental model, which illustrates a gap in the current configuration and approval process.Based on these observations, a general threat in the IoT app landscape is the ability for a malicious or compromised IoT app to steal information from sensors or home appliances or to gain unauthorized access to IoT device functionality. Permission models based on manifest permissions or runtime prompts, such as those employed in Android or iOS, either do not allow users to make context-based decisions or cannot satisfy real-time demands (e.g., approval to actuate an alarm when fire is detected). We analyze the semantic meaning of these components to discovery inconsistency, then automatically generate an authorization interface explaining the findings to the user.Based on these design principles, our SmartAuth system includes five components: a program analyzer, a content inspector, a consistency checker, an authorization creator and a policy enforcer, as illustrated in Figure 3. This represents 100% of open-source SmartApps and 80.2% of all SmartApps at that time.For each app collected, we parse its code and create an Abstract Syntax Tree (AST) from the code, resolving classes, static imports, and variable scope. Since a SmartApp gets status updates by subscribing to events, namely as subscribe(dev,attr,hndl) for relevant IoT device dev, device attribute attr, and invoked method hndl, we use this global mapping to search the AST for relevant commands called and attributes subscribed.We then generate the security policy, starting from the method invoked on event subscription and perform forward tracing. For example, we can extract that the humidity sensor is associated with bathroom from understanding the annotation in the following code snippet.Listing 1: Code Snippet about Device Selection section("Bathroom humidity sensor") { input "bathroom", "capability. Most cases are more complex than this example, and our more comprehensive analysis follows.Specifically, we use the Stanford POS Tagger to identify parts of speech and the Stanford Parser to analyze sentence structure, including typed dependencies, as illustrated in Figure 5. However, even when the description does not contain the device name, the description might contain contextual clues related to specific Red and blue characters respectively indicate parts of speech (e.g., "VB" for verb) and typed dependencies (e.g., "advcl" for adverbial clause modifier). Similarly, our technique relates "coffee machine" in the description to the switch device (capability.switch) recovered from the code.However, simply connecting an entity in the description to a device in the code is insufficient to determine whether only expected behaviors (as specified in the description) happen. These two apps use the same devices, but with different control flow.To perform causal analysis, we analyze the typed dependencies and build knowledge-based models of causal relationships. Towards making usability a first-order concern in designing our authorization scheme, we first conduct an online survey to understand users' mental models related to IoT app installation and the overprivilege problem. We received responses from 300 participants who had used SmartThings, identified by an average age of 30.8 years old (age range is 18-60) with a gender breakdown of 32% female, 67% male.We asked participants to respond using a five-point scale (strongly care, care, neither care or not care, not care, strongly not care) about factors they consider when deciding whether or not to install a SmartThings app. Our approach of automatically identifying discrepancies between the actual behavior of an app determined through program analysis and the free-text app descriptions that users generally rely on when considering whether to install apps [32] better supports these distinctions.To this point, most work on app permissions focuses on smartphones. "In generating the user interface, we aim to minimize the burden on the user and provide information that matches the user's mental model of the system. For example, the app monitors the temperature from the temperature sensor and whether someone is at home by the presence sensor to turn on a heater when it is cold and someone is home.We designed our authorization approach to better align users' mental models with the actual behaviors of smart home apps, as well as to reduce user burden during the authorization process. Once a user sets his or her policy settings through the user interface, we enforce the policy end-to-end by blocking unauthorized command and attribute access.Our proof-of-concept implementation of the policy enforcement mechanism operates locally on the device through the use of REST APIs, mimicking the ideal integration directly into the SmartThings Cloud. If allowed, the module will forward the request to the cloud service to execute and respond, after which the module will forward the response to the patched app. Second, whenever there is an event reported by the SmartThings Cloud, the module will retrieve the associated app IDs and policies from the database and forward the event only to the apps that are allowed to access the event according to the app policy. In two other cases, the app references another app by name to explain its functionality; for example, the KEEP ME COZY TWO app claims that it "works the same as KEEP ME COZY, but enables you to pick an alternative temperature sensor in a separate space from the thermostat." We carefully avoid the IoT developers when we recruit in the company because they are very familiar with the system and their results might be biased.The study's primary task is a series of selection tasks for IoT apps using the phone we provide. For example, participants choose between "Lights Off with No Motion and Presence (by Bruce Adelsman)" that will "Turn lights off when no motion and presence is detected for a set period of time" and "Darken Behind Me (by Michael Struck)" that will "Turn your lights off after a period of no motion being observed. In order to demonstrate that SmartAuth is both lightweight and backward compatible, we performed two performance tests: (1) pre-processing performance comprising program analysis, description analysis, behavior correlations, and policy description generation and (2) run-time performance comprising authorization interface generation and policy enforcement.For testing the pre-processing performance, we timed the generation of the policy description for each of the 180 apps, averaging over 10 trial runs. SmartAuth incurs an average delay of 35.4 msec, which is small relative to the dominant network latency in cloud-based IoT platforms.Next, we test the degree to which SmartAuth policies to mitigate overprivilege and block third-party remote access impact backward compatibility with existing SmartApps. In other words, patching does not break the functionalities claimed in the app's description.We further test how apps function if we block all thirdparty remote access, an extreme case where the user denies all such requests. This recognition might have biased participants to be complimentary of an interface they assumed was being tested, as well as to pay particular attention to the interface in the absence of habituation effects. Naveed et al. discuss the security binding problems of smart devices that are external to the mobile phone [40]. CIDS [10] designs an anomaly-based intrusion detection system to detect in-vehicle attacks by measuring fingerprints from deployed ECUs based on clock behaviors. Sivaraman et al. [45] propose managing IoT devices through software-defined networking (SDN) based on day-to-day activities.Beyond framework or architecture solutions, enhancing the security of smart devices is also a common countermeasure against attacks from remote or near field communication surfaces. When the user navigates to the URL, they will be redirected to the SmartThings login page to enter credentials and receive an authorization token for later use.The script next scans all devices on the SmartThings capability list 4 by parsing all input labels from the preferences section and its corresponding child pages, e.g., mainPage page section. When the script parses a statement containing the label switch1, e.g., switch1.on(), the script catches the function call on() and checks against a capability structure defined based on the list of capabilities and their associated functions and attributes 5 . Once the script confirms the call or attribute, it replaces the original statement with the internal API call sendCommandToProxyServer() by sending the request to the policy enforcement module with its app identifier, device label (switch1), command label (on()) and any corresponding parameters.After patching, each Groovy source file will contain around 128 new lines to provide endpoint interfaces for the policy enforcement module. {Strongly care, care, neither care or not care, not care, Strongly not care} () The source / author of the app () The popularity of the app () The functionality of the app () The privacy aspect of the app () The smarthome capabilities that the app request () The relation of capability requests to the app's functionality () Others: 2. From the expert and Mturk responses, we assign each security expert a weight of 0.25, and each Mturker a weight of 0.005.