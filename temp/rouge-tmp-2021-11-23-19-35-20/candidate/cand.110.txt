By applying our framework , which generates a comprehensive set of test cases covering various web mechanisms, we identify several flaws in the policy implementations of the 7 browsers and 46 browser extensions that were evaluated. After being set, the cookies are attached to every subsequent request to the originating domain, allowing users to remain logged in to a website without having to re-enter their credentials.Despite their significant merits, the way cookies are implemented in most modern browsers also introduces a variety of attacks and other unwanted behavior. Through so-called cross-site attacks, adversaries can abuse the implicit authentication to perform malicious actions through cross-site request forgery attacks [6,54], or extract personal and sensitive information through cross-site script inclusion [24] and cross-site timing attacks [9,16,48]. In this paper, we show that in the current state, built-in anti-tracking protection mechanisms as well as virtually every popular browser extension that relies on blocking third-party requests to either prevent user tracking or disable intrusive advertisements, can be bypassed by at least one technique.Next to tracking protections, we also evaluate a recently introduced and promising feature aimed at defending against cross-site attacks, namely same-site cookies [51]. While cross-site attacks share the same cause as online tracking, i.e. the inclusion of cookies on third-party requests, their defenses are orthogonal. Although this bypass could only be used to trigger GET requests, thereby making the exploitation of CSRF vulnerabilities in websites that follow common best-practices more difficult, it does underline the importance of a systematic evaluation to test whether browser implementations consistently follow the policies proposed in the specification.In this paper, we present the first extensive evaluation of policies applied to third-party cookies, whether for the purpose of thwarting cross-site attacks or preventing third-party tracking. â€¢ By applying the framework to 7 browsers, 31 ad blocking and 15 anti-tracking extensions, we found various ways in which countermeasures against cookie leaking can be bypassed. Although websites of large organizations such as The New York Times, ING, MetaFilter and YouTube have been found to be vulnerable to CSRF attacks in the past [54], the increased awareness among web developers and countermeasures integrated in popular frameworks resulted in a drastic decrease in vulnerable websites. One way of employing online tracking is through embedded advertisements, which include tracking scripts to learn more about the user's interests and personalize the advertisements based on this information. Because the resource containing embedded functionality is requested upon each page visit, the social platform can track which websites their users visit.The main technique that is used to track users across different websites is by means of third-party cookies. This allows the tracker to follow users across all websites that include a script that initiates the request to the tracker.Because of the raised awareness of online tracking among the general public, many users delete cookies on a regular basis [12], which results in a seemingly new user profile from the tracker's perspective. As a reaction, some online trackers have resorted to more extensive tracking methods, such as respawning cookies via Flash [44] and other web mechanisms [4], and browser fingerprinting [2,13,44,52]. Despite prior efforts to verify these guarantees [22,25], the real-world prevalence of inconsistencies remains hard to measure as modern browsers consist of millions of lines of code, or may be proprietary, preventing researchers access to their source code. Furthermore, for browsers that support it, we installed two cookies with the SameSite attribute: one with the value set to lax, and one set to strict. What follows is a Figure 2: Design of the framework that we used to detect bypasses of imposed cross-site request policies.summary of the mechanisms we used, subdivided into seven different categories.HTML tags The first group of request mechanisms consists of HTML elements that can refer to an external resource, such as <img>, <iframe> or <script> tags. In our framework, we evaluate redirection mechanisms through the Location response header, via the <meta> tag, setting the location.href property and automatically submitting forms.JavaScript Browsers offer various JavaScript APIs that can be used to send requests. Similarly, the Beacon API can be used to asynchronously send POST requests, and is typically used to transmit analytic data as it does this in a non-blocking manner and the browser ensures the request is sent before the page is unloaded [29]. When the browser visits a page that refers to this file, the specified resources, which may be hosted at a different domain, will be requested through a GET request and subsequently cached.Service Worker API Service workers can be seen as a replacement for the deprecated AppCache API. In our framework, we tested 8 test-case compositions, where resources from different domains were included in each other, either through an <iframe> or by specific methods, such as importScripts in JavaScript. For instance, Tor Browser makes use of double-keyed cookies: instead of associating a cookie with a single domain, the cookies are associated with both the domain of the top-level document as well as domain that set the cookie. Moreover, some browsers provide built-in functionality to prevent requests from leaking privacysensitive information. This decision is typically made based on information about the requests, namely whether it is sent in a third-party context, which element initiated it, and most importantly, whether it should be blocked according to the block list that is used. We will discuss this further in Section 4.1.3 with the other evaluated built-in options.Besides Safari, the privacy-oriented browsers also generally perform better in this regard: with a few exceptions, both Cliqz and Tor Browser manage to exclude cookies from all third-party requests. <img src= " data:image / svg + xml , <svg> <image xlink:href= ' https: // third-party.com / leak '> < / image> < / svg> " > Another interesting finding is that in the HTML category, we found that for several mechanisms Cliqz would still send along cookies with the third-party request. This problem was solved in Safari 11 by deleting all cookies upon enabling the option to block all cookies.For Edge, we found that, surprisingly, the option to block third-party cookies had no effect: all cookies that were sent in the instance with default settings, were also sent in the instance with custom settings [bug3]. These 6 bypass techniques spanned different browser mechanisms (CSS, SVG, <input> and video), so it is unclear why these are treated differently.For Firefox, we observed comparable results: although many requests were blocked (e.g. for the HTML category, 46 out of 51 requests were blocked), for each applicable category there was at least one technique that could circumvent the tracking protection [bug5]. An overview of all browser extensions that were considered can be found in Appendix B. Guided by the resulting data, we found several common causes for the discovered bypasses.Considering the results of all Chrome-and Operabased extensions, it is clear that none of these managed to block the cookie-bearing third-party request when the request is initiated by JavaScript code embedded within a PDF. As the requests are sent from within a browser extension, the browser does not regard it as a cross-site request, and thus does not strip its cookies in the case when the "block third-party cookies" setting is enabled. This bypasses the same-site cookie policy as defined by the Internet Draft; only samesite cookies in lax mode are allowed to be included.For Edge (versions 16 and 17, which support samesite cookies), we detected similar incorrect behaviors, although caused by different functionalities [bug10]. Here, <embed> and <object> tags can be leveraged to send cross-site requests that include all same-site cookies, by pointing to another domain using the src and data attributes respectively. To this Edge SET A19 (1/4) N/A SET A20 (1/4) N/A SET A21 (1/4) N/A SET A22 (1/4) N/A: request with cookies : request without cookies : no request Table 2: Results from the analysis of ad blocking extensions per browser.purpose, we used the EasyList and EasyPrivacy lists 10 which contain regular expressions used by various popular browser extensions to determine whether requests should be blocked. We only count the second-level domain name of the tracker or advertiser to whom the request was sent.To evaluate whether the advertising or tracking host leveraged one of the techniques to purposely circumvent browser extensions, we visited the web pages on which these trackers or advertisers were included. In order to evaluate whether any bypass technique was used that was not detected by our framework, we com-10 https://easylist.to/ pared the DNS traffic generated by every of the 160,059 visited web pages with the requests that we could detect from each visit. <link rel=apple-touch-icon 0 2<img srcset="url"> 0 3 Table 4: Unique number of tracking or advertising domains that make use of one of the potential bypass techniques As we have shown in Section 4, through our framework, which evaluated several browsers and browser extensions in various configurations, we uncovered numerous instances where an authenticated third-party request could circumvent the imposed restrictions. We believe that this is due to an oversight from the browser developers or a regression bug introduced when new functionality was added.For the Chromium-based browsers (Google Chrome and Opera), we found that because of the built-in PDF reader, an adversary or tracker can still initiate authenticated requests to third-parties. As this may interfere with the operations of certain extensions, exclusions should be made possible, for instance by defining a list of cookie-enabled domains in the extension manifest.Next to blocking third-party cookies, we also analyzed the built-in tracking protection for Firefox. For instance, out of the 15 ad blocking extensions for Google Chrome, at most 3 exhibited a similar behavior.In part, the disparity of results can be explained by the frequent introduction of new features to browsers, which may affect the WebExtension API or cause unforeseen effects. This shows that adding new features to a browser may have unforeseen side-effects on the extensions that rely on the provided APIs.When new browser features are proposed and implemented, test cases that include the new functionality can be added to our framework, allowing browser vendors and extension developers to automatically detect and possibly mitigate unforeseen side-effects. In an effort to help browser vendors find the balance between keeping incoherency-confirming features and the breakage of websites as a consequence of removing them, they developed a measurement system. For instance, we found that same-site cookies could still be attached to cross-site requests by levering the prerendering functionality, which did not take these policies correctly into account.Furthermore, a design flaw in Chromium-based browsers enabled a bypass for both the built-in thirdparty cookie blocking option and tracking protection provided by extensions. This makes it impossible for extension developers to be completely thorough in blocking or modifying undesirable requests.Overall, we found that browser implementations exhibited a highly inconsistent behavior with regard to enforcing policies on third-party requests, resulting in a high number of bypasses. [bug5] In the bug thread that we have started for bypasses concerning Firefox' tracking protection, references have been made to previously reported similar bugs that are related to Firefox' Safe Browsing feature [37]. [bug8] In addition to the aforementioned bugs caused through the AppCache and WebSocket API, we identified a wide variety of bugs inherent to the implementation of ad blocking and privacy protection extensions.18 https://bugzilla.mozilla.org/show_bug.cgi?id= 1447933Because of the large number of affected extensions, many without a dedicated bug tracker, we only contacted a selection of them. For the ad tracking protection extensions, these are shown in Table 6 and for the ad blocking extensions in In this section, we explicate the various test compositions that we have integrated in our framework.