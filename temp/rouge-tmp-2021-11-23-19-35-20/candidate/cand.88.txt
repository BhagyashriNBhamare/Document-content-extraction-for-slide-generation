Tor users can connect to the Internet through an encrypted tunnel by first building a path through three Tor routers (called a circuit) chosen from a set of approximately 7,000 volunteer routers. Global knowledge of congestion in Tor and performance of circuits more generally would enable better choices for all clients.Building on this insight, we propose PredicTor, a path selection technique that leverages performance measurements of many circuits to select less congested nodes and geographically shorter paths with greater probability. We show that PredicTor utilized approximately 30% more Tor relays compared to Vanilla resulting in greater load distribution and allowing PredicTor to make better use of limited network resources.Moreover, we performed live Tor experiments and show that PredicTor improves network performance partly due to avoiding highly congested nodes, and partly due to building lower latency circuits. Therefore, it is difficult to justify how these inference probabilities may indicate an advantage for an adversary to fully compromise anonymity.The latter category, metrics that empirically measure all-or-nothing compromises, includes time-to-first compromise, a measure of how long it takes until a client uses a compromised circuit [24]. Thus, inferring a client's AS is more achievable and may be a first step in reconnaissance for an adversary;-High-resource adversaries such as nation-states are known to target ASes for infiltration in efforts to passively observe network traffic;-Making inferences at the client level may yield negligible results due to Pr[1/|N| + δ ] being small in most cases, especially when N is large.We evaluate this method empirically by testing a recently proposed location-aware algorithm called De-NASA [6]. Congestion measurements for circuits are performed by the clients by sampling round-trip times (RTTs) of both circuit-building and application connections. If at any point during the life of that circuit, the mean of the last five congestion times is greater than 0.5 seconds, the client will switch to another circuit. For this special row, the sender field for D 0 contains sender S 0 , and the sender field for D 1 contains sender S 1 . -Our adversary classification model is configured to infer the Autonomous System of the client.In the CLASI classification model, we use three features for each relay in a circuit: the bandwidth of the relay from the consensus file (BW), and the network (AS) and country (CC) that the relay is located in. We decided to use AS, CC, and BW features because the proposed path selection algorithms in Tor are generally designed to optimize performance or security based on relay bandwidth [34], network location of relays [1,33], or by routing around relays that located in certain ASes [14,35,6,23]. A limitation of this approach is that selecting relays weighted too heavily towards bandwidth can cause high-bandwidth relays to become overloaded and low-bandwidth relays to become starved, resulting in poor performance.Sherr et al. [33] proposed a latency-aware relay selection strategy in which relays participate in a virtual coordinate embedding system. Their approach aims to increase network utilization by having relays estimate the extent to which they are a bottleneck on each circuit and spread this information to clients. This is a misleading result in terms of anonymity because both clients are fully identifiable with knowledge of their selected relay.To establish tight upper bounds on anonymity, Meiser et al. [5] presented a rigorous methodology for quantifying anonymity of Tor with respect to budget adversaries. Sun et al. [36] proposed a metric that measures the resilience of the Tor network to active attacks on BGP routing called RAPTOR attacks.These empirical measurement approaches are complimentary to our proposed metric because they measure all-or-nothing compromises, while our metric quantifies the ability of an all-knowing adversary to infer clients' ASes -a property that could lead to a compromise and thus indicates a loss of anonymity for path selection algorithms under study. In the second method, we gathered training data from the live Tor Network by deploying a server that hosted 20 VMs, each running Tor version 0.3.0.9. The Shadow results in Fig- ure 1a show the accuracy at the median to be 76% and 70% for Random Forest and k-NN, respectively. Figure 1c shows the live Tor performance for fixed file size downloads of 50 KiB from historical Tor network data [26] compared to Shadow perf clients. If the proposed circuit is predicted to be fast, the circuit is built; otherwise, new relays are selected.Let us define function M τ (C) that, for a given threshold τ, returns True when a proposed circuit C is predicted to be faster than τ and False when it is predicted to be slower than τ. For all path selection techniques, the respective clients requested a 320 KiB file download from a server selected uniformly at random from a set of 70 destination servers.In the live Tor experiments, for all path selection techniques, the respective clients requested the home page of websites selected uniformly at random from a set of 1000 sites from the Alexa list of top sites [2]. Note that in a Shadow simulation, we can observe how performance is affected when all clients use a given path selection technique. In CAR, on the other hand, clients only have knowledge of congestion characteristics for a small subset of nodes that are opportunistically measured during circuit creation.We combined PredicTor with CAR because we suspected that CAR should have better performance if nodes are selected using the PredicTor scheme first, then opportunistically measured. Additionally, the live Tor results suggest that PredicTor avoids highly congested nodes while building circuits of slightly higher bandwidth and lower latency compared to Vanilla.Quantifying improvement. Our experiments provide strong evidence that PredicTor should result in an overall improvement for all clients in Tor, with 23% improvement in Shadow with all clients using PredicTor and 11% improvement in the live Tor experiments with one client using PredicTor. One way to more fully quantify the improvement for a live deployment of PredicTor would be to test in a wide-area testbed where all clients use PredicTor. Since popularity of websites is heavily concentrated in relatively few sites [10], a moderate-sized list of probe destinations should suffice to make the attacker unable to distinguish quickly between a measurement circuit and the majority of non-measurement user activity.In contrast, a major disadvantage for methods that use RTT measurements such as CAR and Navigator is that malicious exit nodes can easily manipulate RTT measurements. For each client location, the experiment was performed during prime Internet surfing hours for both the US and Europe (approximately 14:00 GMT) and during a time that is evening in the US and middle of the night in Europe (approximately 00:00 GMT). We call the experiments run at 14:00 GMT as the high-congestion condition and the experiments run at 00:00 GMT as the low-congestion condition.Due to the single-guard selection strategy in Tor, clients may be connected to a slow or fast guard for long periods of time. From the JP location, there was a 6.3% and 10.8% improvement in the median and 90th percentile, respectively.During times of low congestion while connected to a fast guard, PredicTor performance did not improve compared to Vanilla as much as in the high-congestion experiment. Wang et al. [42] also state that CAR should get better performance during high congestion times compared to low congestion.We observed a slight improvement for PredicTor while connected to a slow guard during both high and low congestion for the median time (3.3% to 7.3% faster). Since PredicTor and other Tor path selection algorithms such as TAPS [23], DeNASA [6], and LASTor [1] use network location information to select paths, it is important to understand the extent to which these choices lead to predictability and loss of anonymity. Each path P is a set of nodes where P = {p 1 , p 2 , p 3 , p 4 , p 5 }, such that:p 1 = clientIP, p 2 = guardIP, p 3 = middleIP, p 4 = exitIP, p 5 = destinationIP.Adversary A sends path simulator PS to the challenger CH. Sender location information leakage for the idealized Tor network is then represented by ε s , where: There is no leakage (ε s = 0) if the attacker can do no better than guessing L uniformly at random from among all possible sender ASes in S L . For our evaluation, we chose to test a location-aware protocol called DeNASA (destinationnaive AS-awareness) because DeNASA's tunable parameters allow users to increase or decrease location awareness in exchange for more or less security against ASlevel adversaries respectively. Vanilla e-select_0.1 e-select_0.2 e-select_0.3Figure 6: CLASI: Sender AS leakage for DeNASA exit selection variations compared to Vanilla Tor as a function of user model.We denoted streams as being vulnerable if AS3356 or AS1299 appeared on both sides of the stream. For example, for the 5-, 10-, 15-, and 20-destination user models, sender AS leakage increased by 7%, 10%, 11%, and 13%, respectively, for τ = 0.1 compared to τ = 0.2. Degree e-select_0.3 Gini e-select_0.2 Gini e-select_0.1 Gini Vanilla GiniFigure 8: Gini Coefficient and Uniformity degree for De-NASA exit selection variations compared to Vanilla Tor.cantly higher than random guessing. This is due to the fact that: 1) clients are partitioned into subsets with respect to their selected guards, and 2) clients are partitioned with respect to the set of destinations they connect to. More specifically, for Vanilla Tor, sender AS leakage decreased by 26% for the 10-destination user model compared to the 5-destination user model, by 14% for the 15-destination user model compared to the 10-destination user model, and by 12% for the 20-destination user model compared to the 15-destination user model. If all users from country A select only relays from the first group and country B users from the second group, then the Gini coefficient will be the same as Vanilla Tor, even though the choice of relays clearly indicates which country the user is in. This shows a disadvantage for uniformity degree in measuring anonymity for path selection algorithms in Tor.In Figure 9 we plot Gini Coefficient and Uniformity Degree for DeNASA's guard selection variants compared to Vanilla Tor for the 5-destination user model. This shows that uniformity degree did not indicate that there was a guard placement attack vulnerability even if clients were configured to avoid up to eight suspect ASes while selecting their guard nodes.We conclude that gini coefficient and uniformity degree are not sufficient replacements for the CLASI metric when measuring anonymity of path selection algorithms in Tor. Therefore, some DeNASA clients should realize some security improvement compared to Vanilla clients because they build less vulnerable streams, even The results indicate that DeNASA e-select τ = 0.1 provides approximately the same security against ASlevel adversaries with respect to time to first compromise, and better security against AS-level adversaries with respect to vulnerable stream rate. There are two main challenges that would need to be addressed for the successful deployment of PredicTor: 1) clients should routinely receive comprehensive training data, and 2) the training data should be gathered securely, such that an adversary has little chance of directing traffic to malicious relays.In the Live Tor experiments, we built a training set by measuring download times for approximately 50,000 streams from a centralized authority over the course of one hour. If the training data is gathered by multiple authorities, then there should be a voting process that is used to resist manipulation from a subset of malicious authorities.Additionally, PredicTor measurement circuits should be made indistinguishable from regular circuits by randomizing the destination domain and payload size of the measured stream. We implemented PredicTor in the Tor source code and showed through simulations in Shadow that PredicTor improved Tor network performance by 23% compared to Vanilla Tor and by 13% compared to Congestion-Aware Routing.