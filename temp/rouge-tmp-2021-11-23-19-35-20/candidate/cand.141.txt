With end-to-end encryption, the email infrastructure becomes merely a transportation service for opaque email data and no compromise -aside from the endpoints of sender or receiver -should affect the security of an end-to-end encrypted email.S/MIME and OpenPGP. These backchannels are widely known for their privacy im-plications as they can leak whether and when the user opened an email and which software and IP he used.Until now, the fetching of external URLs in email was only considered to be a privacy threat. An important observation for the first attack is that OpenPGP solely uses the Cipher Feedback Mode (CFB) and S/MIME solely uses the Cipher Block Chaining (CBC) mode of operation. More concretely, he can flip specific bits in the plaintext or even create arbitrary plaintext blocks if he knows parts of the plaintext.We use the malleability of CBC and CFB to construct so called malleability gadgets that allow us to create chosen plaintexts of any length under the assumption that the attacker knows one plaintext block. As the IMF lacks features that are required in the modern Internet, such as the transmission of binary data, it is augmented with Multipurpose Internet Mail Extension (MIME) [15] to support transmission of multimedia messages or -in case of OpenPGP and S/MIME -to allow end-to-end encryption of emails. Phil Zimmerman developed the first version of Pretty Good Privacy (PGP) in 1991 as a means to enable political activists to communicate securely on BBSs, Usenet groups and the early Internet.In the late '90s, the IETF published RFC 2440 describing the OpenPGP format, which has been updated several times. In the email context, both S/MIME and PGP use hybrid encryption, in which the sender generates a random session key s that is used to symmetrically encrypt the message m into a cipher text c. Because XORing with adjacent ciphertext blocks is the final operation in CBC and CFB, precise plaintext manipulations are possible by changing the ciphertext only.Authenticated encryption Newer encryption schemes will detect modification of the ciphertext and do not output the plaintext in this case. We will refer to all these channels as backchannels because they can interact with possibly attackercontrolled servers.Backchannels in the email context are well-known to be a privacy issue because they allow detecting if, when and where a message has been read and may leak further information such as the user's mail client and operating system. We now relax this constraint and introduce the concept of malleability gadgets 27th USENIX Security Symposium 551 that allow to inject arbitrary plaintexts into encrypted emails given only a single block of known plaintext.C i-1 P i (known) C i X C i P c (chosen)(aDefinition. When comments are available within a context, for example via C-style comments / * and * /, exfiltration channels can easily be constructed by simply commenting out the random blocks. Figure 3 (b) shows the canonical CBC gadget as it uses X = IV ⊕ P 0 to set all its plaintext bytes to zero. (c) (b) C 0 P 0 P 1 C 0 X 0 =IV ⊕ P 0 ⊕ P c0 C 0 P c0 X 1 =IV ⊕ P 0 ⊕ P c1 C 0 C 1 C 2 C 3 P c1 X =IV ⊕ P 0 0 0 0 0 0 0 0 0 decryption C 1 C 2 decryption decryption C 3 decryption decryption decryption decryption decryption decryption decryption ltipart/signedMeaningless signatures. Similar to S/MIME, PGP emails also contain known headers and plaintext blocks, for example, Content-Type: multipart/mixed, but after compression is applied, the resulting plaintext may vastly differ per mail.The difficulty here is to guess a certain amount of compressed plaintext bytes in order to fully utilize the CFB gadget technique. Not knowing enough compressed plaintext bytes is hardly a countermeasure, but makes practical exploitation a lot harder.We show how the compression structure can be exploited to create exfiltration channels. However, if clients try to display whatever is left of the message as a "best effort", exfiltration channels may be triggered.In order to understand how the integrity protection can be disabled and how compression can be defeated, we have to go into more detail of OpenPGP. The OpenPGP standard mandates that clients should prefer the SEIP packet type over the SE packet type, because for SEIP packets, modification of the plaintext will be detected due to a mismatch of the SHA-1 hash of the message and the attached MDC packet.Generating SE packets. The first text fragment represents an OpenPGP packet structure which encodes a CD packet (which is encoded as 0xaf in OpenPGP) containing a LD packet (encoded as 0xa3). Once the victim decrypts and decompresses the email, the final text will result into a concatenation of text fragments P c0 , P c1 , P c2 , and the compressed segment. 3 We measured the complexity to guess the first 11 bytes of the first compressed plaintext block in two scenarios: (1) with OpenPGP-encrypted password-reset emails from Facebook and (2) by simulating the standard encryption process with GnuPG with the Enron dataset containing 500, 000 real world emails.Our approach was as follows: in case of the Facebook emails, we build an email generator to generate 100, 000 password reset emails. This means that with two emails approx. 9% of Enron, or "real world", emails can be exfiltrated.Although 500 guesses are very few in a cryptographic sense, the requirement to open 500 emails makes our attacks hardly practical. If the email client first decrypts the encrypted part and then puts all body parts into one HTML document as shown in Figure 6 (b), the HTML rendering engine leaks the decrypted message to the attacker-controlled web server within the URL path of a GET request as shown in Fig- ure 6 (c). This scenario is quite common when email security gateways are used.Out of 48 tested mail clients 17 had missing isolation which would allow leaking secret messages to an attacker-controlled web server in case a mail gateway would decrypt and simply replace the encrypted part with the plaintext. We performed an analysis of existing backchannels by systematically testing 48 clients and give the complete results in Appendix B. Note that 13 of the tested clients do either not support encryption at all or we could not get the OpenPGP or S/MIME modules to work and therefore could not test whether backchannels can be used for exfiltration. All other clients block external images by default or explicitly ask the user before downloading.We analyzed all HTML elements that could potentially bypass the blocking filter and trigger a backchannel using a comprehensive list of HTML4, HTML5 and non-standard HTML elements that allow including URIs. In a broader scenario, an attacker could also inject binary attachments or modify already attached ones, such that exfiltration is done later even if no email client is involved. The standard only vaguely states that any failures in the MDC check "MUST be treated as a security problem" and "SHOULD be reported to the user" [18] but lacks a definition on how to deal with security problems. From this perspective, the security vulnerabilities observed in GnuPG and Enigmail are standardconforming, as GnuPG returns an error code and prints out a specific error message. Our experiments showed that different clients deal differently with MDC failures (see Table 4). There were efforts to introduce authenticated encryption in OpenPGP which is, however, expired [30]. In a backwards compatibility attack an attacker takes a secure authenticated ciphertext (e.g., AES-GCM) and forces the receiver to use a weak encryption method (e.g., AES-CBC) [31]. This would enforce different keys for different algorithms:k AES-CBC = KDF(k, "AES-CBC")(1)k AES-GCM = KDF(k, "AES-GCM")(2)Although an email client could use S/MIME's capabilities list to promote more secure ciphers in every signature, an attacker can still forward emails she obtained in the past. In 2001 Davis described "surreptitious forwarding" attacks and their applicability to S/MIME, PKCS#7, MOSS, PEM, PGP, and XML [34] in which an attacker can re-sign or re-encrypt the original email and forward it onto a third person.In 2002 Perrin presented a downgrade attack, which removes the integrity protection turning a SEIP into a SE data packet [20]. The attack requires a high number of queries, which makes the attack unpractical for email encryption.Strenzke [19] improved one of Davis' attacks and noted that an attacker can strip a signature and re-sign the encrypted email with his private key. For example, Rizzo and Duong described how to turn a decryption oracle into an encryption oracle. In 2005, Fruwirth, the author of the Linux Unified Key Setup (luks), wrote a compendium of attacks and insecure properties of CBC [48] in the hard disk encryption context. It is however noteworthy that two email clients performed a DNS lookups for the hostname part of the sender email address at the time the mail was opened. CSS properties (bypasses for remote content blocking) C 1 <style>@import url('http://efail.de');</style> C 2 <style>body {background-image: url('http://efail.de');}</style> C 3 <style>body {background-image: \75 \72 \6C ('http://efail.de');}</style> C 4 <style>body {shape-outside: url(http://efail.de);}</style> C 5 <div style="background-image: url('http://efail.de')"> C 6 <div style="background-image: -moz-image-rect(url('https://efail.de'),85%,5%,5%,5%);"> C 7 <style>body {background: #aaa url('http://efail.de');}</style> C 8 <div style="background: #aaa url('http://efail.de')"> C 9 <style>ul {list-style: url('http://efail.de');}</style><ul><li>item</li></ul> C 10 <ul style="list-style: url('http://efail.de');"></ul> C 11 <style>ul {list-style-image: url('http://efail.de');}</style><ul><li>item</li></ul> C 12 <ul style="list-style-image: url('http://efail.de')"></ul> C 13 <div style="border-image: url('http://efail.de');"> C 14 <div style="border-image-source: url('http://efail.de');"> C 15 <div style="cursor: url('http://efail.de') 5 5, auto;"> C 16 <svg/><svg><rect cursor="url(http://efail.de),auto"/></svg> URI schemes (bypasses for remote content blocking) P 1 <img src="//efail.de"> P 2 <img src="file://efail.de/x"> P 3 <img src="news://efail.de/x"> P 4 <img src="ftp://efail.de/x"> JavaScript (bypasses for remote content blocking) J 1 <script>...</script> J 2 <object data="javascript:..."></object> J 2 <svg><style>'<body/onload="..."><? de E 3 From: user@efail.de (HTTP request for favicon) E 4From: user@efail.de (DNS request to hostname) The authors thank Marcus Brinkmann and Kai Michaelis for insightful discussions about GnuPG, Lennart Grahl, Yves-Noel Weweler and Marc Dangschat for their early work around X.509 backchannels, Hanno Böck for his comments on AES-SIV and our attack in general, Tobias Kappert for countless remarks regarding the deflate algorithm, and our anonymous reviewers for many insightful comments.Simon Friedberger was supported by the Commission of the European Communities through the Horizon 2020 program under project number 643161 (ECRYPT-NET).