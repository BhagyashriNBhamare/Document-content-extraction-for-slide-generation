The rapidly increasing landscape of Internet-of-Thing (IoT) devices has introduced significant technical challenges for their management and security, as these IoT devices in the wild are from different device types, vendors , and product models. Even if an IoT device has a serious security vulnerability, users have no capability of updating patches in a timely manner due to their limited knowledge.In general, there are two basic approaches to addressing security threats: reactive defense and proactive prevention. In order to protect IoT devices in a proactive manner, discovering, cataloging, and annotating IoT devices becomes a prerequisite step.The device annotation contains the type, vendor, and product name. The banner grabbing approach [21,25,28,37] usually generates device annotations in a manual fashion, which is impossible for largescale annotations, particularly given the increasing number of device types. In this paper, we aim to automatically discover and annotate IoT devices in the cyberspace while mitigating the cost in terms of manual efforts and the training data.The key observation we exploit is that the response data from those IoT devices in application layer protocols usually contain the highly correlated content of their manufacturers. ARE collects the transaction dataset as follows: (1) ARE receives the applicationlayer response data from online IoT devices; (2) ARE uses relevant terms in the response data as the search queries; and (3) ARE crawls the websites from the list of the searching result. Furthermore, ARE provides RESTful APIs to applications for retrieving the rules for discovering and annotating IoT devices in the cyberspace.We implement a prototype of ARE as a self-contained piece of software based on open source libraries. Note that ARE generates rules without the human efforts or the training data, and it can dynamically learn new rules when vendors distribute new products online.To demonstrate the effectiveness of ARE, we perform three applications based on IoT device rules. We observe that hundreds of thousands of IoT devices are still vulnerable to malicious attacks.Furthermore, ARE enables the security professionals to collect the device information by leveraging those rules in a large-scale measurement study or security incident. Our main findings include (1) a large number of IoT devices are accessible on the Internet, (2) thousands of overlooked IoT devices are compromised, and (3) hundreds of thousands of IoT devices have underlying security vulnerabilities and are exposed to the public.The remainder of this paper is organized as follows. To fingerprint an IoT device, the input data includes a pair of queries and responses from IoT devices, and the class label (known as category or target) is what the IoT device belongs to. indicates the end of the URL and (&) separates arguments, q is the start of the query, the plus mark (+) represents a space, and btnG = Search denotes that the search button is pressed on the web interface. Name Entity Recognition (NER) is used to determine the words into predefined classes, such as organization names and location names. We define the concept of "transaction" to associate the applicationlayer data from an IoT device with the corresponding description of an IoT device in a webpage, and our rule generation is based on the transaction set. Each transaction can be formulated as t i = { p i , w j }, where t i contains two parts: (1) p i is the application-layer data of the device i and (2) w j is the description webpage j. Based on the extracted features (i.e., search queries and device annotations) from the transaction set, which characterize the association between a response data and a webpage, we define a rule in its general format as{l i 1 , l i 2 , ..., l i n } ⇒ {t j , v j , p j }. The tuple (t j , v j , p j ) extracted from the webpage j indicates the device type, device vendor, and device product, respectively. In the transaction set, every transaction contains the applicationlayer data and the relevant webpages. The rule miner uses the apriori algorithm to learn the relationship between A and B. Although the apriori algorithm is straightforward, it is able to generate rules satisfying the inference process for discovering and annotating IoT devices. For a device type, we enumerate common device types, including router, camera, TV set, modem, and printer. Two kinds of local dependency usually occur: (1) the vendor entity first appears, followed by the device-type entity, and finally the product entity; (2) the vendor entity first appears, and the product entity appears second without any other object between the vendor entity, and the device-type entity follows. The rule miner uses the apriori algorithm to derive the relationship between search queries extracted from the response data (q 1 i , q 2 i ,...,q k i ) and device annotation extracted from a webpage (t j , v j , p j ) in the transaction set. In the transaction set T = {t 1 ,t 2 ,...,t n }, we can calculate those two parameters of the rule A ⇒ B as follows:sup(A) = | n ∑ i A ∈ t i |/|T | con f (A ⇒ B) = sup(A 񮽙 B)/sup(A)The apriori algorithm first selects the frequent tuples in the dataset and discards the item whose support value is smaller than the support threshold. In the transaction set, we use search query to eliminate the irrelevant items for the rule A ⇒ B. Thus, the transaction set includes the underlying mapping between part A and part B.We conduct the experiment to validate the threshold of the apriori algorithm. We randomly choose an IP address chunk to generate the data set, which contains 2,499 transactions across 250 application response packets, across 5 device types (printer, access point, router, modem, and camera), 48 vendors and 341 products. We observe that the settings of sup(A) = 0.1% and con f (A ⇒ B) = 50% work well in practice.For data mining, the parameter selection of the apriori algorithm depends on the data set. For instance, given the rules, A ⇒ B and A ⇒ C, when the application matches the condition A, the output is 50% of the annotation B or C. Otherwise, we use the majority voting to output the highest confidence of the rules.Example Rules. Here we discuss ARE's limitations, including fake response data, the middle equipment, original equipment manufacturer (OEM), private binary protocols, and the extensibility.Fake Responses. The rule library and planner modules provide interactive interfaces to applications for discovering and annotating IoT devices in the cyberspace. The second step uses the web crawler to obtain the description webpages of IoT devices, and then removes redundant content from the webpages. For Telnet response data, we would remove a character sequence with the particular code (IAC 0xFF), which is used for negotiating the communication between different operating systems.After the pre-screening above, the response data containing short and simple packets (such as TELNET, FTP and RTSP response data) has been completely cleaned up. • Generally, IoT devices use a lightweight web server (e.g., boa and lighthttp) rather than a heavyweight web server (e.g., Apache, IIS, and Ngnix). • The webpage of IoT devices usually does not have the external links to other websites, and if it does, the number of links is also small.Using these observations, we can filter the non-IoT devices and the rest of the response data is added into the candidate IoT devices.Web Crawler. For each webpage, the web crawler removes the irrelevant information and only keeps the textual content, including title, URL, and snippet. In our experiment, the top 10 webpages work well in practice for locating relevant information on IoT devices.In the implementation, we write a custom Python script to pipeline from the response data into webpage crawling. We also use apriori algorithm [3] in Python Package to generate rules for IoT devices.In practice, the rule miner has to handle the scenarios where the response data does not include sufficient device information to initiate the subsequent web crawling process for rule generation. For example, from the FTP response packet "220 Printer FTP 4.8.7 ready at Jan 19 19:38:22," we can only extract one useful keyword "Printer" as a search query. Then, we show the experimental results for ARE evaluation, which include that (1) the number of rules generated by ARE is nearly 20 times larger than those of the existing tools, (2) our rules can achieve very high precision and coverage, and (3) the time cost introduced by ARE is low. However, ARE can be deployed into local networks behind a firewall for internal IoT device discovery without any modification.We use two datasets for evaluating ARE performance. Because the number of devices is vast, we apply the same random algorithm to sample 50 IoT devices iteratively for 20 times. Figure 6 compares the time cost in rule generation between ARE and Nmap, where the Y-axis is the number of rules and X-axis is the time cost in the logarithmic scale (log 10 ). While the number of rules generated by ARE is almost 20 times larger than that of Nmap, the ARE's time cost is negligible compared to Nmap's, The reason is that the rule generation of Nmap requires the professional background/experience to write a rule manually, which is a long-term process. For the second dataset, the coverage is unknown, because we cannot determine the number of false negatives in device annotation. As a comparison, Nmap only has about 30% of rules with a fine-grained annotation.We use the hash algorithm to calculate MD5 checksums of the application-layer packets from Censys [25], and then remove the duplicated packets. Our ARE prototype is running on a commercial desktop computer (Windows 10, 4vCPU, 16GB of memory, 64-bit OS), indicating that CPU and memory costs of ARE can be easily met. ARE greatly facilitates such an Internet-wide measurement to infer, characterize, and analyze online IoT devices.In the IDM application, we use three application-layer datasets from Censys [25], including HTTP, FTP, and Telnet. (1) Although a large portion of IoT devices may be behind firewalls in home/enterprise networks, the number of visible and reachable IoT devices on the Internet is still very large. Even if only 0.01% of IoT devices are accessible to the external networks, considering the sheer size of active IoT devices (billions), the absolute number of exposed devices will reach the level of millions. Similarly, we develop the CDD application to discover compromised devices.In particular, we deploy seven honeypots as vantage points for monitoring traffic on the Internet, across four countries (Brazil, China, India, and Ukraine) and six cities, including Fuzhou, Kharkiv, Kunming (2 honey- [6] in the CDD. After mounting a successful brute-force attack, the devices will execute some commands on one of our honeypots, indicating that these IoT devices are compromised and they try to compromise more devices. Table 9 lists the Common Weakness Enumeration (CWE) of online IoT devices, in which the left column is the CWE ID, the middle column is the weakness description, and the right column is the number of IoT devices with this type of vulnerability. Snacktime [11], Hershel [36], and Faulds [35] use this feature to fingerprint OSes on the large scale. Kohno et al. [32] proposed monitoring TCP traffic for calculating the clock skews as features.In general, a fingerprinting tool consists of three major components: feature selection, training data collection, and learning algorithms. Furthermore, we apply ARE to three application cases: (1) inferring and characterizing millions of IoT devices in the whole IPv4 space, (2) discovering thousands of compromised IoT devices with malicious behaviors, and (3) revealing hundreds of thousands of IoT devices that are still vulnerable to malicious attacks.