Software-Defined Networking (SDN) enables network innovations with a centralized controller controlling the whole network through the control channel. For the first time in the literature, we propose the CrossPath attack that disrupts the SDN control channel by exploiting the shared links in paths of control traffic and data traffic. Experiments show the attack significantly degrades the performance of existing network applications and causes serious network anomalies , e.g., routing blackhole, flow table resetting, and even network-wide DoS. Existing studies focus on many security aspects of SDN, including malicious or buggy applications [63,48], attacks on crashing controllers [60,49,65], attacks on disrupting switches [22,51], and information leakage in SDN [25,56,19,45] , but the security of the SDN control channel is still an open problem.In this paper, we propose a novel attack named CrossPath Attack, which disrupts the SDN control channel by exploiting the shared links between paths of control traffic and data traffic. In particular, since the controller performs centralized control over all network switches via the control channel, an attacker can easily break down all network functionalities enabled by various SDN applications running on the controller. Unlike traditional IP networks where almost all links deliver both control traffic (e.g., OSPF or BGP updates [1,2]) and data traffic at the same time, only a few number of links forward control traffic in SDN. Experimental results in a real SDN testbed show our reconnaissances can achieve more than 90% accuracy.In order to ensure the stealthiness of the attack, we leverage the low-rate TCP-targeted DoS [41] to generate data traffic consisting of periodic pulses in the shared links, instead of directly flooding shared links to disrupt the network. The results show (1) the performance of ARP Proxy can be significantly degraded, such as 10 times increase in the response delays and 95% reduction in the number of the ARP replies; (2) Learning Switch cannot successfully install forwarding decisions in the data plane and thus the throughput of the data plane is reduced to 0 Mbps; (3) Reactive Routing cannot update routing information in time and obtain incorrect topology information, which incurs various routing anomalies, e.g., routing loop, routing blackhole, routing path eviction, and flow table resetting; and (4) Load Balancer generates wrong decisions, resulting in link overloading.In summary, our paper makes the following contributions:• We present the CrossPath attack to significantly disrupt the SDN control channel by exploiting the shared links between paths of control traffic and data traffic. The data plane layer, which consists of "dumb" SDN switches, performs low-level packet processing and forwarding based on the decisions generated by the control layer.The dominant communication protocol between the control and data planes is OpenFlow, which has been standardized by the Open Networking Foundation (ONF) [14]. Moreover, to reduce the cost of building a dedicated control network and operating networks, in particular in large-scale networks [21,65], OpenFlow allows the control and data traffic to share some links in the network, which is called in-band control. The CrossPath attack aims to disrupt the SDN control channel by exploiting the shared links between paths of control traffic and data traffic. To achieve this, an attacker needs to use a host attached in the network to generate probing traffic so as to identify which path of data traffic (i.e., a target path) shares links with paths of control traffic. As shown in Figure 1, paths of s 2 and s 1 , the control messages delivered between the switches and the SDN controller can be significantly delayed or dropped, resulting in abnormal network behaviors. For example, Traceroute [17] cannot infer the routing path of the packets, as SDN usually does not decrease the time-to-live (TTL) values in packet headers. The technique inspired by the key observation that the delay of a control path is higher if a short-term burst of the data traffic passes through the shared links. Assume there are two hosts h i and h j , and the data path between them is a sequence of consecutive links P i, j d = < l h i →s 1 , l s 1 →s 2 , ..., l s ω →h j >. We can know the end-to-end delay for the packet is:d i, j = d h i prop + ω+1 ∑ k=1 d k trans + ω ∑ k=1 (d k queue + d k proc ) + δ i, j , (1)where d h i prop is the propagation delay at host h i , d k trans is the transmission delay at the k th link, d k queue is the queuing delay at the k th switch, and d k proc is the processing delay at the k th switch. Based on equation (1) and (2), the delay of the control path is:δ i, j = d i, j − d 񮽙 i, j + ω ∑ k=1 ( ˆ d k queue − d k queue )(3)However, if we send two packets with a short time interval, e.g., sending the same packet immediately once we receive a response to the last packet, the queuing delay d k queue andˆdandˆ andˆd k queue can be approximately equal. According to the previous study [44], the timeouts are usually configured as small values in order to save space of flow table and waiting for 30 seconds is enough for most cases. Although our reconnaissance allows an attacker to know whether a data path crosses with control paths by sending only four packets, it may achieve low accuracy in practice. Thus, we can collect two groups of latencies with or without a testing stream for a data path, and apply t-test to determine whether a data path crosses with control paths according to the p value. Due to space constraints, for further details, we refer the reader to see the pseudo-code in Appendix A. To understand the feasibility and efficiency of the adversarial path reconnaissance in SDN, we perform theoretical analysis to answer the following two questions:• If there exists target data paths crossing with control paths in the network, which conditions the network must meet so that our reconnaissance can identify a target data path? Figure 4: The target network where an attacker conducts reconnaissances.the two cases is whether the target data path crosses with a control path of a switch belonging to the data path.We consider a set of all the hosts in the target network H = {h 1 , h 2 , ..., h n }, a set of compromised hosts˜Hhosts˜ hosts˜H = { ˜ h 1 , ˜ h 2 , . ∃(p i c ∩ p j,k d 񮽙 = / 0), where i ∈ S j,k , j ∈ ˜ H, k ∈ H and j 񮽙 = k, then there exists a target data path which can be identified by the adversarial path reconnaissance.Proof. According to the conditions, we can know that a data path p j,k d from a compromised host˜hhost˜ host˜h j to another host h k crosses with a control path p i c . The reconnaissance will notice that the total latencies will be significantly higher than the previous latencies.Thus, a target data path p j,k d is identified. We next prove the necessary condition, i.e., if a target data path can be identified by the adversarial path reconnaissance, then the target network meets the conditions in Theorem 1. We only need to prove that the crossed control path belongs to a switch along with the data path p j,k d , i.e., i ∈ S j,k . In addition to the notations we used in Theorem 1, let ρ be the total number of data paths between a compromised host iñ H and a host in H, and let X be a random variable denoting the number of explored data paths for finding a target data path. The average number of explored data paths can be calculated as:E(X) = ρ−γ+1 ∑ k=1 k · P(X = k) = ρ−γ+1 ∑ k=1 kγ ρ − (k − 1) k−2 ∏ j=0 ρ − γ − j ρ − j . As these network topologies do not contain hosts and routing information, we generate 100 hosts 1 in each topology and apply Dijkstra's algorithm [28] to generate the shortest data path between two hosts. Moreover, for simplicity and without loss of generality, we assume that the attacker only controls one host in the network and we attach such a host to each network topology.We note that the positions of hosts in a network will affect our experimental results. n = 100 theoretical n = 100 experimental n = 500 theoretical n = 500 experimental n = 1000 theoretical n = 1000 experimental The results demonstrate that the conditions in Theorem 1 can be easily met. Equation (7) denotes the average number of explored data paths E(X) for finding a target path totally depends on the number of data paths γ containing shared links and the number of hosts in a network n. To evaluate the impact of the attack on the control packets, we configure the controller to generate 1,000 control packets per second 2 to the switch s 2 . Moreover, the delays under the attack vary within a large range from below 10 ms and to more than 10,000 ms. Note that, most delays without the attack are less than 10 ms. The results above demonstrate our attack can significantly degrade the throughput of control packets and incur high delays. As background traffic may affect the reconnaissances and attack effects, we inject different background traffic into our network with TCPReplay [16] in turn. Applications can be deployed in the top layer to enable different network functionalities, while the low layer provides different core services that interact with switches and provide basic functionalities for the top-tier applications. The service maintains the topology of end hosts, links, and switches. We will choose four typical applications that are widely deployed in SDN enables Address Resolution Protocol (ARP) similar to IP networks, which finds the association between a destination IP address and its corresponding hardware (MAC) address so that hosts can correctly send and receive IP packets. If the target IP address in the ARP request is not in the local network, a router acts as an ARP proxy to send back an ARP reply with the hardware address of its own interface. More than 90% delays are less than 10 ms without the attack, while more than 70% delays are higher than 10 ms and more than 50% delays are higher than 1,000 ms with the attack. The packet service sends the packet to the controller via packet in messages and back to the switch via packet out messages, and the flow rule service installs rules in the switch via f low mod messages. In the network shown in Figure 15, packets with an IP destination address 10.0.0.3 and a destination port 1111 loop between s 1 and s 2 when the application deletes rule "10.0.0.3 : 1111, to s 3 " while rule "10.0.0.3 : 1111, to s 1 " remains. The load balancer application relies on the flow metrics service to collect the statistics.We configure the load balancer application in Floodlight to enable statistics-based scheduling, as it can provide better load balancing under different flow distribution of clients. The reason is that our attack can significantly delay the stats request and stats reply messages exchanged between the flow metrics service and switches, and thus the applications cannot know the port utilization in time.Actually, the application considers that the port utilization of server #2 is still 10% when the new flow comes. The detailed implementations and evaluations can be found in Appendix B.Proactively Reserving Bandwidth for Control Traffic.Another way to defend against the attack is to proactively reserve proprietary bandwidth for control traffic. The main disadvantage of the defense scheme is that the reserved bandwidth cannot be used by other traffic even there is massive free bandwidth.Our future work will focus on how to dynamically reserve the bandwidth for control traffic to make full use of it. Third, our attack in SDN has more significant impacts on diversified network functionalities including layer 2, 3 and 4 functions.To defend against LDoS, some countermeasures have been provided in traditional IP networks, such as randomizing RTO [42] and complex signal analysis [58,53,23,64,46,24] . Studer et al. [38] and Kang et al. [57] introduced link flooding attacks, which generate large-scale legitimate low-speed flows to flood and congest network critical links. Though there exist some SDN defense systems [67,61,62,37] that detect link flooding attacks, they cannot defend the crosspath attack that disrupts the control channel, which these SDN defense systems depend on. In our experiments on a real SDN testbed, t wait is set as 30s which is larger than the default values of timeouts in the Floodlight controller in order to leave enough time for rules to be expired, and t max is set to 1s for each timing packet to get a response. Such a defense scheme can be enforced with Priority Queue (PQ) or Weighted Round Robin (WRR) 3 scheduling mechanism in SDN switches. The larger the reserved bandwidth is, the higher the throughput is, and also the better the delay is. The research is partly supported by the National Key R&D Program of China under Grant 2017YFB0803202, the National Natural Science Foundation of China (NSFC) under Grant 61625203, 61572278, 61832013, 61872209, and U1736209, the U.S. ONR grants N00014-16-1-3214 and N00014-16-1-3216, and the National Science Foundation (NSF) under Grant 1617985, 1642129, 1700544, and 1740791.