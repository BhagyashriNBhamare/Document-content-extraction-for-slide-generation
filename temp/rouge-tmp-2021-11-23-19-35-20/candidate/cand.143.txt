Remote Access Trojans (RATs) are a class of malware that give an attacker direct, interactive access to a vic-tim's personal computer, allowing the attacker to steal private data from the computer, spy on the victim in real-time using the camera and microphone, and interact directly with the victim via a dialog box. Remote Access Trojans (RATs) are an emerging class of manually operated malware designed to give human operators direct interactive access to a victim's computer. Unlike automated malware (i.e., spam and DDoS), RATs are predicated on the unique value of each infection, allowing an attacker to extort a human victim or otherwise benefit from access to a victim's private data. This leads to inaccurate measurements and wasted notification efforts, wherein researchers and security vendors may confuse beneficent sinkholes for malicious controllers, or scanners and sandboxes for actual victims.In order to mitigate this pollution, we have created RAT-Hole which implements the handshake protocol and error triggering tests for two common RATs, DarkComet and njRAT. We conduct an experiment where we sinkholed 6,897 RAT controller domains associated with DarkComet and njRAT samples.Based on our classification methodology we found that only 6,710 (0.8%) of the over 800k Source IP addresses that connected to our RAT-Hole were likely victims. Our efforts to accurately differentiate sinkholes from real RAT controllers were complicated by VPN proxy services that were highly dynamic and appear to host both sinkholes and real RAT controllers. The other potential intervention is for law enforcement entities to more closely monitor these services to better identify attackers and victims.The primary contributions of our study include:O Proposal and evaluation of methods for classifying RAT sandboxes, scanners, and likely victims based on connection to a sinkhole. O Conducted a large-scale measurement study based on sinkholing 6,897 RAT controller domains. For the RATs studied in this paper, communication between stub and controller begins with the stub opening a TCP connection to the controller host name hard-coded in the stub. In these cases, the encryption key or password is embedded in the stub's configuration.The initial message sent by a stub contains both information configured by the builder (e.g., password, campaign ID) as well as information unique to the victim machine (e.g., username, hostname, operating system, active window). Local sinkholing efforts, implemented by organizations or individual ISPs, often involve reconfiguring DNS servers and routers to block communication with malicious domains or IP addresses. As we will show, operators often allow their hostnames to expire and this provides a large pool of RAT domain names that can be claimed and sinkholed.Ideally, a DNS sinkhole operation would be able to identify all victims associated with its acquired domains and to accurately measure victims. There are also services such as Censys [13] based on ZMap and Shodan [32] that uses a custom scanner.Scanning for RAT controllers presents a similar set of challenges to sinkholing. During the handshake there is some potentially Personal Identifiable Information (PII) that the peer sends to us, such as the PC name (often the name of the victim) or full website URLs a person is visiting if the active window is a browser. Simultaneously, RAT-Scan continuously probes all extracted IP addresses and hostnames for controller activity in the wild.We limit the scope of our study to two RAT families, DarkComet and njRAT, since reverse-engineering and implementing parts of their protocols in RAT-Hole and RAT-Scan is a time-consuming manual effort. Table 2 shows that most of the domains we found that were used by DarkComet and njRAT are associated with free Dynamic DNS (DDNS) providers, and that No-IP managed 60% of all discovered domains (77% of DDNS). As future work we plan to expand our claiming infrastructure to other DDNS providers and actual registered domains to understand if this affects the results of our analysis.Our DDNS domain claiming operation, which started on 2017-07-15 and ended on 2017-11-17, claimed 6,897, or 81%, of the 8,564 DDNS domains managed by No-IP. When RAT-Hole receives an initial message from a completed TCP connection before the three second timer expires, it will examine all of our regular expressionbased RAT family detection signatures over the payload to identify the incoming peer's protocol. This ordered set of banners is comprised of: (1) a randomly generated banner (this is to test if the stub deviates from the protocol by accepting any banner), (2) a set of 20 default DarkComet banners (this is to see if the stub will incorrectly accept the default banner), (3) a complete set of valid banners for the current set of domain(s) being sinkholed by that interface (this is to see if the stub responds correctly to a valid banner), and (4) the remainder of the 125 banners are randomly generated (based on our reverse engineering we found that after 124 banners are received by a stub it will lock up and stop attempting further connections until the RAT process is restarted). We send a malformed command at the end of the njRAT handshake (see Appendix C) and if the expected error handling response is received, we mark the connecting peer as conforming to the standard implementation of the protocol. However, it does perform well at identifying RAT scanners specifically those that do not implement the complete RAT protocol handshake and true execution behavior of the RAT protocol as standardly implemented.After handshake probing is completed, RATHole closes the connection and removes the state for that connection ID. RAT-Hole logs the final state of the connection, which can be one of three states: (1) no valid banner was received; (2) a valid initial banner was received, but the handshake was not completed; (3) the handshake was completed successfully.Handshake metadata. â€¢ Sandbox Execution: These peers complete the RAT handshake, but exhibit one or more of the characteristics commonly associated with a sandbox execution, such as a short execution duration which we defined as slightly more than the longest default execution duration value (600 seconds) of the major sandboxes we analyzed. Table 5 provides a high-level view of these connections, broken down by determined peer type.We performed an analysis of the "Unknown" peer type from Table 5 which composed 815,455 (98.5%) of all IP addresses that completed a three-way TCP handshake connection to RAT-Hole, but were not classified by RATHole as peers related to either njRAT or DarkComet. The small degree of overlap indicates that some IP addresses presented multiple behaviors; see Table 17 in Appendix E.We also wanted to understand if this pollution from likely sandboxes and scanners could be filtered using data from IP telescopes (unused IP address subnets that act as large sinkholes). In this section, we describe our method of building up a high confidence set of RAT scanners, sandboxes, and victims based on additional heuristics for DarkComet and njRAT families. We conservatively label these peers low fidelity scanners.Our anomaly analysis for fingerprints in cluster (z) shows that 140 (53.6%) of the fingerprints have multiple unique INSTALL DATE fields, likely indicative of scanners that update INSTALL DATE based on the current time. We checked for services running on any port configured in any sample related to the IP address or related to a domain that resolved to said IP address at any time.RAT-Scan probes for controllers of both DarkComet and njRAT, emulating a newly-infected victim contacting the controller for the first time. During this period, we established 86,694 connections to 6,401 IP addresses exhibiting behavior indicative of RAT controller software; 2,032 DarkComet controllers and 4,584 njRAT controllers, with some IPs hosting both. We find that most victims do not change their IP address, with 60% of victim using one IP addresses and an additional 20% of all victims use a total of two IP addresses. Figure 4 shows an upper and lower bound curve; the upper bound corresponds to the case that at least one victim connection occurred during the period when the command-andcontrol domain was not monitored, and the lower bound corresponds to the case that no victim connections occurred during the same period. We manually investigate the largest [24] and Relakks [42]) account for 40% and 3% of all actively-probed controllers, respectively, while prominent VPS services like Amazon AWS, Microsoft Azure, and Digital Ocean are also frequently abused.As the geolocation results of the proxies only serve to muddle the geospatial relationships between victims and attackers, we filter them from the following analyses. In addition, for four and a half months prior to the sinkholing experiment, we resolved all controller domains to determine whether they were registered, and, if registered whether they had an associated A record, and whether the corresponding hosts behaved correctly (as a controller). As future work, we will explore potentially more robust features, such as inter-arrival timing of connection attempts in order to detect scanners and analysis of active window patterns to detect sandboxes. As future work, we will explore more automated methods, such as semi-supervised machine learning based approaches using inter-arrival timing of connections to differentiate scanners from execution of the actual malware. Our work is influenced heavily by research projects from industry and academia. The ethical issue of victim PII receipt is universal to infection enumeration efforts; Han et al.[23] built a system for sandboxing phishing kits explicitly designed to protect victim privacy.Always prominent has been the issue of accurate infection size estimation. A number of studies explored how to estimate the size of the Storm botnet [16,21,38], while Stone-Gross et al. [49] actually sinkholed the Torpig botnet, live, and created unique fingerprints for each infection to address infection measurement difficulties, as do we in this study. Our approach furthers these efforts to identify Internet-connected sandboxes, using unmodified malware binary submissions and leveraging artifacts of the execution process like short execution duration to inform our detection.In a 2014 report, researchers at FireEye enumerated infections for an XtremeRAT campaign by sinkholing the controller domain [51]. We designed our methodology to explicitly handle the challenges this study uncovered, as well as to filter intelligence pollution from scanners and sandboxes, such that we could accurately and ethically enumerate RAT infections based on sinkhole data.Scanning and controller discovery. Most recently, Farinholt et al. [17] presented a scanner that used ZMap [14], Shodan, and a custom port scanner to detect DarkComet controllers based only on their initial handshake challenges. Though SinkMiner uses passive DNS to detect sinkholed domains, its research goalsmeasuring the effective lifetime of a C&C domain and avoiding enumerating fellow security vendors' infratructure -matched ours. Of import is the lack of overlap between the datasets. The stub will accept multiple challenges in a single message if they are joined by \n\r followed by 1,024 0's, and will scan the entire message for the correct challenge. We would also like to thank the following: VirusTotal, for the invaluable Intelligence account from which we sourced malware; Richard Harper of DuckDNS, for generous access to a Duck Max account; Matthew Jonkman of EmergingThreats, for generous access to an unlimited Threat Intelligence account; and finally, our reviewers, for their invaluable feedback.