Our findings highlight the inherent limitations of prevalent SSO schemes as most services lack the functionality that would allow users to remediate an account takeover. This has resulted in the proliferation of single sign-on (SSO) schemes that allow users to leverage their existing accounts in popular identity providers (IdPs) like Facebook and seamlessly access other web services or mobile apps (referred to as relying parties, or RPs) without the nuisance of repeating the account creation process or creating/managing extra passwords.Naturally this new paradigm is not without pitfalls, and previous work has extensively explored the design and implementation flaws of SSO platforms that enable a plethora of attacks [46,53,49,3,28]. We highlight an underlying limitation of SSO as it is commonly deployed: while RPs universally verify the link between a local account and an IdP account at the moment of account creation, the vast majority use this process to bootstrap a local notion of identity that is not strongly tied to the IdP's account access or control. This highlights the scale of the threat, as attackers can gain access to a massive number of web services.Even though compromised accounts remain a widespread and prevalent issue for major services [10] (e.g., due to phishing [44]), we motivate part of our threat model by demonstrating a session cookie hijacking attack that allows complete account takeover in Facebook, the most prevalent IdP. Examples include universities using SSO to provide access to unrelated university services such as student grade systems; Google's SSO for services like YouTube; websites like Stack Overflow that support account creation and login using OpenID Connect [36]. However, the threats we explore are not restricted to a specific standard.OpenID Connect is an extension to OAuth 2.0 [20] that provides a standardized method for a web service to re-trieve identity information from an identity provider using OAuth. The End-User initiates logging in to an RP by clicking on a login link in her web browser (the User Agent) thus initiating a sequence of steps that, if successful, results in the End-User being logged in to the RP. Then the User Agent sends a request to the RP's web server as normal and the RP responds by directing the User Agent to visit the IdP's OAuth 2.0 Authorization Endpoint, e.g., using a HTTP 302 Found status code. The request identifies the RP, the expected response type (i.e., an authorization code), a redirection URL, and the resources to which the RP is requesting access (e.g., basic account information like a user ID). Note that both the RP's request for an authorization code and the IdP's response are carried by the User Agent via redirections to the other party's appropriate endpoint.At this point, the User Agent stops mediating communication between the RP and the IdP. The ID Token contains an opaque string called the subject identifier which, together with the specific IdP, uniquely identifies the End-User. Our goal is not to exhaustively enumerate methodologies or restrict the attacker to a specific avenue of compromise, but to highlight the diversity of alternative methods that are possible for hijacking user accounts. Specifically, phishing can enable stealthier preemptive attacks (Section 5) while session hijacking results in the attacker "bypassing" Facebook's auxiliary detection mechanisms and not appearing in the active sessions (Section 4). Figure 1 provides a high level overview of the attack workflow, depending on what the attacker has access to; while we use Facebook as the example IdP for the remainder of the paper, the basic transitions (solid lines) are applicable to any IdP. We audited the network traffic from all popular Facebook apps (main app, Messenger, and Instagram) on the iOS, Android, and Windows mobile platforms. This behavior was specific to Facebook's iOS in-app browser. It is worth noting that reusing session cookies in another device does not create any unauthorized access alert, giving the attacker persistent and stealthy access.Ethics. While networks encrypted with WPA2 and a strong, tightly-guarded secret key are infeasible to brute force, well-known keys and open wireless networks (which is common in free public WiFi, e.g., coffee shops, university campuses, public transit etc.) make such man-in-themiddle attacks trivial. If none of the elements return a result, our crawler visits and analyzes predefined link patterns which are commonly used for such functionality (e.g., example.com/login, example.com/signup) and also issues queries to DuckDuckGo to search for login pages associated with that domain. We use our tool to crawl and process the top 1M websites according to Alexa (as reported on September 14, 2017) out of which 912,206 were processed correctly; the others present various errors (e.g., time outs and DNS lookup failures). We find that more popular websites are more likely to support SSO, as shown in Figure 4, with a 10.8% coverage in the top 100K, Cascading account compromise. This behavior is most likely due to the usability benefits of SSO; despite the services having deployed the infrastructure for supporting account creation and management, they still allow users to log in with other services as it offers seamless integration. To achieve her ultimate goal, whatever that may be, the attacker would like to log in to the user's account at the RP and interact with the service, thus obtaining access to whatever information or functionality is available.Methodology. See Appendix A for the complete list of RPs.For each website, we create a new account using SSO and add any additional information the service requires (e.g., a phone number). We setup a MitM proxy and implement a cookie overwriting attack [52] to inject the hijacked IdP cookie.44Interestingly, while the absence of the Facebook app in iOS results in the RP apps falling back to the internal browser (Safari), in Android the RP apps predominantly rely on the Facebook app for SSO. This is one of the RPs that always require reauthenticating the IdP account before getting access.However, we have found a bypass which allows us to gain access using only the IdP cookie; by selecting the account creation option instead of the log in option, if the session cookie is present the attacker will be authenticated and the system will not trigger an SSO reauthentication process.The Guardian. Apart from granting access to user information and account functionality, the attack enables various scams, e.g., reshipping mule scams [19], fake listings [27], and intercepting deliveries [32]. While major services that act as IdPs may deploy extra detection mechanisms and show session information, that is uncommon in other services. To investigate how RPs behave in this scenario in practice, we tested all 29 web RPs from our previous experiment. Fifteen services allow the attacker to change the account's email without requiring the password to be entered; of these, six allow the password to be set without entering the old password whereas the remaining nine require the attacker to engage in the password reset procedure which emails a link to the attacker's newly set email address. We also developed another attack that allows the attacker to obtain long-term access to the RP account in a stealthy manner. This could lead to ransom-type attacks where users will have to pay to regain access to their RP account.IdP access escalation. We identified an attack that allows the attacker using the hijacked cookie to reset the user's Facebook password (the dotted line transition in Figure 1), by exploiting a loophole in the verification process. When adding a new phone number to the account, the attacker can add her own phone number without needing to reauthenticate via password, and then use that new phone number to reset the account password. Although an email notification is sent to the user, the user's active sessions are not logged out and the attacker can remove her email and phone number to erase any traces. While the attacker could create such accounts for conducting other malicious actions (e.g., sending spam, or as part of an identity theft attack [5]), here we are interested in an attacker who waits for the user to join the RP and then misuses the available information and account functionality. In practice, if the attacker has knowledge of the victim's IdP account password (e.g., through phishing), she could set the same password in the RP account as well, taking advantage of the fact that many users reuse their passwords across sites [11]. Finally, we switch roles again, and complete the final phase of the attack; we attempt to access the RP account using the session cookie(s) that were created upon the initial visit and also explore what user information or account functionality we can access.Results. The attacker could opt to run the attack during the night (or repeat and resume across multiple nights), which would give her enough time to create all the RP accounts and remove her email from the IdP account; when the user checks the IdP account settings the only email visible in the settings will be the user's own email (the attacker's email is only shown during the "password reset" and "sign out of all devices" processes). After the cookie has been set, the RP will trust the cookie's value to authenticate the user.The practical consequence of using the RP cookie to authenticate the user is that once an attacker successfully authenticates as the user and receives the persistent cookie, this cookie can continue to be used until it expires regardless of any user action to break the SSO chain (unless she is also able to invalidate that RP cookie). Resulting from our investigation we have identified the following actions that a user can take: (i) logout from IdP, (ii) logout from RP, (iii) change password for IdP account, (iv) add or change password for RP account, (v) revoke RP's access to IdP account, and (vi) invalidate active RP sessions. We repeat the attack instantiation process and perform each of these actions independently, and examine how they impact the attacker's access to the RP account. TinderN/A N/A Zoosk N/A Skout N/A GetDown N/A Meetme N/A Hookup N/A Down N/A N/A GoodReads / Yelp N/A Expedia N/A Kayak / / / N/A HomeAway N/A Wish N/A N/A Cartwheel N/A N/A Geek N/A N/A to maintain access to the account. Since such a scenario is not covered by the current OAuth and OpenID specifications,5 it is crucial to develop a mechanism for mitigating this threat.5The SAML specification describes Single Logout, however it is difficult to implement and breaks under common run time issues [6] and lacks support by major libraries like Shibboleth [38]. This has populated all the required cookies in the respective browsers and apps on each device, allowing the user to seamlessly access the account in the future without the need to reauthenticate. To prevent the attacker from having access to the user's RP accounts, the IdP also issues Authentication Revocation Requests to all the RPs that are associated with that account.7 Once an RP receives a valid Authentication Revocation Request for a specific user account from a supported IdP, it logs out active sessions on all the connected devices, and invalidates all access tokens. For cases where the RP is also an IdP (Section 3), it will in turn issue Authentication Revocation Requests to all the relying parties that are associated with that user account. The Revocation Token must be signed (and optionally encrypted) using a JSON Web Signature [23] (and optionally JSON Web Encryption [25]) in the same manner, using exactly the same algorithm and keys as the standard ID Token [36, § 2] In independent work, Jones and Bradley [22] describe a back-channel logout mechanism for OpenID Connect. Similar to our proposed Authentication Revocation Request, their approach uses a signed JSON Web Token sent from the IdP to the RP as an HTTP POST request. In contrast, the back-channel logout draft contains several options as well as implementation choices about which user sessions are logged out.Specifically, the back-channel logout specification draft states that "Refresh tokens with the offline_access property normally SHOULD NOT be revoked" and that an open issue is whether to define another optional parameter that would signal that offline_access tokens should be revoked. Offering a user multiple options for session termination may lead to incomplete post-compromise remediation if the user makes the wrong choices.The similarity of the back-channel logout proposal and our proposal suggests that both approaches are substantially correct. Sivakorn et al. [41] demonstrated how the lack of ubiquitous HTTPS resulted in the exposure of HTTP cookies granting attackers access to sensitive user data and account functionality in major services.In contrast to prior work on design and implementation issues of SSO, we explore the security risks surrounding the deployment of SSO, which would persist even if implementations were complete and correct.